"use strict";
(function() {

Error.stackTraceLimit = -1;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
	$global = window;
} else if (typeof self !== "undefined") { /* web worker */
	$global = self;
} else if (typeof global !== "undefined") { /* Node.js */
	$global = global;
	$global.require = require;
} else {
	console.log("warning: no global object found")
}
if (typeof module !== "undefined") {
	$module = module;
}

var $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $min = Math.min;
var $parseInt = parseInt;
var $parseFloat = function(f) {
	if (f.constructor === Number) {
		return f;
	}
	return parseFloat(f);
};
var $mod = function(x, y) { return x % y; };
var $toString = String;
var $reflect, $newStringPtr;
var $Array = Array;

var $floatKey = function(f) {
	if (f !== f) {
		$idCounter++;
		return "NaN$" + $idCounter;
	}
	return String(f);
};

var $mapArray = function(array, f) {
	var newArray = new array.constructor(array.length), i;
	for (i = 0; i < array.length; i++) {
		newArray[i] = f(array[i]);
	}
	return newArray;
};

var $newType = function(size, kind, string, name, pkgPath, constructor) {
	var typ;
	switch(kind) {
	case "Bool":
	case "Int":
	case "Int8":
	case "Int16":
	case "Int32":
	case "Uint":
	case "Uint8" :
	case "Uint16":
	case "Uint32":
	case "Uintptr":
	case "String":
	case "UnsafePointer":
		typ = function(v) { this.$val = v; };
		typ.prototype.$key = function() { return string + "$" + this.$val; };
		break;

	case "Float32":
	case "Float64":
		typ = function(v) { this.$val = v; };
		typ.prototype.$key = function() { return string + "$" + $floatKey(this.$val); };
		break;

	case "Int64":
		typ = function(high, low) {
			this.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
			this.low = low >>> 0;
			this.$val = this;
		};
		typ.prototype.$key = function() { return string + "$" + this.high + "$" + this.low; };
		break;

	case "Uint64":
		typ = function(high, low) {
			this.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
			this.low = low >>> 0;
			this.$val = this;
		};
		typ.prototype.$key = function() { return string + "$" + this.high + "$" + this.low; };
		break;

	case "Complex64":
	case "Complex128":
		typ = function(real, imag) {
			this.real = real;
			this.imag = imag;
			this.$val = this;
		};
		typ.prototype.$key = function() { return string + "$" + this.real + "$" + this.imag; };
		break;

	case "Array":
		typ = function(v) { this.$val = v; };
		typ.Ptr = $newType(4, "Ptr", "*" + string, "", "", function(array) {
			this.$get = function() { return array; };
			this.$val = array;
		});
		typ.init = function(elem, len) {
			typ.elem = elem;
			typ.len = len;
			typ.prototype.$key = function() {
				return string + "$" + Array.prototype.join.call($mapArray(this.$val, function(e) {
					var key = e.$key ? e.$key() : String(e);
					return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
				}), "$");
			};
			typ.extendReflectType = function(rt) {
				rt.arrayType = new $reflect.arrayType.Ptr(rt, elem.reflectType(), undefined, len);
			};
			typ.Ptr.init(typ);
		};
		break;

	case "Chan":
		typ = function() { this.$val = this; };
		typ.prototype.$key = function() {
			if (this.$id === undefined) {
				$idCounter++;
				this.$id = $idCounter;
			}
			return String(this.$id);
		};
		typ.init = function(elem, sendOnly, recvOnly) {
			typ.nil = new typ();
			typ.extendReflectType = function(rt) {
				rt.chanType = new $reflect.chanType.Ptr(rt, elem.reflectType(), sendOnly ? $reflect.SendDir : (recvOnly ? $reflect.RecvDir : $reflect.BothDir));
			};
		};
		break;

	case "Func":
		typ = function(v) { this.$val = v; };
		typ.init = function(params, results, variadic) {
			typ.params = params;
			typ.results = results;
			typ.variadic = variadic;
			typ.extendReflectType = function(rt) {
				var typeSlice = ($sliceType($ptrType($reflect.rtype.Ptr)));
				rt.funcType = new $reflect.funcType.Ptr(rt, variadic, new typeSlice($mapArray(params, function(p) { return p.reflectType(); })), new typeSlice($mapArray(results, function(p) { return p.reflectType(); })));
			};
		};
		break;

	case "Interface":
		typ = { implementedBy: [] };
		typ.init = function(methods) {
			typ.methods = methods;
			typ.extendReflectType = function(rt) {
				var imethods = $mapArray(methods, function(m) {
					return new $reflect.imethod.Ptr($newStringPtr(m[1]), $newStringPtr(m[2]), $funcType(m[3], m[4], m[5]).reflectType());
				});
				var methodSlice = ($sliceType($ptrType($reflect.imethod.Ptr)));
				rt.interfaceType = new $reflect.interfaceType.Ptr(rt, new methodSlice(imethods));
			};
		};
		break;

	case "Map":
		typ = function(v) { this.$val = v; };
		typ.init = function(key, elem) {
			typ.key = key;
			typ.elem = elem;
			typ.extendReflectType = function(rt) {
				rt.mapType = new $reflect.mapType.Ptr(rt, key.reflectType(), elem.reflectType(), undefined, undefined);
			};
		};
		break;

	case "Ptr":
		typ = constructor || function(getter, setter, target) {
			this.$get = getter;
			this.$set = setter;
			this.$target = target;
			this.$val = this;
		};
		typ.prototype.$key = function() {
			if (this.$id === undefined) {
				$idCounter++;
				this.$id = $idCounter;
			}
			return String(this.$id);
		};
		typ.init = function(elem) {
			typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
			typ.extendReflectType = function(rt) {
				rt.ptrType = new $reflect.ptrType.Ptr(rt, elem.reflectType());
			};
		};
		break;

	case "Slice":
		var nativeArray;
		typ = function(array) {
			if (array.constructor !== nativeArray) {
				array = new nativeArray(array);
			}
			this.array = array;
			this.offset = 0;
			this.length = array.length;
			this.capacity = array.length;
			this.$val = this;
		};
		typ.make = function(length, capacity, zero) {
			capacity = capacity || length;
			var array = new nativeArray(capacity), i;
			for (i = 0; i < capacity; i++) {
				array[i] = zero();
			}
			var slice = new typ(array);
			slice.length = length;
			return slice;
		};
		typ.init = function(elem) {
			typ.elem = elem;
			nativeArray = $nativeArray(elem.kind);
			typ.nil = new typ([]);
			typ.extendReflectType = function(rt) {
				rt.sliceType = new $reflect.sliceType.Ptr(rt, elem.reflectType());
			};
		};
		break;

	case "Struct":
		typ = function(v) { this.$val = v; };
		typ.Ptr = $newType(4, "Ptr", "*" + string, "", "", constructor);
		typ.Ptr.Struct = typ;
		typ.Ptr.prototype.$get = function() { return this; };
		typ.init = function(fields) {
			var i;
			typ.fields = fields;
			typ.Ptr.extendReflectType = function(rt) {
				rt.ptrType = new $reflect.ptrType.Ptr(rt, typ.reflectType());
			};
			/* nil value */
			typ.Ptr.nil = Object.create(constructor.prototype);
			typ.Ptr.nil.$val = typ.Ptr.nil;
			for (i = 0; i < fields.length; i++) {
				var field = fields[i];
				Object.defineProperty(typ.Ptr.nil, field[0], { get: $throwNilPointerError, set: $throwNilPointerError });
			}
			/* methods for embedded fields */
			for (i = 0; i < typ.methods.length; i++) {
				var method = typ.methods[i];
				if (method[6] != -1) {
					(function(field, methodName) {
						typ.prototype[methodName] = function() {
							var v = this.$val[field[0]];
							return v[methodName].apply(v, arguments);
						};
					})(fields[method[6]], method[0]);
				}
			}
			for (i = 0; i < typ.Ptr.methods.length; i++) {
				var method = typ.Ptr.methods[i];
				if (method[6] != -1) {
					(function(field, methodName) {
						typ.Ptr.prototype[methodName] = function() {
							var v = this[field[0]];
							if (v.$val === undefined) {
								v = new field[3](v);
							}
							return v[methodName].apply(v, arguments);
						};
					})(fields[method[6]], method[0]);
				}
			}
			/* map key */
			typ.prototype.$key = function() {
				var keys = new Array(fields.length);
				for (i = 0; i < fields.length; i++) {
					var v = this.$val[fields[i][0]];
					var key = v.$key ? v.$key() : String(v);
					keys[i] = key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
				}
				return string + "$" + keys.join("$");
			};
			/* reflect type */
			typ.extendReflectType = function(rt) {
				var reflectFields = new Array(fields.length), i;
				for (i = 0; i < fields.length; i++) {
					var field = fields[i];
					reflectFields[i] = new $reflect.structField.Ptr($newStringPtr(field[1]), $newStringPtr(field[2]), field[3].reflectType(), $newStringPtr(field[4]), i);
				}
				rt.structType = new $reflect.structType.Ptr(rt, new ($sliceType($reflect.structField.Ptr))(reflectFields));
			};
		};
		break;

	default:
		throw $panic(new $String("invalid kind: " + kind));
	}

	switch(kind) {
	case "Bool":
	case "Map":
		typ.zero = function() { return false; };
		break;

	case "Int":
	case "Int8":
	case "Int16":
	case "Int32":
	case "Uint":
	case "Uint8" :
	case "Uint16":
	case "Uint32":
	case "Uintptr":
	case "UnsafePointer":
	case "Float32":
	case "Float64":
		typ.zero = function() { return 0; };
		break;

	case "String":
		typ.zero = function() { return ""; };
		break;

	case "Int64":
	case "Uint64":
	case "Complex64":
	case "Complex128":
		var zero = new typ(0, 0);
		typ.zero = function() { return zero; };
		break;

	case "Chan":
	case "Ptr":
	case "Slice":
		typ.zero = function() { return typ.nil; };
		break;

	case "Func":
		typ.zero = function() { return $throwNilPointerError; };
		break;

	case "Interface":
		typ.zero = function() { return null; };
		break;

	case "Array":
		typ.zero = function() {
			var arrayClass = $nativeArray(typ.elem.kind);
			if (arrayClass !== Array) {
				return new arrayClass(typ.len);
			}
			var array = new Array(typ.len), i;
			for (i = 0; i < typ.len; i++) {
				array[i] = typ.elem.zero();
			}
			return array;
		};
		break;

	case "Struct":
		typ.zero = function() { return new typ.Ptr(); };
		break;

	default:
		throw $panic(new $String("invalid kind: " + kind));
	}

	typ.kind = kind;
	typ.string = string;
	typ.typeName = name;
	typ.pkgPath = pkgPath;
	typ.methods = [];
	var rt = null;
	typ.reflectType = function() {
		if (rt === null) {
			rt = new $reflect.rtype.Ptr(size, 0, 0, 0, 0, $reflect.kinds[kind], undefined, undefined, $newStringPtr(string), undefined, undefined);
			rt.jsType = typ;

			var methods = [];
			if (typ.methods !== undefined) {
				var i;
				for (i = 0; i < typ.methods.length; i++) {
					var m = typ.methods[i];
					methods.push(new $reflect.method.Ptr($newStringPtr(m[1]), $newStringPtr(m[2]), $funcType(m[3], m[4], m[5]).reflectType(), $funcType([typ].concat(m[3]), m[4], m[5]).reflectType(), undefined, undefined));
				}
			}
			if (name !== "" || methods.length !== 0) {
				var methodSlice = ($sliceType($ptrType($reflect.method.Ptr)));
				rt.uncommonType = new $reflect.uncommonType.Ptr($newStringPtr(name), $newStringPtr(pkgPath), new methodSlice(methods));
				rt.uncommonType.jsType = typ;
			}

			if (typ.extendReflectType !== undefined) {
				typ.extendReflectType(rt);
			}
		}
		return rt;
	};
	return typ;
};

var $Bool          = $newType( 1, "Bool",          "bool",           "bool",       "", null);
var $Int           = $newType( 4, "Int",           "int",            "int",        "", null);
var $Int8          = $newType( 1, "Int8",          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, "Int16",         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, "Int32",         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, "Int64",         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, "Uint",          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, "Uint8",         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, "Uint16",        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, "Uint32",        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, "Uint64",        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, "Uintptr",       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, "Float32",       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, "Float64",       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, "Complex64",     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, "Complex128",    "complex128",     "complex128", "", null);
var $String        = $newType( 8, "String",        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, "UnsafePointer", "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
	return ({ Int: Int32Array, Int8: Int8Array, Int16: Int16Array, Int32: Int32Array, Uint: Uint32Array, Uint8: Uint8Array, Uint16: Uint16Array, Uint32: Uint32Array, Uintptr: Uint32Array, Float32: Float32Array, Float64: Float64Array })[elemKind] || Array;
};
var $toNativeArray = function(elemKind, array) {
	var nativeArray = $nativeArray(elemKind);
	if (nativeArray === Array) {
		return array;
	}
	return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
	var string = "[" + len + "]" + elem.string;
	var typ = $arrayTypes[string];
	if (typ === undefined) {
		typ = $newType(12, "Array", string, "", "", null);
		typ.init(elem, len);
		$arrayTypes[string] = typ;
	}
	return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
	var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
	var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
	var typ = elem[field];
	if (typ === undefined) {
		typ = $newType(4, "Chan", string, "", "", null);
		typ.init(elem, sendOnly, recvOnly);
		elem[field] = typ;
	}
	return typ;
};

var $funcSig = function(params, results, variadic) {
	var paramTypes = $mapArray(params, function(p) { return p.string; });
	if (variadic) {
		paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
	}
	var string = "(" + paramTypes.join(", ") + ")";
	if (results.length === 1) {
		string += " " + results[0].string;
	} else if (results.length > 1) {
		string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
	}
	return string;
};

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
	var string = "func" + $funcSig(params, results, variadic);
	var typ = $funcTypes[string];
	if (typ === undefined) {
		typ = $newType(4, "Func", string, "", "", null);
		typ.init(params, results, variadic);
		$funcTypes[string] = typ;
	}
	return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
	var string = "interface {}";
	if (methods.length !== 0) {
		string = "interface { " + $mapArray(methods, function(m) {
			return (m[2] !== "" ? m[2] + "." : "") + m[1] + $funcSig(m[3], m[4], m[5]);
		}).join("; ") + " }";
	}
	var typ = $interfaceTypes[string];
	if (typ === undefined) {
		typ = $newType(8, "Interface", string, "", "", null);
		typ.init(methods);
		$interfaceTypes[string] = typ;
	}
	return typ;
};
var $emptyInterface = $interfaceType([]);
var $interfaceNil = { $key: function() { return "nil"; } };
var $error = $newType(8, "Interface", "error", "error", "", null);
$error.init([["Error", "Error", "", [], [$String], false]]);

var $Map = function() {};
(function() {
	var names = Object.getOwnPropertyNames(Object.prototype), i;
	for (i = 0; i < names.length; i++) {
		$Map.prototype[names[i]] = undefined;
	}
})();
var $mapTypes = {};
var $mapType = function(key, elem) {
	var string = "map[" + key.string + "]" + elem.string;
	var typ = $mapTypes[string];
	if (typ === undefined) {
		typ = $newType(4, "Map", string, "", "", null);
		typ.init(key, elem);
		$mapTypes[string] = typ;
	}
	return typ;
};

var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $ptrType = function(elem) {
	var typ = elem.Ptr;
	if (typ === undefined) {
		typ = $newType(4, "Ptr", "*" + elem.string, "", "", null);
		typ.init(elem);
		elem.Ptr = typ;
	}
	return typ;
};

var $sliceType = function(elem) {
	var typ = elem.Slice;
	if (typ === undefined) {
		typ = $newType(12, "Slice", "[]" + elem.string, "", "", null);
		typ.init(elem);
		elem.Slice = typ;
	}
	return typ;
};

var $structTypes = {};
var $structType = function(fields) {
	var string = "struct { " + $mapArray(fields, function(f) {
		return f[1] + " " + f[3].string + (f[4] !== "" ? (" \"" + f[4].replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
	}).join("; ") + " }";
  if (fields.length === 0) {
  	string = "struct {}";
  }
	var typ = $structTypes[string];
	if (typ === undefined) {
		typ = $newType(0, "Struct", string, "", "", function() {
			this.$val = this;
			var i;
			for (i = 0; i < fields.length; i++) {
				var field = fields[i];
				var arg = arguments[i];
				this[field[0]] = arg !== undefined ? arg : field[3].zero();
			}
		});
		/* collect methods for anonymous fields */
		var i, j;
		for (i = 0; i < fields.length; i++) {
			var field = fields[i];
			if (field[1] === "") {
				var methods = field[3].methods;
				for (j = 0; j < methods.length; j++) {
					var m = methods[j].slice(0, 6).concat([i]);
					typ.methods.push(m);
					typ.Ptr.methods.push(m);
				}
				if (field[3].kind === "Struct") {
					var methods = field[3].Ptr.methods;
					for (j = 0; j < methods.length; j++) {
						typ.Ptr.methods.push(methods[j].slice(0, 6).concat([i]));
					}
				}
			}
		}
		typ.init(fields);
		$structTypes[string] = typ;
	}
	return typ;
};

var $stringPtrMap = new $Map();
$newStringPtr = function(str) {
	if (str === undefined || str === "") {
		return $ptrType($String).nil;
	}
	var ptr = $stringPtrMap[str];
	if (ptr === undefined) {
		ptr = new ($ptrType($String))(function() { return str; }, function(v) { str = v; });
		$stringPtrMap[str] = ptr;
	}
	return ptr;
};
var $newDataPointer = function(data, constructor) {
	if (constructor.Struct) {
		return data;
	}
	return new constructor(function() { return data; }, function(v) { data = v; });
};

var $coerceFloat32 = function(f) {
	var math = $packages["math"];
	if (math === undefined) {
		return f;
	}
	return math.Float32frombits(math.Float32bits(f));
};
var $flatten64 = function(x) {
	return x.high * 4294967296 + x.low;
};
var $shiftLeft64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high << y | x.low >>> (32 - y), (x.low << y) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(x.low << (y - 32), 0);
	}
	return new x.constructor(0, 0);
};
var $shiftRightInt64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high >> y, (x.low >>> y | x.high << (32 - y)) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(x.high >> 31, (x.high >> (y - 32)) >>> 0);
	}
	if (x.high < 0) {
		return new x.constructor(-1, 4294967295);
	}
	return new x.constructor(0, 0);
};
var $shiftRightUint64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high >>> y, (x.low >>> y | x.high << (32 - y)) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(0, x.high >>> (y - 32));
	}
	return new x.constructor(0, 0);
};
var $mul64 = function(x, y) {
	var high = 0, low = 0, i;
	if ((y.low & 1) !== 0) {
		high = x.high;
		low = x.low;
	}
	for (i = 1; i < 32; i++) {
		if ((y.low & 1<<i) !== 0) {
			high += x.high << i | x.low >>> (32 - i);
			low += (x.low << i) >>> 0;
		}
	}
	for (i = 0; i < 32; i++) {
		if ((y.high & 1<<i) !== 0) {
			high += x.low << i;
		}
	}
	return new x.constructor(high, low);
};
var $div64 = function(x, y, returnRemainder) {
	if (y.high === 0 && y.low === 0) {
		$throwRuntimeError("integer divide by zero");
	}

	var s = 1;
	var rs = 1;

	var xHigh = x.high;
	var xLow = x.low;
	if (xHigh < 0) {
		s = -1;
		rs = -1;
		xHigh = -xHigh;
		if (xLow !== 0) {
			xHigh--;
			xLow = 4294967296 - xLow;
		}
	}

	var yHigh = y.high;
	var yLow = y.low;
	if (y.high < 0) {
		s *= -1;
		yHigh = -yHigh;
		if (yLow !== 0) {
			yHigh--;
			yLow = 4294967296 - yLow;
		}
	}

	var high = 0, low = 0, n = 0, i;
	while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
		yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
		yLow = (yLow << 1) >>> 0;
		n++;
	}
	for (i = 0; i <= n; i++) {
		high = high << 1 | low >>> 31;
		low = (low << 1) >>> 0;
		if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
			xHigh = xHigh - yHigh;
			xLow = xLow - yLow;
			if (xLow < 0) {
				xHigh--;
				xLow += 4294967296;
			}
			low++;
			if (low === 4294967296) {
				high++;
				low = 0;
			}
		}
		yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
		yHigh = yHigh >>> 1;
	}

	if (returnRemainder) {
		return new x.constructor(xHigh * rs, xLow * rs);
	}
	return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
	var ninf = n.real === 1/0 || n.real === -1/0 || n.imag === 1/0 || n.imag === -1/0;
	var dinf = d.real === 1/0 || d.real === -1/0 || d.imag === 1/0 || d.imag === -1/0;
	var nnan = !ninf && (n.real !== n.real || n.imag !== n.imag);
	var dnan = !dinf && (d.real !== d.real || d.imag !== d.imag);
	if(nnan || dnan) {
		return new n.constructor(0/0, 0/0);
	}
	if (ninf && !dinf) {
		return new n.constructor(1/0, 1/0);
	}
	if (!ninf && dinf) {
		return new n.constructor(0, 0);
	}
	if (d.real === 0 && d.imag === 0) {
		if (n.real === 0 && n.imag === 0) {
			return new n.constructor(0/0, 0/0);
		}
		return new n.constructor(1/0, 1/0);
	}
	var a = Math.abs(d.real);
	var b = Math.abs(d.imag);
	if (a <= b) {
		var ratio = d.real / d.imag;
		var denom = d.real * ratio + d.imag;
		return new n.constructor((n.real * ratio + n.imag) / denom, (n.imag * ratio - n.real) / denom);
	}
	var ratio = d.imag / d.real;
	var denom = d.imag * ratio + d.real;
	return new n.constructor((n.imag * ratio + n.real) / denom, (n.imag - n.real * ratio) / denom);
};

var $subslice = function(slice, low, high, max) {
	if (low < 0 || high < low || max < high || high > slice.capacity || max > slice.capacity) {
		$throwRuntimeError("slice bounds out of range");
	}
	var s = new slice.constructor(slice.array);
	s.offset = slice.offset + low;
	s.length = slice.length - low;
	s.capacity = slice.capacity - low;
	if (high !== undefined) {
		s.length = high - low;
	}
	if (max !== undefined) {
		s.capacity = max - low;
	}
	return s;
};

var $sliceToArray = function(slice) {
	if (slice.length === 0) {
		return [];
	}
	if (slice.array.constructor !== Array) {
		return slice.array.subarray(slice.offset, slice.offset + slice.length);
	}
	return slice.array.slice(slice.offset, slice.offset + slice.length);
};

var $decodeRune = function(str, pos) {
	var c0 = str.charCodeAt(pos);

	if (c0 < 0x80) {
		return [c0, 1];
	}

	if (c0 !== c0 || c0 < 0xC0) {
		return [0xFFFD, 1];
	}

	var c1 = str.charCodeAt(pos + 1);
	if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xE0) {
		var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
		if (r <= 0x7F) {
			return [0xFFFD, 1];
		}
		return [r, 2];
	}

	var c2 = str.charCodeAt(pos + 2);
	if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xF0) {
		var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
		if (r <= 0x7FF) {
			return [0xFFFD, 1];
		}
		if (0xD800 <= r && r <= 0xDFFF) {
			return [0xFFFD, 1];
		}
		return [r, 3];
	}

	var c3 = str.charCodeAt(pos + 3);
	if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xF8) {
		var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
		if (r <= 0xFFFF || 0x10FFFF < r) {
			return [0xFFFD, 1];
		}
		return [r, 4];
	}

	return [0xFFFD, 1];
};

var $encodeRune = function(r) {
	if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
		r = 0xFFFD;
	}
	if (r <= 0x7F) {
		return String.fromCharCode(r);
	}
	if (r <= 0x7FF) {
		return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
	}
	if (r <= 0xFFFF) {
		return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
	}
	return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
	var array = new Uint8Array(str.length), i;
	for (i = 0; i < str.length; i++) {
		array[i] = str.charCodeAt(i);
	}
	return array;
};

var $bytesToString = function(slice) {
	if (slice.length === 0) {
		return "";
	}
	var str = "", i;
	for (i = 0; i < slice.length; i += 10000) {
		str += String.fromCharCode.apply(null, slice.array.subarray(slice.offset + i, slice.offset + Math.min(slice.length, i + 10000)));
	}
	return str;
};

var $stringToRunes = function(str) {
	var array = new Int32Array(str.length);
	var rune, i, j = 0;
	for (i = 0; i < str.length; i += rune[1], j++) {
		rune = $decodeRune(str, i);
		array[j] = rune[0];
	}
	return array.subarray(0, j);
};

var $runesToString = function(slice) {
	if (slice.length === 0) {
		return "";
	}
	var str = "", i;
	for (i = 0; i < slice.length; i++) {
		str += $encodeRune(slice.array[slice.offset + i]);
	}
	return str;
};

var $needsExternalization = function(t) {
	switch (t.kind) {
		case "Bool":
		case "Int":
		case "Int8":
		case "Int16":
		case "Int32":
		case "Uint":
		case "Uint8":
		case "Uint16":
		case "Uint32":
		case "Uintptr":
		case "Float32":
		case "Float64":
			return false;
		case "Interface":
			return t !== $packages["github.com/gopherjs/gopherjs/js"].Object;
		default:
			return true;
	}
};

var $externalize = function(v, t) {
	switch (t.kind) {
	case "Bool":
	case "Int":
	case "Int8":
	case "Int16":
	case "Int32":
	case "Uint":
	case "Uint8":
	case "Uint16":
	case "Uint32":
	case "Uintptr":
	case "Float32":
	case "Float64":
		return v;
	case "Int64":
	case "Uint64":
		return $flatten64(v);
	case "Array":
		if ($needsExternalization(t.elem)) {
			return $mapArray(v, function(e) { return $externalize(e, t.elem); });
		}
		return v;
	case "Func":
		if (v === $throwNilPointerError) {
			return null;
		}
		var convert = false;
		var i;
		for (i = 0; i < t.params.length; i++) {
			convert = convert || (t.params[i] !== $packages["github.com/gopherjs/gopherjs/js"].Object);
		}
		for (i = 0; i < t.results.length; i++) {
			convert = convert || $needsExternalization(t.results[i]);
		}
		if (!convert) {
			return v;
		}
		return function() {
			var args = [], i;
			for (i = 0; i < t.params.length; i++) {
				if (t.variadic && i === t.params.length - 1) {
					var vt = t.params[i].elem, varargs = [], j;
					for (j = i; j < arguments.length; j++) {
						varargs.push($internalize(arguments[j], vt));
					}
					args.push(new (t.params[i])(varargs));
					break;
				}
				args.push($internalize(arguments[i], t.params[i]));
			}
			var result = v.apply(this, args);
			switch (t.results.length) {
			case 0:
				return;
			case 1:
				return $externalize(result, t.results[0]);
			default:
				for (i = 0; i < t.results.length; i++) {
					result[i] = $externalize(result[i], t.results[i]);
				}
				return result;
			}
		};
	case "Interface":
		if (v === null) {
			return null;
		}
		if (t === $packages["github.com/gopherjs/gopherjs/js"].Object || v.constructor.kind === undefined) {
			return v;
		}
		return $externalize(v.$val, v.constructor);
	case "Map":
		var m = {};
		var keys = $keys(v), i;
		for (i = 0; i < keys.length; i++) {
			var entry = v[keys[i]];
			m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
		}
		return m;
	case "Ptr":
		var o = {}, i;
		for (i = 0; i < t.methods.length; i++) {
			var m = t.methods[i];
			if (m[2] !== "") { // not exported
				continue;
			}
			(function(m) {
				o[m[1]] = $externalize(function() {
					return v[m[0]].apply(v, arguments);
				}, $funcType(m[3], m[4], m[5]));
			})(m);
		}
		return o;
	case "Slice":
		if ($needsExternalization(t.elem)) {
			return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
		}
		return $sliceToArray(v);
	case "String":
		var s = "", r, i, j = 0;
		for (i = 0; i < v.length; i += r[1], j++) {
			r = $decodeRune(v, i);
			s += String.fromCharCode(r[0]);
		}
		return s;
	case "Struct":
		var timePkg = $packages["time"];
		if (timePkg && v.constructor === timePkg.Time.Ptr) {
			var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
			return new Date($flatten64(milli));
		}
		var o = {}, i;
		for (i = 0; i < t.fields.length; i++) {
			var f = t.fields[i];
			if (f[2] !== "") { // not exported
				continue;
			}
			o[f[1]] = $externalize(v[f[0]], f[3]);
		}
		return o;
	}
	throw $panic(new $String("cannot externalize " + t.string));
};

var $internalize = function(v, t, recv) {
	switch (t.kind) {
	case "Bool":
		return !!v;
	case "Int":
		return parseInt(v);
	case "Int8":
		return parseInt(v) << 24 >> 24;
	case "Int16":
		return parseInt(v) << 16 >> 16;
	case "Int32":
		return parseInt(v) >> 0;
	case "Uint":
		return parseInt(v);
	case "Uint8":
		return parseInt(v) << 24 >>> 24;
	case "Uint16":
		return parseInt(v) << 16 >>> 16;
	case "Uint32":
	case "Uintptr":
		return parseInt(v) >>> 0;
	case "Int64":
	case "Uint64":
		return new t(0, v);
	case "Float32":
	case "Float64":
		return parseFloat(v);
	case "Array":
		if (v.length !== t.len) {
			$throwRuntimeError("got array with wrong size from JavaScript native");
		}
		return $mapArray(v, function(e) { return $internalize(e, t.elem); });
	case "Func":
		return function() {
			var args = [], i;
			for (i = 0; i < t.params.length; i++) {
				if (t.variadic && i === t.params.length - 1) {
					var vt = t.params[i].elem, varargs = arguments[i], j;
					for (j = 0; j < varargs.length; j++) {
						args.push($externalize(varargs.array[varargs.offset + j], vt));
					}
					break;
				}
				args.push($externalize(arguments[i], t.params[i]));
			}
			var result = v.apply(recv, args);
			switch (t.results.length) {
			case 0:
				return;
			case 1:
				return $internalize(result, t.results[0]);
			default:
				for (i = 0; i < t.results.length; i++) {
					result[i] = $internalize(result[i], t.results[i]);
				}
				return result;
			}
		};
	case "Interface":
		if (v === null || t === $packages["github.com/gopherjs/gopherjs/js"].Object) {
			return v;
		}
		switch (v.constructor) {
		case Int8Array:
			return new ($sliceType($Int8))(v);
		case Int16Array:
			return new ($sliceType($Int16))(v);
		case Int32Array:
			return new ($sliceType($Int))(v);
		case Uint8Array:
			return new ($sliceType($Uint8))(v);
		case Uint16Array:
			return new ($sliceType($Uint16))(v);
		case Uint32Array:
			return new ($sliceType($Uint))(v);
		case Float32Array:
			return new ($sliceType($Float32))(v);
		case Float64Array:
			return new ($sliceType($Float64))(v);
		case Array:
			return $internalize(v, $sliceType($emptyInterface));
		case Boolean:
			return new $Bool(!!v);
		case Date:
			var timePkg = $packages["time"];
			if (timePkg) {
				return new timePkg.Time(timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000)));
			}
		case Function:
			var funcType = $funcType([$sliceType($emptyInterface)], [$packages["github.com/gopherjs/gopherjs/js"].Object], true);
			return new funcType($internalize(v, funcType));
		case Number:
			return new $Float64(parseFloat(v));
		case String:
			return new $String($internalize(v, $String));
		default:
			var mapType = $mapType($String, $emptyInterface);
			return new mapType($internalize(v, mapType));
		}
	case "Map":
		var m = new $Map();
		var keys = $keys(v), i;
		for (i = 0; i < keys.length; i++) {
			var key = $internalize(keys[i], t.key);
			m[key.$key ? key.$key() : key] = { k: key, v: $internalize(v[keys[i]], t.elem) };
		}
		return m;
	case "Slice":
		return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
	case "String":
		v = String(v);
		var s = "", i;
		for (i = 0; i < v.length; i++) {
			s += $encodeRune(v.charCodeAt(i));
		}
		return s;
	default:
		throw $panic(new $String("cannot internalize " + t.string));
	}
};

var $copyString = function(dst, src) {
	var n = Math.min(src.length, dst.length), i;
	for (i = 0; i < n; i++) {
		dst.array[dst.offset + i] = src.charCodeAt(i);
	}
	return n;
};

var $copySlice = function(dst, src) {
	var n = Math.min(src.length, dst.length), i;
	$internalCopy(dst.array, src.array, dst.offset, src.offset, n, dst.constructor.elem);
	return n;
};

var $copy = function(dst, src, type) {
	var i;
	switch (type.kind) {
	case "Array":
		$internalCopy(dst, src, 0, 0, src.length, type.elem);
		return true;
	case "Struct":
		for (i = 0; i < type.fields.length; i++) {
			var field = type.fields[i];
			var name = field[0];
			if (!$copy(dst[name], src[name], field[3])) {
				dst[name] = src[name];
			}
		}
		return true;
	default:
		return false;
	}
};

var $internalCopy = function(dst, src, dstOffset, srcOffset, n, elem) {
	var i;
	if (n === 0) {
		return;
	}

	if (src.subarray) {
		dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
		return;
	}

	switch (elem.kind) {
	case "Array":
	case "Struct":
		for (i = 0; i < n; i++) {
			$copy(dst[dstOffset + i], src[srcOffset + i], elem);
		}
		return;
	}

	for (i = 0; i < n; i++) {
		dst[dstOffset + i] = src[srcOffset + i];
	}
};

var $clone = function(src, type) {
	var clone = type.zero();
	$copy(clone, src, type);
	return clone;
};

var $append = function(slice) {
	return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
	return $internalAppend(slice, toAppend.array, toAppend.offset, toAppend.length);
};

var $internalAppend = function(slice, array, offset, length) {
	if (length === 0) {
		return slice;
	}

	var newArray = slice.array;
	var newOffset = slice.offset;
	var newLength = slice.length + length;
	var newCapacity = slice.capacity;

	if (newLength > newCapacity) {
		newOffset = 0;
		newCapacity = Math.max(newLength, slice.capacity < 1024 ? slice.capacity * 2 : Math.floor(slice.capacity * 5 / 4));

		if (slice.array.constructor === Array) {
			newArray = slice.array.slice(slice.offset, slice.offset + slice.length);
			newArray.length = newCapacity;
		} else {
			newArray = new slice.array.constructor(newCapacity);
			newArray.set(slice.array.subarray(slice.offset, slice.offset + slice.length));
		}
		var zero = slice.constructor.elem.zero, i;
		for (i = slice.length; i < newCapacity; i++) {
			newArray[i] = zero();
		}
	}

	$internalCopy(newArray, array, newOffset + slice.length, offset, length, slice.constructor.elem);

	var newSlice = new slice.constructor(newArray);
	newSlice.offset = newOffset;
	newSlice.length = newLength;
	newSlice.capacity = newCapacity;
	return newSlice;
}

var $panic = function(value) {
	var message;
	if (value.constructor === $String) {
		message = value.$val;
	} else if (value.Error !== undefined) {
		message = value.Error();
	} else if (value.String !== undefined) {
		message = value.String();
	} else {
		message = value;
	}
	var err = new Error(message);
	err.$panicValue = value;
	return err;
};
var $notSupported = function(feature) {
	var err = new Error("not supported by GopherJS: " + feature);
	err.$notSupported = feature;
	throw err;
};
var $throw = function(err) { throw err; };
var $catch = function(f) { try { f(); return null; } catch (e) { return e; } };
var $throwRuntimeError; /* set by package "runtime" */

var $errorStack = [], $jsErr = null;

var $pushErr = function(err) {
	if (err.$panicValue === undefined) {
		if (err.$exit || err.$notSupported) {
			$jsErr = err;
			return;
		}
		err.$panicValue = new $packages["github.com/gopherjs/gopherjs/js"].Error.Ptr(err);
	}
	$errorStack.push({ frame: $getStackDepth(), error: err });
};

var $callDeferred = function(deferred) {
	if ($jsErr !== null) {
		throw $jsErr;
	}
	var i;
	for (i = deferred.length - 1; i >= 0; i--) {
		var call = deferred[i];
		try {
			if (call.recv !== undefined) {
				call.recv[call.method].apply(call.recv, call.args);
				continue;
			}
			call.fun.apply(undefined, call.args);
		} catch (err) {
			$errorStack.push({ frame: $getStackDepth(), error: err });
		}
	}
	var err = $errorStack[$errorStack.length - 1];
	if (err !== undefined && err.frame === $getStackDepth()) {
		$errorStack.pop();
		throw err.error;
	}
};

var $recover = function() {
	var err = $errorStack[$errorStack.length - 1];
	if (err === undefined || err.frame !== $getStackDepth()) {
		return null;
	}
	$errorStack.pop();
	return err.error.$panicValue;
};

var $getStack = function() {
	return (new Error()).stack.split("\n");
};

var $getStackDepth = function() {
	var s = $getStack(), d = 0, i;
	for (i = 0; i < s.length; i++) {
		if (s[i].indexOf("$") === -1) {
			d++;
		}
	}
	return d;
};

var $equal = function(a, b, type) {
	if (a === b) {
		return true;
	}
	var i;
	switch (type.kind) {
	case "Float32":
		return $float32IsEqual(a, b);
	case "Complex64":
		return $float32IsEqual(a.real, b.real) && $float32IsEqual(a.imag, b.imag);
	case "Complex128":
		return a.real === b.real && a.imag === b.imag;
	case "Int64":
	case "Uint64":
		return a.high === b.high && a.low === b.low;
	case "Ptr":
		if (a.constructor.Struct) {
			return false;
		}
		return $pointerIsEqual(a, b);
	case "Array":
		if (a.length != b.length) {
			return false;
		}
		var i;
		for (i = 0; i < a.length; i++) {
			if (!$equal(a[i], b[i], type.elem)) {
				return false;
			}
		}
		return true;
	case "Struct":
		for (i = 0; i < type.fields.length; i++) {
			var field = type.fields[i];
			var name = field[0];
			if (!$equal(a[name], b[name], field[3])) {
				return false;
			}
		}
		return true;
	default:
		return false;
	}
};
var $interfaceIsEqual = function(a, b) {
	if (a === b) {
		return true;
	}
	if (a === null || b === null || a === undefined || b === undefined || a.constructor !== b.constructor) {
		return false;
	}
	switch (a.constructor.kind) {
	case "Func":
	case "Map":
	case "Slice":
		$throwRuntimeError("comparing uncomparable type " + a.constructor.string);
	case undefined: /* js.Object */
		return false;
	default:
		return $equal(a.$val, b.$val, a.constructor);
	}
};
var $float32IsEqual = function(a, b) {
	if (a === b) {
		return true;
	}
	if (a === 0 || b === 0 || a === 1/0 || b === 1/0 || a === -1/0 || b === -1/0 || a !== a || b !== b) {
		return false;
	}
	var math = $packages["math"];
	return math !== undefined && math.Float32bits(a) === math.Float32bits(b);
};
var $sliceIsEqual = function(a, ai, b, bi) {
	return a.array === b.array && a.offset + ai === b.offset + bi;
};
var $pointerIsEqual = function(a, b) {
	if (a === b) {
		return true;
	}
	if (a.$get === $throwNilPointerError || b.$get === $throwNilPointerError) {
		return a.$get === $throwNilPointerError && b.$get === $throwNilPointerError;
	}
	var old = a.$get();
	var dummy = new Object();
	a.$set(dummy);
	var equal = b.$get() === dummy;
	a.$set(old);
	return equal;
};

var $typeAssertionFailed = function(obj, expected) {
	var got = "";
	if (obj !== null) {
		got = obj.constructor.string;
	}
	throw $panic(new $packages["runtime"].TypeAssertionError.Ptr("", got, expected.string, ""));
};

var $now = function() { var msec = (new Date()).getTime(); return [new $Int64(0, Math.floor(msec / 1000)), (msec % 1000) * 1000000]; };

var $packages = {};
$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, Object, Error, init;
	Object = $pkg.Object = $newType(8, "Interface", "js.Object", "Object", "github.com/gopherjs/gopherjs/js", null);
	Error = $pkg.Error = $newType(0, "Struct", "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	Error.Ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	init = function() {
		var e;
		e = new Error.Ptr(); $copy(e, new Error.Ptr(null), Error);
	};
	$pkg.$init = function() {
		Object.init([["Bool", "Bool", "", [], [$Bool], false], ["Call", "Call", "", [$String, ($sliceType($emptyInterface))], [Object], true], ["Delete", "Delete", "", [$String], [], false], ["Float", "Float", "", [], [$Float64], false], ["Get", "Get", "", [$String], [Object], false], ["Index", "Index", "", [$Int], [Object], false], ["Int", "Int", "", [], [$Int], false], ["Int64", "Int64", "", [], [$Int64], false], ["Interface", "Interface", "", [], [$emptyInterface], false], ["Invoke", "Invoke", "", [($sliceType($emptyInterface))], [Object], true], ["IsNull", "IsNull", "", [], [$Bool], false], ["IsUndefined", "IsUndefined", "", [], [$Bool], false], ["Length", "Length", "", [], [$Int], false], ["New", "New", "", [($sliceType($emptyInterface))], [Object], true], ["Set", "Set", "", [$String, $emptyInterface], [], false], ["SetIndex", "SetIndex", "", [$Int, $emptyInterface], [], false], ["Str", "Str", "", [], [$String], false], ["Uint64", "Uint64", "", [], [$Uint64], false], ["Unsafe", "Unsafe", "", [], [$Uintptr], false]]);
		Error.methods = [["Bool", "Bool", "", [], [$Bool], false, 0], ["Call", "Call", "", [$String, ($sliceType($emptyInterface))], [Object], true, 0], ["Delete", "Delete", "", [$String], [], false, 0], ["Float", "Float", "", [], [$Float64], false, 0], ["Get", "Get", "", [$String], [Object], false, 0], ["Index", "Index", "", [$Int], [Object], false, 0], ["Int", "Int", "", [], [$Int], false, 0], ["Int64", "Int64", "", [], [$Int64], false, 0], ["Interface", "Interface", "", [], [$emptyInterface], false, 0], ["Invoke", "Invoke", "", [($sliceType($emptyInterface))], [Object], true, 0], ["IsNull", "IsNull", "", [], [$Bool], false, 0], ["IsUndefined", "IsUndefined", "", [], [$Bool], false, 0], ["Length", "Length", "", [], [$Int], false, 0], ["New", "New", "", [($sliceType($emptyInterface))], [Object], true, 0], ["Set", "Set", "", [$String, $emptyInterface], [], false, 0], ["SetIndex", "SetIndex", "", [$Int, $emptyInterface], [], false, 0], ["Str", "Str", "", [], [$String], false, 0], ["Uint64", "Uint64", "", [], [$Uint64], false, 0], ["Unsafe", "Unsafe", "", [], [$Uintptr], false, 0]];
		($ptrType(Error)).methods = [["Bool", "Bool", "", [], [$Bool], false, 0], ["Call", "Call", "", [$String, ($sliceType($emptyInterface))], [Object], true, 0], ["Delete", "Delete", "", [$String], [], false, 0], ["Error", "Error", "", [], [$String], false, -1], ["Float", "Float", "", [], [$Float64], false, 0], ["Get", "Get", "", [$String], [Object], false, 0], ["Index", "Index", "", [$Int], [Object], false, 0], ["Int", "Int", "", [], [$Int], false, 0], ["Int64", "Int64", "", [], [$Int64], false, 0], ["Interface", "Interface", "", [], [$emptyInterface], false, 0], ["Invoke", "Invoke", "", [($sliceType($emptyInterface))], [Object], true, 0], ["IsNull", "IsNull", "", [], [$Bool], false, 0], ["IsUndefined", "IsUndefined", "", [], [$Bool], false, 0], ["Length", "Length", "", [], [$Int], false, 0], ["New", "New", "", [($sliceType($emptyInterface))], [Object], true, 0], ["Set", "Set", "", [$String, $emptyInterface], [], false, 0], ["SetIndex", "SetIndex", "", [$Int, $emptyInterface], [], false, 0], ["Str", "Str", "", [], [$String], false, 0], ["Uint64", "Uint64", "", [], [$Uint64], false, 0], ["Unsafe", "Unsafe", "", [], [$Uintptr], false, 0]];
		Error.init([["Object", "", "", Object, ""]]);
		init();
	};
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], TypeAssertionError, errorString, MemStats, sizeof_C_MStats, init, getgoroot, Caller, Goexit, GOMAXPROCS, SetFinalizer, GOROOT, init$1;
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, "Struct", "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		this.interfaceString = interfaceString_ !== undefined ? interfaceString_ : "";
		this.concreteString = concreteString_ !== undefined ? concreteString_ : "";
		this.assertedString = assertedString_ !== undefined ? assertedString_ : "";
		this.missingMethod = missingMethod_ !== undefined ? missingMethod_ : "";
	});
	errorString = $pkg.errorString = $newType(8, "String", "runtime.errorString", "errorString", "runtime", null);
	MemStats = $pkg.MemStats = $newType(0, "Struct", "runtime.MemStats", "MemStats", "runtime", function(Alloc_, TotalAlloc_, Sys_, Lookups_, Mallocs_, Frees_, HeapAlloc_, HeapSys_, HeapIdle_, HeapInuse_, HeapReleased_, HeapObjects_, StackInuse_, StackSys_, MSpanInuse_, MSpanSys_, MCacheInuse_, MCacheSys_, BuckHashSys_, GCSys_, OtherSys_, NextGC_, LastGC_, PauseTotalNs_, PauseNs_, NumGC_, EnableGC_, DebugGC_, BySize_) {
		this.$val = this;
		this.Alloc = Alloc_ !== undefined ? Alloc_ : new $Uint64(0, 0);
		this.TotalAlloc = TotalAlloc_ !== undefined ? TotalAlloc_ : new $Uint64(0, 0);
		this.Sys = Sys_ !== undefined ? Sys_ : new $Uint64(0, 0);
		this.Lookups = Lookups_ !== undefined ? Lookups_ : new $Uint64(0, 0);
		this.Mallocs = Mallocs_ !== undefined ? Mallocs_ : new $Uint64(0, 0);
		this.Frees = Frees_ !== undefined ? Frees_ : new $Uint64(0, 0);
		this.HeapAlloc = HeapAlloc_ !== undefined ? HeapAlloc_ : new $Uint64(0, 0);
		this.HeapSys = HeapSys_ !== undefined ? HeapSys_ : new $Uint64(0, 0);
		this.HeapIdle = HeapIdle_ !== undefined ? HeapIdle_ : new $Uint64(0, 0);
		this.HeapInuse = HeapInuse_ !== undefined ? HeapInuse_ : new $Uint64(0, 0);
		this.HeapReleased = HeapReleased_ !== undefined ? HeapReleased_ : new $Uint64(0, 0);
		this.HeapObjects = HeapObjects_ !== undefined ? HeapObjects_ : new $Uint64(0, 0);
		this.StackInuse = StackInuse_ !== undefined ? StackInuse_ : new $Uint64(0, 0);
		this.StackSys = StackSys_ !== undefined ? StackSys_ : new $Uint64(0, 0);
		this.MSpanInuse = MSpanInuse_ !== undefined ? MSpanInuse_ : new $Uint64(0, 0);
		this.MSpanSys = MSpanSys_ !== undefined ? MSpanSys_ : new $Uint64(0, 0);
		this.MCacheInuse = MCacheInuse_ !== undefined ? MCacheInuse_ : new $Uint64(0, 0);
		this.MCacheSys = MCacheSys_ !== undefined ? MCacheSys_ : new $Uint64(0, 0);
		this.BuckHashSys = BuckHashSys_ !== undefined ? BuckHashSys_ : new $Uint64(0, 0);
		this.GCSys = GCSys_ !== undefined ? GCSys_ : new $Uint64(0, 0);
		this.OtherSys = OtherSys_ !== undefined ? OtherSys_ : new $Uint64(0, 0);
		this.NextGC = NextGC_ !== undefined ? NextGC_ : new $Uint64(0, 0);
		this.LastGC = LastGC_ !== undefined ? LastGC_ : new $Uint64(0, 0);
		this.PauseTotalNs = PauseTotalNs_ !== undefined ? PauseTotalNs_ : new $Uint64(0, 0);
		this.PauseNs = PauseNs_ !== undefined ? PauseNs_ : ($arrayType($Uint64, 256)).zero();
		this.NumGC = NumGC_ !== undefined ? NumGC_ : 0;
		this.EnableGC = EnableGC_ !== undefined ? EnableGC_ : false;
		this.DebugGC = DebugGC_ !== undefined ? DebugGC_ : false;
		this.BySize = BySize_ !== undefined ? BySize_ : ($arrayType(($structType([["Size", "Size", "", $Uint32, ""], ["Mallocs", "Mallocs", "", $Uint64, ""], ["Frees", "Frees", "", $Uint64, ""]])), 61)).zero();
	});
	init = function() {
		var e;
		$throwRuntimeError = $externalize((function(msg) {
			throw $panic(new errorString(msg));
		}), ($funcType([$String], [], false)));
		e = new TypeAssertionError.Ptr(); $copy(e, new TypeAssertionError.Ptr("", "", "", ""), TypeAssertionError);
	};
	getgoroot = function() {
		var process, goroot;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (goroot === undefined) {
			return "";
		}
		return $internalize(goroot, $String);
	};
	Caller = $pkg.Caller = function(skip) {
		var pc, file, line, ok, info, _tmp, _tmp$1, _tmp$2, _tmp$3, parts, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = $getStack()[(skip + 3 >> 0)];
		if (info === undefined) {
			_tmp = 0; _tmp$1 = ""; _tmp$2 = 0; _tmp$3 = false; pc = _tmp; file = _tmp$1; line = _tmp$2; ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0; _tmp$5 = $internalize(parts[0], $String); _tmp$6 = $parseInt(parts[1]) >> 0; _tmp$7 = true; pc = _tmp$4; file = _tmp$5; line = _tmp$6; ok = _tmp$7;
		return [pc, file, line, ok];
	};
	Goexit = $pkg.Goexit = function() {
		var err;
		err = new ($global.Error)();
		err.$exit = $externalize(true, $Bool);
		$throw(err);
	};
	GOMAXPROCS = $pkg.GOMAXPROCS = function(n) {
		if (n > 1) {
			$notSupported($externalize("GOMAXPROCS > 1", $String));
		}
		return 1;
	};
	SetFinalizer = $pkg.SetFinalizer = function(x, f) {
	};
	TypeAssertionError.Ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.Ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	GOROOT = $pkg.GOROOT = function() {
		var s;
		s = getgoroot();
		if (!(s === "")) {
			return s;
		}
		return "/usr/local/go";
	};
	init$1 = function() {
		var memStats;
		memStats = new MemStats.Ptr(); $copy(memStats, new MemStats.Ptr(), MemStats);
		if (!((sizeof_C_MStats === 3712))) {
			console.log(sizeof_C_MStats, 3712);
			throw $panic(new $String("MStats vs MemStatsType size mismatch"));
		}
	};
	$pkg.$init = function() {
		($ptrType(TypeAssertionError)).methods = [["Error", "Error", "", [], [$String], false, -1], ["RuntimeError", "RuntimeError", "", [], [], false, -1]];
		TypeAssertionError.init([["interfaceString", "interfaceString", "runtime", $String, ""], ["concreteString", "concreteString", "runtime", $String, ""], ["assertedString", "assertedString", "runtime", $String, ""], ["missingMethod", "missingMethod", "runtime", $String, ""]]);
		errorString.methods = [["Error", "Error", "", [], [$String], false, -1], ["RuntimeError", "RuntimeError", "", [], [], false, -1]];
		($ptrType(errorString)).methods = [["Error", "Error", "", [], [$String], false, -1], ["RuntimeError", "RuntimeError", "", [], [], false, -1]];
		MemStats.init([["Alloc", "Alloc", "", $Uint64, ""], ["TotalAlloc", "TotalAlloc", "", $Uint64, ""], ["Sys", "Sys", "", $Uint64, ""], ["Lookups", "Lookups", "", $Uint64, ""], ["Mallocs", "Mallocs", "", $Uint64, ""], ["Frees", "Frees", "", $Uint64, ""], ["HeapAlloc", "HeapAlloc", "", $Uint64, ""], ["HeapSys", "HeapSys", "", $Uint64, ""], ["HeapIdle", "HeapIdle", "", $Uint64, ""], ["HeapInuse", "HeapInuse", "", $Uint64, ""], ["HeapReleased", "HeapReleased", "", $Uint64, ""], ["HeapObjects", "HeapObjects", "", $Uint64, ""], ["StackInuse", "StackInuse", "", $Uint64, ""], ["StackSys", "StackSys", "", $Uint64, ""], ["MSpanInuse", "MSpanInuse", "", $Uint64, ""], ["MSpanSys", "MSpanSys", "", $Uint64, ""], ["MCacheInuse", "MCacheInuse", "", $Uint64, ""], ["MCacheSys", "MCacheSys", "", $Uint64, ""], ["BuckHashSys", "BuckHashSys", "", $Uint64, ""], ["GCSys", "GCSys", "", $Uint64, ""], ["OtherSys", "OtherSys", "", $Uint64, ""], ["NextGC", "NextGC", "", $Uint64, ""], ["LastGC", "LastGC", "", $Uint64, ""], ["PauseTotalNs", "PauseTotalNs", "", $Uint64, ""], ["PauseNs", "PauseNs", "", ($arrayType($Uint64, 256)), ""], ["NumGC", "NumGC", "", $Uint32, ""], ["EnableGC", "EnableGC", "", $Bool, ""], ["DebugGC", "DebugGC", "", $Bool, ""], ["BySize", "BySize", "", ($arrayType(($structType([["Size", "Size", "", $Uint32, ""], ["Mallocs", "Mallocs", "", $Uint64, ""], ["Frees", "Frees", "", $Uint64, ""]])), 61)), ""]]);
		sizeof_C_MStats = 3712;
		init();
		init$1();
	};
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, errorString, New;
	errorString = $pkg.errorString = $newType(0, "Struct", "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : "";
	});
	New = $pkg.New = function(text) {
		return new errorString.Ptr(text);
	};
	errorString.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	$pkg.$init = function() {
		($ptrType(errorString)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		errorString.init([["s", "s", "errors", $String, ""]]);
	};
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, CompareAndSwapInt32, AddInt32, LoadUint32, StoreInt32, StoreUint32;
	CompareAndSwapInt32 = $pkg.CompareAndSwapInt32 = function(addr, old, new$1) {
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	AddInt32 = $pkg.AddInt32 = function(addr, delta) {
		var new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	LoadUint32 = $pkg.LoadUint32 = function(addr) {
		return addr.$get();
	};
	StoreInt32 = $pkg.StoreInt32 = function(addr, val) {
		addr.$set(val);
	};
	StoreUint32 = $pkg.StoreUint32 = function(addr, val) {
		addr.$set(val);
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, atomic = $packages["sync/atomic"], Pool, Mutex, Locker, Once, syncSema, RWMutex, rlocker, runtime_Syncsemcheck, runtime_Semacquire, runtime_Semrelease, init;
	Pool = $pkg.Pool = $newType(0, "Struct", "sync.Pool", "Pool", "sync", function(store_, New_) {
		this.$val = this;
		this.store = store_ !== undefined ? store_ : ($sliceType($emptyInterface)).nil;
		this.New = New_ !== undefined ? New_ : $throwNilPointerError;
	});
	Mutex = $pkg.Mutex = $newType(0, "Struct", "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.sema = sema_ !== undefined ? sema_ : 0;
	});
	Locker = $pkg.Locker = $newType(8, "Interface", "sync.Locker", "Locker", "sync", null);
	Once = $pkg.Once = $newType(0, "Struct", "sync.Once", "Once", "sync", function(m_, done_) {
		this.$val = this;
		this.m = m_ !== undefined ? m_ : new Mutex.Ptr();
		this.done = done_ !== undefined ? done_ : 0;
	});
	syncSema = $pkg.syncSema = $newType(12, "Array", "sync.syncSema", "syncSema", "sync", null);
	RWMutex = $pkg.RWMutex = $newType(0, "Struct", "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	rlocker = $pkg.rlocker = $newType(0, "Struct", "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	Pool.Ptr.prototype.Get = function() {
		var p, x, x$1, x$2;
		p = this;
		if (p.store.length === 0) {
			if (!(p.New === $throwNilPointerError)) {
				return p.New();
			}
			return null;
		}
		x$2 = (x = p.store, x$1 = p.store.length - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.length - 1 >> 0));
		return x$2;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.Ptr.prototype.Put = function(x) {
		var p;
		p = this;
		if ($interfaceIsEqual(x, null)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_Syncsemcheck = function(size) {
	};
	Mutex.Ptr.prototype.Lock = function() {
		var m, awoke, old, new$1;
		m = this;
		if (atomic.CompareAndSwapInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), 0, 1)) {
			return;
		}
		awoke = false;
		while (true) {
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = new$1 & ~2;
			}
			if (atomic.CompareAndSwapInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) {
				if ((old & 1) === 0) {
					break;
				}
				runtime_Semacquire(new ($ptrType($Uint32))(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m));
				awoke = true;
			}
		}
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.Ptr.prototype.Unlock = function() {
		var m, new$1, old;
		m = this;
		new$1 = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw $panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		while (true) {
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			if (atomic.CompareAndSwapInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) {
				runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m));
				return;
			}
			old = m.state;
		}
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.Ptr.prototype.Do = function(f) {
		var o;
		var $deferred = [];
		try {
			o = this;
			if (atomic.LoadUint32(new ($ptrType($Uint32))(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)) === 1) {
				return;
			}
			o.m.Lock();
			$deferred.push({ recv: o.m, method: "Unlock", args: [] });
			if (o.done === 0) {
				f();
				atomic.StoreUint32(new ($ptrType($Uint32))(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o), 1);
			}
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	runtime_Semacquire = function() {
		throw $panic("Native function not implemented: runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		throw $panic("Native function not implemented: runtime_Semrelease");
	};
	init = function() {
		var s;
		s = syncSema.zero(); $copy(s, syncSema.zero(), syncSema);
		runtime_Syncsemcheck(12);
	};
	RWMutex.Ptr.prototype.RLock = function() {
		var rw;
		rw = this;
		if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), 1) < 0) {
			runtime_Semacquire(new ($ptrType($Uint32))(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw));
		}
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.Ptr.prototype.RUnlock = function() {
		var rw;
		rw = this;
		if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), -1) < 0) {
			if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), -1) === 0) {
				runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw));
			}
		}
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.Ptr.prototype.Lock = function() {
		var rw, r;
		rw = this;
		rw.w.Lock();
		r = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), -1073741824) + 1073741824 >> 0;
		if (!((r === 0)) && !((atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), r) === 0))) {
			runtime_Semacquire(new ($ptrType($Uint32))(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw));
		}
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.Ptr.prototype.Unlock = function() {
		var rw, r, i;
		rw = this;
		r = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), 1073741824);
		i = 0;
		while (i < (r >> 0)) {
			runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw));
			i = i + 1 >> 0;
		}
		rw.w.Unlock();
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.Ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return $clone(rw, rlocker);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.Ptr.prototype.Lock = function() {
		var r;
		r = this;
		$clone(r, RWMutex).RLock();
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.Ptr.prototype.Unlock = function() {
		var r;
		r = this;
		$clone(r, RWMutex).RUnlock();
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	$pkg.$init = function() {
		($ptrType(Pool)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Put", "Put", "", [$emptyInterface], [], false, -1]];
		Pool.init([["store", "store", "sync", ($sliceType($emptyInterface)), ""], ["New", "New", "", ($funcType([], [$emptyInterface], false)), ""]]);
		($ptrType(Mutex)).methods = [["Lock", "Lock", "", [], [], false, -1], ["Unlock", "Unlock", "", [], [], false, -1]];
		Mutex.init([["state", "state", "sync", $Int32, ""], ["sema", "sema", "sync", $Uint32, ""]]);
		Locker.init([["Lock", "Lock", "", [], [], false], ["Unlock", "Unlock", "", [], [], false]]);
		($ptrType(Once)).methods = [["Do", "Do", "", [($funcType([], [], false))], [], false, -1]];
		Once.init([["m", "m", "sync", Mutex, ""], ["done", "done", "sync", $Uint32, ""]]);
		syncSema.init($Uintptr, 3);
		($ptrType(RWMutex)).methods = [["Lock", "Lock", "", [], [], false, -1], ["RLock", "RLock", "", [], [], false, -1], ["RLocker", "RLocker", "", [], [Locker], false, -1], ["RUnlock", "RUnlock", "", [], [], false, -1], ["Unlock", "Unlock", "", [], [], false, -1]];
		RWMutex.init([["w", "w", "sync", Mutex, ""], ["writerSem", "writerSem", "sync", $Uint32, ""], ["readerSem", "readerSem", "sync", $Uint32, ""], ["readerCount", "readerCount", "sync", $Int32, ""], ["readerWait", "readerWait", "sync", $Int32, ""]]);
		($ptrType(rlocker)).methods = [["Lock", "Lock", "", [], [], false, -1], ["Unlock", "Unlock", "", [], [], false, -1]];
		rlocker.init([["w", "w", "sync", Mutex, ""], ["writerSem", "writerSem", "sync", $Uint32, ""], ["readerSem", "readerSem", "sync", $Uint32, ""], ["readerCount", "readerCount", "sync", $Int32, ""], ["readerWait", "readerWait", "sync", $Int32, ""]]);
		init();
	};
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, errors = $packages["errors"], sync = $packages["sync"], Reader, Writer, Closer, ReadCloser, WriteCloser, ReaderFrom, WriterTo, RuneReader, errWhence, errOffset, Copy;
	Reader = $pkg.Reader = $newType(8, "Interface", "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, "Interface", "io.Writer", "Writer", "io", null);
	Closer = $pkg.Closer = $newType(8, "Interface", "io.Closer", "Closer", "io", null);
	ReadCloser = $pkg.ReadCloser = $newType(8, "Interface", "io.ReadCloser", "ReadCloser", "io", null);
	WriteCloser = $pkg.WriteCloser = $newType(8, "Interface", "io.WriteCloser", "WriteCloser", "io", null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, "Interface", "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = $pkg.WriterTo = $newType(8, "Interface", "io.WriterTo", "WriterTo", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, "Interface", "io.RuneReader", "RuneReader", "io", null);
	Copy = $pkg.Copy = function(dst, src) {
		var written, err, _tuple, wt, ok, _tuple$1, _tuple$2, rt, ok$1, _tuple$3, buf, _tuple$4, nr, er, _tuple$5, nw, ew, x, _tmp, _tmp$1;
		written = new $Int64(0, 0);
		err = null;
		_tuple = (src !== null && WriterTo.implementedBy.indexOf(src.constructor) !== -1 ? [src, true] : [null, false]); wt = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tuple$1 = wt.WriteTo(dst); written = _tuple$1[0]; err = _tuple$1[1];
			return [written, err];
		}
		_tuple$2 = (dst !== null && ReaderFrom.implementedBy.indexOf(dst.constructor) !== -1 ? [dst, true] : [null, false]); rt = _tuple$2[0]; ok$1 = _tuple$2[1];
		if (ok$1) {
			_tuple$3 = rt.ReadFrom(src); written = _tuple$3[0]; err = _tuple$3[1];
			return [written, err];
		}
		buf = ($sliceType($Uint8)).make(32768, 0, function() { return 0; });
		while (true) {
			_tuple$4 = src.Read(buf); nr = _tuple$4[0]; er = _tuple$4[1];
			if (nr > 0) {
				_tuple$5 = dst.Write($subslice(buf, 0, nr)); nw = _tuple$5[0]; ew = _tuple$5[1];
				if (nw > 0) {
					written = (x = new $Int64(0, nw), new $Int64(written.high + x.high, written.low + x.low));
				}
				if (!($interfaceIsEqual(ew, null))) {
					err = ew;
					break;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					break;
				}
			}
			if ($interfaceIsEqual(er, $pkg.EOF)) {
				break;
			}
			if (!($interfaceIsEqual(er, null))) {
				err = er;
				break;
			}
		}
		_tmp = written; _tmp$1 = err; written = _tmp; err = _tmp$1;
		return [written, err];
	};
	$pkg.$init = function() {
		Reader.init([["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false]]);
		Writer.init([["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false]]);
		Closer.init([["Close", "Close", "", [], [$error], false]]);
		ReadCloser.init([["Close", "Close", "", [], [$error], false], ["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false]]);
		WriteCloser.init([["Close", "Close", "", [], [$error], false], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false]]);
		ReaderFrom.init([["ReadFrom", "ReadFrom", "", [Reader], [$Int64, $error], false]]);
		WriterTo.init([["WriteTo", "WriteTo", "", [Writer], [$Int64, $error], false]]);
		RuneReader.init([["ReadRune", "ReadRune", "", [], [$Int32, $Int, $error], false]]);
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
	};
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, RangeTable, Range16, Range32, CaseRange, d, foldPair, _C, _Cc, _Cf, _Co, _Cs, _L, _Ll, _Lm, _Lo, _Lt, _Lu, _M, _Mc, _Me, _Mn, _N, _Nd, _Nl, _No, _P, _Pc, _Pd, _Pe, _Pf, _Pi, _Po, _Ps, _S, _Sc, _Sk, _Sm, _So, _Z, _Zl, _Zp, _Zs, _Arabic, _Armenian, _Avestan, _Balinese, _Bamum, _Batak, _Bengali, _Bopomofo, _Brahmi, _Braille, _Buginese, _Buhid, _Canadian_Aboriginal, _Carian, _Chakma, _Cham, _Cherokee, _Common, _Coptic, _Cuneiform, _Cypriot, _Cyrillic, _Deseret, _Devanagari, _Egyptian_Hieroglyphs, _Ethiopic, _Georgian, _Glagolitic, _Gothic, _Greek, _Gujarati, _Gurmukhi, _Han, _Hangul, _Hanunoo, _Hebrew, _Hiragana, _Imperial_Aramaic, _Inherited, _Inscriptional_Pahlavi, _Inscriptional_Parthian, _Javanese, _Kaithi, _Kannada, _Katakana, _Kayah_Li, _Kharoshthi, _Khmer, _Lao, _Latin, _Lepcha, _Limbu, _Linear_B, _Lisu, _Lycian, _Lydian, _Malayalam, _Mandaic, _Meetei_Mayek, _Meroitic_Cursive, _Meroitic_Hieroglyphs, _Miao, _Mongolian, _Myanmar, _New_Tai_Lue, _Nko, _Ogham, _Ol_Chiki, _Old_Italic, _Old_Persian, _Old_South_Arabian, _Old_Turkic, _Oriya, _Osmanya, _Phags_Pa, _Phoenician, _Rejang, _Runic, _Samaritan, _Saurashtra, _Sharada, _Shavian, _Sinhala, _Sora_Sompeng, _Sundanese, _Syloti_Nagri, _Syriac, _Tagalog, _Tagbanwa, _Tai_Le, _Tai_Tham, _Tai_Viet, _Takri, _Tamil, _Telugu, _Thaana, _Thai, _Tibetan, _Tifinagh, _Ugaritic, _Vai, _Yi, _White_Space, _CaseRanges, properties, caseOrbit, foldCommon, foldGreek, foldInherited, foldL, foldLl, foldLt, foldLu, foldM, foldMn, to, IsDigit, IsPrint, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, "Struct", "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		this.R16 = R16_ !== undefined ? R16_ : ($sliceType(Range16)).nil;
		this.R32 = R32_ !== undefined ? R32_ : ($sliceType(Range32)).nil;
		this.LatinOffset = LatinOffset_ !== undefined ? LatinOffset_ : 0;
	});
	Range16 = $pkg.Range16 = $newType(0, "Struct", "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	Range32 = $pkg.Range32 = $newType(0, "Struct", "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	CaseRange = $pkg.CaseRange = $newType(0, "Struct", "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Delta = Delta_ !== undefined ? Delta_ : d.zero();
	});
	d = $pkg.d = $newType(12, "Array", "unicode.d", "d", "unicode", null);
	foldPair = $pkg.foldPair = $newType(0, "Struct", "unicode.foldPair", "foldPair", "unicode", function(From_, To_) {
		this.$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
	to = function(_case, r, caseRange) {
		var lo, hi, _q, m, cr, delta;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.length) ? $throwRuntimeError("index out of range") : caseRange.array[caseRange.offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = cr.Delta[_case];
				if (delta > 1114111) {
					return (cr.Lo >> 0) + (((((r - (cr.Lo >> 0) >> 0)) & ~1) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = $pkg.IsDigit = function(r) {
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	IsPrint = $pkg.IsPrint = function(r) {
		if ((r >>> 0) <= 255) {
			return !((((properties[(r << 24 >>> 24)] & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	In = $pkg.In = function(r, ranges) {
		var _ref, _i, inside;
		_ref = ranges;
		_i = 0;
		while (_i < _ref.length) {
			inside = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	IsLetter = $pkg.IsLetter = function(r) {
		if ((r >>> 0) <= 255) {
			return !((((properties[(r << 24 >>> 24)] & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	IsSpace = $pkg.IsSpace = function(r) {
		var _ref;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	is16 = function(ranges, r) {
		var _ref, _i, i, range_, _r, lo, hi, _q, m, range_$1, _r$1;
		if (ranges.length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				range_ = ((i < 0 || i >= ranges.length) ? $throwRuntimeError("index out of range") : ranges.array[ranges.offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.length) ? $throwRuntimeError("index out of range") : ranges.array[ranges.offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _ref, _i, i, range_, _r, lo, hi, _q, m, range_$1, _r$1;
		if (ranges.length <= 18) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				range_ = ((i < 0 || i >= ranges.length) ? $throwRuntimeError("index out of range") : ranges.array[ranges.offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = new Range32.Ptr(); $copy(range_$1, ((m < 0 || m >= ranges.length) ? $throwRuntimeError("index out of range") : ranges.array[ranges.offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = $pkg.Is = function(rangeTab, r) {
		var r16, x, r32;
		r16 = rangeTab.R16;
		if (r16.length > 0 && r <= ((x = r16.length - 1 >> 0, ((x < 0 || x >= r16.length) ? $throwRuntimeError("index out of range") : r16.array[r16.offset + x])).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.length > 0 && r >= (((0 < 0 || 0 >= r32.length) ? $throwRuntimeError("index out of range") : r32.array[r32.offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var r16, off, x, r32;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.length > off && r <= ((x = r16.length - 1 >> 0, ((x < 0 || x >= r16.length) ? $throwRuntimeError("index out of range") : r16.array[r16.offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.length > 0 && r >= (((0 < 0 || 0 >= r32.length) ? $throwRuntimeError("index out of range") : r32.array[r32.offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = $pkg.To = function(_case, r) {
		return to(_case, r, $pkg.CaseRanges);
	};
	ToUpper = $pkg.ToUpper = function(r) {
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - 32 >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	ToLower = $pkg.ToLower = function(r) {
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + 32 >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	SimpleFold = $pkg.SimpleFold = function(r) {
		var lo, hi, _q, m, l;
		lo = 0;
		hi = caseOrbit.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.length) ? $throwRuntimeError("index out of range") : caseOrbit.array[caseOrbit.offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.length && ((((lo < 0 || lo >= caseOrbit.length) ? $throwRuntimeError("index out of range") : caseOrbit.array[caseOrbit.offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.length) ? $throwRuntimeError("index out of range") : caseOrbit.array[caseOrbit.offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.$init = function() {
		RangeTable.init([["R16", "R16", "", ($sliceType(Range16)), ""], ["R32", "R32", "", ($sliceType(Range32)), ""], ["LatinOffset", "LatinOffset", "", $Int, ""]]);
		Range16.init([["Lo", "Lo", "", $Uint16, ""], ["Hi", "Hi", "", $Uint16, ""], ["Stride", "Stride", "", $Uint16, ""]]);
		Range32.init([["Lo", "Lo", "", $Uint32, ""], ["Hi", "Hi", "", $Uint32, ""], ["Stride", "Stride", "", $Uint32, ""]]);
		CaseRange.init([["Lo", "Lo", "", $Uint32, ""], ["Hi", "Hi", "", $Uint32, ""], ["Delta", "Delta", "", d, ""]]);
		d.init($Int32, 3);
		foldPair.init([["From", "From", "", $Uint16, ""], ["To", "To", "", $Uint16, ""]]);
		_C = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1, 31, 1), new Range16.Ptr(127, 159, 1), new Range16.Ptr(173, 1536, 1363), new Range16.Ptr(1537, 1540, 1), new Range16.Ptr(1564, 1757, 193), new Range16.Ptr(1807, 6158, 4351), new Range16.Ptr(8203, 8207, 1), new Range16.Ptr(8234, 8238, 1), new Range16.Ptr(8288, 8292, 1), new Range16.Ptr(8294, 8303, 1), new Range16.Ptr(55296, 63743, 1), new Range16.Ptr(65279, 65529, 250), new Range16.Ptr(65530, 65531, 1)]), new ($sliceType(Range32))([new Range32.Ptr(69821, 119155, 49334), new Range32.Ptr(119156, 119162, 1), new Range32.Ptr(917505, 917536, 31), new Range32.Ptr(917537, 917631, 1), new Range32.Ptr(983040, 1048573, 1), new Range32.Ptr(1048576, 1114109, 1)]), 2);
		_Cc = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1, 31, 1), new Range16.Ptr(127, 159, 1)]), ($sliceType(Range32)).nil, 2);
		_Cf = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(173, 1536, 1363), new Range16.Ptr(1537, 1540, 1), new Range16.Ptr(1564, 1757, 193), new Range16.Ptr(1807, 6158, 4351), new Range16.Ptr(8203, 8207, 1), new Range16.Ptr(8234, 8238, 1), new Range16.Ptr(8288, 8292, 1), new Range16.Ptr(8294, 8303, 1), new Range16.Ptr(65279, 65529, 250), new Range16.Ptr(65530, 65531, 1)]), new ($sliceType(Range32))([new Range32.Ptr(69821, 119155, 49334), new Range32.Ptr(119156, 119162, 1), new Range32.Ptr(917505, 917536, 31), new Range32.Ptr(917537, 917631, 1)]), 0);
		_Co = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(57344, 63743, 1)]), new ($sliceType(Range32))([new Range32.Ptr(983040, 1048573, 1), new Range32.Ptr(1048576, 1114109, 1)]), 0);
		_Cs = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(55296, 57343, 1)]), ($sliceType(Range32)).nil, 0);
		_L = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(97, 122, 1), new Range16.Ptr(170, 181, 11), new Range16.Ptr(186, 192, 6), new Range16.Ptr(193, 214, 1), new Range16.Ptr(216, 246, 1), new Range16.Ptr(248, 705, 1), new Range16.Ptr(710, 721, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(748, 750, 2), new Range16.Ptr(880, 884, 1), new Range16.Ptr(886, 887, 1), new Range16.Ptr(890, 893, 1), new Range16.Ptr(902, 904, 2), new Range16.Ptr(905, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 929, 1), new Range16.Ptr(931, 1013, 1), new Range16.Ptr(1015, 1153, 1), new Range16.Ptr(1162, 1319, 1), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(1369, 1377, 8), new Range16.Ptr(1378, 1415, 1), new Range16.Ptr(1488, 1514, 1), new Range16.Ptr(1520, 1522, 1), new Range16.Ptr(1568, 1610, 1), new Range16.Ptr(1646, 1647, 1), new Range16.Ptr(1649, 1747, 1), new Range16.Ptr(1749, 1765, 16), new Range16.Ptr(1766, 1774, 8), new Range16.Ptr(1775, 1786, 11), new Range16.Ptr(1787, 1788, 1), new Range16.Ptr(1791, 1808, 17), new Range16.Ptr(1810, 1839, 1), new Range16.Ptr(1869, 1957, 1), new Range16.Ptr(1969, 1994, 25), new Range16.Ptr(1995, 2026, 1), new Range16.Ptr(2036, 2037, 1), new Range16.Ptr(2042, 2048, 6), new Range16.Ptr(2049, 2069, 1), new Range16.Ptr(2074, 2084, 10), new Range16.Ptr(2088, 2112, 24), new Range16.Ptr(2113, 2136, 1), new Range16.Ptr(2208, 2210, 2), new Range16.Ptr(2211, 2220, 1), new Range16.Ptr(2308, 2361, 1), new Range16.Ptr(2365, 2384, 19), new Range16.Ptr(2392, 2401, 1), new Range16.Ptr(2417, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2486, 4), new Range16.Ptr(2487, 2489, 1), new Range16.Ptr(2493, 2510, 17), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2529, 1), new Range16.Ptr(2544, 2545, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2674, 20), new Range16.Ptr(2675, 2676, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2749, 2768, 19), new Range16.Ptr(2784, 2785, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2877, 2908, 31), new Range16.Ptr(2909, 2911, 2), new Range16.Ptr(2912, 2913, 1), new Range16.Ptr(2929, 2947, 18), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2974, 2), new Range16.Ptr(2975, 2979, 4), new Range16.Ptr(2980, 2984, 4), new Range16.Ptr(2985, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3024, 3077, 53), new Range16.Ptr(3078, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3160, 27), new Range16.Ptr(3161, 3168, 7), new Range16.Ptr(3169, 3205, 36), new Range16.Ptr(3206, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3261, 3294, 33), new Range16.Ptr(3296, 3297, 1), new Range16.Ptr(3313, 3314, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3406, 17), new Range16.Ptr(3424, 3425, 1), new Range16.Ptr(3450, 3455, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3520, 3), new Range16.Ptr(3521, 3526, 1), new Range16.Ptr(3585, 3632, 1), new Range16.Ptr(3634, 3635, 1), new Range16.Ptr(3648, 3654, 1), new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3719, 3), new Range16.Ptr(3720, 3722, 2), new Range16.Ptr(3725, 3732, 7), new Range16.Ptr(3733, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3751, 2), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3760, 1), new Range16.Ptr(3762, 3763, 1), new Range16.Ptr(3773, 3776, 3), new Range16.Ptr(3777, 3780, 1), new Range16.Ptr(3782, 3804, 22), new Range16.Ptr(3805, 3807, 1), new Range16.Ptr(3840, 3904, 64), new Range16.Ptr(3905, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3976, 3980, 1), new Range16.Ptr(4096, 4138, 1), new Range16.Ptr(4159, 4176, 17), new Range16.Ptr(4177, 4181, 1), new Range16.Ptr(4186, 4189, 1), new Range16.Ptr(4193, 4197, 4), new Range16.Ptr(4198, 4206, 8), new Range16.Ptr(4207, 4208, 1), new Range16.Ptr(4213, 4225, 1), new Range16.Ptr(4238, 4256, 18), new Range16.Ptr(4257, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(4304, 4346, 1), new Range16.Ptr(4348, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4698, 2), new Range16.Ptr(4699, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4802, 2), new Range16.Ptr(4803, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4992, 5007, 1), new Range16.Ptr(5024, 5108, 1), new Range16.Ptr(5121, 5740, 1), new Range16.Ptr(5743, 5759, 1), new Range16.Ptr(5761, 5786, 1), new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5905, 1), new Range16.Ptr(5920, 5937, 1), new Range16.Ptr(5952, 5969, 1), new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6016, 6067, 1), new Range16.Ptr(6103, 6108, 5), new Range16.Ptr(6176, 6263, 1), new Range16.Ptr(6272, 6312, 1), new Range16.Ptr(6314, 6320, 6), new Range16.Ptr(6321, 6389, 1), new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1), new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6593, 6599, 1), new Range16.Ptr(6656, 6678, 1), new Range16.Ptr(6688, 6740, 1), new Range16.Ptr(6823, 6917, 94), new Range16.Ptr(6918, 6963, 1), new Range16.Ptr(6981, 6987, 1), new Range16.Ptr(7043, 7072, 1), new Range16.Ptr(7086, 7087, 1), new Range16.Ptr(7098, 7141, 1), new Range16.Ptr(7168, 7203, 1), new Range16.Ptr(7245, 7247, 1), new Range16.Ptr(7258, 7293, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7409, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(7424, 7615, 1), new Range16.Ptr(7680, 7957, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7968, 8005, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8032, 8061, 1), new Range16.Ptr(8064, 8116, 1), new Range16.Ptr(8118, 8124, 1), new Range16.Ptr(8126, 8130, 4), new Range16.Ptr(8131, 8132, 1), new Range16.Ptr(8134, 8140, 1), new Range16.Ptr(8144, 8147, 1), new Range16.Ptr(8150, 8155, 1), new Range16.Ptr(8160, 8172, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8188, 1), new Range16.Ptr(8305, 8319, 14), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(8450, 8455, 5), new Range16.Ptr(8458, 8467, 1), new Range16.Ptr(8469, 8473, 4), new Range16.Ptr(8474, 8477, 1), new Range16.Ptr(8484, 8490, 2), new Range16.Ptr(8491, 8493, 1), new Range16.Ptr(8495, 8505, 1), new Range16.Ptr(8508, 8511, 1), new Range16.Ptr(8517, 8521, 1), new Range16.Ptr(8526, 8579, 53), new Range16.Ptr(8580, 11264, 2684), new Range16.Ptr(11265, 11310, 1), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11360, 11492, 1), new Range16.Ptr(11499, 11502, 1), new Range16.Ptr(11506, 11507, 1), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11631, 11648, 17), new Range16.Ptr(11649, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(11823, 12293, 470), new Range16.Ptr(12294, 12337, 43), new Range16.Ptr(12338, 12341, 1), new Range16.Ptr(12347, 12348, 1), new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12445, 12447, 1), new Range16.Ptr(12449, 12538, 1), new Range16.Ptr(12540, 12543, 1), new Range16.Ptr(12549, 12589, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12704, 12730, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(40960, 42124, 1), new Range16.Ptr(42192, 42237, 1), new Range16.Ptr(42240, 42508, 1), new Range16.Ptr(42512, 42527, 1), new Range16.Ptr(42538, 42539, 1), new Range16.Ptr(42560, 42606, 1), new Range16.Ptr(42623, 42647, 1), new Range16.Ptr(42656, 42725, 1), new Range16.Ptr(42775, 42783, 1), new Range16.Ptr(42786, 42888, 1), new Range16.Ptr(42891, 42894, 1), new Range16.Ptr(42896, 42899, 1), new Range16.Ptr(42912, 42922, 1), new Range16.Ptr(43000, 43009, 1), new Range16.Ptr(43011, 43013, 1), new Range16.Ptr(43015, 43018, 1), new Range16.Ptr(43020, 43042, 1), new Range16.Ptr(43072, 43123, 1), new Range16.Ptr(43138, 43187, 1), new Range16.Ptr(43250, 43255, 1), new Range16.Ptr(43259, 43274, 15), new Range16.Ptr(43275, 43301, 1), new Range16.Ptr(43312, 43334, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(43396, 43442, 1), new Range16.Ptr(43471, 43520, 49), new Range16.Ptr(43521, 43560, 1), new Range16.Ptr(43584, 43586, 1), new Range16.Ptr(43588, 43595, 1), new Range16.Ptr(43616, 43638, 1), new Range16.Ptr(43642, 43648, 6), new Range16.Ptr(43649, 43695, 1), new Range16.Ptr(43697, 43701, 4), new Range16.Ptr(43702, 43705, 3), new Range16.Ptr(43706, 43709, 1), new Range16.Ptr(43712, 43714, 2), new Range16.Ptr(43739, 43741, 1), new Range16.Ptr(43744, 43754, 1), new Range16.Ptr(43762, 43764, 1), new Range16.Ptr(43777, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1), new Range16.Ptr(43968, 44002, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1), new Range16.Ptr(64256, 64262, 1), new Range16.Ptr(64275, 64279, 1), new Range16.Ptr(64285, 64287, 2), new Range16.Ptr(64288, 64296, 1), new Range16.Ptr(64298, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64320, 2), new Range16.Ptr(64321, 64323, 2), new Range16.Ptr(64324, 64326, 2), new Range16.Ptr(64327, 64433, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65019, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1), new Range16.Ptr(65313, 65338, 1), new Range16.Ptr(65345, 65370, 1), new Range16.Ptr(65382, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1), new Range32.Ptr(66176, 66204, 1), new Range32.Ptr(66208, 66256, 1), new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66352, 66368, 1), new Range32.Ptr(66370, 66377, 1), new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66511, 1), new Range32.Ptr(66560, 66717, 1), new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67594, 2), new Range32.Ptr(67595, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67647, 3), new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67840, 67861, 1), new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67968, 68023, 1), new Range32.Ptr(68030, 68031, 1), new Range32.Ptr(68096, 68112, 16), new Range32.Ptr(68113, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68192, 68220, 1), new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68608, 68680, 1), new Range32.Ptr(69635, 69687, 1), new Range32.Ptr(69763, 69807, 1), new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69891, 69926, 1), new Range32.Ptr(70019, 70066, 1), new Range32.Ptr(70081, 70084, 1), new Range32.Ptr(71296, 71338, 1), new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(77824, 78894, 1), new Range32.Ptr(92160, 92728, 1), new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 94099, 67), new Range32.Ptr(94100, 94111, 1), new Range32.Ptr(110592, 110593, 1), new Range32.Ptr(119808, 119892, 1), new Range32.Ptr(119894, 119964, 1), new Range32.Ptr(119966, 119967, 1), new Range32.Ptr(119970, 119973, 3), new Range32.Ptr(119974, 119977, 3), new Range32.Ptr(119978, 119980, 1), new Range32.Ptr(119982, 119993, 1), new Range32.Ptr(119995, 119997, 2), new Range32.Ptr(119998, 120003, 1), new Range32.Ptr(120005, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120094, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120138, 4), new Range32.Ptr(120139, 120144, 1), new Range32.Ptr(120146, 120485, 1), new Range32.Ptr(120488, 120512, 1), new Range32.Ptr(120514, 120538, 1), new Range32.Ptr(120540, 120570, 1), new Range32.Ptr(120572, 120596, 1), new Range32.Ptr(120598, 120628, 1), new Range32.Ptr(120630, 120654, 1), new Range32.Ptr(120656, 120686, 1), new Range32.Ptr(120688, 120712, 1), new Range32.Ptr(120714, 120744, 1), new Range32.Ptr(120746, 120770, 1), new Range32.Ptr(120772, 120779, 1), new Range32.Ptr(126464, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126503, 3), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126523, 2), new Range32.Ptr(126530, 126535, 5), new Range32.Ptr(126537, 126541, 2), new Range32.Ptr(126542, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126551, 3), new Range32.Ptr(126553, 126561, 2), new Range32.Ptr(126562, 126564, 2), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126592, 2), new Range32.Ptr(126593, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 6);
		_Ll = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(97, 122, 1), new Range16.Ptr(181, 223, 42), new Range16.Ptr(224, 246, 1), new Range16.Ptr(248, 255, 1), new Range16.Ptr(257, 311, 2), new Range16.Ptr(312, 328, 2), new Range16.Ptr(329, 375, 2), new Range16.Ptr(378, 382, 2), new Range16.Ptr(383, 384, 1), new Range16.Ptr(387, 389, 2), new Range16.Ptr(392, 396, 4), new Range16.Ptr(397, 402, 5), new Range16.Ptr(405, 409, 4), new Range16.Ptr(410, 411, 1), new Range16.Ptr(414, 417, 3), new Range16.Ptr(419, 421, 2), new Range16.Ptr(424, 426, 2), new Range16.Ptr(427, 429, 2), new Range16.Ptr(432, 436, 4), new Range16.Ptr(438, 441, 3), new Range16.Ptr(442, 445, 3), new Range16.Ptr(446, 447, 1), new Range16.Ptr(454, 460, 3), new Range16.Ptr(462, 476, 2), new Range16.Ptr(477, 495, 2), new Range16.Ptr(496, 499, 3), new Range16.Ptr(501, 505, 4), new Range16.Ptr(507, 563, 2), new Range16.Ptr(564, 569, 1), new Range16.Ptr(572, 575, 3), new Range16.Ptr(576, 578, 2), new Range16.Ptr(583, 591, 2), new Range16.Ptr(592, 659, 1), new Range16.Ptr(661, 687, 1), new Range16.Ptr(881, 883, 2), new Range16.Ptr(887, 891, 4), new Range16.Ptr(892, 893, 1), new Range16.Ptr(912, 940, 28), new Range16.Ptr(941, 974, 1), new Range16.Ptr(976, 977, 1), new Range16.Ptr(981, 983, 1), new Range16.Ptr(985, 1007, 2), new Range16.Ptr(1008, 1011, 1), new Range16.Ptr(1013, 1019, 3), new Range16.Ptr(1020, 1072, 52), new Range16.Ptr(1073, 1119, 1), new Range16.Ptr(1121, 1153, 2), new Range16.Ptr(1163, 1215, 2), new Range16.Ptr(1218, 1230, 2), new Range16.Ptr(1231, 1319, 2), new Range16.Ptr(1377, 1415, 1), new Range16.Ptr(7424, 7467, 1), new Range16.Ptr(7531, 7543, 1), new Range16.Ptr(7545, 7578, 1), new Range16.Ptr(7681, 7829, 2), new Range16.Ptr(7830, 7837, 1), new Range16.Ptr(7839, 7935, 2), new Range16.Ptr(7936, 7943, 1), new Range16.Ptr(7952, 7957, 1), new Range16.Ptr(7968, 7975, 1), new Range16.Ptr(7984, 7991, 1), new Range16.Ptr(8000, 8005, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8032, 8039, 1), new Range16.Ptr(8048, 8061, 1), new Range16.Ptr(8064, 8071, 1), new Range16.Ptr(8080, 8087, 1), new Range16.Ptr(8096, 8103, 1), new Range16.Ptr(8112, 8116, 1), new Range16.Ptr(8118, 8119, 1), new Range16.Ptr(8126, 8130, 4), new Range16.Ptr(8131, 8132, 1), new Range16.Ptr(8134, 8135, 1), new Range16.Ptr(8144, 8147, 1), new Range16.Ptr(8150, 8151, 1), new Range16.Ptr(8160, 8167, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8183, 1), new Range16.Ptr(8458, 8462, 4), new Range16.Ptr(8463, 8467, 4), new Range16.Ptr(8495, 8505, 5), new Range16.Ptr(8508, 8509, 1), new Range16.Ptr(8518, 8521, 1), new Range16.Ptr(8526, 8580, 54), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11361, 11365, 4), new Range16.Ptr(11366, 11372, 2), new Range16.Ptr(11377, 11379, 2), new Range16.Ptr(11380, 11382, 2), new Range16.Ptr(11383, 11387, 1), new Range16.Ptr(11393, 11491, 2), new Range16.Ptr(11492, 11500, 8), new Range16.Ptr(11502, 11507, 5), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(42561, 42605, 2), new Range16.Ptr(42625, 42647, 2), new Range16.Ptr(42787, 42799, 2), new Range16.Ptr(42800, 42801, 1), new Range16.Ptr(42803, 42865, 2), new Range16.Ptr(42866, 42872, 1), new Range16.Ptr(42874, 42876, 2), new Range16.Ptr(42879, 42887, 2), new Range16.Ptr(42892, 42894, 2), new Range16.Ptr(42897, 42899, 2), new Range16.Ptr(42913, 42921, 2), new Range16.Ptr(43002, 64256, 21254), new Range16.Ptr(64257, 64262, 1), new Range16.Ptr(64275, 64279, 1), new Range16.Ptr(65345, 65370, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66600, 66639, 1), new Range32.Ptr(119834, 119859, 1), new Range32.Ptr(119886, 119892, 1), new Range32.Ptr(119894, 119911, 1), new Range32.Ptr(119938, 119963, 1), new Range32.Ptr(119990, 119993, 1), new Range32.Ptr(119995, 119997, 2), new Range32.Ptr(119998, 120003, 1), new Range32.Ptr(120005, 120015, 1), new Range32.Ptr(120042, 120067, 1), new Range32.Ptr(120094, 120119, 1), new Range32.Ptr(120146, 120171, 1), new Range32.Ptr(120198, 120223, 1), new Range32.Ptr(120250, 120275, 1), new Range32.Ptr(120302, 120327, 1), new Range32.Ptr(120354, 120379, 1), new Range32.Ptr(120406, 120431, 1), new Range32.Ptr(120458, 120485, 1), new Range32.Ptr(120514, 120538, 1), new Range32.Ptr(120540, 120545, 1), new Range32.Ptr(120572, 120596, 1), new Range32.Ptr(120598, 120603, 1), new Range32.Ptr(120630, 120654, 1), new Range32.Ptr(120656, 120661, 1), new Range32.Ptr(120688, 120712, 1), new Range32.Ptr(120714, 120719, 1), new Range32.Ptr(120746, 120770, 1), new Range32.Ptr(120772, 120777, 1), new Range32.Ptr(120779, 120779, 1)]), 4);
		_Lm = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(688, 705, 1), new Range16.Ptr(710, 721, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(748, 750, 2), new Range16.Ptr(884, 890, 6), new Range16.Ptr(1369, 1600, 231), new Range16.Ptr(1765, 1766, 1), new Range16.Ptr(2036, 2037, 1), new Range16.Ptr(2042, 2074, 32), new Range16.Ptr(2084, 2088, 4), new Range16.Ptr(2417, 3654, 1237), new Range16.Ptr(3782, 4348, 566), new Range16.Ptr(6103, 6211, 108), new Range16.Ptr(6823, 7288, 465), new Range16.Ptr(7289, 7293, 1), new Range16.Ptr(7468, 7530, 1), new Range16.Ptr(7544, 7579, 35), new Range16.Ptr(7580, 7615, 1), new Range16.Ptr(8305, 8319, 14), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(11388, 11389, 1), new Range16.Ptr(11631, 11823, 192), new Range16.Ptr(12293, 12337, 44), new Range16.Ptr(12338, 12341, 1), new Range16.Ptr(12347, 12445, 98), new Range16.Ptr(12446, 12540, 94), new Range16.Ptr(12541, 12542, 1), new Range16.Ptr(40981, 42232, 1251), new Range16.Ptr(42233, 42237, 1), new Range16.Ptr(42508, 42623, 115), new Range16.Ptr(42775, 42783, 1), new Range16.Ptr(42864, 42888, 24), new Range16.Ptr(43000, 43001, 1), new Range16.Ptr(43471, 43632, 161), new Range16.Ptr(43741, 43763, 22), new Range16.Ptr(43764, 65392, 21628), new Range16.Ptr(65438, 65439, 1)]), new ($sliceType(Range32))([new Range32.Ptr(94099, 94111, 1)]), 0);
		_Lo = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(170, 186, 16), new Range16.Ptr(443, 448, 5), new Range16.Ptr(449, 451, 1), new Range16.Ptr(660, 1488, 828), new Range16.Ptr(1489, 1514, 1), new Range16.Ptr(1520, 1522, 1), new Range16.Ptr(1568, 1599, 1), new Range16.Ptr(1601, 1610, 1), new Range16.Ptr(1646, 1647, 1), new Range16.Ptr(1649, 1747, 1), new Range16.Ptr(1749, 1774, 25), new Range16.Ptr(1775, 1786, 11), new Range16.Ptr(1787, 1788, 1), new Range16.Ptr(1791, 1808, 17), new Range16.Ptr(1810, 1839, 1), new Range16.Ptr(1869, 1957, 1), new Range16.Ptr(1969, 1994, 25), new Range16.Ptr(1995, 2026, 1), new Range16.Ptr(2048, 2069, 1), new Range16.Ptr(2112, 2136, 1), new Range16.Ptr(2208, 2210, 2), new Range16.Ptr(2211, 2220, 1), new Range16.Ptr(2308, 2361, 1), new Range16.Ptr(2365, 2384, 19), new Range16.Ptr(2392, 2401, 1), new Range16.Ptr(2418, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2486, 4), new Range16.Ptr(2487, 2489, 1), new Range16.Ptr(2493, 2510, 17), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2529, 1), new Range16.Ptr(2544, 2545, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2674, 20), new Range16.Ptr(2675, 2676, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2749, 2768, 19), new Range16.Ptr(2784, 2785, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2877, 2908, 31), new Range16.Ptr(2909, 2911, 2), new Range16.Ptr(2912, 2913, 1), new Range16.Ptr(2929, 2947, 18), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2974, 2), new Range16.Ptr(2975, 2979, 4), new Range16.Ptr(2980, 2984, 4), new Range16.Ptr(2985, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3024, 3077, 53), new Range16.Ptr(3078, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3160, 27), new Range16.Ptr(3161, 3168, 7), new Range16.Ptr(3169, 3205, 36), new Range16.Ptr(3206, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3261, 3294, 33), new Range16.Ptr(3296, 3297, 1), new Range16.Ptr(3313, 3314, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3406, 17), new Range16.Ptr(3424, 3425, 1), new Range16.Ptr(3450, 3455, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3520, 3), new Range16.Ptr(3521, 3526, 1), new Range16.Ptr(3585, 3632, 1), new Range16.Ptr(3634, 3635, 1), new Range16.Ptr(3648, 3653, 1), new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3719, 3), new Range16.Ptr(3720, 3722, 2), new Range16.Ptr(3725, 3732, 7), new Range16.Ptr(3733, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3751, 2), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3760, 1), new Range16.Ptr(3762, 3763, 1), new Range16.Ptr(3773, 3776, 3), new Range16.Ptr(3777, 3780, 1), new Range16.Ptr(3804, 3807, 1), new Range16.Ptr(3840, 3904, 64), new Range16.Ptr(3905, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3976, 3980, 1), new Range16.Ptr(4096, 4138, 1), new Range16.Ptr(4159, 4176, 17), new Range16.Ptr(4177, 4181, 1), new Range16.Ptr(4186, 4189, 1), new Range16.Ptr(4193, 4197, 4), new Range16.Ptr(4198, 4206, 8), new Range16.Ptr(4207, 4208, 1), new Range16.Ptr(4213, 4225, 1), new Range16.Ptr(4238, 4304, 66), new Range16.Ptr(4305, 4346, 1), new Range16.Ptr(4349, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4698, 2), new Range16.Ptr(4699, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4802, 2), new Range16.Ptr(4803, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4992, 5007, 1), new Range16.Ptr(5024, 5108, 1), new Range16.Ptr(5121, 5740, 1), new Range16.Ptr(5743, 5759, 1), new Range16.Ptr(5761, 5786, 1), new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5905, 1), new Range16.Ptr(5920, 5937, 1), new Range16.Ptr(5952, 5969, 1), new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6016, 6067, 1), new Range16.Ptr(6108, 6176, 68), new Range16.Ptr(6177, 6210, 1), new Range16.Ptr(6212, 6263, 1), new Range16.Ptr(6272, 6312, 1), new Range16.Ptr(6314, 6320, 6), new Range16.Ptr(6321, 6389, 1), new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1), new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6593, 6599, 1), new Range16.Ptr(6656, 6678, 1), new Range16.Ptr(6688, 6740, 1), new Range16.Ptr(6917, 6963, 1), new Range16.Ptr(6981, 6987, 1), new Range16.Ptr(7043, 7072, 1), new Range16.Ptr(7086, 7087, 1), new Range16.Ptr(7098, 7141, 1), new Range16.Ptr(7168, 7203, 1), new Range16.Ptr(7245, 7247, 1), new Range16.Ptr(7258, 7287, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7409, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(8501, 8504, 1), new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11648, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(12294, 12348, 54), new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12447, 12449, 2), new Range16.Ptr(12450, 12538, 1), new Range16.Ptr(12543, 12549, 6), new Range16.Ptr(12550, 12589, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12704, 12730, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(40960, 40980, 1), new Range16.Ptr(40982, 42124, 1), new Range16.Ptr(42192, 42231, 1), new Range16.Ptr(42240, 42507, 1), new Range16.Ptr(42512, 42527, 1), new Range16.Ptr(42538, 42539, 1), new Range16.Ptr(42606, 42656, 50), new Range16.Ptr(42657, 42725, 1), new Range16.Ptr(43003, 43009, 1), new Range16.Ptr(43011, 43013, 1), new Range16.Ptr(43015, 43018, 1), new Range16.Ptr(43020, 43042, 1), new Range16.Ptr(43072, 43123, 1), new Range16.Ptr(43138, 43187, 1), new Range16.Ptr(43250, 43255, 1), new Range16.Ptr(43259, 43274, 15), new Range16.Ptr(43275, 43301, 1), new Range16.Ptr(43312, 43334, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(43396, 43442, 1), new Range16.Ptr(43520, 43560, 1), new Range16.Ptr(43584, 43586, 1), new Range16.Ptr(43588, 43595, 1), new Range16.Ptr(43616, 43631, 1), new Range16.Ptr(43633, 43638, 1), new Range16.Ptr(43642, 43648, 6), new Range16.Ptr(43649, 43695, 1), new Range16.Ptr(43697, 43701, 4), new Range16.Ptr(43702, 43705, 3), new Range16.Ptr(43706, 43709, 1), new Range16.Ptr(43712, 43714, 2), new Range16.Ptr(43739, 43740, 1), new Range16.Ptr(43744, 43754, 1), new Range16.Ptr(43762, 43777, 15), new Range16.Ptr(43778, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1), new Range16.Ptr(43968, 44002, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1), new Range16.Ptr(64285, 64287, 2), new Range16.Ptr(64288, 64296, 1), new Range16.Ptr(64298, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64320, 2), new Range16.Ptr(64321, 64323, 2), new Range16.Ptr(64324, 64326, 2), new Range16.Ptr(64327, 64433, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65019, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1), new Range16.Ptr(65382, 65391, 1), new Range16.Ptr(65393, 65437, 1), new Range16.Ptr(65440, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1), new Range32.Ptr(66176, 66204, 1), new Range32.Ptr(66208, 66256, 1), new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66352, 66368, 1), new Range32.Ptr(66370, 66377, 1), new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66511, 1), new Range32.Ptr(66640, 66717, 1), new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67594, 2), new Range32.Ptr(67595, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67647, 3), new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67840, 67861, 1), new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67968, 68023, 1), new Range32.Ptr(68030, 68031, 1), new Range32.Ptr(68096, 68112, 16), new Range32.Ptr(68113, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68192, 68220, 1), new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68608, 68680, 1), new Range32.Ptr(69635, 69687, 1), new Range32.Ptr(69763, 69807, 1), new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69891, 69926, 1), new Range32.Ptr(70019, 70066, 1), new Range32.Ptr(70081, 70084, 1), new Range32.Ptr(71296, 71338, 1), new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(77824, 78894, 1), new Range32.Ptr(92160, 92728, 1), new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 110592, 16560), new Range32.Ptr(110593, 126464, 15871), new Range32.Ptr(126465, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126503, 3), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126523, 2), new Range32.Ptr(126530, 126535, 5), new Range32.Ptr(126537, 126541, 2), new Range32.Ptr(126542, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126551, 3), new Range32.Ptr(126553, 126561, 2), new Range32.Ptr(126562, 126564, 2), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126592, 2), new Range32.Ptr(126593, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 1);
		_Lt = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(453, 459, 3), new Range16.Ptr(498, 8072, 7574), new Range16.Ptr(8073, 8079, 1), new Range16.Ptr(8088, 8095, 1), new Range16.Ptr(8104, 8111, 1), new Range16.Ptr(8124, 8140, 16), new Range16.Ptr(8188, 8188, 1)]), ($sliceType(Range32)).nil, 0);
		_Lu = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(192, 214, 1), new Range16.Ptr(216, 222, 1), new Range16.Ptr(256, 310, 2), new Range16.Ptr(313, 327, 2), new Range16.Ptr(330, 376, 2), new Range16.Ptr(377, 381, 2), new Range16.Ptr(385, 386, 1), new Range16.Ptr(388, 390, 2), new Range16.Ptr(391, 393, 2), new Range16.Ptr(394, 395, 1), new Range16.Ptr(398, 401, 1), new Range16.Ptr(403, 404, 1), new Range16.Ptr(406, 408, 1), new Range16.Ptr(412, 413, 1), new Range16.Ptr(415, 416, 1), new Range16.Ptr(418, 422, 2), new Range16.Ptr(423, 425, 2), new Range16.Ptr(428, 430, 2), new Range16.Ptr(431, 433, 2), new Range16.Ptr(434, 435, 1), new Range16.Ptr(437, 439, 2), new Range16.Ptr(440, 444, 4), new Range16.Ptr(452, 461, 3), new Range16.Ptr(463, 475, 2), new Range16.Ptr(478, 494, 2), new Range16.Ptr(497, 500, 3), new Range16.Ptr(502, 504, 1), new Range16.Ptr(506, 562, 2), new Range16.Ptr(570, 571, 1), new Range16.Ptr(573, 574, 1), new Range16.Ptr(577, 579, 2), new Range16.Ptr(580, 582, 1), new Range16.Ptr(584, 590, 2), new Range16.Ptr(880, 882, 2), new Range16.Ptr(886, 902, 16), new Range16.Ptr(904, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 913, 2), new Range16.Ptr(914, 929, 1), new Range16.Ptr(931, 939, 1), new Range16.Ptr(975, 978, 3), new Range16.Ptr(979, 980, 1), new Range16.Ptr(984, 1006, 2), new Range16.Ptr(1012, 1015, 3), new Range16.Ptr(1017, 1018, 1), new Range16.Ptr(1021, 1071, 1), new Range16.Ptr(1120, 1152, 2), new Range16.Ptr(1162, 1216, 2), new Range16.Ptr(1217, 1229, 2), new Range16.Ptr(1232, 1318, 2), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(4256, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(7680, 7828, 2), new Range16.Ptr(7838, 7934, 2), new Range16.Ptr(7944, 7951, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7976, 7983, 1), new Range16.Ptr(7992, 7999, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8040, 8047, 1), new Range16.Ptr(8120, 8123, 1), new Range16.Ptr(8136, 8139, 1), new Range16.Ptr(8152, 8155, 1), new Range16.Ptr(8168, 8172, 1), new Range16.Ptr(8184, 8187, 1), new Range16.Ptr(8450, 8455, 5), new Range16.Ptr(8459, 8461, 1), new Range16.Ptr(8464, 8466, 1), new Range16.Ptr(8469, 8473, 4), new Range16.Ptr(8474, 8477, 1), new Range16.Ptr(8484, 8490, 2), new Range16.Ptr(8491, 8493, 1), new Range16.Ptr(8496, 8499, 1), new Range16.Ptr(8510, 8511, 1), new Range16.Ptr(8517, 8579, 62), new Range16.Ptr(11264, 11310, 1), new Range16.Ptr(11360, 11362, 2), new Range16.Ptr(11363, 11364, 1), new Range16.Ptr(11367, 11373, 2), new Range16.Ptr(11374, 11376, 1), new Range16.Ptr(11378, 11381, 3), new Range16.Ptr(11390, 11392, 1), new Range16.Ptr(11394, 11490, 2), new Range16.Ptr(11499, 11501, 2), new Range16.Ptr(11506, 42560, 31054), new Range16.Ptr(42562, 42604, 2), new Range16.Ptr(42624, 42646, 2), new Range16.Ptr(42786, 42798, 2), new Range16.Ptr(42802, 42862, 2), new Range16.Ptr(42873, 42877, 2), new Range16.Ptr(42878, 42886, 2), new Range16.Ptr(42891, 42893, 2), new Range16.Ptr(42896, 42898, 2), new Range16.Ptr(42912, 42922, 2), new Range16.Ptr(65313, 65338, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66560, 66599, 1), new Range32.Ptr(119808, 119833, 1), new Range32.Ptr(119860, 119885, 1), new Range32.Ptr(119912, 119937, 1), new Range32.Ptr(119964, 119966, 2), new Range32.Ptr(119967, 119973, 3), new Range32.Ptr(119974, 119977, 3), new Range32.Ptr(119978, 119980, 1), new Range32.Ptr(119982, 119989, 1), new Range32.Ptr(120016, 120041, 1), new Range32.Ptr(120068, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120120, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120138, 4), new Range32.Ptr(120139, 120144, 1), new Range32.Ptr(120172, 120197, 1), new Range32.Ptr(120224, 120249, 1), new Range32.Ptr(120276, 120301, 1), new Range32.Ptr(120328, 120353, 1), new Range32.Ptr(120380, 120405, 1), new Range32.Ptr(120432, 120457, 1), new Range32.Ptr(120488, 120512, 1), new Range32.Ptr(120546, 120570, 1), new Range32.Ptr(120604, 120628, 1), new Range32.Ptr(120662, 120686, 1), new Range32.Ptr(120720, 120744, 1), new Range32.Ptr(120778, 120778, 1)]), 3);
		_M = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(768, 879, 1), new Range16.Ptr(1155, 1161, 1), new Range16.Ptr(1425, 1469, 1), new Range16.Ptr(1471, 1473, 2), new Range16.Ptr(1474, 1476, 2), new Range16.Ptr(1477, 1479, 2), new Range16.Ptr(1552, 1562, 1), new Range16.Ptr(1611, 1631, 1), new Range16.Ptr(1648, 1750, 102), new Range16.Ptr(1751, 1756, 1), new Range16.Ptr(1759, 1764, 1), new Range16.Ptr(1767, 1768, 1), new Range16.Ptr(1770, 1773, 1), new Range16.Ptr(1809, 1840, 31), new Range16.Ptr(1841, 1866, 1), new Range16.Ptr(1958, 1968, 1), new Range16.Ptr(2027, 2035, 1), new Range16.Ptr(2070, 2073, 1), new Range16.Ptr(2075, 2083, 1), new Range16.Ptr(2085, 2087, 1), new Range16.Ptr(2089, 2093, 1), new Range16.Ptr(2137, 2139, 1), new Range16.Ptr(2276, 2302, 1), new Range16.Ptr(2304, 2307, 1), new Range16.Ptr(2362, 2364, 1), new Range16.Ptr(2366, 2383, 1), new Range16.Ptr(2385, 2391, 1), new Range16.Ptr(2402, 2403, 1), new Range16.Ptr(2433, 2435, 1), new Range16.Ptr(2492, 2494, 2), new Range16.Ptr(2495, 2500, 1), new Range16.Ptr(2503, 2504, 1), new Range16.Ptr(2507, 2509, 1), new Range16.Ptr(2519, 2530, 11), new Range16.Ptr(2531, 2561, 30), new Range16.Ptr(2562, 2563, 1), new Range16.Ptr(2620, 2622, 2), new Range16.Ptr(2623, 2626, 1), new Range16.Ptr(2631, 2632, 1), new Range16.Ptr(2635, 2637, 1), new Range16.Ptr(2641, 2672, 31), new Range16.Ptr(2673, 2677, 4), new Range16.Ptr(2689, 2691, 1), new Range16.Ptr(2748, 2750, 2), new Range16.Ptr(2751, 2757, 1), new Range16.Ptr(2759, 2761, 1), new Range16.Ptr(2763, 2765, 1), new Range16.Ptr(2786, 2787, 1), new Range16.Ptr(2817, 2819, 1), new Range16.Ptr(2876, 2878, 2), new Range16.Ptr(2879, 2884, 1), new Range16.Ptr(2887, 2888, 1), new Range16.Ptr(2891, 2893, 1), new Range16.Ptr(2902, 2903, 1), new Range16.Ptr(2914, 2915, 1), new Range16.Ptr(2946, 3006, 60), new Range16.Ptr(3007, 3010, 1), new Range16.Ptr(3014, 3016, 1), new Range16.Ptr(3018, 3021, 1), new Range16.Ptr(3031, 3073, 42), new Range16.Ptr(3074, 3075, 1), new Range16.Ptr(3134, 3140, 1), new Range16.Ptr(3142, 3144, 1), new Range16.Ptr(3146, 3149, 1), new Range16.Ptr(3157, 3158, 1), new Range16.Ptr(3170, 3171, 1), new Range16.Ptr(3202, 3203, 1), new Range16.Ptr(3260, 3262, 2), new Range16.Ptr(3263, 3268, 1), new Range16.Ptr(3270, 3272, 1), new Range16.Ptr(3274, 3277, 1), new Range16.Ptr(3285, 3286, 1), new Range16.Ptr(3298, 3299, 1), new Range16.Ptr(3330, 3331, 1), new Range16.Ptr(3390, 3396, 1), new Range16.Ptr(3398, 3400, 1), new Range16.Ptr(3402, 3405, 1), new Range16.Ptr(3415, 3426, 11), new Range16.Ptr(3427, 3458, 31), new Range16.Ptr(3459, 3530, 71), new Range16.Ptr(3535, 3540, 1), new Range16.Ptr(3542, 3544, 2), new Range16.Ptr(3545, 3551, 1), new Range16.Ptr(3570, 3571, 1), new Range16.Ptr(3633, 3636, 3), new Range16.Ptr(3637, 3642, 1), new Range16.Ptr(3655, 3662, 1), new Range16.Ptr(3761, 3764, 3), new Range16.Ptr(3765, 3769, 1), new Range16.Ptr(3771, 3772, 1), new Range16.Ptr(3784, 3789, 1), new Range16.Ptr(3864, 3865, 1), new Range16.Ptr(3893, 3897, 2), new Range16.Ptr(3902, 3903, 1), new Range16.Ptr(3953, 3972, 1), new Range16.Ptr(3974, 3975, 1), new Range16.Ptr(3981, 3991, 1), new Range16.Ptr(3993, 4028, 1), new Range16.Ptr(4038, 4139, 101), new Range16.Ptr(4140, 4158, 1), new Range16.Ptr(4182, 4185, 1), new Range16.Ptr(4190, 4192, 1), new Range16.Ptr(4194, 4196, 1), new Range16.Ptr(4199, 4205, 1), new Range16.Ptr(4209, 4212, 1), new Range16.Ptr(4226, 4237, 1), new Range16.Ptr(4239, 4250, 11), new Range16.Ptr(4251, 4253, 1), new Range16.Ptr(4957, 4959, 1), new Range16.Ptr(5906, 5908, 1), new Range16.Ptr(5938, 5940, 1), new Range16.Ptr(5970, 5971, 1), new Range16.Ptr(6002, 6003, 1), new Range16.Ptr(6068, 6099, 1), new Range16.Ptr(6109, 6155, 46), new Range16.Ptr(6156, 6157, 1), new Range16.Ptr(6313, 6432, 119), new Range16.Ptr(6433, 6443, 1), new Range16.Ptr(6448, 6459, 1), new Range16.Ptr(6576, 6592, 1), new Range16.Ptr(6600, 6601, 1), new Range16.Ptr(6679, 6683, 1), new Range16.Ptr(6741, 6750, 1), new Range16.Ptr(6752, 6780, 1), new Range16.Ptr(6783, 6912, 129), new Range16.Ptr(6913, 6916, 1), new Range16.Ptr(6964, 6980, 1), new Range16.Ptr(7019, 7027, 1), new Range16.Ptr(7040, 7042, 1), new Range16.Ptr(7073, 7085, 1), new Range16.Ptr(7142, 7155, 1), new Range16.Ptr(7204, 7223, 1), new Range16.Ptr(7376, 7378, 1), new Range16.Ptr(7380, 7400, 1), new Range16.Ptr(7405, 7410, 5), new Range16.Ptr(7411, 7412, 1), new Range16.Ptr(7616, 7654, 1), new Range16.Ptr(7676, 7679, 1), new Range16.Ptr(8400, 8432, 1), new Range16.Ptr(11503, 11505, 1), new Range16.Ptr(11647, 11744, 97), new Range16.Ptr(11745, 11775, 1), new Range16.Ptr(12330, 12335, 1), new Range16.Ptr(12441, 12442, 1), new Range16.Ptr(42607, 42610, 1), new Range16.Ptr(42612, 42621, 1), new Range16.Ptr(42655, 42736, 81), new Range16.Ptr(42737, 43010, 273), new Range16.Ptr(43014, 43019, 5), new Range16.Ptr(43043, 43047, 1), new Range16.Ptr(43136, 43137, 1), new Range16.Ptr(43188, 43204, 1), new Range16.Ptr(43232, 43249, 1), new Range16.Ptr(43302, 43309, 1), new Range16.Ptr(43335, 43347, 1), new Range16.Ptr(43392, 43395, 1), new Range16.Ptr(43443, 43456, 1), new Range16.Ptr(43561, 43574, 1), new Range16.Ptr(43587, 43596, 9), new Range16.Ptr(43597, 43643, 46), new Range16.Ptr(43696, 43698, 2), new Range16.Ptr(43699, 43700, 1), new Range16.Ptr(43703, 43704, 1), new Range16.Ptr(43710, 43711, 1), new Range16.Ptr(43713, 43755, 42), new Range16.Ptr(43756, 43759, 1), new Range16.Ptr(43765, 43766, 1), new Range16.Ptr(44003, 44010, 1), new Range16.Ptr(44012, 44013, 1), new Range16.Ptr(64286, 65024, 738), new Range16.Ptr(65025, 65039, 1), new Range16.Ptr(65056, 65062, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66045, 68097, 2052), new Range32.Ptr(68098, 68099, 1), new Range32.Ptr(68101, 68102, 1), new Range32.Ptr(68108, 68111, 1), new Range32.Ptr(68152, 68154, 1), new Range32.Ptr(68159, 69632, 1473), new Range32.Ptr(69633, 69634, 1), new Range32.Ptr(69688, 69702, 1), new Range32.Ptr(69760, 69762, 1), new Range32.Ptr(69808, 69818, 1), new Range32.Ptr(69888, 69890, 1), new Range32.Ptr(69927, 69940, 1), new Range32.Ptr(70016, 70018, 1), new Range32.Ptr(70067, 70080, 1), new Range32.Ptr(71339, 71351, 1), new Range32.Ptr(94033, 94078, 1), new Range32.Ptr(94095, 94098, 1), new Range32.Ptr(119141, 119145, 1), new Range32.Ptr(119149, 119154, 1), new Range32.Ptr(119163, 119170, 1), new Range32.Ptr(119173, 119179, 1), new Range32.Ptr(119210, 119213, 1), new Range32.Ptr(119362, 119364, 1), new Range32.Ptr(917760, 917999, 1)]), 0);
		_Mc = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2307, 2363, 56), new Range16.Ptr(2366, 2368, 1), new Range16.Ptr(2377, 2380, 1), new Range16.Ptr(2382, 2383, 1), new Range16.Ptr(2434, 2435, 1), new Range16.Ptr(2494, 2496, 1), new Range16.Ptr(2503, 2504, 1), new Range16.Ptr(2507, 2508, 1), new Range16.Ptr(2519, 2563, 44), new Range16.Ptr(2622, 2624, 1), new Range16.Ptr(2691, 2750, 59), new Range16.Ptr(2751, 2752, 1), new Range16.Ptr(2761, 2763, 2), new Range16.Ptr(2764, 2818, 54), new Range16.Ptr(2819, 2878, 59), new Range16.Ptr(2880, 2887, 7), new Range16.Ptr(2888, 2891, 3), new Range16.Ptr(2892, 2903, 11), new Range16.Ptr(3006, 3007, 1), new Range16.Ptr(3009, 3010, 1), new Range16.Ptr(3014, 3016, 1), new Range16.Ptr(3018, 3020, 1), new Range16.Ptr(3031, 3073, 42), new Range16.Ptr(3074, 3075, 1), new Range16.Ptr(3137, 3140, 1), new Range16.Ptr(3202, 3203, 1), new Range16.Ptr(3262, 3264, 2), new Range16.Ptr(3265, 3268, 1), new Range16.Ptr(3271, 3272, 1), new Range16.Ptr(3274, 3275, 1), new Range16.Ptr(3285, 3286, 1), new Range16.Ptr(3330, 3331, 1), new Range16.Ptr(3390, 3392, 1), new Range16.Ptr(3398, 3400, 1), new Range16.Ptr(3402, 3404, 1), new Range16.Ptr(3415, 3458, 43), new Range16.Ptr(3459, 3535, 76), new Range16.Ptr(3536, 3537, 1), new Range16.Ptr(3544, 3551, 1), new Range16.Ptr(3570, 3571, 1), new Range16.Ptr(3902, 3903, 1), new Range16.Ptr(3967, 4139, 172), new Range16.Ptr(4140, 4145, 5), new Range16.Ptr(4152, 4155, 3), new Range16.Ptr(4156, 4182, 26), new Range16.Ptr(4183, 4194, 11), new Range16.Ptr(4195, 4196, 1), new Range16.Ptr(4199, 4205, 1), new Range16.Ptr(4227, 4228, 1), new Range16.Ptr(4231, 4236, 1), new Range16.Ptr(4239, 4250, 11), new Range16.Ptr(4251, 4252, 1), new Range16.Ptr(6070, 6078, 8), new Range16.Ptr(6079, 6085, 1), new Range16.Ptr(6087, 6088, 1), new Range16.Ptr(6435, 6438, 1), new Range16.Ptr(6441, 6443, 1), new Range16.Ptr(6448, 6449, 1), new Range16.Ptr(6451, 6456, 1), new Range16.Ptr(6576, 6592, 1), new Range16.Ptr(6600, 6601, 1), new Range16.Ptr(6681, 6682, 1), new Range16.Ptr(6741, 6743, 2), new Range16.Ptr(6753, 6755, 2), new Range16.Ptr(6756, 6765, 9), new Range16.Ptr(6766, 6770, 1), new Range16.Ptr(6916, 6965, 49), new Range16.Ptr(6971, 6973, 2), new Range16.Ptr(6974, 6977, 1), new Range16.Ptr(6979, 6980, 1), new Range16.Ptr(7042, 7073, 31), new Range16.Ptr(7078, 7079, 1), new Range16.Ptr(7082, 7084, 2), new Range16.Ptr(7085, 7143, 58), new Range16.Ptr(7146, 7148, 1), new Range16.Ptr(7150, 7154, 4), new Range16.Ptr(7155, 7204, 49), new Range16.Ptr(7205, 7211, 1), new Range16.Ptr(7220, 7221, 1), new Range16.Ptr(7393, 7410, 17), new Range16.Ptr(7411, 12334, 4923), new Range16.Ptr(12335, 43043, 30708), new Range16.Ptr(43044, 43047, 3), new Range16.Ptr(43136, 43137, 1), new Range16.Ptr(43188, 43203, 1), new Range16.Ptr(43346, 43347, 1), new Range16.Ptr(43395, 43444, 49), new Range16.Ptr(43445, 43450, 5), new Range16.Ptr(43451, 43453, 2), new Range16.Ptr(43454, 43456, 1), new Range16.Ptr(43567, 43568, 1), new Range16.Ptr(43571, 43572, 1), new Range16.Ptr(43597, 43643, 46), new Range16.Ptr(43755, 43758, 3), new Range16.Ptr(43759, 43765, 6), new Range16.Ptr(44003, 44004, 1), new Range16.Ptr(44006, 44007, 1), new Range16.Ptr(44009, 44010, 1), new Range16.Ptr(44012, 44012, 1)]), new ($sliceType(Range32))([new Range32.Ptr(69632, 69632, 1), new Range32.Ptr(69634, 69762, 128), new Range32.Ptr(69808, 69810, 1), new Range32.Ptr(69815, 69816, 1), new Range32.Ptr(69932, 70018, 86), new Range32.Ptr(70067, 70069, 1), new Range32.Ptr(70079, 70080, 1), new Range32.Ptr(71340, 71342, 2), new Range32.Ptr(71343, 71350, 7), new Range32.Ptr(94033, 94078, 1), new Range32.Ptr(119141, 119142, 1), new Range32.Ptr(119149, 119154, 1)]), 0);
		_Me = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1160, 1161, 1), new Range16.Ptr(8413, 8416, 1), new Range16.Ptr(8418, 8420, 1), new Range16.Ptr(42608, 42610, 1)]), ($sliceType(Range32)).nil, 0);
		_Mn = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(768, 879, 1), new Range16.Ptr(1155, 1159, 1), new Range16.Ptr(1425, 1469, 1), new Range16.Ptr(1471, 1473, 2), new Range16.Ptr(1474, 1476, 2), new Range16.Ptr(1477, 1479, 2), new Range16.Ptr(1552, 1562, 1), new Range16.Ptr(1611, 1631, 1), new Range16.Ptr(1648, 1750, 102), new Range16.Ptr(1751, 1756, 1), new Range16.Ptr(1759, 1764, 1), new Range16.Ptr(1767, 1768, 1), new Range16.Ptr(1770, 1773, 1), new Range16.Ptr(1809, 1840, 31), new Range16.Ptr(1841, 1866, 1), new Range16.Ptr(1958, 1968, 1), new Range16.Ptr(2027, 2035, 1), new Range16.Ptr(2070, 2073, 1), new Range16.Ptr(2075, 2083, 1), new Range16.Ptr(2085, 2087, 1), new Range16.Ptr(2089, 2093, 1), new Range16.Ptr(2137, 2139, 1), new Range16.Ptr(2276, 2302, 1), new Range16.Ptr(2304, 2306, 1), new Range16.Ptr(2362, 2364, 2), new Range16.Ptr(2369, 2376, 1), new Range16.Ptr(2381, 2385, 4), new Range16.Ptr(2386, 2391, 1), new Range16.Ptr(2402, 2403, 1), new Range16.Ptr(2433, 2492, 59), new Range16.Ptr(2497, 2500, 1), new Range16.Ptr(2509, 2530, 21), new Range16.Ptr(2531, 2561, 30), new Range16.Ptr(2562, 2620, 58), new Range16.Ptr(2625, 2626, 1), new Range16.Ptr(2631, 2632, 1), new Range16.Ptr(2635, 2637, 1), new Range16.Ptr(2641, 2672, 31), new Range16.Ptr(2673, 2677, 4), new Range16.Ptr(2689, 2690, 1), new Range16.Ptr(2748, 2753, 5), new Range16.Ptr(2754, 2757, 1), new Range16.Ptr(2759, 2760, 1), new Range16.Ptr(2765, 2786, 21), new Range16.Ptr(2787, 2817, 30), new Range16.Ptr(2876, 2879, 3), new Range16.Ptr(2881, 2884, 1), new Range16.Ptr(2893, 2902, 9), new Range16.Ptr(2914, 2915, 1), new Range16.Ptr(2946, 3008, 62), new Range16.Ptr(3021, 3134, 113), new Range16.Ptr(3135, 3136, 1), new Range16.Ptr(3142, 3144, 1), new Range16.Ptr(3146, 3149, 1), new Range16.Ptr(3157, 3158, 1), new Range16.Ptr(3170, 3171, 1), new Range16.Ptr(3260, 3263, 3), new Range16.Ptr(3270, 3276, 6), new Range16.Ptr(3277, 3298, 21), new Range16.Ptr(3299, 3393, 94), new Range16.Ptr(3394, 3396, 1), new Range16.Ptr(3405, 3426, 21), new Range16.Ptr(3427, 3530, 103), new Range16.Ptr(3538, 3540, 1), new Range16.Ptr(3542, 3633, 91), new Range16.Ptr(3636, 3642, 1), new Range16.Ptr(3655, 3662, 1), new Range16.Ptr(3761, 3764, 3), new Range16.Ptr(3765, 3769, 1), new Range16.Ptr(3771, 3772, 1), new Range16.Ptr(3784, 3789, 1), new Range16.Ptr(3864, 3865, 1), new Range16.Ptr(3893, 3897, 2), new Range16.Ptr(3953, 3966, 1), new Range16.Ptr(3968, 3972, 1), new Range16.Ptr(3974, 3975, 1), new Range16.Ptr(3981, 3991, 1), new Range16.Ptr(3993, 4028, 1), new Range16.Ptr(4038, 4141, 103), new Range16.Ptr(4142, 4144, 1), new Range16.Ptr(4146, 4151, 1), new Range16.Ptr(4153, 4154, 1), new Range16.Ptr(4157, 4158, 1), new Range16.Ptr(4184, 4185, 1), new Range16.Ptr(4190, 4192, 1), new Range16.Ptr(4209, 4212, 1), new Range16.Ptr(4226, 4229, 3), new Range16.Ptr(4230, 4237, 7), new Range16.Ptr(4253, 4957, 704), new Range16.Ptr(4958, 4959, 1), new Range16.Ptr(5906, 5908, 1), new Range16.Ptr(5938, 5940, 1), new Range16.Ptr(5970, 5971, 1), new Range16.Ptr(6002, 6003, 1), new Range16.Ptr(6068, 6069, 1), new Range16.Ptr(6071, 6077, 1), new Range16.Ptr(6086, 6089, 3), new Range16.Ptr(6090, 6099, 1), new Range16.Ptr(6109, 6155, 46), new Range16.Ptr(6156, 6157, 1), new Range16.Ptr(6313, 6432, 119), new Range16.Ptr(6433, 6434, 1), new Range16.Ptr(6439, 6440, 1), new Range16.Ptr(6450, 6457, 7), new Range16.Ptr(6458, 6459, 1), new Range16.Ptr(6679, 6680, 1), new Range16.Ptr(6683, 6742, 59), new Range16.Ptr(6744, 6750, 1), new Range16.Ptr(6752, 6754, 2), new Range16.Ptr(6757, 6764, 1), new Range16.Ptr(6771, 6780, 1), new Range16.Ptr(6783, 6912, 129), new Range16.Ptr(6913, 6915, 1), new Range16.Ptr(6964, 6966, 2), new Range16.Ptr(6967, 6970, 1), new Range16.Ptr(6972, 6978, 6), new Range16.Ptr(7019, 7027, 1), new Range16.Ptr(7040, 7041, 1), new Range16.Ptr(7074, 7077, 1), new Range16.Ptr(7080, 7081, 1), new Range16.Ptr(7083, 7142, 59), new Range16.Ptr(7144, 7145, 1), new Range16.Ptr(7149, 7151, 2), new Range16.Ptr(7152, 7153, 1), new Range16.Ptr(7212, 7219, 1), new Range16.Ptr(7222, 7223, 1), new Range16.Ptr(7376, 7378, 1), new Range16.Ptr(7380, 7392, 1), new Range16.Ptr(7394, 7400, 1), new Range16.Ptr(7405, 7412, 7), new Range16.Ptr(7616, 7654, 1), new Range16.Ptr(7676, 7679, 1), new Range16.Ptr(8400, 8412, 1), new Range16.Ptr(8417, 8421, 4), new Range16.Ptr(8422, 8432, 1), new Range16.Ptr(11503, 11505, 1), new Range16.Ptr(11647, 11744, 97), new Range16.Ptr(11745, 11775, 1), new Range16.Ptr(12330, 12333, 1), new Range16.Ptr(12441, 12442, 1), new Range16.Ptr(42607, 42612, 5), new Range16.Ptr(42613, 42621, 1), new Range16.Ptr(42655, 42736, 81), new Range16.Ptr(42737, 43010, 273), new Range16.Ptr(43014, 43019, 5), new Range16.Ptr(43045, 43046, 1), new Range16.Ptr(43204, 43232, 28), new Range16.Ptr(43233, 43249, 1), new Range16.Ptr(43302, 43309, 1), new Range16.Ptr(43335, 43345, 1), new Range16.Ptr(43392, 43394, 1), new Range16.Ptr(43443, 43446, 3), new Range16.Ptr(43447, 43449, 1), new Range16.Ptr(43452, 43561, 109), new Range16.Ptr(43562, 43566, 1), new Range16.Ptr(43569, 43570, 1), new Range16.Ptr(43573, 43574, 1), new Range16.Ptr(43587, 43596, 9), new Range16.Ptr(43696, 43698, 2), new Range16.Ptr(43699, 43700, 1), new Range16.Ptr(43703, 43704, 1), new Range16.Ptr(43710, 43711, 1), new Range16.Ptr(43713, 43756, 43), new Range16.Ptr(43757, 43766, 9), new Range16.Ptr(44005, 44008, 3), new Range16.Ptr(44013, 64286, 20273), new Range16.Ptr(65024, 65039, 1), new Range16.Ptr(65056, 65062, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66045, 68097, 2052), new Range32.Ptr(68098, 68099, 1), new Range32.Ptr(68101, 68102, 1), new Range32.Ptr(68108, 68111, 1), new Range32.Ptr(68152, 68154, 1), new Range32.Ptr(68159, 69633, 1474), new Range32.Ptr(69688, 69702, 1), new Range32.Ptr(69760, 69761, 1), new Range32.Ptr(69811, 69814, 1), new Range32.Ptr(69817, 69818, 1), new Range32.Ptr(69888, 69890, 1), new Range32.Ptr(69927, 69931, 1), new Range32.Ptr(69933, 69940, 1), new Range32.Ptr(70016, 70017, 1), new Range32.Ptr(70070, 70078, 1), new Range32.Ptr(71339, 71341, 2), new Range32.Ptr(71344, 71349, 1), new Range32.Ptr(71351, 94095, 22744), new Range32.Ptr(94096, 94098, 1), new Range32.Ptr(119143, 119145, 1), new Range32.Ptr(119163, 119170, 1), new Range32.Ptr(119173, 119179, 1), new Range32.Ptr(119210, 119213, 1), new Range32.Ptr(119362, 119364, 1), new Range32.Ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(48, 57, 1), new Range16.Ptr(178, 179, 1), new Range16.Ptr(185, 188, 3), new Range16.Ptr(189, 190, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1776, 1785, 1), new Range16.Ptr(1984, 1993, 1), new Range16.Ptr(2406, 2415, 1), new Range16.Ptr(2534, 2543, 1), new Range16.Ptr(2548, 2553, 1), new Range16.Ptr(2662, 2671, 1), new Range16.Ptr(2790, 2799, 1), new Range16.Ptr(2918, 2927, 1), new Range16.Ptr(2930, 2935, 1), new Range16.Ptr(3046, 3058, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3192, 3198, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3430, 3445, 1), new Range16.Ptr(3664, 3673, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3872, 3891, 1), new Range16.Ptr(4160, 4169, 1), new Range16.Ptr(4240, 4249, 1), new Range16.Ptr(4969, 4988, 1), new Range16.Ptr(5870, 5872, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6128, 6137, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6470, 6479, 1), new Range16.Ptr(6608, 6618, 1), new Range16.Ptr(6784, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6992, 7001, 1), new Range16.Ptr(7088, 7097, 1), new Range16.Ptr(7232, 7241, 1), new Range16.Ptr(7248, 7257, 1), new Range16.Ptr(8304, 8308, 4), new Range16.Ptr(8309, 8313, 1), new Range16.Ptr(8320, 8329, 1), new Range16.Ptr(8528, 8578, 1), new Range16.Ptr(8581, 8585, 1), new Range16.Ptr(9312, 9371, 1), new Range16.Ptr(9450, 9471, 1), new Range16.Ptr(10102, 10131, 1), new Range16.Ptr(11517, 12295, 778), new Range16.Ptr(12321, 12329, 1), new Range16.Ptr(12344, 12346, 1), new Range16.Ptr(12690, 12693, 1), new Range16.Ptr(12832, 12841, 1), new Range16.Ptr(12872, 12879, 1), new Range16.Ptr(12881, 12895, 1), new Range16.Ptr(12928, 12937, 1), new Range16.Ptr(12977, 12991, 1), new Range16.Ptr(42528, 42537, 1), new Range16.Ptr(42726, 42735, 1), new Range16.Ptr(43056, 43061, 1), new Range16.Ptr(43216, 43225, 1), new Range16.Ptr(43264, 43273, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(44016, 44025, 1), new Range16.Ptr(65296, 65305, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65799, 65843, 1), new Range32.Ptr(65856, 65912, 1), new Range32.Ptr(65930, 66336, 406), new Range32.Ptr(66337, 66339, 1), new Range32.Ptr(66369, 66378, 9), new Range32.Ptr(66513, 66517, 1), new Range32.Ptr(66720, 66729, 1), new Range32.Ptr(67672, 67679, 1), new Range32.Ptr(67862, 67867, 1), new Range32.Ptr(68160, 68167, 1), new Range32.Ptr(68221, 68222, 1), new Range32.Ptr(68440, 68447, 1), new Range32.Ptr(68472, 68479, 1), new Range32.Ptr(69216, 69246, 1), new Range32.Ptr(69714, 69743, 1), new Range32.Ptr(69872, 69881, 1), new Range32.Ptr(69942, 69951, 1), new Range32.Ptr(70096, 70105, 1), new Range32.Ptr(71360, 71369, 1), new Range32.Ptr(74752, 74850, 1), new Range32.Ptr(119648, 119665, 1), new Range32.Ptr(120782, 120831, 1), new Range32.Ptr(127232, 127242, 1)]), 4);
		_Nd = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(48, 57, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1776, 1785, 1), new Range16.Ptr(1984, 1993, 1), new Range16.Ptr(2406, 2415, 1), new Range16.Ptr(2534, 2543, 1), new Range16.Ptr(2662, 2671, 1), new Range16.Ptr(2790, 2799, 1), new Range16.Ptr(2918, 2927, 1), new Range16.Ptr(3046, 3055, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3430, 3439, 1), new Range16.Ptr(3664, 3673, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3872, 3881, 1), new Range16.Ptr(4160, 4169, 1), new Range16.Ptr(4240, 4249, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6470, 6479, 1), new Range16.Ptr(6608, 6617, 1), new Range16.Ptr(6784, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6992, 7001, 1), new Range16.Ptr(7088, 7097, 1), new Range16.Ptr(7232, 7241, 1), new Range16.Ptr(7248, 7257, 1), new Range16.Ptr(42528, 42537, 1), new Range16.Ptr(43216, 43225, 1), new Range16.Ptr(43264, 43273, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(44016, 44025, 1), new Range16.Ptr(65296, 65305, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66720, 66729, 1), new Range32.Ptr(69734, 69743, 1), new Range32.Ptr(69872, 69881, 1), new Range32.Ptr(69942, 69951, 1), new Range32.Ptr(70096, 70105, 1), new Range32.Ptr(71360, 71369, 1), new Range32.Ptr(120782, 120831, 1)]), 1);
		_Nl = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5870, 5872, 1), new Range16.Ptr(8544, 8578, 1), new Range16.Ptr(8581, 8584, 1), new Range16.Ptr(12295, 12321, 26), new Range16.Ptr(12322, 12329, 1), new Range16.Ptr(12344, 12346, 1), new Range16.Ptr(42726, 42735, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65856, 65908, 1), new Range32.Ptr(66369, 66378, 9), new Range32.Ptr(66513, 66517, 1), new Range32.Ptr(74752, 74850, 1)]), 0);
		_No = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(178, 179, 1), new Range16.Ptr(185, 188, 3), new Range16.Ptr(189, 190, 1), new Range16.Ptr(2548, 2553, 1), new Range16.Ptr(2930, 2935, 1), new Range16.Ptr(3056, 3058, 1), new Range16.Ptr(3192, 3198, 1), new Range16.Ptr(3440, 3445, 1), new Range16.Ptr(3882, 3891, 1), new Range16.Ptr(4969, 4988, 1), new Range16.Ptr(6128, 6137, 1), new Range16.Ptr(6618, 8304, 1686), new Range16.Ptr(8308, 8313, 1), new Range16.Ptr(8320, 8329, 1), new Range16.Ptr(8528, 8543, 1), new Range16.Ptr(8585, 9312, 727), new Range16.Ptr(9313, 9371, 1), new Range16.Ptr(9450, 9471, 1), new Range16.Ptr(10102, 10131, 1), new Range16.Ptr(11517, 12690, 1173), new Range16.Ptr(12691, 12693, 1), new Range16.Ptr(12832, 12841, 1), new Range16.Ptr(12872, 12879, 1), new Range16.Ptr(12881, 12895, 1), new Range16.Ptr(12928, 12937, 1), new Range16.Ptr(12977, 12991, 1), new Range16.Ptr(43056, 43061, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65799, 65843, 1), new Range32.Ptr(65909, 65912, 1), new Range32.Ptr(65930, 66336, 406), new Range32.Ptr(66337, 66339, 1), new Range32.Ptr(67672, 67679, 1), new Range32.Ptr(67862, 67867, 1), new Range32.Ptr(68160, 68167, 1), new Range32.Ptr(68221, 68222, 1), new Range32.Ptr(68440, 68447, 1), new Range32.Ptr(68472, 68479, 1), new Range32.Ptr(69216, 69246, 1), new Range32.Ptr(69714, 69733, 1), new Range32.Ptr(119648, 119665, 1), new Range32.Ptr(127232, 127242, 1)]), 3);
		_P = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(33, 35, 1), new Range16.Ptr(37, 42, 1), new Range16.Ptr(44, 47, 1), new Range16.Ptr(58, 59, 1), new Range16.Ptr(63, 64, 1), new Range16.Ptr(91, 93, 1), new Range16.Ptr(95, 123, 28), new Range16.Ptr(125, 161, 36), new Range16.Ptr(167, 171, 4), new Range16.Ptr(182, 183, 1), new Range16.Ptr(187, 191, 4), new Range16.Ptr(894, 903, 9), new Range16.Ptr(1370, 1375, 1), new Range16.Ptr(1417, 1418, 1), new Range16.Ptr(1470, 1472, 2), new Range16.Ptr(1475, 1478, 3), new Range16.Ptr(1523, 1524, 1), new Range16.Ptr(1545, 1546, 1), new Range16.Ptr(1548, 1549, 1), new Range16.Ptr(1563, 1566, 3), new Range16.Ptr(1567, 1642, 75), new Range16.Ptr(1643, 1645, 1), new Range16.Ptr(1748, 1792, 44), new Range16.Ptr(1793, 1805, 1), new Range16.Ptr(2039, 2041, 1), new Range16.Ptr(2096, 2110, 1), new Range16.Ptr(2142, 2404, 262), new Range16.Ptr(2405, 2416, 11), new Range16.Ptr(2800, 3572, 772), new Range16.Ptr(3663, 3674, 11), new Range16.Ptr(3675, 3844, 169), new Range16.Ptr(3845, 3858, 1), new Range16.Ptr(3860, 3898, 38), new Range16.Ptr(3899, 3901, 1), new Range16.Ptr(3973, 4048, 75), new Range16.Ptr(4049, 4052, 1), new Range16.Ptr(4057, 4058, 1), new Range16.Ptr(4170, 4175, 1), new Range16.Ptr(4347, 4960, 613), new Range16.Ptr(4961, 4968, 1), new Range16.Ptr(5120, 5741, 621), new Range16.Ptr(5742, 5787, 45), new Range16.Ptr(5788, 5867, 79), new Range16.Ptr(5868, 5869, 1), new Range16.Ptr(5941, 5942, 1), new Range16.Ptr(6100, 6102, 1), new Range16.Ptr(6104, 6106, 1), new Range16.Ptr(6144, 6154, 1), new Range16.Ptr(6468, 6469, 1), new Range16.Ptr(6686, 6687, 1), new Range16.Ptr(6816, 6822, 1), new Range16.Ptr(6824, 6829, 1), new Range16.Ptr(7002, 7008, 1), new Range16.Ptr(7164, 7167, 1), new Range16.Ptr(7227, 7231, 1), new Range16.Ptr(7294, 7295, 1), new Range16.Ptr(7360, 7367, 1), new Range16.Ptr(7379, 8208, 829), new Range16.Ptr(8209, 8231, 1), new Range16.Ptr(8240, 8259, 1), new Range16.Ptr(8261, 8273, 1), new Range16.Ptr(8275, 8286, 1), new Range16.Ptr(8317, 8318, 1), new Range16.Ptr(8333, 8334, 1), new Range16.Ptr(8968, 8971, 1), new Range16.Ptr(9001, 9002, 1), new Range16.Ptr(10088, 10101, 1), new Range16.Ptr(10181, 10182, 1), new Range16.Ptr(10214, 10223, 1), new Range16.Ptr(10627, 10648, 1), new Range16.Ptr(10712, 10715, 1), new Range16.Ptr(10748, 10749, 1), new Range16.Ptr(11513, 11516, 1), new Range16.Ptr(11518, 11519, 1), new Range16.Ptr(11632, 11776, 144), new Range16.Ptr(11777, 11822, 1), new Range16.Ptr(11824, 11835, 1), new Range16.Ptr(12289, 12291, 1), new Range16.Ptr(12296, 12305, 1), new Range16.Ptr(12308, 12319, 1), new Range16.Ptr(12336, 12349, 13), new Range16.Ptr(12448, 12539, 91), new Range16.Ptr(42238, 42239, 1), new Range16.Ptr(42509, 42511, 1), new Range16.Ptr(42611, 42622, 11), new Range16.Ptr(42738, 42743, 1), new Range16.Ptr(43124, 43127, 1), new Range16.Ptr(43214, 43215, 1), new Range16.Ptr(43256, 43258, 1), new Range16.Ptr(43310, 43311, 1), new Range16.Ptr(43359, 43457, 98), new Range16.Ptr(43458, 43469, 1), new Range16.Ptr(43486, 43487, 1), new Range16.Ptr(43612, 43615, 1), new Range16.Ptr(43742, 43743, 1), new Range16.Ptr(43760, 43761, 1), new Range16.Ptr(44011, 64830, 20819), new Range16.Ptr(64831, 65040, 209), new Range16.Ptr(65041, 65049, 1), new Range16.Ptr(65072, 65106, 1), new Range16.Ptr(65108, 65121, 1), new Range16.Ptr(65123, 65128, 5), new Range16.Ptr(65130, 65131, 1), new Range16.Ptr(65281, 65283, 1), new Range16.Ptr(65285, 65290, 1), new Range16.Ptr(65292, 65295, 1), new Range16.Ptr(65306, 65307, 1), new Range16.Ptr(65311, 65312, 1), new Range16.Ptr(65339, 65341, 1), new Range16.Ptr(65343, 65371, 28), new Range16.Ptr(65373, 65375, 2), new Range16.Ptr(65376, 65381, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65792, 65794, 1), new Range32.Ptr(66463, 66512, 49), new Range32.Ptr(67671, 67871, 200), new Range32.Ptr(67903, 68176, 273), new Range32.Ptr(68177, 68184, 1), new Range32.Ptr(68223, 68409, 186), new Range32.Ptr(68410, 68415, 1), new Range32.Ptr(69703, 69709, 1), new Range32.Ptr(69819, 69820, 1), new Range32.Ptr(69822, 69825, 1), new Range32.Ptr(69952, 69955, 1), new Range32.Ptr(70085, 70088, 1), new Range32.Ptr(74864, 74867, 1)]), 11);
		_Pc = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(95, 8255, 8160), new Range16.Ptr(8256, 8276, 20), new Range16.Ptr(65075, 65076, 1), new Range16.Ptr(65101, 65103, 1), new Range16.Ptr(65343, 65343, 1)]), ($sliceType(Range32)).nil, 0);
		_Pd = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(45, 1418, 1373), new Range16.Ptr(1470, 5120, 3650), new Range16.Ptr(6150, 8208, 2058), new Range16.Ptr(8209, 8213, 1), new Range16.Ptr(11799, 11802, 3), new Range16.Ptr(11834, 11835, 1), new Range16.Ptr(12316, 12336, 20), new Range16.Ptr(12448, 65073, 52625), new Range16.Ptr(65074, 65112, 38), new Range16.Ptr(65123, 65293, 170)]), ($sliceType(Range32)).nil, 0);
		_Pe = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(41, 93, 52), new Range16.Ptr(125, 3899, 3774), new Range16.Ptr(3901, 5788, 1887), new Range16.Ptr(8262, 8318, 56), new Range16.Ptr(8334, 8969, 635), new Range16.Ptr(8971, 9002, 31), new Range16.Ptr(10089, 10101, 2), new Range16.Ptr(10182, 10215, 33), new Range16.Ptr(10217, 10223, 2), new Range16.Ptr(10628, 10648, 2), new Range16.Ptr(10713, 10715, 2), new Range16.Ptr(10749, 11811, 1062), new Range16.Ptr(11813, 11817, 2), new Range16.Ptr(12297, 12305, 2), new Range16.Ptr(12309, 12315, 2), new Range16.Ptr(12318, 12319, 1), new Range16.Ptr(64831, 65048, 217), new Range16.Ptr(65078, 65092, 2), new Range16.Ptr(65096, 65114, 18), new Range16.Ptr(65116, 65118, 2), new Range16.Ptr(65289, 65341, 52), new Range16.Ptr(65373, 65379, 3)]), ($sliceType(Range32)).nil, 1);
		_Pf = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(187, 8217, 8030), new Range16.Ptr(8221, 8250, 29), new Range16.Ptr(11779, 11781, 2), new Range16.Ptr(11786, 11789, 3), new Range16.Ptr(11805, 11809, 4)]), ($sliceType(Range32)).nil, 0);
		_Pi = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(171, 8216, 8045), new Range16.Ptr(8219, 8220, 1), new Range16.Ptr(8223, 8249, 26), new Range16.Ptr(11778, 11780, 2), new Range16.Ptr(11785, 11788, 3), new Range16.Ptr(11804, 11808, 4)]), ($sliceType(Range32)).nil, 0);
		_Po = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(33, 35, 1), new Range16.Ptr(37, 39, 1), new Range16.Ptr(42, 46, 2), new Range16.Ptr(47, 58, 11), new Range16.Ptr(59, 63, 4), new Range16.Ptr(64, 92, 28), new Range16.Ptr(161, 167, 6), new Range16.Ptr(182, 183, 1), new Range16.Ptr(191, 894, 703), new Range16.Ptr(903, 1370, 467), new Range16.Ptr(1371, 1375, 1), new Range16.Ptr(1417, 1472, 55), new Range16.Ptr(1475, 1478, 3), new Range16.Ptr(1523, 1524, 1), new Range16.Ptr(1545, 1546, 1), new Range16.Ptr(1548, 1549, 1), new Range16.Ptr(1563, 1566, 3), new Range16.Ptr(1567, 1642, 75), new Range16.Ptr(1643, 1645, 1), new Range16.Ptr(1748, 1792, 44), new Range16.Ptr(1793, 1805, 1), new Range16.Ptr(2039, 2041, 1), new Range16.Ptr(2096, 2110, 1), new Range16.Ptr(2142, 2404, 262), new Range16.Ptr(2405, 2416, 11), new Range16.Ptr(2800, 3572, 772), new Range16.Ptr(3663, 3674, 11), new Range16.Ptr(3675, 3844, 169), new Range16.Ptr(3845, 3858, 1), new Range16.Ptr(3860, 3973, 113), new Range16.Ptr(4048, 4052, 1), new Range16.Ptr(4057, 4058, 1), new Range16.Ptr(4170, 4175, 1), new Range16.Ptr(4347, 4960, 613), new Range16.Ptr(4961, 4968, 1), new Range16.Ptr(5741, 5742, 1), new Range16.Ptr(5867, 5869, 1), new Range16.Ptr(5941, 5942, 1), new Range16.Ptr(6100, 6102, 1), new Range16.Ptr(6104, 6106, 1), new Range16.Ptr(6144, 6149, 1), new Range16.Ptr(6151, 6154, 1), new Range16.Ptr(6468, 6469, 1), new Range16.Ptr(6686, 6687, 1), new Range16.Ptr(6816, 6822, 1), new Range16.Ptr(6824, 6829, 1), new Range16.Ptr(7002, 7008, 1), new Range16.Ptr(7164, 7167, 1), new Range16.Ptr(7227, 7231, 1), new Range16.Ptr(7294, 7295, 1), new Range16.Ptr(7360, 7367, 1), new Range16.Ptr(7379, 8214, 835), new Range16.Ptr(8215, 8224, 9), new Range16.Ptr(8225, 8231, 1), new Range16.Ptr(8240, 8248, 1), new Range16.Ptr(8251, 8254, 1), new Range16.Ptr(8257, 8259, 1), new Range16.Ptr(8263, 8273, 1), new Range16.Ptr(8275, 8277, 2), new Range16.Ptr(8278, 8286, 1), new Range16.Ptr(11513, 11516, 1), new Range16.Ptr(11518, 11519, 1), new Range16.Ptr(11632, 11776, 144), new Range16.Ptr(11777, 11782, 5), new Range16.Ptr(11783, 11784, 1), new Range16.Ptr(11787, 11790, 3), new Range16.Ptr(11791, 11798, 1), new Range16.Ptr(11800, 11801, 1), new Range16.Ptr(11803, 11806, 3), new Range16.Ptr(11807, 11818, 11), new Range16.Ptr(11819, 11822, 1), new Range16.Ptr(11824, 11833, 1), new Range16.Ptr(12289, 12291, 1), new Range16.Ptr(12349, 12539, 190), new Range16.Ptr(42238, 42239, 1), new Range16.Ptr(42509, 42511, 1), new Range16.Ptr(42611, 42622, 11), new Range16.Ptr(42738, 42743, 1), new Range16.Ptr(43124, 43127, 1), new Range16.Ptr(43214, 43215, 1), new Range16.Ptr(43256, 43258, 1), new Range16.Ptr(43310, 43311, 1), new Range16.Ptr(43359, 43457, 98), new Range16.Ptr(43458, 43469, 1), new Range16.Ptr(43486, 43487, 1), new Range16.Ptr(43612, 43615, 1), new Range16.Ptr(43742, 43743, 1), new Range16.Ptr(43760, 43761, 1), new Range16.Ptr(44011, 65040, 21029), new Range16.Ptr(65041, 65046, 1), new Range16.Ptr(65049, 65072, 23), new Range16.Ptr(65093, 65094, 1), new Range16.Ptr(65097, 65100, 1), new Range16.Ptr(65104, 65106, 1), new Range16.Ptr(65108, 65111, 1), new Range16.Ptr(65119, 65121, 1), new Range16.Ptr(65128, 65130, 2), new Range16.Ptr(65131, 65281, 150), new Range16.Ptr(65282, 65283, 1), new Range16.Ptr(65285, 65287, 1), new Range16.Ptr(65290, 65294, 2), new Range16.Ptr(65295, 65306, 11), new Range16.Ptr(65307, 65311, 4), new Range16.Ptr(65312, 65340, 28), new Range16.Ptr(65377, 65380, 3), new Range16.Ptr(65381, 65381, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65792, 65792, 1), new Range32.Ptr(65793, 65794, 1), new Range32.Ptr(66463, 66512, 49), new Range32.Ptr(67671, 67871, 200), new Range32.Ptr(67903, 68176, 273), new Range32.Ptr(68177, 68184, 1), new Range32.Ptr(68223, 68409, 186), new Range32.Ptr(68410, 68415, 1), new Range32.Ptr(69703, 69709, 1), new Range32.Ptr(69819, 69820, 1), new Range32.Ptr(69822, 69825, 1), new Range32.Ptr(69952, 69955, 1), new Range32.Ptr(70085, 70088, 1), new Range32.Ptr(74864, 74867, 1)]), 8);
		_Ps = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(40, 91, 51), new Range16.Ptr(123, 3898, 3775), new Range16.Ptr(3900, 5787, 1887), new Range16.Ptr(8218, 8222, 4), new Range16.Ptr(8261, 8317, 56), new Range16.Ptr(8333, 8968, 635), new Range16.Ptr(8970, 9001, 31), new Range16.Ptr(10088, 10100, 2), new Range16.Ptr(10181, 10214, 33), new Range16.Ptr(10216, 10222, 2), new Range16.Ptr(10627, 10647, 2), new Range16.Ptr(10712, 10714, 2), new Range16.Ptr(10748, 11810, 1062), new Range16.Ptr(11812, 11816, 2), new Range16.Ptr(12296, 12304, 2), new Range16.Ptr(12308, 12314, 2), new Range16.Ptr(12317, 64830, 52513), new Range16.Ptr(65047, 65077, 30), new Range16.Ptr(65079, 65091, 2), new Range16.Ptr(65095, 65113, 18), new Range16.Ptr(65115, 65117, 2), new Range16.Ptr(65288, 65339, 51), new Range16.Ptr(65371, 65375, 4), new Range16.Ptr(65378, 65378, 1)]), ($sliceType(Range32)).nil, 1);
		_S = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(36, 43, 7), new Range16.Ptr(60, 62, 1), new Range16.Ptr(94, 96, 2), new Range16.Ptr(124, 126, 2), new Range16.Ptr(162, 166, 1), new Range16.Ptr(168, 169, 1), new Range16.Ptr(172, 174, 2), new Range16.Ptr(175, 177, 1), new Range16.Ptr(180, 184, 4), new Range16.Ptr(215, 247, 32), new Range16.Ptr(706, 709, 1), new Range16.Ptr(722, 735, 1), new Range16.Ptr(741, 747, 1), new Range16.Ptr(749, 751, 2), new Range16.Ptr(752, 767, 1), new Range16.Ptr(885, 900, 15), new Range16.Ptr(901, 1014, 113), new Range16.Ptr(1154, 1423, 269), new Range16.Ptr(1542, 1544, 1), new Range16.Ptr(1547, 1550, 3), new Range16.Ptr(1551, 1758, 207), new Range16.Ptr(1769, 1789, 20), new Range16.Ptr(1790, 2038, 248), new Range16.Ptr(2546, 2547, 1), new Range16.Ptr(2554, 2555, 1), new Range16.Ptr(2801, 2928, 127), new Range16.Ptr(3059, 3066, 1), new Range16.Ptr(3199, 3449, 250), new Range16.Ptr(3647, 3841, 194), new Range16.Ptr(3842, 3843, 1), new Range16.Ptr(3859, 3861, 2), new Range16.Ptr(3862, 3863, 1), new Range16.Ptr(3866, 3871, 1), new Range16.Ptr(3892, 3896, 2), new Range16.Ptr(4030, 4037, 1), new Range16.Ptr(4039, 4044, 1), new Range16.Ptr(4046, 4047, 1), new Range16.Ptr(4053, 4056, 1), new Range16.Ptr(4254, 4255, 1), new Range16.Ptr(5008, 5017, 1), new Range16.Ptr(6107, 6464, 357), new Range16.Ptr(6622, 6655, 1), new Range16.Ptr(7009, 7018, 1), new Range16.Ptr(7028, 7036, 1), new Range16.Ptr(8125, 8127, 2), new Range16.Ptr(8128, 8129, 1), new Range16.Ptr(8141, 8143, 1), new Range16.Ptr(8157, 8159, 1), new Range16.Ptr(8173, 8175, 1), new Range16.Ptr(8189, 8190, 1), new Range16.Ptr(8260, 8274, 14), new Range16.Ptr(8314, 8316, 1), new Range16.Ptr(8330, 8332, 1), new Range16.Ptr(8352, 8378, 1), new Range16.Ptr(8448, 8449, 1), new Range16.Ptr(8451, 8454, 1), new Range16.Ptr(8456, 8457, 1), new Range16.Ptr(8468, 8470, 2), new Range16.Ptr(8471, 8472, 1), new Range16.Ptr(8478, 8483, 1), new Range16.Ptr(8485, 8489, 2), new Range16.Ptr(8494, 8506, 12), new Range16.Ptr(8507, 8512, 5), new Range16.Ptr(8513, 8516, 1), new Range16.Ptr(8522, 8525, 1), new Range16.Ptr(8527, 8592, 65), new Range16.Ptr(8593, 8967, 1), new Range16.Ptr(8972, 9000, 1), new Range16.Ptr(9003, 9203, 1), new Range16.Ptr(9216, 9254, 1), new Range16.Ptr(9280, 9290, 1), new Range16.Ptr(9372, 9449, 1), new Range16.Ptr(9472, 9983, 1), new Range16.Ptr(9985, 10087, 1), new Range16.Ptr(10132, 10180, 1), new Range16.Ptr(10183, 10213, 1), new Range16.Ptr(10224, 10626, 1), new Range16.Ptr(10649, 10711, 1), new Range16.Ptr(10716, 10747, 1), new Range16.Ptr(10750, 11084, 1), new Range16.Ptr(11088, 11097, 1), new Range16.Ptr(11493, 11498, 1), new Range16.Ptr(11904, 11929, 1), new Range16.Ptr(11931, 12019, 1), new Range16.Ptr(12032, 12245, 1), new Range16.Ptr(12272, 12283, 1), new Range16.Ptr(12292, 12306, 14), new Range16.Ptr(12307, 12320, 13), new Range16.Ptr(12342, 12343, 1), new Range16.Ptr(12350, 12351, 1), new Range16.Ptr(12443, 12444, 1), new Range16.Ptr(12688, 12689, 1), new Range16.Ptr(12694, 12703, 1), new Range16.Ptr(12736, 12771, 1), new Range16.Ptr(12800, 12830, 1), new Range16.Ptr(12842, 12871, 1), new Range16.Ptr(12880, 12896, 16), new Range16.Ptr(12897, 12927, 1), new Range16.Ptr(12938, 12976, 1), new Range16.Ptr(12992, 13054, 1), new Range16.Ptr(13056, 13311, 1), new Range16.Ptr(19904, 19967, 1), new Range16.Ptr(42128, 42182, 1), new Range16.Ptr(42752, 42774, 1), new Range16.Ptr(42784, 42785, 1), new Range16.Ptr(42889, 42890, 1), new Range16.Ptr(43048, 43051, 1), new Range16.Ptr(43062, 43065, 1), new Range16.Ptr(43639, 43641, 1), new Range16.Ptr(64297, 64434, 137), new Range16.Ptr(64435, 64449, 1), new Range16.Ptr(65020, 65021, 1), new Range16.Ptr(65122, 65124, 2), new Range16.Ptr(65125, 65126, 1), new Range16.Ptr(65129, 65284, 155), new Range16.Ptr(65291, 65308, 17), new Range16.Ptr(65309, 65310, 1), new Range16.Ptr(65342, 65344, 2), new Range16.Ptr(65372, 65374, 2), new Range16.Ptr(65504, 65510, 1), new Range16.Ptr(65512, 65518, 1), new Range16.Ptr(65532, 65533, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65847, 65855, 1), new Range32.Ptr(65913, 65929, 1), new Range32.Ptr(65936, 65947, 1), new Range32.Ptr(66000, 66044, 1), new Range32.Ptr(118784, 119029, 1), new Range32.Ptr(119040, 119078, 1), new Range32.Ptr(119081, 119140, 1), new Range32.Ptr(119146, 119148, 1), new Range32.Ptr(119171, 119172, 1), new Range32.Ptr(119180, 119209, 1), new Range32.Ptr(119214, 119261, 1), new Range32.Ptr(119296, 119361, 1), new Range32.Ptr(119365, 119552, 187), new Range32.Ptr(119553, 119638, 1), new Range32.Ptr(120513, 120539, 26), new Range32.Ptr(120571, 120597, 26), new Range32.Ptr(120629, 120655, 26), new Range32.Ptr(120687, 120713, 26), new Range32.Ptr(120745, 120771, 26), new Range32.Ptr(126704, 126705, 1), new Range32.Ptr(126976, 127019, 1), new Range32.Ptr(127024, 127123, 1), new Range32.Ptr(127136, 127150, 1), new Range32.Ptr(127153, 127166, 1), new Range32.Ptr(127169, 127183, 1), new Range32.Ptr(127185, 127199, 1), new Range32.Ptr(127248, 127278, 1), new Range32.Ptr(127280, 127339, 1), new Range32.Ptr(127344, 127386, 1), new Range32.Ptr(127462, 127490, 1), new Range32.Ptr(127504, 127546, 1), new Range32.Ptr(127552, 127560, 1), new Range32.Ptr(127568, 127569, 1), new Range32.Ptr(127744, 127776, 1), new Range32.Ptr(127792, 127797, 1), new Range32.Ptr(127799, 127868, 1), new Range32.Ptr(127872, 127891, 1), new Range32.Ptr(127904, 127940, 1), new Range32.Ptr(127942, 127946, 1), new Range32.Ptr(127968, 127984, 1), new Range32.Ptr(128000, 128062, 1), new Range32.Ptr(128064, 128066, 2), new Range32.Ptr(128067, 128247, 1), new Range32.Ptr(128249, 128252, 1), new Range32.Ptr(128256, 128317, 1), new Range32.Ptr(128320, 128323, 1), new Range32.Ptr(128336, 128359, 1), new Range32.Ptr(128507, 128576, 1), new Range32.Ptr(128581, 128591, 1), new Range32.Ptr(128640, 128709, 1), new Range32.Ptr(128768, 128883, 1)]), 10);
		_Sc = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(36, 162, 126), new Range16.Ptr(163, 165, 1), new Range16.Ptr(1423, 1547, 124), new Range16.Ptr(2546, 2547, 1), new Range16.Ptr(2555, 2801, 246), new Range16.Ptr(3065, 3647, 582), new Range16.Ptr(6107, 8352, 2245), new Range16.Ptr(8353, 8378, 1), new Range16.Ptr(43064, 65020, 21956), new Range16.Ptr(65129, 65284, 155), new Range16.Ptr(65504, 65505, 1), new Range16.Ptr(65509, 65510, 1)]), ($sliceType(Range32)).nil, 2);
		_Sk = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(94, 96, 2), new Range16.Ptr(168, 175, 7), new Range16.Ptr(180, 184, 4), new Range16.Ptr(706, 709, 1), new Range16.Ptr(722, 735, 1), new Range16.Ptr(741, 747, 1), new Range16.Ptr(749, 751, 2), new Range16.Ptr(752, 767, 1), new Range16.Ptr(885, 900, 15), new Range16.Ptr(901, 8125, 7224), new Range16.Ptr(8127, 8129, 1), new Range16.Ptr(8141, 8143, 1), new Range16.Ptr(8157, 8159, 1), new Range16.Ptr(8173, 8175, 1), new Range16.Ptr(8189, 8190, 1), new Range16.Ptr(12443, 12444, 1), new Range16.Ptr(42752, 42774, 1), new Range16.Ptr(42784, 42785, 1), new Range16.Ptr(42889, 42890, 1), new Range16.Ptr(64434, 64449, 1), new Range16.Ptr(65342, 65344, 2), new Range16.Ptr(65507, 65507, 1)]), ($sliceType(Range32)).nil, 3);
		_Sm = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43, 60, 17), new Range16.Ptr(61, 62, 1), new Range16.Ptr(124, 126, 2), new Range16.Ptr(172, 177, 5), new Range16.Ptr(215, 247, 32), new Range16.Ptr(1014, 1542, 528), new Range16.Ptr(1543, 1544, 1), new Range16.Ptr(8260, 8274, 14), new Range16.Ptr(8314, 8316, 1), new Range16.Ptr(8330, 8332, 1), new Range16.Ptr(8472, 8512, 40), new Range16.Ptr(8513, 8516, 1), new Range16.Ptr(8523, 8592, 69), new Range16.Ptr(8593, 8596, 1), new Range16.Ptr(8602, 8603, 1), new Range16.Ptr(8608, 8614, 3), new Range16.Ptr(8622, 8654, 32), new Range16.Ptr(8655, 8658, 3), new Range16.Ptr(8660, 8692, 32), new Range16.Ptr(8693, 8959, 1), new Range16.Ptr(8992, 8993, 1), new Range16.Ptr(9084, 9115, 31), new Range16.Ptr(9116, 9139, 1), new Range16.Ptr(9180, 9185, 1), new Range16.Ptr(9655, 9665, 10), new Range16.Ptr(9720, 9727, 1), new Range16.Ptr(9839, 10176, 337), new Range16.Ptr(10177, 10180, 1), new Range16.Ptr(10183, 10213, 1), new Range16.Ptr(10224, 10239, 1), new Range16.Ptr(10496, 10626, 1), new Range16.Ptr(10649, 10711, 1), new Range16.Ptr(10716, 10747, 1), new Range16.Ptr(10750, 11007, 1), new Range16.Ptr(11056, 11076, 1), new Range16.Ptr(11079, 11084, 1), new Range16.Ptr(64297, 65122, 825), new Range16.Ptr(65124, 65126, 1), new Range16.Ptr(65291, 65308, 17), new Range16.Ptr(65309, 65310, 1), new Range16.Ptr(65372, 65374, 2), new Range16.Ptr(65506, 65513, 7), new Range16.Ptr(65514, 65516, 1)]), new ($sliceType(Range32))([new Range32.Ptr(120513, 120539, 26), new Range32.Ptr(120571, 120597, 26), new Range32.Ptr(120629, 120655, 26), new Range32.Ptr(120687, 120713, 26), new Range32.Ptr(120745, 120771, 26), new Range32.Ptr(126704, 126705, 1)]), 5);
		_So = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(166, 169, 3), new Range16.Ptr(174, 176, 2), new Range16.Ptr(1154, 1550, 396), new Range16.Ptr(1551, 1758, 207), new Range16.Ptr(1769, 1789, 20), new Range16.Ptr(1790, 2038, 248), new Range16.Ptr(2554, 2928, 374), new Range16.Ptr(3059, 3064, 1), new Range16.Ptr(3066, 3199, 133), new Range16.Ptr(3449, 3841, 392), new Range16.Ptr(3842, 3843, 1), new Range16.Ptr(3859, 3861, 2), new Range16.Ptr(3862, 3863, 1), new Range16.Ptr(3866, 3871, 1), new Range16.Ptr(3892, 3896, 2), new Range16.Ptr(4030, 4037, 1), new Range16.Ptr(4039, 4044, 1), new Range16.Ptr(4046, 4047, 1), new Range16.Ptr(4053, 4056, 1), new Range16.Ptr(4254, 4255, 1), new Range16.Ptr(5008, 5017, 1), new Range16.Ptr(6464, 6622, 158), new Range16.Ptr(6623, 6655, 1), new Range16.Ptr(7009, 7018, 1), new Range16.Ptr(7028, 7036, 1), new Range16.Ptr(8448, 8449, 1), new Range16.Ptr(8451, 8454, 1), new Range16.Ptr(8456, 8457, 1), new Range16.Ptr(8468, 8470, 2), new Range16.Ptr(8471, 8478, 7), new Range16.Ptr(8479, 8483, 1), new Range16.Ptr(8485, 8489, 2), new Range16.Ptr(8494, 8506, 12), new Range16.Ptr(8507, 8522, 15), new Range16.Ptr(8524, 8525, 1), new Range16.Ptr(8527, 8597, 70), new Range16.Ptr(8598, 8601, 1), new Range16.Ptr(8604, 8607, 1), new Range16.Ptr(8609, 8610, 1), new Range16.Ptr(8612, 8613, 1), new Range16.Ptr(8615, 8621, 1), new Range16.Ptr(8623, 8653, 1), new Range16.Ptr(8656, 8657, 1), new Range16.Ptr(8659, 8661, 2), new Range16.Ptr(8662, 8691, 1), new Range16.Ptr(8960, 8967, 1), new Range16.Ptr(8972, 8991, 1), new Range16.Ptr(8994, 9000, 1), new Range16.Ptr(9003, 9083, 1), new Range16.Ptr(9085, 9114, 1), new Range16.Ptr(9140, 9179, 1), new Range16.Ptr(9186, 9203, 1), new Range16.Ptr(9216, 9254, 1), new Range16.Ptr(9280, 9290, 1), new Range16.Ptr(9372, 9449, 1), new Range16.Ptr(9472, 9654, 1), new Range16.Ptr(9656, 9664, 1), new Range16.Ptr(9666, 9719, 1), new Range16.Ptr(9728, 9838, 1), new Range16.Ptr(9840, 9983, 1), new Range16.Ptr(9985, 10087, 1), new Range16.Ptr(10132, 10175, 1), new Range16.Ptr(10240, 10495, 1), new Range16.Ptr(11008, 11055, 1), new Range16.Ptr(11077, 11078, 1), new Range16.Ptr(11088, 11097, 1), new Range16.Ptr(11493, 11498, 1), new Range16.Ptr(11904, 11929, 1), new Range16.Ptr(11931, 12019, 1), new Range16.Ptr(12032, 12245, 1), new Range16.Ptr(12272, 12283, 1), new Range16.Ptr(12292, 12306, 14), new Range16.Ptr(12307, 12320, 13), new Range16.Ptr(12342, 12343, 1), new Range16.Ptr(12350, 12351, 1), new Range16.Ptr(12688, 12689, 1), new Range16.Ptr(12694, 12703, 1), new Range16.Ptr(12736, 12771, 1), new Range16.Ptr(12800, 12830, 1), new Range16.Ptr(12842, 12871, 1), new Range16.Ptr(12880, 12896, 16), new Range16.Ptr(12897, 12927, 1), new Range16.Ptr(12938, 12976, 1), new Range16.Ptr(12992, 13054, 1), new Range16.Ptr(13056, 13311, 1), new Range16.Ptr(19904, 19967, 1), new Range16.Ptr(42128, 42182, 1), new Range16.Ptr(43048, 43051, 1), new Range16.Ptr(43062, 43063, 1), new Range16.Ptr(43065, 43639, 574), new Range16.Ptr(43640, 43641, 1), new Range16.Ptr(65021, 65508, 487), new Range16.Ptr(65512, 65517, 5), new Range16.Ptr(65518, 65532, 14), new Range16.Ptr(65533, 65533, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65847, 65847, 1), new Range32.Ptr(65848, 65855, 1), new Range32.Ptr(65913, 65929, 1), new Range32.Ptr(65936, 65947, 1), new Range32.Ptr(66000, 66044, 1), new Range32.Ptr(118784, 119029, 1), new Range32.Ptr(119040, 119078, 1), new Range32.Ptr(119081, 119140, 1), new Range32.Ptr(119146, 119148, 1), new Range32.Ptr(119171, 119172, 1), new Range32.Ptr(119180, 119209, 1), new Range32.Ptr(119214, 119261, 1), new Range32.Ptr(119296, 119361, 1), new Range32.Ptr(119365, 119552, 187), new Range32.Ptr(119553, 119638, 1), new Range32.Ptr(126976, 127019, 1), new Range32.Ptr(127024, 127123, 1), new Range32.Ptr(127136, 127150, 1), new Range32.Ptr(127153, 127166, 1), new Range32.Ptr(127169, 127183, 1), new Range32.Ptr(127185, 127199, 1), new Range32.Ptr(127248, 127278, 1), new Range32.Ptr(127280, 127339, 1), new Range32.Ptr(127344, 127386, 1), new Range32.Ptr(127462, 127490, 1), new Range32.Ptr(127504, 127546, 1), new Range32.Ptr(127552, 127560, 1), new Range32.Ptr(127568, 127569, 1), new Range32.Ptr(127744, 127776, 1), new Range32.Ptr(127792, 127797, 1), new Range32.Ptr(127799, 127868, 1), new Range32.Ptr(127872, 127891, 1), new Range32.Ptr(127904, 127940, 1), new Range32.Ptr(127942, 127946, 1), new Range32.Ptr(127968, 127984, 1), new Range32.Ptr(128000, 128062, 1), new Range32.Ptr(128064, 128066, 2), new Range32.Ptr(128067, 128247, 1), new Range32.Ptr(128249, 128252, 1), new Range32.Ptr(128256, 128317, 1), new Range32.Ptr(128320, 128323, 1), new Range32.Ptr(128336, 128359, 1), new Range32.Ptr(128507, 128576, 1), new Range32.Ptr(128581, 128591, 1), new Range32.Ptr(128640, 128709, 1), new Range32.Ptr(128768, 128883, 1)]), 2);
		_Z = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(32, 160, 128), new Range16.Ptr(5760, 8192, 2432), new Range16.Ptr(8193, 8202, 1), new Range16.Ptr(8232, 8233, 1), new Range16.Ptr(8239, 8287, 48), new Range16.Ptr(12288, 12288, 1)]), ($sliceType(Range32)).nil, 1);
		_Zl = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(8232, 8232, 1)]), ($sliceType(Range32)).nil, 0);
		_Zp = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(8233, 8233, 1)]), ($sliceType(Range32)).nil, 0);
		_Zs = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(32, 160, 128), new Range16.Ptr(5760, 8192, 2432), new Range16.Ptr(8193, 8202, 1), new Range16.Ptr(8239, 8287, 48), new Range16.Ptr(12288, 12288, 1)]), ($sliceType(Range32)).nil, 1);
		$pkg.Cc = _Cc;
		$pkg.Cf = _Cf;
		$pkg.Co = _Co;
		$pkg.Cs = _Cs;
		$pkg.Digit = _Nd;
		$pkg.Nd = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.Lm = _Lm;
		$pkg.Lo = _Lo;
		$pkg.Ll = _Ll;
		$pkg.M = _M;
		$pkg.Mc = _Mc;
		$pkg.Me = _Me;
		$pkg.Mn = _Mn;
		$pkg.Nl = _Nl;
		$pkg.No = _No;
		$pkg.N = _N;
		$pkg.C = _C;
		$pkg.Pc = _Pc;
		$pkg.Pd = _Pd;
		$pkg.Pe = _Pe;
		$pkg.Pf = _Pf;
		$pkg.Pi = _Pi;
		$pkg.Po = _Po;
		$pkg.Ps = _Ps;
		$pkg.P = _P;
		$pkg.Sc = _Sc;
		$pkg.Sk = _Sk;
		$pkg.Sm = _Sm;
		$pkg.So = _So;
		$pkg.Z = _Z;
		$pkg.S = _S;
		$pkg.PrintRanges = new ($sliceType(($ptrType(RangeTable))))([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		$pkg.Lt = _Lt;
		$pkg.Lu = _Lu;
		$pkg.Zl = _Zl;
		$pkg.Zp = _Zp;
		$pkg.Zs = _Zs;
		var _map, _key;
		$pkg.Categories = (_map = new $Map(), _key = "C", _map[_key] = { k: _key, v: $pkg.C }, _key = "Cc", _map[_key] = { k: _key, v: $pkg.Cc }, _key = "Cf", _map[_key] = { k: _key, v: $pkg.Cf }, _key = "Co", _map[_key] = { k: _key, v: $pkg.Co }, _key = "Cs", _map[_key] = { k: _key, v: $pkg.Cs }, _key = "L", _map[_key] = { k: _key, v: $pkg.L }, _key = "Ll", _map[_key] = { k: _key, v: $pkg.Ll }, _key = "Lm", _map[_key] = { k: _key, v: $pkg.Lm }, _key = "Lo", _map[_key] = { k: _key, v: $pkg.Lo }, _key = "Lt", _map[_key] = { k: _key, v: $pkg.Lt }, _key = "Lu", _map[_key] = { k: _key, v: $pkg.Lu }, _key = "M", _map[_key] = { k: _key, v: $pkg.M }, _key = "Mc", _map[_key] = { k: _key, v: $pkg.Mc }, _key = "Me", _map[_key] = { k: _key, v: $pkg.Me }, _key = "Mn", _map[_key] = { k: _key, v: $pkg.Mn }, _key = "N", _map[_key] = { k: _key, v: $pkg.N }, _key = "Nd", _map[_key] = { k: _key, v: $pkg.Nd }, _key = "Nl", _map[_key] = { k: _key, v: $pkg.Nl }, _key = "No", _map[_key] = { k: _key, v: $pkg.No }, _key = "P", _map[_key] = { k: _key, v: $pkg.P }, _key = "Pc", _map[_key] = { k: _key, v: $pkg.Pc }, _key = "Pd", _map[_key] = { k: _key, v: $pkg.Pd }, _key = "Pe", _map[_key] = { k: _key, v: $pkg.Pe }, _key = "Pf", _map[_key] = { k: _key, v: $pkg.Pf }, _key = "Pi", _map[_key] = { k: _key, v: $pkg.Pi }, _key = "Po", _map[_key] = { k: _key, v: $pkg.Po }, _key = "Ps", _map[_key] = { k: _key, v: $pkg.Ps }, _key = "S", _map[_key] = { k: _key, v: $pkg.S }, _key = "Sc", _map[_key] = { k: _key, v: $pkg.Sc }, _key = "Sk", _map[_key] = { k: _key, v: $pkg.Sk }, _key = "Sm", _map[_key] = { k: _key, v: $pkg.Sm }, _key = "So", _map[_key] = { k: _key, v: $pkg.So }, _key = "Z", _map[_key] = { k: _key, v: $pkg.Z }, _key = "Zl", _map[_key] = { k: _key, v: $pkg.Zl }, _key = "Zp", _map[_key] = { k: _key, v: $pkg.Zp }, _key = "Zs", _map[_key] = { k: _key, v: $pkg.Zs }, _map);
		_Arabic = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1536, 1540, 1), new Range16.Ptr(1542, 1547, 1), new Range16.Ptr(1549, 1562, 1), new Range16.Ptr(1564, 1564, 1), new Range16.Ptr(1566, 1566, 1), new Range16.Ptr(1568, 1599, 1), new Range16.Ptr(1601, 1610, 1), new Range16.Ptr(1622, 1631, 1), new Range16.Ptr(1642, 1647, 1), new Range16.Ptr(1649, 1756, 1), new Range16.Ptr(1758, 1791, 1), new Range16.Ptr(1872, 1919, 1), new Range16.Ptr(2208, 2208, 1), new Range16.Ptr(2210, 2220, 1), new Range16.Ptr(2276, 2302, 1), new Range16.Ptr(64336, 64449, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65020, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1)]), new ($sliceType(Range32))([new Range32.Ptr(69216, 69246, 1), new Range32.Ptr(126464, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126500, 1), new Range32.Ptr(126503, 126503, 1), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126521, 1), new Range32.Ptr(126523, 126523, 1), new Range32.Ptr(126530, 126530, 1), new Range32.Ptr(126535, 126535, 1), new Range32.Ptr(126537, 126537, 1), new Range32.Ptr(126539, 126539, 1), new Range32.Ptr(126541, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126548, 1), new Range32.Ptr(126551, 126551, 1), new Range32.Ptr(126553, 126553, 1), new Range32.Ptr(126555, 126555, 1), new Range32.Ptr(126557, 126557, 1), new Range32.Ptr(126559, 126559, 1), new Range32.Ptr(126561, 126562, 1), new Range32.Ptr(126564, 126564, 1), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126590, 1), new Range32.Ptr(126592, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(126704, 126705, 1)]), 0);
		_Armenian = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(1369, 1375, 1), new Range16.Ptr(1377, 1415, 1), new Range16.Ptr(1418, 1418, 1), new Range16.Ptr(1423, 1423, 1), new Range16.Ptr(64275, 64279, 1)]), ($sliceType(Range32)).nil, 0);
		_Avestan = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68409, 68415, 1)]), 0);
		_Balinese = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6912, 6987, 1), new Range16.Ptr(6992, 7036, 1)]), ($sliceType(Range32)).nil, 0);
		_Bamum = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(42656, 42743, 1)]), new ($sliceType(Range32))([new Range32.Ptr(92160, 92728, 1)]), 0);
		_Batak = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(7104, 7155, 1), new Range16.Ptr(7164, 7167, 1)]), ($sliceType(Range32)).nil, 0);
		_Bengali = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2433, 2435, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2482, 1), new Range16.Ptr(2486, 2489, 1), new Range16.Ptr(2492, 2500, 1), new Range16.Ptr(2503, 2504, 1), new Range16.Ptr(2507, 2510, 1), new Range16.Ptr(2519, 2519, 1), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2531, 1), new Range16.Ptr(2534, 2555, 1)]), ($sliceType(Range32)).nil, 0);
		_Bopomofo = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(746, 747, 1), new Range16.Ptr(12549, 12589, 1), new Range16.Ptr(12704, 12730, 1)]), ($sliceType(Range32)).nil, 0);
		_Brahmi = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(69632, 69709, 1), new Range32.Ptr(69714, 69743, 1)]), 0);
		_Braille = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(10240, 10495, 1)]), ($sliceType(Range32)).nil, 0);
		_Buginese = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6656, 6683, 1), new Range16.Ptr(6686, 6687, 1)]), ($sliceType(Range32)).nil, 0);
		_Buhid = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5952, 5971, 1)]), ($sliceType(Range32)).nil, 0);
		_Canadian_Aboriginal = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5120, 5759, 1), new Range16.Ptr(6320, 6389, 1)]), ($sliceType(Range32)).nil, 0);
		_Carian = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66208, 66256, 1)]), 0);
		_Chakma = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(69888, 69940, 1), new Range32.Ptr(69942, 69955, 1)]), 0);
		_Cham = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43520, 43574, 1), new Range16.Ptr(43584, 43597, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(43612, 43615, 1)]), ($sliceType(Range32)).nil, 0);
		_Cherokee = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5024, 5108, 1)]), ($sliceType(Range32)).nil, 0);
		_Common = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(0, 64, 1), new Range16.Ptr(91, 96, 1), new Range16.Ptr(123, 169, 1), new Range16.Ptr(171, 185, 1), new Range16.Ptr(187, 191, 1), new Range16.Ptr(215, 215, 1), new Range16.Ptr(247, 247, 1), new Range16.Ptr(697, 735, 1), new Range16.Ptr(741, 745, 1), new Range16.Ptr(748, 767, 1), new Range16.Ptr(884, 884, 1), new Range16.Ptr(894, 894, 1), new Range16.Ptr(901, 901, 1), new Range16.Ptr(903, 903, 1), new Range16.Ptr(1417, 1417, 1), new Range16.Ptr(1548, 1548, 1), new Range16.Ptr(1563, 1563, 1), new Range16.Ptr(1567, 1567, 1), new Range16.Ptr(1600, 1600, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1757, 1757, 1), new Range16.Ptr(2404, 2405, 1), new Range16.Ptr(3647, 3647, 1), new Range16.Ptr(4053, 4056, 1), new Range16.Ptr(4347, 4347, 1), new Range16.Ptr(5867, 5869, 1), new Range16.Ptr(5941, 5942, 1), new Range16.Ptr(6146, 6147, 1), new Range16.Ptr(6149, 6149, 1), new Range16.Ptr(7379, 7379, 1), new Range16.Ptr(7393, 7393, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7411, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(8192, 8203, 1), new Range16.Ptr(8206, 8292, 1), new Range16.Ptr(8294, 8304, 1), new Range16.Ptr(8308, 8318, 1), new Range16.Ptr(8320, 8334, 1), new Range16.Ptr(8352, 8378, 1), new Range16.Ptr(8448, 8485, 1), new Range16.Ptr(8487, 8489, 1), new Range16.Ptr(8492, 8497, 1), new Range16.Ptr(8499, 8525, 1), new Range16.Ptr(8527, 8543, 1), new Range16.Ptr(8585, 8585, 1), new Range16.Ptr(8592, 9203, 1), new Range16.Ptr(9216, 9254, 1), new Range16.Ptr(9280, 9290, 1), new Range16.Ptr(9312, 9983, 1), new Range16.Ptr(9985, 10239, 1), new Range16.Ptr(10496, 11084, 1), new Range16.Ptr(11088, 11097, 1), new Range16.Ptr(11776, 11835, 1), new Range16.Ptr(12272, 12283, 1), new Range16.Ptr(12288, 12292, 1), new Range16.Ptr(12294, 12294, 1), new Range16.Ptr(12296, 12320, 1), new Range16.Ptr(12336, 12343, 1), new Range16.Ptr(12348, 12351, 1), new Range16.Ptr(12443, 12444, 1), new Range16.Ptr(12448, 12448, 1), new Range16.Ptr(12539, 12540, 1), new Range16.Ptr(12688, 12703, 1), new Range16.Ptr(12736, 12771, 1), new Range16.Ptr(12832, 12895, 1), new Range16.Ptr(12927, 13007, 1), new Range16.Ptr(13144, 13311, 1), new Range16.Ptr(19904, 19967, 1), new Range16.Ptr(42752, 42785, 1), new Range16.Ptr(42888, 42890, 1), new Range16.Ptr(43056, 43065, 1), new Range16.Ptr(43471, 43471, 1), new Range16.Ptr(64830, 64831, 1), new Range16.Ptr(65021, 65021, 1), new Range16.Ptr(65040, 65049, 1), new Range16.Ptr(65072, 65106, 1), new Range16.Ptr(65108, 65126, 1), new Range16.Ptr(65128, 65131, 1), new Range16.Ptr(65279, 65279, 1), new Range16.Ptr(65281, 65312, 1), new Range16.Ptr(65339, 65344, 1), new Range16.Ptr(65371, 65381, 1), new Range16.Ptr(65392, 65392, 1), new Range16.Ptr(65438, 65439, 1), new Range16.Ptr(65504, 65510, 1), new Range16.Ptr(65512, 65518, 1), new Range16.Ptr(65529, 65533, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65792, 65794, 1), new Range32.Ptr(65799, 65843, 1), new Range32.Ptr(65847, 65855, 1), new Range32.Ptr(65936, 65947, 1), new Range32.Ptr(66000, 66044, 1), new Range32.Ptr(118784, 119029, 1), new Range32.Ptr(119040, 119078, 1), new Range32.Ptr(119081, 119142, 1), new Range32.Ptr(119146, 119162, 1), new Range32.Ptr(119171, 119172, 1), new Range32.Ptr(119180, 119209, 1), new Range32.Ptr(119214, 119261, 1), new Range32.Ptr(119552, 119638, 1), new Range32.Ptr(119648, 119665, 1), new Range32.Ptr(119808, 119892, 1), new Range32.Ptr(119894, 119964, 1), new Range32.Ptr(119966, 119967, 1), new Range32.Ptr(119970, 119970, 1), new Range32.Ptr(119973, 119974, 1), new Range32.Ptr(119977, 119980, 1), new Range32.Ptr(119982, 119993, 1), new Range32.Ptr(119995, 119995, 1), new Range32.Ptr(119997, 120003, 1), new Range32.Ptr(120005, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120094, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120134, 1), new Range32.Ptr(120138, 120144, 1), new Range32.Ptr(120146, 120485, 1), new Range32.Ptr(120488, 120779, 1), new Range32.Ptr(120782, 120831, 1), new Range32.Ptr(126976, 127019, 1), new Range32.Ptr(127024, 127123, 1), new Range32.Ptr(127136, 127150, 1), new Range32.Ptr(127153, 127166, 1), new Range32.Ptr(127169, 127183, 1), new Range32.Ptr(127185, 127199, 1), new Range32.Ptr(127232, 127242, 1), new Range32.Ptr(127248, 127278, 1), new Range32.Ptr(127280, 127339, 1), new Range32.Ptr(127344, 127386, 1), new Range32.Ptr(127462, 127487, 1), new Range32.Ptr(127489, 127490, 1), new Range32.Ptr(127504, 127546, 1), new Range32.Ptr(127552, 127560, 1), new Range32.Ptr(127568, 127569, 1), new Range32.Ptr(127744, 127776, 1), new Range32.Ptr(127792, 127797, 1), new Range32.Ptr(127799, 127868, 1), new Range32.Ptr(127872, 127891, 1), new Range32.Ptr(127904, 127940, 1), new Range32.Ptr(127942, 127946, 1), new Range32.Ptr(127968, 127984, 1), new Range32.Ptr(128000, 128062, 1), new Range32.Ptr(128064, 128064, 1), new Range32.Ptr(128066, 128247, 1), new Range32.Ptr(128249, 128252, 1), new Range32.Ptr(128256, 128317, 1), new Range32.Ptr(128320, 128323, 1), new Range32.Ptr(128336, 128359, 1), new Range32.Ptr(128507, 128576, 1), new Range32.Ptr(128581, 128591, 1), new Range32.Ptr(128640, 128709, 1), new Range32.Ptr(128768, 128883, 1), new Range32.Ptr(917505, 917505, 1), new Range32.Ptr(917536, 917631, 1)]), 7);
		_Coptic = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(994, 1007, 1), new Range16.Ptr(11392, 11507, 1), new Range16.Ptr(11513, 11519, 1)]), ($sliceType(Range32)).nil, 0);
		_Cuneiform = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(74752, 74850, 1), new Range32.Ptr(74864, 74867, 1)]), 0);
		_Cypriot = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67592, 1), new Range32.Ptr(67594, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67644, 1), new Range32.Ptr(67647, 67647, 1)]), 0);
		_Cyrillic = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1024, 1156, 1), new Range16.Ptr(1159, 1319, 1), new Range16.Ptr(7467, 7467, 1), new Range16.Ptr(7544, 7544, 1), new Range16.Ptr(11744, 11775, 1), new Range16.Ptr(42560, 42647, 1), new Range16.Ptr(42655, 42655, 1)]), ($sliceType(Range32)).nil, 0);
		_Deseret = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66560, 66639, 1)]), 0);
		_Devanagari = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2304, 2384, 1), new Range16.Ptr(2387, 2403, 1), new Range16.Ptr(2406, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(43232, 43259, 1)]), ($sliceType(Range32)).nil, 0);
		_Egyptian_Hieroglyphs = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(77824, 78894, 1)]), 0);
		_Ethiopic = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(4608, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4696, 1), new Range16.Ptr(4698, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4800, 1), new Range16.Ptr(4802, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4957, 4988, 1), new Range16.Ptr(4992, 5017, 1), new Range16.Ptr(11648, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(43777, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1)]), ($sliceType(Range32)).nil, 0);
		_Georgian = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(4256, 4293, 1), new Range16.Ptr(4295, 4295, 1), new Range16.Ptr(4301, 4301, 1), new Range16.Ptr(4304, 4346, 1), new Range16.Ptr(4348, 4351, 1), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11559, 1), new Range16.Ptr(11565, 11565, 1)]), ($sliceType(Range32)).nil, 0);
		_Glagolitic = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(11264, 11310, 1), new Range16.Ptr(11312, 11358, 1)]), ($sliceType(Range32)).nil, 0);
		_Gothic = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66352, 66378, 1)]), 0);
		_Greek = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(880, 883, 1), new Range16.Ptr(885, 887, 1), new Range16.Ptr(890, 893, 1), new Range16.Ptr(900, 900, 1), new Range16.Ptr(902, 902, 1), new Range16.Ptr(904, 906, 1), new Range16.Ptr(908, 908, 1), new Range16.Ptr(910, 929, 1), new Range16.Ptr(931, 993, 1), new Range16.Ptr(1008, 1023, 1), new Range16.Ptr(7462, 7466, 1), new Range16.Ptr(7517, 7521, 1), new Range16.Ptr(7526, 7530, 1), new Range16.Ptr(7615, 7615, 1), new Range16.Ptr(7936, 7957, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7968, 8005, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8025, 8025, 1), new Range16.Ptr(8027, 8027, 1), new Range16.Ptr(8029, 8029, 1), new Range16.Ptr(8031, 8061, 1), new Range16.Ptr(8064, 8116, 1), new Range16.Ptr(8118, 8132, 1), new Range16.Ptr(8134, 8147, 1), new Range16.Ptr(8150, 8155, 1), new Range16.Ptr(8157, 8175, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8190, 1), new Range16.Ptr(8486, 8486, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65856, 65930, 1), new Range32.Ptr(119296, 119365, 1)]), 0);
		_Gujarati = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2689, 2691, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2748, 2757, 1), new Range16.Ptr(2759, 2761, 1), new Range16.Ptr(2763, 2765, 1), new Range16.Ptr(2768, 2768, 1), new Range16.Ptr(2784, 2787, 1), new Range16.Ptr(2790, 2801, 1)]), ($sliceType(Range32)).nil, 0);
		_Gurmukhi = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2561, 2563, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2620, 2620, 1), new Range16.Ptr(2622, 2626, 1), new Range16.Ptr(2631, 2632, 1), new Range16.Ptr(2635, 2637, 1), new Range16.Ptr(2641, 2641, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2654, 1), new Range16.Ptr(2662, 2677, 1)]), ($sliceType(Range32)).nil, 0);
		_Han = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(11904, 11929, 1), new Range16.Ptr(11931, 12019, 1), new Range16.Ptr(12032, 12245, 1), new Range16.Ptr(12293, 12293, 1), new Range16.Ptr(12295, 12295, 1), new Range16.Ptr(12321, 12329, 1), new Range16.Ptr(12344, 12347, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1)]), new ($sliceType(Range32))([new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 0);
		_Hangul = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(4352, 4607, 1), new Range16.Ptr(12334, 12335, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12800, 12830, 1), new Range16.Ptr(12896, 12926, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(65440, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), ($sliceType(Range32)).nil, 0);
		_Hanunoo = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5920, 5940, 1)]), ($sliceType(Range32)).nil, 0);
		_Hebrew = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1425, 1479, 1), new Range16.Ptr(1488, 1514, 1), new Range16.Ptr(1520, 1524, 1), new Range16.Ptr(64285, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64318, 1), new Range16.Ptr(64320, 64321, 1), new Range16.Ptr(64323, 64324, 1), new Range16.Ptr(64326, 64335, 1)]), ($sliceType(Range32)).nil, 0);
		_Hiragana = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12445, 12447, 1)]), new ($sliceType(Range32))([new Range32.Ptr(110593, 110593, 1), new Range32.Ptr(127488, 127488, 1)]), 0);
		_Imperial_Aramaic = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67671, 67679, 1)]), 0);
		_Inherited = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(768, 879, 1), new Range16.Ptr(1157, 1158, 1), new Range16.Ptr(1611, 1621, 1), new Range16.Ptr(1648, 1648, 1), new Range16.Ptr(2385, 2386, 1), new Range16.Ptr(7376, 7378, 1), new Range16.Ptr(7380, 7392, 1), new Range16.Ptr(7394, 7400, 1), new Range16.Ptr(7405, 7405, 1), new Range16.Ptr(7412, 7412, 1), new Range16.Ptr(7616, 7654, 1), new Range16.Ptr(7676, 7679, 1), new Range16.Ptr(8204, 8205, 1), new Range16.Ptr(8400, 8432, 1), new Range16.Ptr(12330, 12333, 1), new Range16.Ptr(12441, 12442, 1), new Range16.Ptr(65024, 65039, 1), new Range16.Ptr(65056, 65062, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66045, 66045, 1), new Range32.Ptr(119143, 119145, 1), new Range32.Ptr(119163, 119170, 1), new Range32.Ptr(119173, 119179, 1), new Range32.Ptr(119210, 119213, 1), new Range32.Ptr(917760, 917999, 1)]), 0);
		_Inscriptional_Pahlavi = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68472, 68479, 1)]), 0);
		_Inscriptional_Parthian = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68440, 68447, 1)]), 0);
		_Javanese = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43392, 43469, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43486, 43487, 1)]), ($sliceType(Range32)).nil, 0);
		_Kaithi = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(69760, 69825, 1)]), 0);
		_Kannada = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(3202, 3203, 1), new Range16.Ptr(3205, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3260, 3268, 1), new Range16.Ptr(3270, 3272, 1), new Range16.Ptr(3274, 3277, 1), new Range16.Ptr(3285, 3286, 1), new Range16.Ptr(3294, 3294, 1), new Range16.Ptr(3296, 3299, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3313, 3314, 1)]), ($sliceType(Range32)).nil, 0);
		_Katakana = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(12449, 12538, 1), new Range16.Ptr(12541, 12543, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13008, 13054, 1), new Range16.Ptr(13056, 13143, 1), new Range16.Ptr(65382, 65391, 1), new Range16.Ptr(65393, 65437, 1)]), new ($sliceType(Range32))([new Range32.Ptr(110592, 110592, 1)]), 0);
		_Kayah_Li = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43264, 43311, 1)]), ($sliceType(Range32)).nil, 0);
		_Kharoshthi = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(68096, 68099, 1), new Range32.Ptr(68101, 68102, 1), new Range32.Ptr(68108, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68152, 68154, 1), new Range32.Ptr(68159, 68167, 1), new Range32.Ptr(68176, 68184, 1)]), 0);
		_Khmer = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6016, 6109, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6128, 6137, 1), new Range16.Ptr(6624, 6655, 1)]), ($sliceType(Range32)).nil, 0);
		_Lao = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3716, 1), new Range16.Ptr(3719, 3720, 1), new Range16.Ptr(3722, 3722, 1), new Range16.Ptr(3725, 3725, 1), new Range16.Ptr(3732, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3749, 1), new Range16.Ptr(3751, 3751, 1), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3769, 1), new Range16.Ptr(3771, 3773, 1), new Range16.Ptr(3776, 3780, 1), new Range16.Ptr(3782, 3782, 1), new Range16.Ptr(3784, 3789, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3804, 3807, 1)]), ($sliceType(Range32)).nil, 0);
		_Latin = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(97, 122, 1), new Range16.Ptr(170, 170, 1), new Range16.Ptr(186, 186, 1), new Range16.Ptr(192, 214, 1), new Range16.Ptr(216, 246, 1), new Range16.Ptr(248, 696, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(7424, 7461, 1), new Range16.Ptr(7468, 7516, 1), new Range16.Ptr(7522, 7525, 1), new Range16.Ptr(7531, 7543, 1), new Range16.Ptr(7545, 7614, 1), new Range16.Ptr(7680, 7935, 1), new Range16.Ptr(8305, 8305, 1), new Range16.Ptr(8319, 8319, 1), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(8490, 8491, 1), new Range16.Ptr(8498, 8498, 1), new Range16.Ptr(8526, 8526, 1), new Range16.Ptr(8544, 8584, 1), new Range16.Ptr(11360, 11391, 1), new Range16.Ptr(42786, 42887, 1), new Range16.Ptr(42891, 42894, 1), new Range16.Ptr(42896, 42899, 1), new Range16.Ptr(42912, 42922, 1), new Range16.Ptr(43000, 43007, 1), new Range16.Ptr(64256, 64262, 1), new Range16.Ptr(65313, 65338, 1), new Range16.Ptr(65345, 65370, 1)]), ($sliceType(Range32)).nil, 6);
		_Lepcha = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(7168, 7223, 1), new Range16.Ptr(7227, 7241, 1), new Range16.Ptr(7245, 7247, 1)]), ($sliceType(Range32)).nil, 0);
		_Limbu = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6432, 6443, 1), new Range16.Ptr(6448, 6459, 1), new Range16.Ptr(6464, 6464, 1), new Range16.Ptr(6468, 6479, 1)]), ($sliceType(Range32)).nil, 0);
		_Linear_B = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1)]), 0);
		_Lisu = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(42192, 42239, 1)]), ($sliceType(Range32)).nil, 0);
		_Lycian = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66176, 66204, 1)]), 0);
		_Lydian = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67903, 67903, 1)]), 0);
		_Malayalam = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(3330, 3331, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3396, 1), new Range16.Ptr(3398, 3400, 1), new Range16.Ptr(3402, 3406, 1), new Range16.Ptr(3415, 3415, 1), new Range16.Ptr(3424, 3427, 1), new Range16.Ptr(3430, 3445, 1), new Range16.Ptr(3449, 3455, 1)]), ($sliceType(Range32)).nil, 0);
		_Mandaic = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2112, 2139, 1), new Range16.Ptr(2142, 2142, 1)]), ($sliceType(Range32)).nil, 0);
		_Meetei_Mayek = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43744, 43766, 1), new Range16.Ptr(43968, 44013, 1), new Range16.Ptr(44016, 44025, 1)]), ($sliceType(Range32)).nil, 0);
		_Meroitic_Cursive = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(68000, 68023, 1), new Range32.Ptr(68030, 68031, 1)]), 0);
		_Meroitic_Hieroglyphs = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(67968, 67999, 1)]), 0);
		_Miao = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 94078, 1), new Range32.Ptr(94095, 94111, 1)]), 0);
		_Mongolian = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6144, 6145, 1), new Range16.Ptr(6148, 6148, 1), new Range16.Ptr(6150, 6158, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6176, 6263, 1), new Range16.Ptr(6272, 6314, 1)]), ($sliceType(Range32)).nil, 0);
		_Myanmar = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(4096, 4255, 1), new Range16.Ptr(43616, 43643, 1)]), ($sliceType(Range32)).nil, 0);
		_New_Tai_Lue = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6576, 6601, 1), new Range16.Ptr(6608, 6618, 1), new Range16.Ptr(6622, 6623, 1)]), ($sliceType(Range32)).nil, 0);
		_Nko = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1984, 2042, 1)]), ($sliceType(Range32)).nil, 0);
		_Ogham = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5760, 5788, 1)]), ($sliceType(Range32)).nil, 0);
		_Ol_Chiki = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(7248, 7295, 1)]), ($sliceType(Range32)).nil, 0);
		_Old_Italic = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66336, 66339, 1)]), 0);
		_Old_Persian = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66517, 1)]), 0);
		_Old_South_Arabian = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(68192, 68223, 1)]), 0);
		_Old_Turkic = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(68608, 68680, 1)]), 0);
		_Oriya = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2817, 2819, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2876, 2884, 1), new Range16.Ptr(2887, 2888, 1), new Range16.Ptr(2891, 2893, 1), new Range16.Ptr(2902, 2903, 1), new Range16.Ptr(2908, 2909, 1), new Range16.Ptr(2911, 2915, 1), new Range16.Ptr(2918, 2935, 1)]), ($sliceType(Range32)).nil, 0);
		_Osmanya = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66688, 66717, 1), new Range32.Ptr(66720, 66729, 1)]), 0);
		_Phags_Pa = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43072, 43127, 1)]), ($sliceType(Range32)).nil, 0);
		_Phoenician = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(67840, 67867, 1), new Range32.Ptr(67871, 67871, 1)]), 0);
		_Rejang = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43312, 43347, 1), new Range16.Ptr(43359, 43359, 1)]), ($sliceType(Range32)).nil, 0);
		_Runic = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5870, 5872, 1)]), ($sliceType(Range32)).nil, 0);
		_Samaritan = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2048, 2093, 1), new Range16.Ptr(2096, 2110, 1)]), ($sliceType(Range32)).nil, 0);
		_Saurashtra = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43136, 43204, 1), new Range16.Ptr(43214, 43225, 1)]), ($sliceType(Range32)).nil, 0);
		_Sharada = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(70016, 70088, 1), new Range32.Ptr(70096, 70105, 1)]), 0);
		_Shavian = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66640, 66687, 1)]), 0);
		_Sinhala = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(3458, 3459, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3517, 1), new Range16.Ptr(3520, 3526, 1), new Range16.Ptr(3530, 3530, 1), new Range16.Ptr(3535, 3540, 1), new Range16.Ptr(3542, 3542, 1), new Range16.Ptr(3544, 3551, 1), new Range16.Ptr(3570, 3572, 1)]), ($sliceType(Range32)).nil, 0);
		_Sora_Sompeng = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69872, 69881, 1)]), 0);
		_Sundanese = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(7040, 7103, 1), new Range16.Ptr(7360, 7367, 1)]), ($sliceType(Range32)).nil, 0);
		_Syloti_Nagri = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43008, 43051, 1)]), ($sliceType(Range32)).nil, 0);
		_Syriac = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1792, 1805, 1), new Range16.Ptr(1807, 1866, 1), new Range16.Ptr(1869, 1871, 1)]), ($sliceType(Range32)).nil, 0);
		_Tagalog = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5908, 1)]), ($sliceType(Range32)).nil, 0);
		_Tagbanwa = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6002, 6003, 1)]), ($sliceType(Range32)).nil, 0);
		_Tai_Le = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1)]), ($sliceType(Range32)).nil, 0);
		_Tai_Tham = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(6688, 6750, 1), new Range16.Ptr(6752, 6780, 1), new Range16.Ptr(6783, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6816, 6829, 1)]), ($sliceType(Range32)).nil, 0);
		_Tai_Viet = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(43648, 43714, 1), new Range16.Ptr(43739, 43743, 1)]), ($sliceType(Range32)).nil, 0);
		_Takri = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(71296, 71351, 1), new Range32.Ptr(71360, 71369, 1)]), 0);
		_Tamil = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(2946, 2947, 1), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2972, 1), new Range16.Ptr(2974, 2975, 1), new Range16.Ptr(2979, 2980, 1), new Range16.Ptr(2984, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3006, 3010, 1), new Range16.Ptr(3014, 3016, 1), new Range16.Ptr(3018, 3021, 1), new Range16.Ptr(3024, 3024, 1), new Range16.Ptr(3031, 3031, 1), new Range16.Ptr(3046, 3066, 1)]), ($sliceType(Range32)).nil, 0);
		_Telugu = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(3073, 3075, 1), new Range16.Ptr(3077, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3140, 1), new Range16.Ptr(3142, 3144, 1), new Range16.Ptr(3146, 3149, 1), new Range16.Ptr(3157, 3158, 1), new Range16.Ptr(3160, 3161, 1), new Range16.Ptr(3168, 3171, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3192, 3199, 1)]), ($sliceType(Range32)).nil, 0);
		_Thaana = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(1920, 1969, 1)]), ($sliceType(Range32)).nil, 0);
		_Thai = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(3585, 3642, 1), new Range16.Ptr(3648, 3675, 1)]), ($sliceType(Range32)).nil, 0);
		_Tibetan = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(3840, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3953, 3991, 1), new Range16.Ptr(3993, 4028, 1), new Range16.Ptr(4030, 4044, 1), new Range16.Ptr(4046, 4052, 1), new Range16.Ptr(4057, 4058, 1)]), ($sliceType(Range32)).nil, 0);
		_Tifinagh = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11631, 11632, 1), new Range16.Ptr(11647, 11647, 1)]), ($sliceType(Range32)).nil, 0);
		_Ugaritic = new RangeTable.Ptr(new ($sliceType(Range16))([]), new ($sliceType(Range32))([new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66463, 66463, 1)]), 0);
		_Vai = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(42240, 42539, 1)]), ($sliceType(Range32)).nil, 0);
		_Yi = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(40960, 42124, 1), new Range16.Ptr(42128, 42182, 1)]), ($sliceType(Range32)).nil, 0);
		$pkg.Arabic = _Arabic;
		$pkg.Armenian = _Armenian;
		$pkg.Avestan = _Avestan;
		$pkg.Balinese = _Balinese;
		$pkg.Bamum = _Bamum;
		$pkg.Batak = _Batak;
		$pkg.Bengali = _Bengali;
		$pkg.Bopomofo = _Bopomofo;
		$pkg.Brahmi = _Brahmi;
		$pkg.Braille = _Braille;
		$pkg.Buginese = _Buginese;
		$pkg.Buhid = _Buhid;
		$pkg.Canadian_Aboriginal = _Canadian_Aboriginal;
		$pkg.Carian = _Carian;
		$pkg.Chakma = _Chakma;
		$pkg.Cham = _Cham;
		$pkg.Cherokee = _Cherokee;
		$pkg.Common = _Common;
		$pkg.Coptic = _Coptic;
		$pkg.Cuneiform = _Cuneiform;
		$pkg.Cypriot = _Cypriot;
		$pkg.Cyrillic = _Cyrillic;
		$pkg.Deseret = _Deseret;
		$pkg.Devanagari = _Devanagari;
		$pkg.Egyptian_Hieroglyphs = _Egyptian_Hieroglyphs;
		$pkg.Ethiopic = _Ethiopic;
		$pkg.Georgian = _Georgian;
		$pkg.Glagolitic = _Glagolitic;
		$pkg.Gothic = _Gothic;
		$pkg.Greek = _Greek;
		$pkg.Gujarati = _Gujarati;
		$pkg.Gurmukhi = _Gurmukhi;
		$pkg.Han = _Han;
		$pkg.Hangul = _Hangul;
		$pkg.Hanunoo = _Hanunoo;
		$pkg.Hebrew = _Hebrew;
		$pkg.Hiragana = _Hiragana;
		$pkg.Imperial_Aramaic = _Imperial_Aramaic;
		$pkg.Inherited = _Inherited;
		$pkg.Inscriptional_Pahlavi = _Inscriptional_Pahlavi;
		$pkg.Inscriptional_Parthian = _Inscriptional_Parthian;
		$pkg.Javanese = _Javanese;
		$pkg.Kaithi = _Kaithi;
		$pkg.Kannada = _Kannada;
		$pkg.Katakana = _Katakana;
		$pkg.Kayah_Li = _Kayah_Li;
		$pkg.Kharoshthi = _Kharoshthi;
		$pkg.Khmer = _Khmer;
		$pkg.Lao = _Lao;
		$pkg.Latin = _Latin;
		$pkg.Lepcha = _Lepcha;
		$pkg.Limbu = _Limbu;
		$pkg.Linear_B = _Linear_B;
		$pkg.Lisu = _Lisu;
		$pkg.Lycian = _Lycian;
		$pkg.Lydian = _Lydian;
		$pkg.Malayalam = _Malayalam;
		$pkg.Mandaic = _Mandaic;
		$pkg.Meetei_Mayek = _Meetei_Mayek;
		$pkg.Meroitic_Cursive = _Meroitic_Cursive;
		$pkg.Meroitic_Hieroglyphs = _Meroitic_Hieroglyphs;
		$pkg.Miao = _Miao;
		$pkg.Mongolian = _Mongolian;
		$pkg.Myanmar = _Myanmar;
		$pkg.New_Tai_Lue = _New_Tai_Lue;
		$pkg.Nko = _Nko;
		$pkg.Ogham = _Ogham;
		$pkg.Ol_Chiki = _Ol_Chiki;
		$pkg.Old_Italic = _Old_Italic;
		$pkg.Old_Persian = _Old_Persian;
		$pkg.Old_South_Arabian = _Old_South_Arabian;
		$pkg.Old_Turkic = _Old_Turkic;
		$pkg.Oriya = _Oriya;
		$pkg.Osmanya = _Osmanya;
		$pkg.Phags_Pa = _Phags_Pa;
		$pkg.Phoenician = _Phoenician;
		$pkg.Rejang = _Rejang;
		$pkg.Runic = _Runic;
		$pkg.Samaritan = _Samaritan;
		$pkg.Saurashtra = _Saurashtra;
		$pkg.Sharada = _Sharada;
		$pkg.Shavian = _Shavian;
		$pkg.Sinhala = _Sinhala;
		$pkg.Sora_Sompeng = _Sora_Sompeng;
		$pkg.Sundanese = _Sundanese;
		$pkg.Syloti_Nagri = _Syloti_Nagri;
		$pkg.Syriac = _Syriac;
		$pkg.Tagalog = _Tagalog;
		$pkg.Tagbanwa = _Tagbanwa;
		$pkg.Tai_Le = _Tai_Le;
		$pkg.Tai_Tham = _Tai_Tham;
		$pkg.Tai_Viet = _Tai_Viet;
		$pkg.Takri = _Takri;
		$pkg.Tamil = _Tamil;
		$pkg.Telugu = _Telugu;
		$pkg.Thaana = _Thaana;
		$pkg.Thai = _Thai;
		$pkg.Tibetan = _Tibetan;
		$pkg.Tifinagh = _Tifinagh;
		$pkg.Ugaritic = _Ugaritic;
		$pkg.Vai = _Vai;
		$pkg.Yi = _Yi;
		var _map$1, _key$1;
		$pkg.Scripts = (_map$1 = new $Map(), _key$1 = "Arabic", _map$1[_key$1] = { k: _key$1, v: $pkg.Arabic }, _key$1 = "Armenian", _map$1[_key$1] = { k: _key$1, v: $pkg.Armenian }, _key$1 = "Avestan", _map$1[_key$1] = { k: _key$1, v: $pkg.Avestan }, _key$1 = "Balinese", _map$1[_key$1] = { k: _key$1, v: $pkg.Balinese }, _key$1 = "Bamum", _map$1[_key$1] = { k: _key$1, v: $pkg.Bamum }, _key$1 = "Batak", _map$1[_key$1] = { k: _key$1, v: $pkg.Batak }, _key$1 = "Bengali", _map$1[_key$1] = { k: _key$1, v: $pkg.Bengali }, _key$1 = "Bopomofo", _map$1[_key$1] = { k: _key$1, v: $pkg.Bopomofo }, _key$1 = "Brahmi", _map$1[_key$1] = { k: _key$1, v: $pkg.Brahmi }, _key$1 = "Braille", _map$1[_key$1] = { k: _key$1, v: $pkg.Braille }, _key$1 = "Buginese", _map$1[_key$1] = { k: _key$1, v: $pkg.Buginese }, _key$1 = "Buhid", _map$1[_key$1] = { k: _key$1, v: $pkg.Buhid }, _key$1 = "Canadian_Aboriginal", _map$1[_key$1] = { k: _key$1, v: $pkg.Canadian_Aboriginal }, _key$1 = "Carian", _map$1[_key$1] = { k: _key$1, v: $pkg.Carian }, _key$1 = "Chakma", _map$1[_key$1] = { k: _key$1, v: $pkg.Chakma }, _key$1 = "Cham", _map$1[_key$1] = { k: _key$1, v: $pkg.Cham }, _key$1 = "Cherokee", _map$1[_key$1] = { k: _key$1, v: $pkg.Cherokee }, _key$1 = "Common", _map$1[_key$1] = { k: _key$1, v: $pkg.Common }, _key$1 = "Coptic", _map$1[_key$1] = { k: _key$1, v: $pkg.Coptic }, _key$1 = "Cuneiform", _map$1[_key$1] = { k: _key$1, v: $pkg.Cuneiform }, _key$1 = "Cypriot", _map$1[_key$1] = { k: _key$1, v: $pkg.Cypriot }, _key$1 = "Cyrillic", _map$1[_key$1] = { k: _key$1, v: $pkg.Cyrillic }, _key$1 = "Deseret", _map$1[_key$1] = { k: _key$1, v: $pkg.Deseret }, _key$1 = "Devanagari", _map$1[_key$1] = { k: _key$1, v: $pkg.Devanagari }, _key$1 = "Egyptian_Hieroglyphs", _map$1[_key$1] = { k: _key$1, v: $pkg.Egyptian_Hieroglyphs }, _key$1 = "Ethiopic", _map$1[_key$1] = { k: _key$1, v: $pkg.Ethiopic }, _key$1 = "Georgian", _map$1[_key$1] = { k: _key$1, v: $pkg.Georgian }, _key$1 = "Glagolitic", _map$1[_key$1] = { k: _key$1, v: $pkg.Glagolitic }, _key$1 = "Gothic", _map$1[_key$1] = { k: _key$1, v: $pkg.Gothic }, _key$1 = "Greek", _map$1[_key$1] = { k: _key$1, v: $pkg.Greek }, _key$1 = "Gujarati", _map$1[_key$1] = { k: _key$1, v: $pkg.Gujarati }, _key$1 = "Gurmukhi", _map$1[_key$1] = { k: _key$1, v: $pkg.Gurmukhi }, _key$1 = "Han", _map$1[_key$1] = { k: _key$1, v: $pkg.Han }, _key$1 = "Hangul", _map$1[_key$1] = { k: _key$1, v: $pkg.Hangul }, _key$1 = "Hanunoo", _map$1[_key$1] = { k: _key$1, v: $pkg.Hanunoo }, _key$1 = "Hebrew", _map$1[_key$1] = { k: _key$1, v: $pkg.Hebrew }, _key$1 = "Hiragana", _map$1[_key$1] = { k: _key$1, v: $pkg.Hiragana }, _key$1 = "Imperial_Aramaic", _map$1[_key$1] = { k: _key$1, v: $pkg.Imperial_Aramaic }, _key$1 = "Inherited", _map$1[_key$1] = { k: _key$1, v: $pkg.Inherited }, _key$1 = "Inscriptional_Pahlavi", _map$1[_key$1] = { k: _key$1, v: $pkg.Inscriptional_Pahlavi }, _key$1 = "Inscriptional_Parthian", _map$1[_key$1] = { k: _key$1, v: $pkg.Inscriptional_Parthian }, _key$1 = "Javanese", _map$1[_key$1] = { k: _key$1, v: $pkg.Javanese }, _key$1 = "Kaithi", _map$1[_key$1] = { k: _key$1, v: $pkg.Kaithi }, _key$1 = "Kannada", _map$1[_key$1] = { k: _key$1, v: $pkg.Kannada }, _key$1 = "Katakana", _map$1[_key$1] = { k: _key$1, v: $pkg.Katakana }, _key$1 = "Kayah_Li", _map$1[_key$1] = { k: _key$1, v: $pkg.Kayah_Li }, _key$1 = "Kharoshthi", _map$1[_key$1] = { k: _key$1, v: $pkg.Kharoshthi }, _key$1 = "Khmer", _map$1[_key$1] = { k: _key$1, v: $pkg.Khmer }, _key$1 = "Lao", _map$1[_key$1] = { k: _key$1, v: $pkg.Lao }, _key$1 = "Latin", _map$1[_key$1] = { k: _key$1, v: $pkg.Latin }, _key$1 = "Lepcha", _map$1[_key$1] = { k: _key$1, v: $pkg.Lepcha }, _key$1 = "Limbu", _map$1[_key$1] = { k: _key$1, v: $pkg.Limbu }, _key$1 = "Linear_B", _map$1[_key$1] = { k: _key$1, v: $pkg.Linear_B }, _key$1 = "Lisu", _map$1[_key$1] = { k: _key$1, v: $pkg.Lisu }, _key$1 = "Lycian", _map$1[_key$1] = { k: _key$1, v: $pkg.Lycian }, _key$1 = "Lydian", _map$1[_key$1] = { k: _key$1, v: $pkg.Lydian }, _key$1 = "Malayalam", _map$1[_key$1] = { k: _key$1, v: $pkg.Malayalam }, _key$1 = "Mandaic", _map$1[_key$1] = { k: _key$1, v: $pkg.Mandaic }, _key$1 = "Meetei_Mayek", _map$1[_key$1] = { k: _key$1, v: $pkg.Meetei_Mayek }, _key$1 = "Meroitic_Cursive", _map$1[_key$1] = { k: _key$1, v: $pkg.Meroitic_Cursive }, _key$1 = "Meroitic_Hieroglyphs", _map$1[_key$1] = { k: _key$1, v: $pkg.Meroitic_Hieroglyphs }, _key$1 = "Miao", _map$1[_key$1] = { k: _key$1, v: $pkg.Miao }, _key$1 = "Mongolian", _map$1[_key$1] = { k: _key$1, v: $pkg.Mongolian }, _key$1 = "Myanmar", _map$1[_key$1] = { k: _key$1, v: $pkg.Myanmar }, _key$1 = "New_Tai_Lue", _map$1[_key$1] = { k: _key$1, v: $pkg.New_Tai_Lue }, _key$1 = "Nko", _map$1[_key$1] = { k: _key$1, v: $pkg.Nko }, _key$1 = "Ogham", _map$1[_key$1] = { k: _key$1, v: $pkg.Ogham }, _key$1 = "Ol_Chiki", _map$1[_key$1] = { k: _key$1, v: $pkg.Ol_Chiki }, _key$1 = "Old_Italic", _map$1[_key$1] = { k: _key$1, v: $pkg.Old_Italic }, _key$1 = "Old_Persian", _map$1[_key$1] = { k: _key$1, v: $pkg.Old_Persian }, _key$1 = "Old_South_Arabian", _map$1[_key$1] = { k: _key$1, v: $pkg.Old_South_Arabian }, _key$1 = "Old_Turkic", _map$1[_key$1] = { k: _key$1, v: $pkg.Old_Turkic }, _key$1 = "Oriya", _map$1[_key$1] = { k: _key$1, v: $pkg.Oriya }, _key$1 = "Osmanya", _map$1[_key$1] = { k: _key$1, v: $pkg.Osmanya }, _key$1 = "Phags_Pa", _map$1[_key$1] = { k: _key$1, v: $pkg.Phags_Pa }, _key$1 = "Phoenician", _map$1[_key$1] = { k: _key$1, v: $pkg.Phoenician }, _key$1 = "Rejang", _map$1[_key$1] = { k: _key$1, v: $pkg.Rejang }, _key$1 = "Runic", _map$1[_key$1] = { k: _key$1, v: $pkg.Runic }, _key$1 = "Samaritan", _map$1[_key$1] = { k: _key$1, v: $pkg.Samaritan }, _key$1 = "Saurashtra", _map$1[_key$1] = { k: _key$1, v: $pkg.Saurashtra }, _key$1 = "Sharada", _map$1[_key$1] = { k: _key$1, v: $pkg.Sharada }, _key$1 = "Shavian", _map$1[_key$1] = { k: _key$1, v: $pkg.Shavian }, _key$1 = "Sinhala", _map$1[_key$1] = { k: _key$1, v: $pkg.Sinhala }, _key$1 = "Sora_Sompeng", _map$1[_key$1] = { k: _key$1, v: $pkg.Sora_Sompeng }, _key$1 = "Sundanese", _map$1[_key$1] = { k: _key$1, v: $pkg.Sundanese }, _key$1 = "Syloti_Nagri", _map$1[_key$1] = { k: _key$1, v: $pkg.Syloti_Nagri }, _key$1 = "Syriac", _map$1[_key$1] = { k: _key$1, v: $pkg.Syriac }, _key$1 = "Tagalog", _map$1[_key$1] = { k: _key$1, v: $pkg.Tagalog }, _key$1 = "Tagbanwa", _map$1[_key$1] = { k: _key$1, v: $pkg.Tagbanwa }, _key$1 = "Tai_Le", _map$1[_key$1] = { k: _key$1, v: $pkg.Tai_Le }, _key$1 = "Tai_Tham", _map$1[_key$1] = { k: _key$1, v: $pkg.Tai_Tham }, _key$1 = "Tai_Viet", _map$1[_key$1] = { k: _key$1, v: $pkg.Tai_Viet }, _key$1 = "Takri", _map$1[_key$1] = { k: _key$1, v: $pkg.Takri }, _key$1 = "Tamil", _map$1[_key$1] = { k: _key$1, v: $pkg.Tamil }, _key$1 = "Telugu", _map$1[_key$1] = { k: _key$1, v: $pkg.Telugu }, _key$1 = "Thaana", _map$1[_key$1] = { k: _key$1, v: $pkg.Thaana }, _key$1 = "Thai", _map$1[_key$1] = { k: _key$1, v: $pkg.Thai }, _key$1 = "Tibetan", _map$1[_key$1] = { k: _key$1, v: $pkg.Tibetan }, _key$1 = "Tifinagh", _map$1[_key$1] = { k: _key$1, v: $pkg.Tifinagh }, _key$1 = "Ugaritic", _map$1[_key$1] = { k: _key$1, v: $pkg.Ugaritic }, _key$1 = "Vai", _map$1[_key$1] = { k: _key$1, v: $pkg.Vai }, _key$1 = "Yi", _map$1[_key$1] = { k: _key$1, v: $pkg.Yi }, _map$1);
		_White_Space = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(9, 13, 1), new Range16.Ptr(32, 32, 1), new Range16.Ptr(133, 133, 1), new Range16.Ptr(160, 160, 1), new Range16.Ptr(5760, 5760, 1), new Range16.Ptr(8192, 8202, 1), new Range16.Ptr(8232, 8233, 1), new Range16.Ptr(8239, 8239, 1), new Range16.Ptr(8287, 8287, 1), new Range16.Ptr(12288, 12288, 1)]), ($sliceType(Range32)).nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new ($sliceType(CaseRange))([new CaseRange.Ptr(65, 90, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(97, 122, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(181, 181, $toNativeArray("Int32", [743, 0, 743])), new CaseRange.Ptr(192, 214, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(216, 222, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(224, 246, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(248, 254, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(255, 255, $toNativeArray("Int32", [121, 0, 121])), new CaseRange.Ptr(256, 303, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(304, 304, $toNativeArray("Int32", [0, -199, 0])), new CaseRange.Ptr(305, 305, $toNativeArray("Int32", [-232, 0, -232])), new CaseRange.Ptr(306, 311, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(313, 328, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(330, 375, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(376, 376, $toNativeArray("Int32", [0, -121, 0])), new CaseRange.Ptr(377, 382, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(383, 383, $toNativeArray("Int32", [-300, 0, -300])), new CaseRange.Ptr(384, 384, $toNativeArray("Int32", [195, 0, 195])), new CaseRange.Ptr(385, 385, $toNativeArray("Int32", [0, 210, 0])), new CaseRange.Ptr(386, 389, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(390, 390, $toNativeArray("Int32", [0, 206, 0])), new CaseRange.Ptr(391, 392, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(393, 394, $toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(395, 396, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(398, 398, $toNativeArray("Int32", [0, 79, 0])), new CaseRange.Ptr(399, 399, $toNativeArray("Int32", [0, 202, 0])), new CaseRange.Ptr(400, 400, $toNativeArray("Int32", [0, 203, 0])), new CaseRange.Ptr(401, 402, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(403, 403, $toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(404, 404, $toNativeArray("Int32", [0, 207, 0])), new CaseRange.Ptr(405, 405, $toNativeArray("Int32", [97, 0, 97])), new CaseRange.Ptr(406, 406, $toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(407, 407, $toNativeArray("Int32", [0, 209, 0])), new CaseRange.Ptr(408, 409, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(410, 410, $toNativeArray("Int32", [163, 0, 163])), new CaseRange.Ptr(412, 412, $toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(413, 413, $toNativeArray("Int32", [0, 213, 0])), new CaseRange.Ptr(414, 414, $toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(415, 415, $toNativeArray("Int32", [0, 214, 0])), new CaseRange.Ptr(416, 421, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(422, 422, $toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(423, 424, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(425, 425, $toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(428, 429, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(430, 430, $toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(431, 432, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(433, 434, $toNativeArray("Int32", [0, 217, 0])), new CaseRange.Ptr(435, 438, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(439, 439, $toNativeArray("Int32", [0, 219, 0])), new CaseRange.Ptr(440, 441, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(444, 445, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(447, 447, $toNativeArray("Int32", [56, 0, 56])), new CaseRange.Ptr(452, 452, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(453, 453, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(454, 454, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(455, 455, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(456, 456, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(457, 457, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(458, 458, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(459, 459, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(460, 460, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(461, 476, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(477, 477, $toNativeArray("Int32", [-79, 0, -79])), new CaseRange.Ptr(478, 495, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(497, 497, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(498, 498, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(499, 499, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(500, 501, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(502, 502, $toNativeArray("Int32", [0, -97, 0])), new CaseRange.Ptr(503, 503, $toNativeArray("Int32", [0, -56, 0])), new CaseRange.Ptr(504, 543, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(544, 544, $toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(546, 563, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(570, 570, $toNativeArray("Int32", [0, 10795, 0])), new CaseRange.Ptr(571, 572, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(573, 573, $toNativeArray("Int32", [0, -163, 0])), new CaseRange.Ptr(574, 574, $toNativeArray("Int32", [0, 10792, 0])), new CaseRange.Ptr(575, 576, $toNativeArray("Int32", [10815, 0, 10815])), new CaseRange.Ptr(577, 578, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(579, 579, $toNativeArray("Int32", [0, -195, 0])), new CaseRange.Ptr(580, 580, $toNativeArray("Int32", [0, 69, 0])), new CaseRange.Ptr(581, 581, $toNativeArray("Int32", [0, 71, 0])), new CaseRange.Ptr(582, 591, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(592, 592, $toNativeArray("Int32", [10783, 0, 10783])), new CaseRange.Ptr(593, 593, $toNativeArray("Int32", [10780, 0, 10780])), new CaseRange.Ptr(594, 594, $toNativeArray("Int32", [10782, 0, 10782])), new CaseRange.Ptr(595, 595, $toNativeArray("Int32", [-210, 0, -210])), new CaseRange.Ptr(596, 596, $toNativeArray("Int32", [-206, 0, -206])), new CaseRange.Ptr(598, 599, $toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(601, 601, $toNativeArray("Int32", [-202, 0, -202])), new CaseRange.Ptr(603, 603, $toNativeArray("Int32", [-203, 0, -203])), new CaseRange.Ptr(608, 608, $toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(611, 611, $toNativeArray("Int32", [-207, 0, -207])), new CaseRange.Ptr(613, 613, $toNativeArray("Int32", [42280, 0, 42280])), new CaseRange.Ptr(614, 614, $toNativeArray("Int32", [42308, 0, 42308])), new CaseRange.Ptr(616, 616, $toNativeArray("Int32", [-209, 0, -209])), new CaseRange.Ptr(617, 617, $toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(619, 619, $toNativeArray("Int32", [10743, 0, 10743])), new CaseRange.Ptr(623, 623, $toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(625, 625, $toNativeArray("Int32", [10749, 0, 10749])), new CaseRange.Ptr(626, 626, $toNativeArray("Int32", [-213, 0, -213])), new CaseRange.Ptr(629, 629, $toNativeArray("Int32", [-214, 0, -214])), new CaseRange.Ptr(637, 637, $toNativeArray("Int32", [10727, 0, 10727])), new CaseRange.Ptr(640, 640, $toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(643, 643, $toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(648, 648, $toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(649, 649, $toNativeArray("Int32", [-69, 0, -69])), new CaseRange.Ptr(650, 651, $toNativeArray("Int32", [-217, 0, -217])), new CaseRange.Ptr(652, 652, $toNativeArray("Int32", [-71, 0, -71])), new CaseRange.Ptr(658, 658, $toNativeArray("Int32", [-219, 0, -219])), new CaseRange.Ptr(837, 837, $toNativeArray("Int32", [84, 0, 84])), new CaseRange.Ptr(880, 883, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(886, 887, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(891, 893, $toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(902, 902, $toNativeArray("Int32", [0, 38, 0])), new CaseRange.Ptr(904, 906, $toNativeArray("Int32", [0, 37, 0])), new CaseRange.Ptr(908, 908, $toNativeArray("Int32", [0, 64, 0])), new CaseRange.Ptr(910, 911, $toNativeArray("Int32", [0, 63, 0])), new CaseRange.Ptr(913, 929, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(931, 939, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(940, 940, $toNativeArray("Int32", [-38, 0, -38])), new CaseRange.Ptr(941, 943, $toNativeArray("Int32", [-37, 0, -37])), new CaseRange.Ptr(945, 961, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(962, 962, $toNativeArray("Int32", [-31, 0, -31])), new CaseRange.Ptr(963, 971, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(972, 972, $toNativeArray("Int32", [-64, 0, -64])), new CaseRange.Ptr(973, 974, $toNativeArray("Int32", [-63, 0, -63])), new CaseRange.Ptr(975, 975, $toNativeArray("Int32", [0, 8, 0])), new CaseRange.Ptr(976, 976, $toNativeArray("Int32", [-62, 0, -62])), new CaseRange.Ptr(977, 977, $toNativeArray("Int32", [-57, 0, -57])), new CaseRange.Ptr(981, 981, $toNativeArray("Int32", [-47, 0, -47])), new CaseRange.Ptr(982, 982, $toNativeArray("Int32", [-54, 0, -54])), new CaseRange.Ptr(983, 983, $toNativeArray("Int32", [-8, 0, -8])), new CaseRange.Ptr(984, 1007, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1008, 1008, $toNativeArray("Int32", [-86, 0, -86])), new CaseRange.Ptr(1009, 1009, $toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1010, 1010, $toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(1012, 1012, $toNativeArray("Int32", [0, -60, 0])), new CaseRange.Ptr(1013, 1013, $toNativeArray("Int32", [-96, 0, -96])), new CaseRange.Ptr(1015, 1016, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1017, 1017, $toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(1018, 1019, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1021, 1023, $toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(1024, 1039, $toNativeArray("Int32", [0, 80, 0])), new CaseRange.Ptr(1040, 1071, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(1072, 1103, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(1104, 1119, $toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1120, 1153, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1162, 1215, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1216, 1216, $toNativeArray("Int32", [0, 15, 0])), new CaseRange.Ptr(1217, 1230, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1231, 1231, $toNativeArray("Int32", [-15, 0, -15])), new CaseRange.Ptr(1232, 1319, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1329, 1366, $toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(1377, 1414, $toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(4256, 4293, $toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4295, 4295, $toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4301, 4301, $toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(7545, 7545, $toNativeArray("Int32", [35332, 0, 35332])), new CaseRange.Ptr(7549, 7549, $toNativeArray("Int32", [3814, 0, 3814])), new CaseRange.Ptr(7680, 7829, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7835, 7835, $toNativeArray("Int32", [-59, 0, -59])), new CaseRange.Ptr(7838, 7838, $toNativeArray("Int32", [0, -7615, 0])), new CaseRange.Ptr(7840, 7935, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7936, 7943, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7944, 7951, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7952, 7957, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7960, 7965, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7968, 7975, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7976, 7983, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7984, 7991, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7992, 7999, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8000, 8005, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8008, 8013, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8017, 8017, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8019, 8019, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8021, 8021, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8023, 8023, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8025, 8025, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8027, 8027, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8029, 8029, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8031, 8031, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8032, 8039, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8040, 8047, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8048, 8049, $toNativeArray("Int32", [74, 0, 74])), new CaseRange.Ptr(8050, 8053, $toNativeArray("Int32", [86, 0, 86])), new CaseRange.Ptr(8054, 8055, $toNativeArray("Int32", [100, 0, 100])), new CaseRange.Ptr(8056, 8057, $toNativeArray("Int32", [128, 0, 128])), new CaseRange.Ptr(8058, 8059, $toNativeArray("Int32", [112, 0, 112])), new CaseRange.Ptr(8060, 8061, $toNativeArray("Int32", [126, 0, 126])), new CaseRange.Ptr(8064, 8071, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8072, 8079, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8080, 8087, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8088, 8095, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8096, 8103, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8104, 8111, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8112, 8113, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8115, 8115, $toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8120, 8121, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8122, 8123, $toNativeArray("Int32", [0, -74, 0])), new CaseRange.Ptr(8124, 8124, $toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8126, 8126, $toNativeArray("Int32", [-7205, 0, -7205])), new CaseRange.Ptr(8131, 8131, $toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8136, 8139, $toNativeArray("Int32", [0, -86, 0])), new CaseRange.Ptr(8140, 8140, $toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8144, 8145, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8152, 8153, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8154, 8155, $toNativeArray("Int32", [0, -100, 0])), new CaseRange.Ptr(8160, 8161, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8165, 8165, $toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(8168, 8169, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8170, 8171, $toNativeArray("Int32", [0, -112, 0])), new CaseRange.Ptr(8172, 8172, $toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(8179, 8179, $toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8184, 8185, $toNativeArray("Int32", [0, -128, 0])), new CaseRange.Ptr(8186, 8187, $toNativeArray("Int32", [0, -126, 0])), new CaseRange.Ptr(8188, 8188, $toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8486, 8486, $toNativeArray("Int32", [0, -7517, 0])), new CaseRange.Ptr(8490, 8490, $toNativeArray("Int32", [0, -8383, 0])), new CaseRange.Ptr(8491, 8491, $toNativeArray("Int32", [0, -8262, 0])), new CaseRange.Ptr(8498, 8498, $toNativeArray("Int32", [0, 28, 0])), new CaseRange.Ptr(8526, 8526, $toNativeArray("Int32", [-28, 0, -28])), new CaseRange.Ptr(8544, 8559, $toNativeArray("Int32", [0, 16, 0])), new CaseRange.Ptr(8560, 8575, $toNativeArray("Int32", [-16, 0, -16])), new CaseRange.Ptr(8579, 8580, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(9398, 9423, $toNativeArray("Int32", [0, 26, 0])), new CaseRange.Ptr(9424, 9449, $toNativeArray("Int32", [-26, 0, -26])), new CaseRange.Ptr(11264, 11310, $toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(11312, 11358, $toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(11360, 11361, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11362, 11362, $toNativeArray("Int32", [0, -10743, 0])), new CaseRange.Ptr(11363, 11363, $toNativeArray("Int32", [0, -3814, 0])), new CaseRange.Ptr(11364, 11364, $toNativeArray("Int32", [0, -10727, 0])), new CaseRange.Ptr(11365, 11365, $toNativeArray("Int32", [-10795, 0, -10795])), new CaseRange.Ptr(11366, 11366, $toNativeArray("Int32", [-10792, 0, -10792])), new CaseRange.Ptr(11367, 11372, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11373, 11373, $toNativeArray("Int32", [0, -10780, 0])), new CaseRange.Ptr(11374, 11374, $toNativeArray("Int32", [0, -10749, 0])), new CaseRange.Ptr(11375, 11375, $toNativeArray("Int32", [0, -10783, 0])), new CaseRange.Ptr(11376, 11376, $toNativeArray("Int32", [0, -10782, 0])), new CaseRange.Ptr(11378, 11379, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11381, 11382, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11390, 11391, $toNativeArray("Int32", [0, -10815, 0])), new CaseRange.Ptr(11392, 11491, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11499, 11502, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11506, 11507, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11520, 11557, $toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11559, 11559, $toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11565, 11565, $toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(42560, 42605, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42624, 42647, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42786, 42799, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42802, 42863, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42873, 42876, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42877, 42877, $toNativeArray("Int32", [0, -35332, 0])), new CaseRange.Ptr(42878, 42887, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42891, 42892, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42893, 42893, $toNativeArray("Int32", [0, -42280, 0])), new CaseRange.Ptr(42896, 42899, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42912, 42921, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42922, 42922, $toNativeArray("Int32", [0, -42308, 0])), new CaseRange.Ptr(65313, 65338, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(65345, 65370, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(66560, 66599, $toNativeArray("Int32", [0, 40, 0])), new CaseRange.Ptr(66600, 66639, $toNativeArray("Int32", [-40, 0, -40]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = ($arrayType($Uint8, 256)).zero(); $copy(properties, $toNativeArray("Uint8", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]), ($arrayType($Uint8, 256)));
		caseOrbit = new ($sliceType(foldPair))([new foldPair.Ptr(75, 107), new foldPair.Ptr(83, 115), new foldPair.Ptr(107, 8490), new foldPair.Ptr(115, 383), new foldPair.Ptr(181, 924), new foldPair.Ptr(197, 229), new foldPair.Ptr(223, 7838), new foldPair.Ptr(229, 8491), new foldPair.Ptr(304, 304), new foldPair.Ptr(305, 305), new foldPair.Ptr(383, 83), new foldPair.Ptr(452, 453), new foldPair.Ptr(453, 454), new foldPair.Ptr(454, 452), new foldPair.Ptr(455, 456), new foldPair.Ptr(456, 457), new foldPair.Ptr(457, 455), new foldPair.Ptr(458, 459), new foldPair.Ptr(459, 460), new foldPair.Ptr(460, 458), new foldPair.Ptr(497, 498), new foldPair.Ptr(498, 499), new foldPair.Ptr(499, 497), new foldPair.Ptr(837, 921), new foldPair.Ptr(914, 946), new foldPair.Ptr(917, 949), new foldPair.Ptr(920, 952), new foldPair.Ptr(921, 953), new foldPair.Ptr(922, 954), new foldPair.Ptr(924, 956), new foldPair.Ptr(928, 960), new foldPair.Ptr(929, 961), new foldPair.Ptr(931, 962), new foldPair.Ptr(934, 966), new foldPair.Ptr(937, 969), new foldPair.Ptr(946, 976), new foldPair.Ptr(949, 1013), new foldPair.Ptr(952, 977), new foldPair.Ptr(953, 8126), new foldPair.Ptr(954, 1008), new foldPair.Ptr(956, 181), new foldPair.Ptr(960, 982), new foldPair.Ptr(961, 1009), new foldPair.Ptr(962, 963), new foldPair.Ptr(963, 931), new foldPair.Ptr(966, 981), new foldPair.Ptr(969, 8486), new foldPair.Ptr(976, 914), new foldPair.Ptr(977, 1012), new foldPair.Ptr(981, 934), new foldPair.Ptr(982, 928), new foldPair.Ptr(1008, 922), new foldPair.Ptr(1009, 929), new foldPair.Ptr(1012, 920), new foldPair.Ptr(1013, 917), new foldPair.Ptr(7776, 7777), new foldPair.Ptr(7777, 7835), new foldPair.Ptr(7835, 7776), new foldPair.Ptr(7838, 223), new foldPair.Ptr(8126, 837), new foldPair.Ptr(8486, 937), new foldPair.Ptr(8490, 75), new foldPair.Ptr(8491, 197)]);
		foldCommon = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(924, 956, 32)]), ($sliceType(Range32)).nil, 0);
		foldGreek = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(181, 837, 656)]), ($sliceType(Range32)).nil, 0);
		foldInherited = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(921, 953, 32), new Range16.Ptr(8126, 8126, 1)]), ($sliceType(Range32)).nil, 0);
		foldL = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(837, 837, 1)]), ($sliceType(Range32)).nil, 0);
		foldLl = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(192, 214, 1), new Range16.Ptr(216, 222, 1), new Range16.Ptr(256, 302, 2), new Range16.Ptr(306, 310, 2), new Range16.Ptr(313, 327, 2), new Range16.Ptr(330, 376, 2), new Range16.Ptr(377, 381, 2), new Range16.Ptr(385, 386, 1), new Range16.Ptr(388, 390, 2), new Range16.Ptr(391, 393, 2), new Range16.Ptr(394, 395, 1), new Range16.Ptr(398, 401, 1), new Range16.Ptr(403, 404, 1), new Range16.Ptr(406, 408, 1), new Range16.Ptr(412, 413, 1), new Range16.Ptr(415, 416, 1), new Range16.Ptr(418, 422, 2), new Range16.Ptr(423, 425, 2), new Range16.Ptr(428, 430, 2), new Range16.Ptr(431, 433, 2), new Range16.Ptr(434, 435, 1), new Range16.Ptr(437, 439, 2), new Range16.Ptr(440, 444, 4), new Range16.Ptr(452, 453, 1), new Range16.Ptr(455, 456, 1), new Range16.Ptr(458, 459, 1), new Range16.Ptr(461, 475, 2), new Range16.Ptr(478, 494, 2), new Range16.Ptr(497, 498, 1), new Range16.Ptr(500, 502, 2), new Range16.Ptr(503, 504, 1), new Range16.Ptr(506, 562, 2), new Range16.Ptr(570, 571, 1), new Range16.Ptr(573, 574, 1), new Range16.Ptr(577, 579, 2), new Range16.Ptr(580, 582, 1), new Range16.Ptr(584, 590, 2), new Range16.Ptr(837, 880, 43), new Range16.Ptr(882, 886, 4), new Range16.Ptr(902, 904, 2), new Range16.Ptr(905, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 913, 2), new Range16.Ptr(914, 929, 1), new Range16.Ptr(931, 939, 1), new Range16.Ptr(975, 984, 9), new Range16.Ptr(986, 1006, 2), new Range16.Ptr(1012, 1015, 3), new Range16.Ptr(1017, 1018, 1), new Range16.Ptr(1021, 1071, 1), new Range16.Ptr(1120, 1152, 2), new Range16.Ptr(1162, 1216, 2), new Range16.Ptr(1217, 1229, 2), new Range16.Ptr(1232, 1318, 2), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(4256, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(7680, 7828, 2), new Range16.Ptr(7838, 7934, 2), new Range16.Ptr(7944, 7951, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7976, 7983, 1), new Range16.Ptr(7992, 7999, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8040, 8047, 1), new Range16.Ptr(8072, 8079, 1), new Range16.Ptr(8088, 8095, 1), new Range16.Ptr(8104, 8111, 1), new Range16.Ptr(8120, 8124, 1), new Range16.Ptr(8136, 8140, 1), new Range16.Ptr(8152, 8155, 1), new Range16.Ptr(8168, 8172, 1), new Range16.Ptr(8184, 8188, 1), new Range16.Ptr(8486, 8490, 4), new Range16.Ptr(8491, 8498, 7), new Range16.Ptr(8579, 11264, 2685), new Range16.Ptr(11265, 11310, 1), new Range16.Ptr(11360, 11362, 2), new Range16.Ptr(11363, 11364, 1), new Range16.Ptr(11367, 11373, 2), new Range16.Ptr(11374, 11376, 1), new Range16.Ptr(11378, 11381, 3), new Range16.Ptr(11390, 11392, 1), new Range16.Ptr(11394, 11490, 2), new Range16.Ptr(11499, 11501, 2), new Range16.Ptr(11506, 42560, 31054), new Range16.Ptr(42562, 42604, 2), new Range16.Ptr(42624, 42646, 2), new Range16.Ptr(42786, 42798, 2), new Range16.Ptr(42802, 42862, 2), new Range16.Ptr(42873, 42877, 2), new Range16.Ptr(42878, 42886, 2), new Range16.Ptr(42891, 42893, 2), new Range16.Ptr(42896, 42898, 2), new Range16.Ptr(42912, 42922, 2), new Range16.Ptr(65313, 65338, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66560, 66599, 1)]), 3);
		foldLt = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(452, 454, 2), new Range16.Ptr(455, 457, 2), new Range16.Ptr(458, 460, 2), new Range16.Ptr(497, 499, 2), new Range16.Ptr(8064, 8071, 1), new Range16.Ptr(8080, 8087, 1), new Range16.Ptr(8096, 8103, 1), new Range16.Ptr(8115, 8131, 16), new Range16.Ptr(8179, 8179, 1)]), ($sliceType(Range32)).nil, 0);
		foldLu = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(97, 122, 1), new Range16.Ptr(181, 223, 42), new Range16.Ptr(224, 246, 1), new Range16.Ptr(248, 255, 1), new Range16.Ptr(257, 303, 2), new Range16.Ptr(307, 311, 2), new Range16.Ptr(314, 328, 2), new Range16.Ptr(331, 375, 2), new Range16.Ptr(378, 382, 2), new Range16.Ptr(383, 384, 1), new Range16.Ptr(387, 389, 2), new Range16.Ptr(392, 396, 4), new Range16.Ptr(402, 405, 3), new Range16.Ptr(409, 410, 1), new Range16.Ptr(414, 417, 3), new Range16.Ptr(419, 421, 2), new Range16.Ptr(424, 429, 5), new Range16.Ptr(432, 436, 4), new Range16.Ptr(438, 441, 3), new Range16.Ptr(445, 447, 2), new Range16.Ptr(453, 454, 1), new Range16.Ptr(456, 457, 1), new Range16.Ptr(459, 460, 1), new Range16.Ptr(462, 476, 2), new Range16.Ptr(477, 495, 2), new Range16.Ptr(498, 499, 1), new Range16.Ptr(501, 505, 4), new Range16.Ptr(507, 543, 2), new Range16.Ptr(547, 563, 2), new Range16.Ptr(572, 575, 3), new Range16.Ptr(576, 578, 2), new Range16.Ptr(583, 591, 2), new Range16.Ptr(592, 596, 1), new Range16.Ptr(598, 599, 1), new Range16.Ptr(601, 603, 2), new Range16.Ptr(608, 611, 3), new Range16.Ptr(613, 614, 1), new Range16.Ptr(616, 617, 1), new Range16.Ptr(619, 623, 4), new Range16.Ptr(625, 626, 1), new Range16.Ptr(629, 637, 8), new Range16.Ptr(640, 643, 3), new Range16.Ptr(648, 652, 1), new Range16.Ptr(658, 837, 179), new Range16.Ptr(881, 883, 2), new Range16.Ptr(887, 891, 4), new Range16.Ptr(892, 893, 1), new Range16.Ptr(940, 943, 1), new Range16.Ptr(945, 974, 1), new Range16.Ptr(976, 977, 1), new Range16.Ptr(981, 983, 1), new Range16.Ptr(985, 1007, 2), new Range16.Ptr(1008, 1010, 1), new Range16.Ptr(1013, 1019, 3), new Range16.Ptr(1072, 1119, 1), new Range16.Ptr(1121, 1153, 2), new Range16.Ptr(1163, 1215, 2), new Range16.Ptr(1218, 1230, 2), new Range16.Ptr(1231, 1319, 2), new Range16.Ptr(1377, 1414, 1), new Range16.Ptr(7545, 7549, 4), new Range16.Ptr(7681, 7829, 2), new Range16.Ptr(7835, 7841, 6), new Range16.Ptr(7843, 7935, 2), new Range16.Ptr(7936, 7943, 1), new Range16.Ptr(7952, 7957, 1), new Range16.Ptr(7968, 7975, 1), new Range16.Ptr(7984, 7991, 1), new Range16.Ptr(8000, 8005, 1), new Range16.Ptr(8017, 8023, 2), new Range16.Ptr(8032, 8039, 1), new Range16.Ptr(8048, 8061, 1), new Range16.Ptr(8112, 8113, 1), new Range16.Ptr(8126, 8144, 18), new Range16.Ptr(8145, 8160, 15), new Range16.Ptr(8161, 8165, 4), new Range16.Ptr(8526, 8580, 54), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11361, 11365, 4), new Range16.Ptr(11366, 11372, 2), new Range16.Ptr(11379, 11382, 3), new Range16.Ptr(11393, 11491, 2), new Range16.Ptr(11500, 11502, 2), new Range16.Ptr(11507, 11520, 13), new Range16.Ptr(11521, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(42561, 42605, 2), new Range16.Ptr(42625, 42647, 2), new Range16.Ptr(42787, 42799, 2), new Range16.Ptr(42803, 42863, 2), new Range16.Ptr(42874, 42876, 2), new Range16.Ptr(42879, 42887, 2), new Range16.Ptr(42892, 42897, 5), new Range16.Ptr(42899, 42913, 14), new Range16.Ptr(42915, 42921, 2), new Range16.Ptr(65345, 65370, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66600, 66639, 1)]), 4);
		foldM = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(921, 953, 32), new Range16.Ptr(8126, 8126, 1)]), ($sliceType(Range32)).nil, 0);
		foldMn = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(921, 953, 32), new Range16.Ptr(8126, 8126, 1)]), ($sliceType(Range32)).nil, 0);
		var _map$3, _key$3;
		$pkg.FoldCategory = (_map$3 = new $Map(), _key$3 = "Common", _map$3[_key$3] = { k: _key$3, v: foldCommon }, _key$3 = "Greek", _map$3[_key$3] = { k: _key$3, v: foldGreek }, _key$3 = "Inherited", _map$3[_key$3] = { k: _key$3, v: foldInherited }, _key$3 = "L", _map$3[_key$3] = { k: _key$3, v: foldL }, _key$3 = "Ll", _map$3[_key$3] = { k: _key$3, v: foldLl }, _key$3 = "Lt", _map$3[_key$3] = { k: _key$3, v: foldLt }, _key$3 = "Lu", _map$3[_key$3] = { k: _key$3, v: foldLu }, _key$3 = "M", _map$3[_key$3] = { k: _key$3, v: foldM }, _key$3 = "Mn", _map$3[_key$3] = { k: _key$3, v: foldMn }, _map$3);
		var _map$4, _key$4;
		$pkg.FoldScript = (_map$4 = new $Map(), _map$4);
	};
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, decodeRuneInternal, decodeRuneInStringInternal, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;
	decodeRuneInternal = function(p) {
		var r, size, short$1, n, _tmp, _tmp$1, _tmp$2, c0, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, c1, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, c2, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, c3, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50;
		r = 0;
		size = 0;
		short$1 = false;
		n = p.length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = ((0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0]);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = ((1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1]);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = ((2 < 0 || 2 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 2]);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = ((3 < 0 || 3 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 3]);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var r, size, short$1, n, _tmp, _tmp$1, _tmp$2, c0, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, c1, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, c2, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, c3, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50;
		r = 0;
		size = 0;
		short$1 = false;
		n = s.length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	DecodeRune = $pkg.DecodeRune = function(p) {
		var r, size, _tuple;
		r = 0;
		size = 0;
		_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeRuneInString = $pkg.DecodeRuneInString = function(s) {
		var r, size, _tuple;
		r = 0;
		size = 0;
		_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeLastRune = $pkg.DecodeLastRune = function(p) {
		var r, size, end, _tmp, _tmp$1, start, _tmp$2, _tmp$3, lim, _tuple, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		r = 0;
		size = 0;
		end = p.length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - 1 >> 0;
		while (start >= lim) {
			if (RuneStart(((start < 0 || start >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + start]))) {
				break;
			}
			start = start - 1 >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	DecodeLastRuneInString = $pkg.DecodeLastRuneInString = function(s) {
		var r, size, end, _tmp, _tmp$1, start, _tmp$2, _tmp$3, lim, _tuple, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - 1 >> 0;
		while (start >= lim) {
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - 1 >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString(s.substring(start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	RuneLen = $pkg.RuneLen = function(r) {
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	EncodeRune = $pkg.EncodeRune = function(p, r) {
		var i;
		i = (r >>> 0);
		if (i <= 127) {
			(0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0] = (r << 24 >>> 24);
			return 1;
		} else if (i <= 2047) {
			(0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 2;
		} else if (i > 1114111 || 55296 <= i && i <= 57343) {
			r = 65533;
			(0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 3;
		} else if (i <= 65535) {
			(0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 3;
		} else {
			(0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 2] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(3 < 0 || 3 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 3] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 4;
		}
	};
	RuneCount = $pkg.RuneCount = function(p) {
		var i, n, _tuple, size;
		i = 0;
		n = 0;
		n = 0;
		while (i < p.length) {
			if (((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]) < 128) {
				i = i + 1 >> 0;
			} else {
				_tuple = DecodeRune($subslice(p, i)); size = _tuple[1];
				i = i + (size) >> 0;
			}
			n = n + 1 >> 0;
		}
		return n;
	};
	RuneCountInString = $pkg.RuneCountInString = function(s) {
		var n, _ref, _i, _rune;
		n = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			n = n + 1 >> 0;
			_i += _rune[1];
		}
		return n;
	};
	RuneStart = $pkg.RuneStart = function(b) {
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, errors = $packages["errors"], io = $packages["io"], utf8 = $packages["unicode/utf8"], unicode = $packages["unicode"], Buffer, readOp, Reader, IndexByte, Equal, makeSlice, NewBuffer, NewBufferString, explode, Count, Contains, Index, genSplit, Split, Join, HasPrefix, Map, ToLower, Replace, NewReader;
	Buffer = $pkg.Buffer = $newType(0, "Struct", "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.runeBytes = runeBytes_ !== undefined ? runeBytes_ : ($arrayType($Uint8, 4)).zero();
		this.bootstrap = bootstrap_ !== undefined ? bootstrap_ : ($arrayType($Uint8, 64)).zero();
		this.lastRead = lastRead_ !== undefined ? lastRead_ : 0;
	});
	readOp = $pkg.readOp = $newType(4, "Int", "bytes.readOp", "readOp", "bytes", null);
	Reader = $pkg.Reader = $newType(0, "Struct", "bytes.Reader", "Reader", "bytes", function(s_, i_, prevRune_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : ($sliceType($Uint8)).nil;
		this.i = i_ !== undefined ? i_ : new $Int64(0, 0);
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
	});
	IndexByte = $pkg.IndexByte = function(s, c) {
		var _ref, _i, i, b;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	Equal = $pkg.Equal = function(a, b) {
		var _ref, _i, i, c;
		if (!((a.length === b.length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (!((c === ((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Buffer.Ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.Ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ($ptrType(Buffer)).nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.Ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.Ptr.prototype.Truncate = function(n) {
		var b;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			throw $panic(new $String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.Ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.Ptr.prototype.grow = function(n) {
		var b, m, buf, _q, x;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.length + n >> 0) > b.buf.capacity) {
			buf = ($sliceType($Uint8)).nil;
			if (b.buf === ($sliceType($Uint8)).nil && n <= 64) {
				buf = $subslice(new ($sliceType($Uint8))(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((x = b.buf.capacity, (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.Ptr.prototype.Grow = function(n) {
		var b, m;
		b = this;
		if (n < 0) {
			throw $panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.Ptr.prototype.Write = function(p) {
		var n, err, b, m, _tmp, _tmp$1;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.length);
		_tmp = $copySlice($subslice(b.buf, m), p); _tmp$1 = null; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.Ptr.prototype.WriteString = function(s) {
		var n, err, b, m, _tmp, _tmp$1;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s); _tmp$1 = null; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.Ptr.prototype.ReadFrom = function(r) {
		var n, err, b, free, newBuf, x, _tuple, m, e, x$1, _tmp, _tmp$1, _tmp$2, _tmp$3;
		n = new $Int64(0, 0);
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
		}
		while (true) {
			free = b.buf.capacity - b.buf.length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((x = b.buf.capacity, (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.length - b.off >> 0));
				b.off = 0;
			}
			_tuple = r.Read($subslice(b.buf, b.buf.length, b.buf.capacity)); m = _tuple[0]; e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.length + m >> 0));
			n = (x$1 = new $Int64(0, m), new $Int64(n.high + x$1.high, n.low + x$1.low));
			if ($interfaceIsEqual(e, io.EOF)) {
				break;
			}
			if (!($interfaceIsEqual(e, null))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		}
		_tmp$2 = n; _tmp$3 = null; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $deferred = [];
		try {
			$deferred.push({ fun: (function() {
				if (!($interfaceIsEqual($recover(), null))) {
					throw $panic($pkg.ErrTooLarge);
				}
			}), args: [] });
			return ($sliceType($Uint8)).make(n, 0, function() { return 0; });
		} catch($err) {
			$pushErr($err);
			return ($sliceType($Uint8)).nil;
		} finally {
			$callDeferred($deferred);
		}
	};
	Buffer.Ptr.prototype.WriteTo = function(w) {
		var n, err, b, nBytes, _tuple, m, e, _tmp, _tmp$1, _tmp$2, _tmp$3;
		n = new $Int64(0, 0);
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off < b.buf.length) {
			nBytes = b.Len();
			_tuple = w.Write($subslice(b.buf, b.off)); m = _tuple[0]; e = _tuple[1];
			if (m > nBytes) {
				throw $panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, null))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n; _tmp$3 = io.ErrShortWrite; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		}
		b.Truncate(0);
		return [n, err];
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.Ptr.prototype.WriteByte = function(c) {
		var b, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, (m < 0 || m >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + m] = c);
		return null;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.Ptr.prototype.WriteRune = function(r) {
		var n, err, b, _tmp, _tmp$1, _tmp$2, _tmp$3;
		n = 0;
		err = null;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1; _tmp$1 = null; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new ($sliceType($Uint8))(b.runeBytes), 0), r);
		b.Write($subslice(new ($sliceType($Uint8))(b.runeBytes), 0, n));
		_tmp$2 = n; _tmp$3 = null; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.Ptr.prototype.Read = function(p) {
		var n, err, b, _tmp, _tmp$1;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			if (p.length === 0) {
				return [n, err];
			}
			_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.Ptr.prototype.Next = function(n) {
		var b, m, data;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.Ptr.prototype.ReadByte = function() {
		var c, err, b, _tmp, _tmp$1, x, x$1, _tmp$2, _tmp$3;
		c = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = io.EOF; c = _tmp; err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		b.off = b.off + 1 >> 0;
		b.lastRead = 2;
		_tmp$2 = c; _tmp$3 = null; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.Ptr.prototype.ReadRune = function() {
		var r, size, err, b, _tmp, _tmp$1, _tmp$2, x, x$1, c, _tmp$3, _tmp$4, _tmp$5, _tuple, n, _tmp$6, _tmp$7, _tmp$8;
		r = 0;
		size = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		if (c < 128) {
			b.off = b.off + 1 >> 0;
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = null; r = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off)); r = _tuple[0]; n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r; _tmp$7 = n; _tmp$8 = null; r = _tmp$6; size = _tmp$7; err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.Ptr.prototype.UnreadRune = function() {
		var b, _tuple, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off)); n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return null;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.Ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - 1 >> 0;
		}
		return null;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.Ptr.prototype.ReadBytes = function(delim) {
		var line, err, b, _tuple, slice;
		line = ($sliceType($Uint8)).nil;
		err = null;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.Ptr.prototype.readSlice = function(delim) {
		var line, err, b, i, end, _tmp, _tmp$1;
		line = ($sliceType($Uint8)).nil;
		err = null;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.Ptr.prototype.ReadString = function(delim) {
		var line, err, b, _tuple, slice, _tmp, _tmp$1;
		line = "";
		err = null;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		_tmp = $bytesToString(slice); _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = $pkg.NewBuffer = function(buf) {
		return new Buffer.Ptr(buf, 0, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 64)).zero(), 0);
	};
	NewBufferString = $pkg.NewBufferString = function(s) {
		return new Buffer.Ptr(new ($sliceType($Uint8))($stringToBytes(s)), 0, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 64)).zero(), 0);
	};
	explode = function(s, n) {
		var a, size, na, _tuple;
		if (n <= 0) {
			n = s.length;
		}
		a = ($sliceType(($sliceType($Uint8)))).make(n, 0, function() { return ($sliceType($Uint8)).nil; });
		size = 0;
		na = 0;
		while (s.length > 0) {
			if ((na + 1 >> 0) >= n) {
				(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = s;
				na = na + 1 >> 0;
				break;
			}
			_tuple = utf8.DecodeRune(s); size = _tuple[1];
			(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = $subslice(s, 0, size);
			s = $subslice(s, size);
			na = na + 1 >> 0;
		}
		return $subslice(a, 0, na);
	};
	Count = $pkg.Count = function(s, sep) {
		var n, count, c, i, t, o;
		n = sep.length;
		if (n === 0) {
			return utf8.RuneCount(s) + 1 >> 0;
		}
		if (n > s.length) {
			return 0;
		}
		count = 0;
		c = ((0 < 0 || 0 >= sep.length) ? $throwRuntimeError("index out of range") : sep.array[sep.offset + 0]);
		i = 0;
		t = $subslice(s, 0, ((s.length - n >> 0) + 1 >> 0));
		while (i < t.length) {
			if (!((((i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t.array[t.offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if ((n === 1) || Equal($subslice(s, i, (i + n >> 0)), sep)) {
				count = count + 1 >> 0;
				i = i + (n) >> 0;
				continue;
			}
			i = i + 1 >> 0;
		}
		return count;
	};
	Contains = $pkg.Contains = function(b, subslice) {
		return !((Index(b, subslice) === -1));
	};
	Index = $pkg.Index = function(s, sep) {
		var n, c, i, t, o;
		n = sep.length;
		if (n === 0) {
			return 0;
		}
		if (n > s.length) {
			return -1;
		}
		c = ((0 < 0 || 0 >= sep.length) ? $throwRuntimeError("index out of range") : sep.array[sep.offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.length - n >> 0) + 1 >> 0));
		while (i < t.length) {
			if (!((((i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t.array[t.offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + 1 >> 0;
		}
		return -1;
	};
	genSplit = function(s, sep, sepSave, n) {
		var c, start, a, na, i;
		if (n === 0) {
			return ($sliceType(($sliceType($Uint8)))).nil;
		}
		if (sep.length === 0) {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = ((0 < 0 || 0 >= sep.length) ? $throwRuntimeError("index out of range") : sep.array[sep.offset + 0]);
		start = 0;
		a = ($sliceType(($sliceType($Uint8)))).make(n, 0, function() { return ($sliceType($Uint8)).nil; });
		na = 0;
		i = 0;
		while ((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n) {
			if ((((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]) === c) && ((sep.length === 1) || Equal($subslice(s, i, (i + sep.length >> 0)), sep))) {
				(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = $subslice(s, start, (i + sepSave >> 0));
				na = na + 1 >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + 1 >> 0;
		}
		(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = $subslice(s, start);
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = $pkg.Split = function(s, sep) {
		return genSplit(s, sep, 0, -1);
	};
	Join = $pkg.Join = function(s, sep) {
		var x, x$1, n, _ref, _i, v, b, bp, _ref$1, _i$1, v$1;
		if (s.length === 0) {
			return new ($sliceType($Uint8))([]);
		}
		if (s.length === 1) {
			return $appendSlice(($sliceType($Uint8)).nil, ((0 < 0 || 0 >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + 0]));
		}
		n = (x = sep.length, x$1 = (s.length - 1 >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			v = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			n = n + (v.length) >> 0;
			_i++;
		}
		b = ($sliceType($Uint8)).make(n, 0, function() { return 0; });
		bp = $copySlice(b, ((0 < 0 || 0 >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + 0]));
		_ref$1 = $subslice(s, 1);
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]);
			bp = bp + ($copySlice($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copySlice($subslice(b, bp), v$1)) >> 0;
			_i$1++;
		}
		return b;
	};
	HasPrefix = $pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && Equal($subslice(s, 0, prefix.length), prefix);
	};
	Map = $pkg.Map = function(mapping, s) {
		var maxbytes, nbytes, b, i, wid, r, _tuple, rl, nb;
		maxbytes = s.length;
		nbytes = 0;
		b = ($sliceType($Uint8)).make(maxbytes, 0, function() { return 0; });
		i = 0;
		while (i < s.length) {
			wid = 1;
			r = (((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; wid = _tuple[1];
			}
			r = mapping(r);
			if (r >= 0) {
				rl = utf8.RuneLen(r);
				if (rl < 0) {
					rl = 3;
				}
				if ((nbytes + rl >> 0) > maxbytes) {
					maxbytes = ((((maxbytes >>> 16 << 16) * 2 >> 0) + (maxbytes << 16 >>> 16) * 2) >> 0) + 4 >> 0;
					nb = ($sliceType($Uint8)).make(maxbytes, 0, function() { return 0; });
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			i = i + (wid) >> 0;
		}
		return $subslice(b, 0, nbytes);
	};
	ToLower = $pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	Replace = $pkg.Replace = function(s, old, new$1, n) {
		var m, x, t, w, start, i, j, _tuple, wid;
		m = 0;
		if (!((n === 0))) {
			m = Count(s, old);
		}
		if (m === 0) {
			return $appendSlice(($sliceType($Uint8)).nil, s);
		}
		if (n < 0 || m < n) {
			n = m;
		}
		t = ($sliceType($Uint8)).make((s.length + (x = (new$1.length - old.length >> 0), (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0) >> 0), 0, function() { return 0; });
		w = 0;
		start = 0;
		i = 0;
		while (i < n) {
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRune($subslice(s, start)); wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($subslice(s, start), old)) >> 0;
			}
			w = w + ($copySlice($subslice(t, w), $subslice(s, start, j))) >> 0;
			w = w + ($copySlice($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + 1 >> 0;
		}
		w = w + ($copySlice($subslice(t, w), $subslice(s, start))) >> 0;
		return $subslice(t, 0, w);
	};
	Reader.Ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.high > x$1.high || (x.high === x$1.high && x.low >= x$1.low)))) {
			return 0;
		}
		return ((x$2 = (x$3 = new $Int64(0, r.s.length), x$4 = r.i, new $Int64(x$3.high - x$4.high, x$3.low - x$4.low)), x$2.low + ((x$2.high >> 31) * 4294967296)) >> 0);
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.Ptr.prototype.Read = function(b) {
		var n, err, r, _tmp, _tmp$1, x, x$1, _tmp$2, _tmp$3, x$2, x$3;
		n = 0;
		err = null;
		r = this;
		if (b.length === 0) {
			_tmp = 0; _tmp$1 = null; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.high > x$1.high || (x.high === x$1.high && x.low >= x$1.low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.high + x$3.high, x$2.low + x$3.low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.Ptr.prototype.ReadAt = function(b, off) {
		var n, err, r, _tmp, _tmp$1, x, _tmp$2, _tmp$3;
		n = 0;
		err = null;
		r = this;
		if ((off.high < 0 || (off.high === 0 && off.low < 0))) {
			_tmp = 0; _tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset"); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = new $Int64(0, r.s.length), (off.high > x.high || (off.high === x.high && off.low >= x.low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.Ptr.prototype.ReadByte = function() {
		var b, err, r, x, x$1, _tmp, _tmp$1, x$2, x$3, x$4;
		b = 0;
		err = null;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.high > x$1.high || (x.high === x$1.high && x.low >= x$1.low)))) {
			_tmp = 0; _tmp$1 = io.EOF; b = _tmp; err = _tmp$1;
			return [b, err];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, new $Int64(x$4.high + 0, x$4.low + 1));
		return [b, err];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.Ptr.prototype.UnreadByte = function() {
		var r, x, x$1;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.high < 0 || (x.high === 0 && x.low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, new $Int64(x$1.high - 0, x$1.low - 1));
		return null;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.Ptr.prototype.ReadRune = function() {
		var ch, size, err, r, x, x$1, _tmp, _tmp$1, _tmp$2, x$2, x$3, x$4, c, x$5, _tmp$3, _tmp$4, _tmp$5, _tuple, x$6, x$7;
		ch = 0;
		size = 0;
		err = null;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.high > x$1.high || (x.high === x$1.high && x.low >= x$1.low)))) {
			r.prevRune = -1;
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; ch = _tmp; size = _tmp$1; err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = ((x$2 = r.i, x$2.low + ((x$2.high >> 31) * 4294967296)) >> 0);
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, new $Int64(x$5.high + 0, x$5.low + 1));
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = null; ch = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i))); ch = _tuple[0]; size = _tuple[1];
		r.i = (x$6 = r.i, x$7 = new $Int64(0, size), new $Int64(x$6.high + x$7.high, x$6.low + x$7.low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.Ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = new $Int64(0, r.prevRune);
		r.prevRune = -1;
		return null;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.Ptr.prototype.Seek = function(offset, whence) {
		var r, abs, _ref, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_ref = whence;
		if (_ref === 0) {
			abs = offset;
		} else if (_ref === 1) {
			abs = (x = r.i, new $Int64(x.high + offset.high, x.low + offset.low));
		} else if (_ref === 2) {
			abs = (x$1 = new $Int64(0, r.s.length), new $Int64(x$1.high + offset.high, x$1.low + offset.low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.high < 0 || (abs.high === 0 && abs.low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, null];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.Ptr.prototype.WriteTo = function(w) {
		var n, err, r, x, x$1, _tmp, _tmp$1, b, _tuple, m, x$2, x$3;
		n = new $Int64(0, 0);
		err = null;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.high > x$1.high || (x.high === x$1.high && x.low >= x$1.low)))) {
			_tmp = new $Int64(0, 0); _tmp$1 = null; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_tuple = w.Write(b); m = _tuple[0]; err = _tuple[1];
		if (m > b.length) {
			throw $panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.high + x$3.high, x$2.low + x$3.low));
		n = new $Int64(0, m);
		if (!((m === b.length)) && $interfaceIsEqual(err, null)) {
			err = io.ErrShortWrite;
		}
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	NewReader = $pkg.NewReader = function(b) {
		return new Reader.Ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.$init = function() {
		($ptrType(Buffer)).methods = [["Bytes", "Bytes", "", [], [($sliceType($Uint8))], false, -1], ["Grow", "Grow", "", [$Int], [], false, -1], ["Len", "Len", "", [], [$Int], false, -1], ["Next", "Next", "", [$Int], [($sliceType($Uint8))], false, -1], ["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["ReadByte", "ReadByte", "", [], [$Uint8, $error], false, -1], ["ReadBytes", "ReadBytes", "", [$Uint8], [($sliceType($Uint8)), $error], false, -1], ["ReadFrom", "ReadFrom", "", [io.Reader], [$Int64, $error], false, -1], ["ReadRune", "ReadRune", "", [], [$Int32, $Int, $error], false, -1], ["ReadString", "ReadString", "", [$Uint8], [$String, $error], false, -1], ["Reset", "Reset", "", [], [], false, -1], ["String", "String", "", [], [$String], false, -1], ["Truncate", "Truncate", "", [$Int], [], false, -1], ["UnreadByte", "UnreadByte", "", [], [$error], false, -1], ["UnreadRune", "UnreadRune", "", [], [$error], false, -1], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["WriteByte", "WriteByte", "", [$Uint8], [$error], false, -1], ["WriteRune", "WriteRune", "", [$Int32], [$Int, $error], false, -1], ["WriteString", "WriteString", "", [$String], [$Int, $error], false, -1], ["WriteTo", "WriteTo", "", [io.Writer], [$Int64, $error], false, -1], ["grow", "grow", "bytes", [$Int], [$Int], false, -1], ["readSlice", "readSlice", "bytes", [$Uint8], [($sliceType($Uint8)), $error], false, -1]];
		Buffer.init([["buf", "buf", "bytes", ($sliceType($Uint8)), ""], ["off", "off", "bytes", $Int, ""], ["runeBytes", "runeBytes", "bytes", ($arrayType($Uint8, 4)), ""], ["bootstrap", "bootstrap", "bytes", ($arrayType($Uint8, 64)), ""], ["lastRead", "lastRead", "bytes", readOp, ""]]);
		($ptrType(Reader)).methods = [["Len", "Len", "", [], [$Int], false, -1], ["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["ReadAt", "ReadAt", "", [($sliceType($Uint8)), $Int64], [$Int, $error], false, -1], ["ReadByte", "ReadByte", "", [], [$Uint8, $error], false, -1], ["ReadRune", "ReadRune", "", [], [$Int32, $Int, $error], false, -1], ["Seek", "Seek", "", [$Int64, $Int], [$Int64, $error], false, -1], ["UnreadByte", "UnreadByte", "", [], [$error], false, -1], ["UnreadRune", "UnreadRune", "", [], [$error], false, -1], ["WriteTo", "WriteTo", "", [io.Writer], [$Int64, $error], false, -1]];
		Reader.init([["s", "s", "bytes", ($sliceType($Uint8)), ""], ["i", "i", "bytes", $Int64, ""], ["prevRune", "prevRune", "bytes", $Int, ""]]);
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
	};
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], math, zero, posInf, negInf, nan, pow10tab, init, Inf, IsInf, Ldexp, NaN, Float32bits, Float32frombits, Float64bits, Float64frombits, init$1;
	init = function() {
		Float32bits(0);
		Float32frombits(0);
	};
	Inf = $pkg.Inf = function(sign) {
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	IsInf = $pkg.IsInf = function(f, sign) {
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	Ldexp = $pkg.Ldexp = function(frac, exp$1) {
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * $parseFloat(math.pow(2, 1023)) * $parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * $parseFloat(math.pow(2, -1023)) * $parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * $parseFloat(math.pow(2, exp$1));
	};
	NaN = $pkg.NaN = function() {
		return nan;
	};
	Float32bits = $pkg.Float32bits = function(f) {
		var s, e, r;
		if ($float32IsEqual(f, 0)) {
			if ($float32IsEqual(1 / f, negInf)) {
				return 2147483648;
			}
			return 0;
		}
		if (!(($float32IsEqual(f, f)))) {
			return 2143289344;
		}
		s = 0;
		if (f < 0) {
			s = 2147483648;
			f = -f;
		}
		e = 150;
		while (f >= 1.6777216e+07) {
			f = f / 2;
			if (e === 255) {
				break;
			}
			e = e + 1 >>> 0;
		}
		while (f < 8.388608e+06) {
			e = e - 1 >>> 0;
			if (e === 0) {
				break;
			}
			f = f * 2;
		}
		r = $parseFloat($mod(f, 2));
		if ((r > 0.5 && r < 1) || r >= 1.5) {
			f = f + 1;
		}
		return (((s | (e << 23 >>> 0)) >>> 0) | (((f >> 0) & ~8388608))) >>> 0;
	};
	Float32frombits = $pkg.Float32frombits = function(b) {
		var s, e, m;
		s = 1;
		if (!((((b & 2147483648) >>> 0) === 0))) {
			s = -1;
		}
		e = (((b >>> 23 >>> 0)) & 255) >>> 0;
		m = (b & 8388607) >>> 0;
		if (e === 255) {
			if (m === 0) {
				return s / 0;
			}
			return nan;
		}
		if (!((e === 0))) {
			m = m + 8388608 >>> 0;
		}
		if (e === 0) {
			e = 1;
		}
		return Ldexp(m, ((e >> 0) - 127 >> 0) - 23 >> 0) * s;
	};
	Float64bits = $pkg.Float64bits = function(f) {
		var s, e, x, x$1, x$2, x$3;
		if (f === 0) {
			if (1 / f === negInf) {
				return new $Uint64(2147483648, 0);
			}
			return new $Uint64(0, 0);
		}
		if (!((f === f))) {
			return new $Uint64(2146959360, 1);
		}
		s = new $Uint64(0, 0);
		if (f < 0) {
			s = new $Uint64(2147483648, 0);
			f = -f;
		}
		e = 1075;
		while (f >= 9.007199254740992e+15) {
			f = f / 2;
			if (e === 2047) {
				break;
			}
			e = e + 1 >>> 0;
		}
		while (f < 4.503599627370496e+15) {
			e = e - 1 >>> 0;
			if (e === 0) {
				break;
			}
			f = f * 2;
		}
		return (x = (x$1 = $shiftLeft64(new $Uint64(0, e), 52), new $Uint64(s.high | x$1.high, (s.low | x$1.low) >>> 0)), x$2 = (x$3 = new $Uint64(0, f), new $Uint64(x$3.high &~ 1048576, (x$3.low &~ 0) >>> 0)), new $Uint64(x.high | x$2.high, (x.low | x$2.low) >>> 0));
	};
	Float64frombits = $pkg.Float64frombits = function(b) {
		var s, x, x$1, e, m;
		s = 1;
		if (!((x = new $Uint64(b.high & 2147483648, (b.low & 0) >>> 0), (x.high === 0 && x.low === 0)))) {
			s = -1;
		}
		e = (x$1 = $shiftRightUint64(b, 52), new $Uint64(x$1.high & 0, (x$1.low & 2047) >>> 0));
		m = new $Uint64(b.high & 1048575, (b.low & 4294967295) >>> 0);
		if ((e.high === 0 && e.low === 2047)) {
			if ((m.high === 0 && m.low === 0)) {
				return s / 0;
			}
			return nan;
		}
		if (!((e.high === 0 && e.low === 0))) {
			m = new $Uint64(m.high + 1048576, m.low + 0);
		}
		if ((e.high === 0 && e.low === 0)) {
			e = new $Uint64(0, 1);
		}
		return Ldexp($flatten64(m), ((e.low >> 0) - 1023 >> 0) - 52 >> 0) * s;
	};
	init$1 = function() {
		var i, _q, m;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (i < 70) {
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			pow10tab[i] = pow10tab[m] * pow10tab[(i - m >> 0)];
			i = i + 1 >> 0;
		}
	};
	$pkg.$init = function() {
		pow10tab = ($arrayType($Float64, 70)).zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
	};
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], js = $packages["github.com/gopherjs/gopherjs/js"], sync = $packages["sync"], runtime = $packages["runtime"], errors = $packages["errors"], SysProcAttr, Credential, ProcAttr, WaitStatus, mmapper, Errno, Signal, _C_int, Timespec, Timeval, Rusage, Stat_t, Dirent, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, zeroProcAttr, zeroSysProcAttr, mapper, errors$1, signals, printWarning, printToConsole, init, syscall, Syscall, Syscall6, RawSyscall, BytePtrFromString, copyenv, Getenv, Environ, runtime_BeforeFork, runtime_AfterFork, forkAndExecInChild, forkExecPipe, SlicePtrFromStrings, CloseOnExec, forkExec, StartProcess, itoa, ByteSliceFromString, ReadDirent, Wait4, Sysctl, nametomib, ParseDirent, Pipe, Kill, Read, Write, wait4, sysctl, fcntl, pipe, kill, Close, Exit, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Open, Pread, Pwrite, read, Seek, Stat, write, mmap, munmap, readlen;
	SysProcAttr = $pkg.SysProcAttr = $newType(0, "Struct", "syscall.SysProcAttr", "SysProcAttr", "syscall", function(Chroot_, Credential_, Ptrace_, Setsid_, Setpgid_, Setctty_, Noctty_) {
		this.$val = this;
		this.Chroot = Chroot_ !== undefined ? Chroot_ : "";
		this.Credential = Credential_ !== undefined ? Credential_ : ($ptrType(Credential)).nil;
		this.Ptrace = Ptrace_ !== undefined ? Ptrace_ : false;
		this.Setsid = Setsid_ !== undefined ? Setsid_ : false;
		this.Setpgid = Setpgid_ !== undefined ? Setpgid_ : false;
		this.Setctty = Setctty_ !== undefined ? Setctty_ : false;
		this.Noctty = Noctty_ !== undefined ? Noctty_ : false;
	});
	Credential = $pkg.Credential = $newType(0, "Struct", "syscall.Credential", "Credential", "syscall", function(Uid_, Gid_, Groups_) {
		this.$val = this;
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Groups = Groups_ !== undefined ? Groups_ : ($sliceType($Uint32)).nil;
	});
	ProcAttr = $pkg.ProcAttr = $newType(0, "Struct", "syscall.ProcAttr", "ProcAttr", "syscall", function(Dir_, Env_, Files_, Sys_) {
		this.$val = this;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Env = Env_ !== undefined ? Env_ : ($sliceType($String)).nil;
		this.Files = Files_ !== undefined ? Files_ : ($sliceType($Uintptr)).nil;
		this.Sys = Sys_ !== undefined ? Sys_ : ($ptrType(SysProcAttr)).nil;
	});
	WaitStatus = $pkg.WaitStatus = $newType(4, "Uint32", "syscall.WaitStatus", "WaitStatus", "syscall", null);
	mmapper = $pkg.mmapper = $newType(0, "Struct", "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.Ptr();
		this.active = active_ !== undefined ? active_ : false;
		this.mmap = mmap_ !== undefined ? mmap_ : $throwNilPointerError;
		this.munmap = munmap_ !== undefined ? munmap_ : $throwNilPointerError;
	});
	Errno = $pkg.Errno = $newType(4, "Uintptr", "syscall.Errno", "Errno", "syscall", null);
	Signal = $pkg.Signal = $newType(4, "Int", "syscall.Signal", "Signal", "syscall", null);
	_C_int = $pkg._C_int = $newType(4, "Int32", "syscall._C_int", "_C_int", "syscall", null);
	Timespec = $pkg.Timespec = $newType(0, "Struct", "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new $Int64(0, 0);
		this.Nsec = Nsec_ !== undefined ? Nsec_ : new $Int64(0, 0);
	});
	Timeval = $pkg.Timeval = $newType(0, "Struct", "syscall.Timeval", "Timeval", "syscall", function(Sec_, Usec_, Pad_cgo_0_) {
		this.$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new $Int64(0, 0);
		this.Usec = Usec_ !== undefined ? Usec_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 4)).zero();
	});
	Rusage = $pkg.Rusage = $newType(0, "Struct", "syscall.Rusage", "Rusage", "syscall", function(Utime_, Stime_, Maxrss_, Ixrss_, Idrss_, Isrss_, Minflt_, Majflt_, Nswap_, Inblock_, Oublock_, Msgsnd_, Msgrcv_, Nsignals_, Nvcsw_, Nivcsw_) {
		this.$val = this;
		this.Utime = Utime_ !== undefined ? Utime_ : new Timeval.Ptr();
		this.Stime = Stime_ !== undefined ? Stime_ : new Timeval.Ptr();
		this.Maxrss = Maxrss_ !== undefined ? Maxrss_ : new $Int64(0, 0);
		this.Ixrss = Ixrss_ !== undefined ? Ixrss_ : new $Int64(0, 0);
		this.Idrss = Idrss_ !== undefined ? Idrss_ : new $Int64(0, 0);
		this.Isrss = Isrss_ !== undefined ? Isrss_ : new $Int64(0, 0);
		this.Minflt = Minflt_ !== undefined ? Minflt_ : new $Int64(0, 0);
		this.Majflt = Majflt_ !== undefined ? Majflt_ : new $Int64(0, 0);
		this.Nswap = Nswap_ !== undefined ? Nswap_ : new $Int64(0, 0);
		this.Inblock = Inblock_ !== undefined ? Inblock_ : new $Int64(0, 0);
		this.Oublock = Oublock_ !== undefined ? Oublock_ : new $Int64(0, 0);
		this.Msgsnd = Msgsnd_ !== undefined ? Msgsnd_ : new $Int64(0, 0);
		this.Msgrcv = Msgrcv_ !== undefined ? Msgrcv_ : new $Int64(0, 0);
		this.Nsignals = Nsignals_ !== undefined ? Nsignals_ : new $Int64(0, 0);
		this.Nvcsw = Nvcsw_ !== undefined ? Nvcsw_ : new $Int64(0, 0);
		this.Nivcsw = Nivcsw_ !== undefined ? Nivcsw_ : new $Int64(0, 0);
	});
	Stat_t = $pkg.Stat_t = $newType(0, "Struct", "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		this.Dev = Dev_ !== undefined ? Dev_ : 0;
		this.Mode = Mode_ !== undefined ? Mode_ : 0;
		this.Nlink = Nlink_ !== undefined ? Nlink_ : 0;
		this.Ino = Ino_ !== undefined ? Ino_ : new $Uint64(0, 0);
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Rdev = Rdev_ !== undefined ? Rdev_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 4)).zero();
		this.Atimespec = Atimespec_ !== undefined ? Atimespec_ : new Timespec.Ptr();
		this.Mtimespec = Mtimespec_ !== undefined ? Mtimespec_ : new Timespec.Ptr();
		this.Ctimespec = Ctimespec_ !== undefined ? Ctimespec_ : new Timespec.Ptr();
		this.Birthtimespec = Birthtimespec_ !== undefined ? Birthtimespec_ : new Timespec.Ptr();
		this.Size = Size_ !== undefined ? Size_ : new $Int64(0, 0);
		this.Blocks = Blocks_ !== undefined ? Blocks_ : new $Int64(0, 0);
		this.Blksize = Blksize_ !== undefined ? Blksize_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Gen = Gen_ !== undefined ? Gen_ : 0;
		this.Lspare = Lspare_ !== undefined ? Lspare_ : 0;
		this.Qspare = Qspare_ !== undefined ? Qspare_ : ($arrayType($Int64, 2)).zero();
	});
	Dirent = $pkg.Dirent = $newType(0, "Struct", "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		this.Ino = Ino_ !== undefined ? Ino_ : new $Uint64(0, 0);
		this.Seekoff = Seekoff_ !== undefined ? Seekoff_ : new $Uint64(0, 0);
		this.Reclen = Reclen_ !== undefined ? Reclen_ : 0;
		this.Namlen = Namlen_ !== undefined ? Namlen_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Name = Name_ !== undefined ? Name_ : ($arrayType($Int8, 1024)).zero();
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 3)).zero();
	});
	printWarning = function() {
		if (!warningPrinted) {
			console.log("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var i;
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	init = function() {
		var process, jsEnv, envkeys, i, key;
		process = $global.process;
		if (!(process === undefined)) {
			jsEnv = process.env;
			envkeys = $global.Object.keys(jsEnv);
			envs = ($sliceType($String)).make($parseInt(envkeys.length), 0, function() { return ""; });
			i = 0;
			while (i < $parseInt(envkeys.length)) {
				key = $internalize(envkeys[i], $String);
				(i < 0 || i >= envs.length) ? $throwRuntimeError("index out of range") : envs.array[envs.offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String);
				i = i + 1 >> 0;
			}
		}
	};
	syscall = function(name) {
		var require, syscallHandler;
		var $deferred = [];
		try {
			$deferred.push({ fun: $recover, args: [] });
			if (syscallModule === null) {
				if (alreadyTriedToLoad) {
					return null;
				}
				alreadyTriedToLoad = true;
				require = $global.require;
				if (require === undefined) {
					syscallHandler = $syscall;
					if (!(syscallHandler === undefined)) {
						return syscallHandler;
					}
					throw $panic(new $String(""));
				}
				syscallModule = require($externalize("syscall", $String));
			}
			return syscallModule[$externalize(name, $String)];
		} catch($err) {
			$pushErr($err);
			return null;
		} finally {
			$callDeferred($deferred);
		}
	};
	Syscall = $pkg.Syscall = function(trap, a1, a2, a3) {
		var r1, r2, err, f, r, _tmp, _tmp$1, _tmp$2, x, b, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			b = (x = $internalize(new ($sliceType($Uint8))(a2), $emptyInterface), (x !== null && x.constructor === ($sliceType($Uint8)) ? x.$val : $typeAssertionFailed(x, ($sliceType($Uint8)))));
			printToConsole(b);
			_tmp$3 = (b.length >>> 0); _tmp$4 = 0; _tmp$5 = 0; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0); _tmp$7 = 0; _tmp$8 = 13; r1 = _tmp$6; r2 = _tmp$7; err = _tmp$8;
		return [r1, r2, err];
	};
	Syscall6 = $pkg.Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var r1, r2, err, f, r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$3 = (minusOne >>> 0); _tmp$4 = 0; _tmp$5 = 13; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
		return [r1, r2, err];
	};
	RawSyscall = $pkg.RawSyscall = function(trap, a1, a2, a3) {
		var r1, r2, err, f, r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$3 = (minusOne >>> 0); _tmp$4 = 0; _tmp$5 = 13; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
		return [r1, r2, err];
	};
	BytePtrFromString = $pkg.BytePtrFromString = function(s) {
		var array, _ref, _i, i, b;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new ($sliceType($Uint8))($stringToBytes(s));
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (b === 0) {
				return [($ptrType($Uint8)).nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, null];
	};
	copyenv = function() {
		var _ref, _i, i, s, j, key, _tuple, _entry, ok, _key;
		env = new $Map();
		_ref = envs;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			j = 0;
			while (j < s.length) {
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: i };
					}
					break;
				}
				j = j + 1 >> 0;
			}
			_i++;
		}
	};
	Getenv = $pkg.Getenv = function(key) {
		var value, found, _tmp, _tmp$1, _tuple, _entry, i, ok, _tmp$2, _tmp$3, s, i$1, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		value = "";
		found = false;
		var $deferred = [];
		try {
			envOnce.Do(copyenv);
			if (key.length === 0) {
				_tmp = ""; _tmp$1 = false; value = _tmp; found = _tmp$1;
				return [value, found];
			}
			envLock.RLock();
			$deferred.push({ recv: envLock, method: "RUnlock", args: [] });
			_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); i = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				_tmp$2 = ""; _tmp$3 = false; value = _tmp$2; found = _tmp$3;
				return [value, found];
			}
			s = ((i < 0 || i >= envs.length) ? $throwRuntimeError("index out of range") : envs.array[envs.offset + i]);
			i$1 = 0;
			while (i$1 < s.length) {
				if (s.charCodeAt(i$1) === 61) {
					_tmp$4 = s.substring((i$1 + 1 >> 0)); _tmp$5 = true; value = _tmp$4; found = _tmp$5;
					return [value, found];
				}
				i$1 = i$1 + 1 >> 0;
			}
			_tmp$6 = ""; _tmp$7 = false; value = _tmp$6; found = _tmp$7;
			return [value, found];
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
			return [value, found];
		}
	};
	Environ = $pkg.Environ = function() {
		var a;
		var $deferred = [];
		try {
			envOnce.Do(copyenv);
			envLock.RLock();
			$deferred.push({ recv: envLock, method: "RUnlock", args: [] });
			a = ($sliceType($String)).make(envs.length, 0, function() { return ""; });
			$copySlice(a, envs);
			return a;
		} catch($err) {
			$pushErr($err);
			return ($sliceType($String)).nil;
		} finally {
			$callDeferred($deferred);
		}
	};
	runtime_BeforeFork = function() {
		throw $panic("Native function not implemented: runtime_BeforeFork");
	};
	runtime_AfterFork = function() {
		throw $panic("Native function not implemented: runtime_AfterFork");
	};
	forkAndExecInChild = function(argv0, argv, envv, chroot, dir, attr, sys, pipe$1) {
		var $this = this, $args = arguments, pid, err, _tmp, _tmp$1, r1, r2, err1, nextfd, i, fd, _ref, _i, i$1, ufd, darwin, _tuple, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, _tuple$2, _tuple$3, _tuple$4, cred, ngroups, groups, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15;
		pid = 0;
		err = 0;
		/* */ var $s = 0, $f = function() { while (true) { switch ($s) { case 0:
		_tmp = 0; _tmp$1 = 0; r1 = _tmp; r2 = _tmp$1;
		err1 = 0;
		nextfd = 0;
		i = 0;
		fd = ($sliceType($Int)).make(attr.Files.length, 0, function() { return 0; });
		nextfd = attr.Files.length;
		_ref = attr.Files;
		_i = 0;
		/* while (_i < _ref.length) { */ case 2: if(!(_i < _ref.length)) { $s = 3; continue; }
			i$1 = _i;
			ufd = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			/* if (nextfd < (ufd >> 0)) { */ if (nextfd < (ufd >> 0)) {} else { $s = 4; continue; }
				nextfd = (ufd >> 0);
			/* } */ case 4:
			(i$1 < 0 || i$1 >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i$1] = (ufd >> 0);
			_i++;
		/* } */ $s = 2; continue; case 3:
		nextfd = nextfd + 1 >> 0;
		darwin = true;
		runtime_BeforeFork();
		_tuple = RawSyscall(2, 0, 0, 0); r1 = _tuple[0]; r2 = _tuple[1]; err1 = _tuple[2];
		/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 5; continue; }
			runtime_AfterFork();
			_tmp$2 = 0; _tmp$3 = err1; pid = _tmp$2; err = _tmp$3;
			return [pid, err];
		/* } */ case 5:
		/* if (darwin && (r2 === 1)) { */ if (darwin && (r2 === 1)) {} else { $s = 6; continue; }
			r1 = 0;
		/* } */ case 6:
		/* if (!((r1 === 0))) { */ if (!((r1 === 0))) {} else { $s = 7; continue; }
			runtime_AfterFork();
			_tmp$4 = (r1 >> 0); _tmp$5 = 0; pid = _tmp$4; err = _tmp$5;
			return [pid, err];
		/* } */ case 7:
		/* if (sys.Ptrace) { */ if (sys.Ptrace) {} else { $s = 8; continue; }
			_tuple$1 = RawSyscall(26, 0, 0, 0); err1 = _tuple$1[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 9; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 9:
		/* } */ case 8:
		/* if (sys.Setsid) { */ if (sys.Setsid) {} else { $s = 10; continue; }
			_tuple$2 = RawSyscall(147, 0, 0, 0); err1 = _tuple$2[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 11; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 11:
		/* } */ case 10:
		/* if (sys.Setpgid) { */ if (sys.Setpgid) {} else { $s = 12; continue; }
			_tuple$3 = RawSyscall(82, 0, 0, 0); err1 = _tuple$3[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 13; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 13:
		/* } */ case 12:
		/* if (!($pointerIsEqual(chroot, ($ptrType($Uint8)).nil))) { */ if (!($pointerIsEqual(chroot, ($ptrType($Uint8)).nil))) {} else { $s = 14; continue; }
			_tuple$4 = RawSyscall(61, chroot, 0, 0); err1 = _tuple$4[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 15; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 15:
		/* } */ case 14:
		cred = sys.Credential;
		/* if (!(cred === ($ptrType(Credential)).nil)) { */ if (!(cred === ($ptrType(Credential)).nil)) {} else { $s = 16; continue; }
			ngroups = (cred.Groups.length >>> 0);
			groups = 0;
			/* if (ngroups > 0) { */ if (ngroups > 0) {} else { $s = 17; continue; }
				groups = $sliceToArray(cred.Groups);
			/* } */ case 17:
			_tuple$5 = RawSyscall(80, ngroups, groups, 0); err1 = _tuple$5[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 18; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 18:
			_tuple$6 = RawSyscall(181, (cred.Gid >>> 0), 0, 0); err1 = _tuple$6[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 19; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 19:
			_tuple$7 = RawSyscall(23, (cred.Uid >>> 0), 0, 0); err1 = _tuple$7[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 20; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 20:
		/* } */ case 16:
		/* if (!($pointerIsEqual(dir, ($ptrType($Uint8)).nil))) { */ if (!($pointerIsEqual(dir, ($ptrType($Uint8)).nil))) {} else { $s = 21; continue; }
			_tuple$8 = RawSyscall(12, dir, 0, 0); err1 = _tuple$8[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 22; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 22:
		/* } */ case 21:
		/* if (pipe$1 < nextfd) { */ if (pipe$1 < nextfd) {} else { $s = 23; continue; }
			_tuple$9 = RawSyscall(90, (pipe$1 >>> 0), (nextfd >>> 0), 0); err1 = _tuple$9[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 24; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 24:
			RawSyscall(92, (nextfd >>> 0), 2, 1);
			pipe$1 = nextfd;
			nextfd = nextfd + 1 >> 0;
		/* } */ case 23:
		i = 0;
		/* while (i < fd.length) { */ case 25: if(!(i < fd.length)) { $s = 26; continue; }
			/* if (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) >= 0 && ((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) < i) { */ if (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) >= 0 && ((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) < i) {} else { $s = 27; continue; }
				_tuple$10 = RawSyscall(90, (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) >>> 0), (nextfd >>> 0), 0); err1 = _tuple$10[2];
				/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 28; continue; }
					/* goto childerror */ $s = 1; continue;
				/* } */ case 28:
				RawSyscall(92, (nextfd >>> 0), 2, 1);
				(i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i] = nextfd;
				nextfd = nextfd + 1 >> 0;
				if (nextfd === pipe$1) {
					nextfd = nextfd + 1 >> 0;
				}
			/* } */ case 27:
			i = i + 1 >> 0;
		/* } */ $s = 25; continue; case 26:
		i = 0;
		/* while (i < fd.length) { */ case 29: if(!(i < fd.length)) { $s = 30; continue; }
			/* if (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) === -1) { */ if (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) === -1) {} else { $s = 31; continue; }
				RawSyscall(6, (i >>> 0), 0, 0);
				i = i + 1 >> 0;
				/* continue; */ $s = 29; continue;
			/* } */ case 31:
			/* if (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) === i) { */ if (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) === i) {} else { $s = 32; continue; }
				_tuple$11 = RawSyscall(92, (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) >>> 0), 2, 0); err1 = _tuple$11[2];
				/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 33; continue; }
					/* goto childerror */ $s = 1; continue;
				/* } */ case 33:
				i = i + 1 >> 0;
				/* continue; */ $s = 29; continue;
			/* } */ case 32:
			_tuple$12 = RawSyscall(90, (((i < 0 || i >= fd.length) ? $throwRuntimeError("index out of range") : fd.array[fd.offset + i]) >>> 0), (i >>> 0), 0); err1 = _tuple$12[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 34; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 34:
			i = i + 1 >> 0;
		/* } */ $s = 29; continue; case 30:
		i = fd.length;
		/* while (i < 3) { */ case 35: if(!(i < 3)) { $s = 36; continue; }
			RawSyscall(6, (i >>> 0), 0, 0);
			i = i + 1 >> 0;
		/* } */ $s = 35; continue; case 36:
		/* if (sys.Noctty) { */ if (sys.Noctty) {} else { $s = 37; continue; }
			_tuple$13 = RawSyscall(54, 0, 536900721, 0); err1 = _tuple$13[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 38; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 38:
		/* } */ case 37:
		/* if (sys.Setctty) { */ if (sys.Setctty) {} else { $s = 39; continue; }
			_tuple$14 = RawSyscall(54, 0, 536900705, 0); err1 = _tuple$14[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 40; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 40:
		/* } */ case 39:
		_tuple$15 = RawSyscall(59, argv0, $sliceToArray(argv), $sliceToArray(envv)); err1 = _tuple$15[2];
		/* childerror: */ case 1:
		RawSyscall(4, (pipe$1 >>> 0), new ($ptrType(Errno))(function() { return err1; }, function($v) { err1 = $v; }), 4);
		while (true) {
			RawSyscall(1, 253, 0, 0);
		}
		/* */ } break; } }; return $f();
	};
	forkExecPipe = function(p) {
		var err, _tuple, _tuple$1;
		err = Pipe(p);
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple = fcntl(((0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0]), 2, 1); err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = fcntl(((1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1]), 2, 1); err = _tuple$1[1];
		return err;
	};
	SlicePtrFromStrings = $pkg.SlicePtrFromStrings = function(ss) {
		var err, bb, i, _tuple, x;
		err = null;
		bb = ($sliceType(($ptrType($Uint8)))).make((ss.length + 1 >> 0), 0, function() { return ($ptrType($Uint8)).nil; });
		i = 0;
		while (i < ss.length) {
			_tuple = BytePtrFromString(((i < 0 || i >= ss.length) ? $throwRuntimeError("index out of range") : ss.array[ss.offset + i])); (i < 0 || i >= bb.length) ? $throwRuntimeError("index out of range") : bb.array[bb.offset + i] = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				return [($sliceType(($ptrType($Uint8)))).nil, err];
			}
			i = i + 1 >> 0;
		}
		(x = ss.length, (x < 0 || x >= bb.length) ? $throwRuntimeError("index out of range") : bb.array[bb.offset + x] = ($ptrType($Uint8)).nil);
		return [bb, null];
	};
	CloseOnExec = $pkg.CloseOnExec = function(fd) {
		fcntl(fd, 2, 1);
	};
	forkExec = function(argv0, argv, attr) {
		var $this = this, $args = arguments, pid, err, p, n, err1, wstatus, sys, _tuple, argv0p, _tmp, _tmp$1, _tuple$1, argvp, _tmp$2, _tmp$3, _tuple$2, envvp, _tmp$4, _tmp$5, chroot, _tuple$3, _tmp$6, _tmp$7, dir, _tuple$4, _tmp$8, _tmp$9, _tuple$5, _tuple$6, _tuple$7, err1$1, _tuple$8, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15;
		pid = 0;
		err = null;
		/* */ var $s = 0, $f = function() { while (true) { switch ($s) { case 0:
		p = ($arrayType($Int, 2)).zero(); $copy(p, ($arrayType($Int, 2)).zero(), ($arrayType($Int, 2)));
		n = 0;
		err1 = 0;
		wstatus = 0;
		/* if (attr === ($ptrType(ProcAttr)).nil) { */ if (attr === ($ptrType(ProcAttr)).nil) {} else { $s = 2; continue; }
			attr = zeroProcAttr;
		/* } */ case 2:
		sys = attr.Sys;
		/* if (sys === ($ptrType(SysProcAttr)).nil) { */ if (sys === ($ptrType(SysProcAttr)).nil) {} else { $s = 3; continue; }
			sys = zeroSysProcAttr;
		/* } */ case 3:
		p[0] = -1;
		p[1] = -1;
		_tuple = BytePtrFromString(argv0); argv0p = _tuple[0]; err = _tuple[1];
		/* if (!($interfaceIsEqual(err, null))) { */ if (!($interfaceIsEqual(err, null))) {} else { $s = 4; continue; }
			_tmp = 0; _tmp$1 = err; pid = _tmp; err = _tmp$1;
			return [pid, err];
		/* } */ case 4:
		_tuple$1 = SlicePtrFromStrings(argv); argvp = _tuple$1[0]; err = _tuple$1[1];
		/* if (!($interfaceIsEqual(err, null))) { */ if (!($interfaceIsEqual(err, null))) {} else { $s = 5; continue; }
			_tmp$2 = 0; _tmp$3 = err; pid = _tmp$2; err = _tmp$3;
			return [pid, err];
		/* } */ case 5:
		_tuple$2 = SlicePtrFromStrings(attr.Env); envvp = _tuple$2[0]; err = _tuple$2[1];
		/* if (!($interfaceIsEqual(err, null))) { */ if (!($interfaceIsEqual(err, null))) {} else { $s = 6; continue; }
			_tmp$4 = 0; _tmp$5 = err; pid = _tmp$4; err = _tmp$5;
			return [pid, err];
		/* } */ case 6:
		chroot = ($ptrType($Uint8)).nil;
		/* if (!(sys.Chroot === "")) { */ if (!(sys.Chroot === "")) {} else { $s = 7; continue; }
			_tuple$3 = BytePtrFromString(sys.Chroot); chroot = _tuple$3[0]; err = _tuple$3[1];
			/* if (!($interfaceIsEqual(err, null))) { */ if (!($interfaceIsEqual(err, null))) {} else { $s = 8; continue; }
				_tmp$6 = 0; _tmp$7 = err; pid = _tmp$6; err = _tmp$7;
				return [pid, err];
			/* } */ case 8:
		/* } */ case 7:
		dir = ($ptrType($Uint8)).nil;
		/* if (!(attr.Dir === "")) { */ if (!(attr.Dir === "")) {} else { $s = 9; continue; }
			_tuple$4 = BytePtrFromString(attr.Dir); dir = _tuple$4[0]; err = _tuple$4[1];
			/* if (!($interfaceIsEqual(err, null))) { */ if (!($interfaceIsEqual(err, null))) {} else { $s = 10; continue; }
				_tmp$8 = 0; _tmp$9 = err; pid = _tmp$8; err = _tmp$9;
				return [pid, err];
			/* } */ case 10:
		/* } */ case 9:
		$pkg.ForkLock.Lock();
		err = forkExecPipe(new ($sliceType($Int))(p));
		/* if (!($interfaceIsEqual(err, null))) { */ if (!($interfaceIsEqual(err, null))) {} else { $s = 11; continue; }
			/* goto error */ $s = 1; continue;
		/* } */ case 11:
		_tuple$5 = forkAndExecInChild(argv0p, argvp, envvp, chroot, dir, attr, sys, p[1]); pid = _tuple$5[0]; err1 = _tuple$5[1];
		/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 12; continue; }
			err = new Errno(err1);
			/* goto error */ $s = 1; continue;
		/* } */ case 12:
		$pkg.ForkLock.Unlock();
		Close(p[1]);
		_tuple$6 = readlen(p[0], new ($ptrType(Errno))(function() { return err1; }, function($v) { err1 = $v; }), 4); n = _tuple$6[0]; err = _tuple$6[1];
		Close(p[0]);
		if (!($interfaceIsEqual(err, null)) || !((n === 0))) {
			if (n === 4) {
				err = new Errno(err1);
			}
			if ($interfaceIsEqual(err, null)) {
				err = new Errno(32);
			}
			_tuple$7 = Wait4(pid, new ($ptrType(WaitStatus))(function() { return wstatus; }, function($v) { wstatus = $v; }), 0, ($ptrType(Rusage)).nil); err1$1 = _tuple$7[1];
			while ($interfaceIsEqual(err1$1, new Errno(4))) {
				_tuple$8 = Wait4(pid, new ($ptrType(WaitStatus))(function() { return wstatus; }, function($v) { wstatus = $v; }), 0, ($ptrType(Rusage)).nil); err1$1 = _tuple$8[1];
			}
			_tmp$10 = 0; _tmp$11 = err; pid = _tmp$10; err = _tmp$11;
			return [pid, err];
		}
		_tmp$12 = pid; _tmp$13 = null; pid = _tmp$12; err = _tmp$13;
		return [pid, err];
		/* error: */ case 1:
		if (p[0] >= 0) {
			Close(p[0]);
			Close(p[1]);
		}
		$pkg.ForkLock.Unlock();
		_tmp$14 = 0; _tmp$15 = err; pid = _tmp$14; err = _tmp$15;
		return [pid, err];
		/* */ } break; } }; return $f();
	};
	StartProcess = $pkg.StartProcess = function(argv0, argv, attr) {
		var pid, handle, err, _tuple, _tmp, _tmp$1, _tmp$2;
		pid = 0;
		handle = 0;
		err = null;
		_tuple = forkExec(argv0, argv, attr); pid = _tuple[0]; err = _tuple[1];
		_tmp = pid; _tmp$1 = 0; _tmp$2 = err; pid = _tmp; handle = _tmp$1; err = _tmp$2;
		return [pid, handle, err];
	};
	itoa = function(val) {
		var buf, i, _r, _q;
		if (val < 0) {
			return "-" + itoa(-val);
		}
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		i = 31;
		while (val >= 10) {
			buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			i = i - 1 >> 0;
			val = (_q = val / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		buf[i] = ((val + 48 >> 0) << 24 >>> 24);
		return $bytesToString($subslice(new ($sliceType($Uint8))(buf), i));
	};
	ByteSliceFromString = $pkg.ByteSliceFromString = function(s) {
		var i, a;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [($sliceType($Uint8)).nil, new Errno(22)];
			}
			i = i + 1 >> 0;
		}
		a = ($sliceType($Uint8)).make((s.length + 1 >> 0), 0, function() { return 0; });
		$copyString(a, s);
		return [a, null];
	};
	Timespec.Ptr.prototype.Unix = function() {
		var sec, nsec, ts, _tmp, _tmp$1;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec; _tmp$1 = ts.Nsec; sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timeval.Ptr.prototype.Unix = function() {
		var sec, nsec, tv, _tmp, _tmp$1;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		tv = this;
		_tmp = tv.Sec; _tmp$1 = $mul64(new $Int64(0, tv.Usec), new $Int64(0, 1000)); sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	Timeval.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.Ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.high + x$1.high, x.low + x$1.low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	Timeval.Ptr.prototype.Nano = function() {
		var tv, x, x$1;
		tv = this;
		return (x = $mul64(tv.Sec, new $Int64(0, 1000000000)), x$1 = $mul64(new $Int64(0, tv.Usec), new $Int64(0, 1000)), new $Int64(x.high + x$1.high, x.low + x$1.low));
	};
	Timeval.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = $pkg.ReadDirent = function(fd, buf) {
		var n, err, base, _tuple;
		n = 0;
		err = null;
		base = new Uint8Array(8);
		_tuple = Getdirentries(fd, buf, base); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	WaitStatus.prototype.Exited = function() {
		var w;
		w = this.$val;
		return ((w & 127) >>> 0) === 0;
	};
	$ptrType(WaitStatus).prototype.Exited = function() { return new WaitStatus(this.$get()).Exited(); };
	WaitStatus.prototype.ExitStatus = function() {
		var w;
		w = this.$val;
		if (!((((w & 127) >>> 0) === 0))) {
			return -1;
		}
		return ((w >>> 8 >>> 0) >> 0);
	};
	$ptrType(WaitStatus).prototype.ExitStatus = function() { return new WaitStatus(this.$get()).ExitStatus(); };
	WaitStatus.prototype.Signaled = function() {
		var w;
		w = this.$val;
		return !((((w & 127) >>> 0) === 127)) && !((((w & 127) >>> 0) === 0));
	};
	$ptrType(WaitStatus).prototype.Signaled = function() { return new WaitStatus(this.$get()).Signaled(); };
	WaitStatus.prototype.Signal = function() {
		var w, sig;
		w = this.$val;
		sig = (((w & 127) >>> 0) >> 0);
		if ((sig === 127) || (sig === 0)) {
			return -1;
		}
		return sig;
	};
	$ptrType(WaitStatus).prototype.Signal = function() { return new WaitStatus(this.$get()).Signal(); };
	WaitStatus.prototype.CoreDump = function() {
		var w;
		w = this.$val;
		return (new WaitStatus(w)).Signaled() && !((((w & 128) >>> 0) === 0));
	};
	$ptrType(WaitStatus).prototype.CoreDump = function() { return new WaitStatus(this.$get()).CoreDump(); };
	WaitStatus.prototype.Stopped = function() {
		var w;
		w = this.$val;
		return (((w & 127) >>> 0) === 127) && !((((w >>> 8 >>> 0) >> 0) === 17));
	};
	$ptrType(WaitStatus).prototype.Stopped = function() { return new WaitStatus(this.$get()).Stopped(); };
	WaitStatus.prototype.Continued = function() {
		var w;
		w = this.$val;
		return (((w & 127) >>> 0) === 127) && (((w >>> 8 >>> 0) >> 0) === 17);
	};
	$ptrType(WaitStatus).prototype.Continued = function() { return new WaitStatus(this.$get()).Continued(); };
	WaitStatus.prototype.StopSignal = function() {
		var w;
		w = this.$val;
		if (!(new WaitStatus(w)).Stopped()) {
			return -1;
		}
		return ((w >>> 8 >>> 0) >> 0) & 255;
	};
	$ptrType(WaitStatus).prototype.StopSignal = function() { return new WaitStatus(this.$get()).StopSignal(); };
	WaitStatus.prototype.TrapCause = function() {
		var w;
		w = this.$val;
		return -1;
	};
	$ptrType(WaitStatus).prototype.TrapCause = function() { return new WaitStatus(this.$get()).TrapCause(); };
	Wait4 = $pkg.Wait4 = function(pid, wstatus, options, rusage) {
		var wpid, err, status, _tuple;
		wpid = 0;
		err = null;
		status = 0;
		_tuple = wait4(pid, new ($ptrType(_C_int))(function() { return status; }, function($v) { status = $v; }), options, rusage); wpid = _tuple[0]; err = _tuple[1];
		if (!($pointerIsEqual(wstatus, ($ptrType(WaitStatus)).nil))) {
			wstatus.$set((status >>> 0));
		}
		return [wpid, err];
	};
	Sysctl = $pkg.Sysctl = function(name) {
		var value, err, _tuple, mib, _tmp, _tmp$1, n, _tmp$2, _tmp$3, _tmp$4, _tmp$5, buf, _tmp$6, _tmp$7, x, _tmp$8, _tmp$9;
		value = "";
		err = null;
		_tuple = nametomib(name); mib = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			_tmp = ""; _tmp$1 = err; value = _tmp; err = _tmp$1;
			return [value, err];
		}
		n = 0;
		err = sysctl(mib, ($ptrType($Uint8)).nil, new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), ($ptrType($Uint8)).nil, 0);
		if (!($interfaceIsEqual(err, null))) {
			_tmp$2 = ""; _tmp$3 = err; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		if (n === 0) {
			_tmp$4 = ""; _tmp$5 = null; value = _tmp$4; err = _tmp$5;
			return [value, err];
		}
		buf = ($sliceType($Uint8)).make(n, 0, function() { return 0; });
		err = sysctl(mib, new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + 0] = $v; }, buf), new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), ($ptrType($Uint8)).nil, 0);
		if (!($interfaceIsEqual(err, null))) {
			_tmp$6 = ""; _tmp$7 = err; value = _tmp$6; err = _tmp$7;
			return [value, err];
		}
		if (n > 0 && ((x = n - 1 >>> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + x])) === 0)) {
			n = n - 1 >>> 0;
		}
		_tmp$8 = $bytesToString($subslice(buf, 0, n)); _tmp$9 = null; value = _tmp$8; err = _tmp$9;
		return [value, err];
	};
	nametomib = function(name) {
		var mib, err, buf, n, p, _tuple, bytes$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _q, _tmp$5;
		mib = ($sliceType(_C_int)).nil;
		err = null;
		buf = ($arrayType(_C_int, 14)).zero(); $copy(buf, ($arrayType(_C_int, 14)).zero(), ($arrayType(_C_int, 14)));
		n = 48;
		p = $sliceToArray(new ($sliceType($Uint8))(buf));
		_tuple = ByteSliceFromString(name); bytes$1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			_tmp = ($sliceType(_C_int)).nil; _tmp$1 = err; mib = _tmp; err = _tmp$1;
			return [mib, err];
		}
		err = sysctl(new ($sliceType(_C_int))([0, 3]), p, new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + 0] = $v; }, bytes$1), (name.length >>> 0));
		if (!($interfaceIsEqual(err, null))) {
			_tmp$2 = ($sliceType(_C_int)).nil; _tmp$3 = err; mib = _tmp$2; err = _tmp$3;
			return [mib, err];
		}
		_tmp$4 = $subslice(new ($sliceType(_C_int))(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))); _tmp$5 = null; mib = _tmp$4; err = _tmp$5;
		return [mib, err];
	};
	ParseDirent = $pkg.ParseDirent = function(buf, max, names) {
		var consumed, count, newnames, origlen, dirent, _array, _struct, _view, x, bytes$1, name, _tmp, _tmp$1, _tmp$2;
		consumed = 0;
		count = 0;
		newnames = ($sliceType($String)).nil;
		origlen = buf.length;
		while (!((max === 0)) && buf.length > 0) {
			dirent = [undefined];
			dirent[0] = (_array = $sliceToArray(buf), _struct = new Dirent.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent[0].Reclen === 0) {
				buf = ($sliceType($Uint8)).nil;
				break;
			}
			buf = $subslice(buf, dirent[0].Reclen);
			if ((x = dirent[0].Ino, (x.high === 0 && x.low === 0))) {
				continue;
			}
			bytes$1 = $sliceToArray(new ($sliceType($Uint8))(dirent[0].Name));
			name = $bytesToString($subslice(new ($sliceType($Uint8))(bytes$1), 0, dirent[0].Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - 1 >> 0;
			count = count + 1 >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.length >> 0; _tmp$1 = count; _tmp$2 = names; consumed = _tmp; count = _tmp$1; newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	Pipe = $pkg.Pipe = function(p) {
		var err, _tuple;
		err = null;
		if (!((p.length === 2))) {
			err = new Errno(22);
			return err;
		}
		_tuple = pipe(); (0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0] = _tuple[0]; (1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1] = _tuple[1]; err = _tuple[2];
		return err;
	};
	Kill = $pkg.Kill = function(pid, signum) {
		var err;
		err = null;
		err = kill(pid, (signum >> 0), 1);
		return err;
	};
	mmapper.Ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var data, err, m, _tmp, _tmp$1, _tuple, addr, errno, _tmp$2, _tmp$3, sl, b, x, x$1, p, _key, _tmp$4, _tmp$5;
		data = ($sliceType($Uint8)).nil;
		err = null;
		var $deferred = [];
		try {
			m = this;
			if (length <= 0) {
				_tmp = ($sliceType($Uint8)).nil; _tmp$1 = new Errno(22); data = _tmp; err = _tmp$1;
				return [data, err];
			}
			_tuple = m.mmap(0, (length >>> 0), prot, flags, fd, offset); addr = _tuple[0]; errno = _tuple[1];
			if (!($interfaceIsEqual(errno, null))) {
				_tmp$2 = ($sliceType($Uint8)).nil; _tmp$3 = errno; data = _tmp$2; err = _tmp$3;
				return [data, err];
			}
			sl = new ($structType([["addr", "addr", "syscall", $Uintptr, ""], ["len", "len", "syscall", $Int, ""], ["cap", "cap", "syscall", $Int, ""]])).Ptr(); $copy(sl, new ($structType([["addr", "addr", "syscall", $Uintptr, ""], ["len", "len", "syscall", $Int, ""], ["cap", "cap", "syscall", $Int, ""]])).Ptr(addr, length, length), ($structType([["addr", "addr", "syscall", $Uintptr, ""], ["len", "len", "syscall", $Int, ""], ["cap", "cap", "syscall", $Int, ""]])));
			b = sl;
			p = new ($ptrType($Uint8))(function() { return (x$1 = b.capacity - 1 >> 0, ((x$1 < 0 || x$1 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x$1])); }, function($v) { (x = b.capacity - 1 >> 0, (x < 0 || x >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x] = $v); }, b);
			m.Mutex.Lock();
			$deferred.push({ recv: m, method: "Unlock", args: [] });
			_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: b };
			_tmp$4 = b; _tmp$5 = null; data = _tmp$4; err = _tmp$5;
			return [data, err];
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
			return [data, err];
		}
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.Ptr.prototype.Munmap = function(data) {
		var err, m, x, x$1, p, _entry, b, errno;
		err = null;
		var $deferred = [];
		try {
			m = this;
			if ((data.length === 0) || !((data.length === data.capacity))) {
				err = new Errno(22);
				return err;
			}
			p = new ($ptrType($Uint8))(function() { return (x$1 = data.capacity - 1 >> 0, ((x$1 < 0 || x$1 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x$1])); }, function($v) { (x = data.capacity - 1 >> 0, (x < 0 || x >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x] = $v); }, data);
			m.Mutex.Lock();
			$deferred.push({ recv: m, method: "Unlock", args: [] });
			b = (_entry = m.active[p.$key()], _entry !== undefined ? _entry.v : ($sliceType($Uint8)).nil);
			if (b === ($sliceType($Uint8)).nil || !($sliceIsEqual(b, 0, data, 0))) {
				err = new Errno(22);
				return err;
			}
			errno = m.munmap($sliceToArray(b), (b.length >>> 0));
			if (!($interfaceIsEqual(errno, null))) {
				err = errno;
				return err;
			}
			delete m.active[p.$key()];
			err = null;
			return err;
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
			return err;
		}
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = errors$1[e];
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (new Errno(e)).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	Signal.prototype.Signal = function() {
		var s;
		s = this.$val;
	};
	$ptrType(Signal).prototype.Signal = function() { return new Signal(this.$get()).Signal(); };
	Signal.prototype.String = function() {
		var s, str;
		s = this.$val;
		if (0 <= s && (s >> 0) < 32) {
			str = signals[s];
			if (!(str === "")) {
				return str;
			}
		}
		return "signal " + itoa((s >> 0));
	};
	$ptrType(Signal).prototype.String = function() { return new Signal(this.$get()).String(); };
	Read = $pkg.Read = function(fd, p) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = read(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Write = $pkg.Write = function(fd, p) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = write(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	wait4 = function(pid, wstatus, options, rusage) {
		var wpid, err, _tuple, _array, _struct, _view, r0, e1;
		wpid = 0;
		err = null;
		_array = new Uint8Array(144);
		_tuple = Syscall6(7, (pid >>> 0), wstatus, (options >>> 0), _array, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = rusage, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Utime.Sec = new $Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Utime.Usec = _view.getInt32(8, true), _struct.Utime.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 12, _array.buffer.byteLength)), _struct.Stime.Sec = new $Int64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Stime.Usec = _view.getInt32(24, true), _struct.Stime.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Maxrss = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Ixrss = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Idrss = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Isrss = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Minflt = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Majflt = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Nswap = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Inblock = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Oublock = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Msgsnd = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Msgrcv = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.Nsignals = new $Int64(_view.getUint32(124, true), _view.getUint32(120, true)), _struct.Nvcsw = new $Int64(_view.getUint32(132, true), _view.getUint32(128, true)), _struct.Nivcsw = new $Int64(_view.getUint32(140, true), _view.getUint32(136, true));
		wpid = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [wpid, err];
	};
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var err, _p0, _tuple, e1;
		err = null;
		_p0 = 0;
		if (mib.length > 0) {
			_p0 = $sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.length >>> 0), old, oldlen, new$1, newlen); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	fcntl = function(fd, cmd, arg) {
		var val, err, _tuple, r0, e1;
		val = 0;
		err = null;
		_tuple = Syscall(92, (fd >>> 0), (cmd >>> 0), (arg >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [val, err];
	};
	pipe = function() {
		var r, w, err, _tuple, r0, r1, e1;
		r = 0;
		w = 0;
		err = null;
		_tuple = RawSyscall(42, 0, 0, 0); r0 = _tuple[0]; r1 = _tuple[1]; e1 = _tuple[2];
		r = (r0 >> 0);
		w = (r1 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [r, w, err];
	};
	kill = function(pid, signum, posix) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(37, (pid >>> 0), (signum >>> 0), (posix >>> 0)); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Close = $pkg.Close = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(6, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Exit = $pkg.Exit = function(code) {
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	Fchdir = $pkg.Fchdir = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(13, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchmod = $pkg.Fchmod = function(fd, mode) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchown = $pkg.Fchown = function(fd, uid, gid) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0)); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fstat = $pkg.Fstat = function(fd, stat) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0); e1 = _tuple[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray("Int64"))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fsync = $pkg.Fsync = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(95, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Ftruncate = $pkg.Ftruncate = function(fd, length) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(201, (fd >>> 0), (length.low >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Getdirentries = $pkg.Getdirentries = function(fd, buf, basep) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (buf.length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.length >>> 0), basep, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Lstat = $pkg.Lstat = function(path, stat) {
		var err, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		err = null;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0); e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray("Int64"))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Open = $pkg.Open = function(path, mode, perm) {
		var fd, err, _p0, _tuple, _tuple$1, r0, e1;
		fd = 0;
		err = null;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, _p0, (mode >>> 0), (perm >>> 0)); r0 = _tuple$1[0]; e1 = _tuple$1[2];
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	Pread = $pkg.Pread = function(fd, p, offset) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.length >>> 0), (offset.low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Pwrite = $pkg.Pwrite = function(fd, p, offset) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.length >>> 0), (offset.low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	read = function(fd, p) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Seek = $pkg.Seek = function(fd, offset, whence) {
		var newoffset, err, _tuple, r0, e1;
		newoffset = new $Int64(0, 0);
		err = null;
		_tuple = Syscall(199, (fd >>> 0), (offset.low >>> 0), (whence >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		newoffset = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [newoffset, err];
	};
	Stat = $pkg.Stat = function(path, stat) {
		var err, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		err = null;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(338, _p0, _array, 0); e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray("Int64"))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	write = function(fd, p) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var ret, err, _tuple, r0, e1;
		ret = 0;
		err = null;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.low >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(73, addr, length, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	readlen = function(fd, buf, nbuf) {
		var n, err, _tuple, r0, e1;
		n = 0;
		err = null;
		_tuple = Syscall(3, (fd >>> 0), buf, (nbuf >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	$pkg.$init = function() {
		SysProcAttr.init([["Chroot", "Chroot", "", $String, ""], ["Credential", "Credential", "", ($ptrType(Credential)), ""], ["Ptrace", "Ptrace", "", $Bool, ""], ["Setsid", "Setsid", "", $Bool, ""], ["Setpgid", "Setpgid", "", $Bool, ""], ["Setctty", "Setctty", "", $Bool, ""], ["Noctty", "Noctty", "", $Bool, ""]]);
		Credential.init([["Uid", "Uid", "", $Uint32, ""], ["Gid", "Gid", "", $Uint32, ""], ["Groups", "Groups", "", ($sliceType($Uint32)), ""]]);
		ProcAttr.init([["Dir", "Dir", "", $String, ""], ["Env", "Env", "", ($sliceType($String)), ""], ["Files", "Files", "", ($sliceType($Uintptr)), ""], ["Sys", "Sys", "", ($ptrType(SysProcAttr)), ""]]);
		WaitStatus.methods = [["Continued", "Continued", "", [], [$Bool], false, -1], ["CoreDump", "CoreDump", "", [], [$Bool], false, -1], ["ExitStatus", "ExitStatus", "", [], [$Int], false, -1], ["Exited", "Exited", "", [], [$Bool], false, -1], ["Signal", "Signal", "", [], [Signal], false, -1], ["Signaled", "Signaled", "", [], [$Bool], false, -1], ["StopSignal", "StopSignal", "", [], [Signal], false, -1], ["Stopped", "Stopped", "", [], [$Bool], false, -1], ["TrapCause", "TrapCause", "", [], [$Int], false, -1]];
		($ptrType(WaitStatus)).methods = [["Continued", "Continued", "", [], [$Bool], false, -1], ["CoreDump", "CoreDump", "", [], [$Bool], false, -1], ["ExitStatus", "ExitStatus", "", [], [$Int], false, -1], ["Exited", "Exited", "", [], [$Bool], false, -1], ["Signal", "Signal", "", [], [Signal], false, -1], ["Signaled", "Signaled", "", [], [$Bool], false, -1], ["StopSignal", "StopSignal", "", [], [Signal], false, -1], ["Stopped", "Stopped", "", [], [$Bool], false, -1], ["TrapCause", "TrapCause", "", [], [$Int], false, -1]];
		($ptrType(mmapper)).methods = [["Lock", "Lock", "", [], [], false, 0], ["Mmap", "Mmap", "", [$Int, $Int64, $Int, $Int, $Int], [($sliceType($Uint8)), $error], false, -1], ["Munmap", "Munmap", "", [($sliceType($Uint8))], [$error], false, -1], ["Unlock", "Unlock", "", [], [], false, 0]];
		mmapper.init([["Mutex", "", "", sync.Mutex, ""], ["active", "active", "syscall", ($mapType(($ptrType($Uint8)), ($sliceType($Uint8)))), ""], ["mmap", "mmap", "syscall", ($funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false)), ""], ["munmap", "munmap", "syscall", ($funcType([$Uintptr, $Uintptr], [$error], false)), ""]]);
		Errno.methods = [["Error", "Error", "", [], [$String], false, -1], ["Temporary", "Temporary", "", [], [$Bool], false, -1], ["Timeout", "Timeout", "", [], [$Bool], false, -1]];
		($ptrType(Errno)).methods = [["Error", "Error", "", [], [$String], false, -1], ["Temporary", "Temporary", "", [], [$Bool], false, -1], ["Timeout", "Timeout", "", [], [$Bool], false, -1]];
		Signal.methods = [["Signal", "Signal", "", [], [], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(Signal)).methods = [["Signal", "Signal", "", [], [], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(Timespec)).methods = [["Nano", "Nano", "", [], [$Int64], false, -1], ["Unix", "Unix", "", [], [$Int64, $Int64], false, -1]];
		Timespec.init([["Sec", "Sec", "", $Int64, ""], ["Nsec", "Nsec", "", $Int64, ""]]);
		($ptrType(Timeval)).methods = [["Nano", "Nano", "", [], [$Int64], false, -1], ["Unix", "Unix", "", [], [$Int64, $Int64], false, -1]];
		Timeval.init([["Sec", "Sec", "", $Int64, ""], ["Usec", "Usec", "", $Int32, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 4)), ""]]);
		Rusage.init([["Utime", "Utime", "", Timeval, ""], ["Stime", "Stime", "", Timeval, ""], ["Maxrss", "Maxrss", "", $Int64, ""], ["Ixrss", "Ixrss", "", $Int64, ""], ["Idrss", "Idrss", "", $Int64, ""], ["Isrss", "Isrss", "", $Int64, ""], ["Minflt", "Minflt", "", $Int64, ""], ["Majflt", "Majflt", "", $Int64, ""], ["Nswap", "Nswap", "", $Int64, ""], ["Inblock", "Inblock", "", $Int64, ""], ["Oublock", "Oublock", "", $Int64, ""], ["Msgsnd", "Msgsnd", "", $Int64, ""], ["Msgrcv", "Msgrcv", "", $Int64, ""], ["Nsignals", "Nsignals", "", $Int64, ""], ["Nvcsw", "Nvcsw", "", $Int64, ""], ["Nivcsw", "Nivcsw", "", $Int64, ""]]);
		Stat_t.init([["Dev", "Dev", "", $Int32, ""], ["Mode", "Mode", "", $Uint16, ""], ["Nlink", "Nlink", "", $Uint16, ""], ["Ino", "Ino", "", $Uint64, ""], ["Uid", "Uid", "", $Uint32, ""], ["Gid", "Gid", "", $Uint32, ""], ["Rdev", "Rdev", "", $Int32, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 4)), ""], ["Atimespec", "Atimespec", "", Timespec, ""], ["Mtimespec", "Mtimespec", "", Timespec, ""], ["Ctimespec", "Ctimespec", "", Timespec, ""], ["Birthtimespec", "Birthtimespec", "", Timespec, ""], ["Size", "Size", "", $Int64, ""], ["Blocks", "Blocks", "", $Int64, ""], ["Blksize", "Blksize", "", $Int32, ""], ["Flags", "Flags", "", $Uint32, ""], ["Gen", "Gen", "", $Uint32, ""], ["Lspare", "Lspare", "", $Int32, ""], ["Qspare", "Qspare", "", ($arrayType($Int64, 2)), ""]]);
		Dirent.init([["Ino", "Ino", "", $Uint64, ""], ["Seekoff", "Seekoff", "", $Uint64, ""], ["Reclen", "Reclen", "", $Uint16, ""], ["Namlen", "Namlen", "", $Uint16, ""], ["Type", "Type", "", $Uint8, ""], ["Name", "Name", "", ($arrayType($Int8, 1024)), ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 3)), ""]]);
		lineBuffer = ($sliceType($Uint8)).nil;
		syscallModule = null;
		envOnce = new sync.Once.Ptr();
		envLock = new sync.RWMutex.Ptr();
		env = false;
		envs = ($sliceType($String)).nil;
		$pkg.ForkLock = new sync.RWMutex.Ptr();
		zeroProcAttr = new ProcAttr.Ptr();
		zeroSysProcAttr = new SysProcAttr.Ptr();
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errors$1 = ($arrayType($String, 106)).zero(); $copy(errors$1, $toNativeArray("String", ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]), ($arrayType($String, 106)));
		signals = ($arrayType($String, 32)).zero(); $copy(signals, $toNativeArray("String", ["", "hangup", "interrupt", "quit", "illegal instruction", "trace/BPT trap", "abort trap", "EMT trap", "floating point exception", "killed", "bus error", "segmentation fault", "bad system call", "broken pipe", "alarm clock", "terminated", "urgent I/O condition", "suspended (signal)", "suspended", "continued", "child exited", "stopped (tty input)", "stopped (tty output)", "I/O possible", "cputime limit exceeded", "filesize limit exceeded", "virtual timer expired", "profiling timer expired", "window size changes", "information request", "user defined signal 1", "user defined signal 2"]), ($arrayType($String, 32)));
		mapper = new mmapper.Ptr(new sync.Mutex.Ptr(), new $Map(), mmap, munmap);
		init();
	};
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], errors = $packages["errors"], syscall = $packages["syscall"], sync = $packages["sync"], runtime = $packages["runtime"], ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, data, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, months, days, daysBefore, utcLoc, localLoc, localOnce, zoneinfo, badData, zoneDirs, now, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, ParseDuration, readFile, open, closefd, preadn, absWeekday, absClock, fmtFrac, fmtInt, absDate, Now, Unix, isLeap, norm, Date, div, FixedZone, byteString, loadZoneData, loadZoneFile, get4, get2, loadZoneZip, initLocal, loadLocation;
	ParseError = $pkg.ParseError = $newType(0, "Struct", "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		this.Layout = Layout_ !== undefined ? Layout_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
		this.LayoutElem = LayoutElem_ !== undefined ? LayoutElem_ : "";
		this.ValueElem = ValueElem_ !== undefined ? ValueElem_ : "";
		this.Message = Message_ !== undefined ? Message_ : "";
	});
	Time = $pkg.Time = $newType(0, "Struct", "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		this.sec = sec_ !== undefined ? sec_ : new $Int64(0, 0);
		this.nsec = nsec_ !== undefined ? nsec_ : 0;
		this.loc = loc_ !== undefined ? loc_ : ($ptrType(Location)).nil;
	});
	Month = $pkg.Month = $newType(4, "Int", "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, "Int", "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, "Int64", "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, "Struct", "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.zone = zone_ !== undefined ? zone_ : ($sliceType(zone)).nil;
		this.tx = tx_ !== undefined ? tx_ : ($sliceType(zoneTrans)).nil;
		this.cacheStart = cacheStart_ !== undefined ? cacheStart_ : new $Int64(0, 0);
		this.cacheEnd = cacheEnd_ !== undefined ? cacheEnd_ : new $Int64(0, 0);
		this.cacheZone = cacheZone_ !== undefined ? cacheZone_ : ($ptrType(zone)).nil;
	});
	zone = $pkg.zone = $newType(0, "Struct", "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.offset = offset_ !== undefined ? offset_ : 0;
		this.isDST = isDST_ !== undefined ? isDST_ : false;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, "Struct", "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		this.when = when_ !== undefined ? when_ : new $Int64(0, 0);
		this.index = index_ !== undefined ? index_ : 0;
		this.isstd = isstd_ !== undefined ? isstd_ : false;
		this.isutc = isutc_ !== undefined ? isutc_ : false;
	});
	data = $pkg.data = $newType(0, "Struct", "time.data", "data", "time", function(p_, error_) {
		this.$val = this;
		this.p = p_ !== undefined ? p_ : ($sliceType($Uint8)).nil;
		this.error = error_ !== undefined ? error_ : false;
	});
	now = function() {
		var sec, nsec, msec, _tmp, _tmp$1, x, x$1;
		sec = new $Int64(0, 0);
		nsec = 0;
		msec = $internalize(new ($global.Date)().getTime(), $Int64);
		_tmp = $div64(msec, new $Int64(0, 1000), false); _tmp$1 = (x = ((x$1 = $div64(msec, new $Int64(0, 1000), true), x$1.low + ((x$1.high >> 31) * 4294967296)) >> 0), (((x >>> 16 << 16) * 1000000 >> 0) + (x << 16 >>> 16) * 1000000) >> 0); sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	startsWithLowerCase = function(str) {
		var c;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var prefix, std, suffix, i, c, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, ch, j, std$1, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$80;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (i < layout.length) {
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i); _tmp$1 = 257; _tmp$2 = layout.substring((i + 7 >> 0)); prefix = _tmp; std = _tmp$1; suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i); _tmp$4 = 258; _tmp$5 = layout.substring((i + 3 >> 0)); prefix = _tmp$3; std = _tmp$4; suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i); _tmp$7 = 261; _tmp$8 = layout.substring((i + 6 >> 0)); prefix = _tmp$6; std = _tmp$7; suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i); _tmp$10 = 262; _tmp$11 = layout.substring((i + 3 >> 0)); prefix = _tmp$9; std = _tmp$10; suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i); _tmp$13 = 21; _tmp$14 = layout.substring((i + 3 >> 0)); prefix = _tmp$12; std = _tmp$13; suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i); _tmp$16 = std0x[(layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24)]; _tmp$17 = layout.substring((i + 2 >> 0)); prefix = _tmp$15; std = _tmp$16; suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i); _tmp$19 = 522; _tmp$20 = layout.substring((i + 2 >> 0)); prefix = _tmp$18; std = _tmp$19; suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i); _tmp$22 = 259; _tmp$23 = layout.substring((i + 1 >> 0)); prefix = _tmp$21; std = _tmp$22; suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i); _tmp$25 = 273; _tmp$26 = layout.substring((i + 4 >> 0)); prefix = _tmp$24; std = _tmp$25; suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i); _tmp$28 = 263; _tmp$29 = layout.substring((i + 1 >> 0)); prefix = _tmp$27; std = _tmp$28; suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tmp$30 = layout.substring(0, i); _tmp$31 = 264; _tmp$32 = layout.substring((i + 2 >> 0)); prefix = _tmp$30; std = _tmp$31; suffix = _tmp$32;
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tmp$33 = layout.substring(0, i); _tmp$34 = 523; _tmp$35 = layout.substring((i + 1 >> 0)); prefix = _tmp$33; std = _tmp$34; suffix = _tmp$35;
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tmp$36 = layout.substring(0, i); _tmp$37 = 525; _tmp$38 = layout.substring((i + 1 >> 0)); prefix = _tmp$36; std = _tmp$37; suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tmp$39 = layout.substring(0, i); _tmp$40 = 527; _tmp$41 = layout.substring((i + 1 >> 0)); prefix = _tmp$39; std = _tmp$40; suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$42 = layout.substring(0, i); _tmp$43 = 531; _tmp$44 = layout.substring((i + 2 >> 0)); prefix = _tmp$42; std = _tmp$43; suffix = _tmp$44;
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$45 = layout.substring(0, i); _tmp$46 = 532; _tmp$47 = layout.substring((i + 2 >> 0)); prefix = _tmp$45; std = _tmp$46; suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$48 = layout.substring(0, i); _tmp$49 = 27; _tmp$50 = layout.substring((i + 7 >> 0)); prefix = _tmp$48; std = _tmp$49; suffix = _tmp$50;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$51 = layout.substring(0, i); _tmp$52 = 30; _tmp$53 = layout.substring((i + 9 >> 0)); prefix = _tmp$51; std = _tmp$52; suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$54 = layout.substring(0, i); _tmp$55 = 26; _tmp$56 = layout.substring((i + 5 >> 0)); prefix = _tmp$54; std = _tmp$55; suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$57 = layout.substring(0, i); _tmp$58 = 29; _tmp$59 = layout.substring((i + 6 >> 0)); prefix = _tmp$57; std = _tmp$58; suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$60 = layout.substring(0, i); _tmp$61 = 28; _tmp$62 = layout.substring((i + 3 >> 0)); prefix = _tmp$60; std = _tmp$61; suffix = _tmp$62;
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$63 = layout.substring(0, i); _tmp$64 = 23; _tmp$65 = layout.substring((i + 7 >> 0)); prefix = _tmp$63; std = _tmp$64; suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$66 = layout.substring(0, i); _tmp$67 = 25; _tmp$68 = layout.substring((i + 9 >> 0)); prefix = _tmp$66; std = _tmp$67; suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$69 = layout.substring(0, i); _tmp$70 = 22; _tmp$71 = layout.substring((i + 5 >> 0)); prefix = _tmp$69; std = _tmp$70; suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$72 = layout.substring(0, i); _tmp$73 = 24; _tmp$74 = layout.substring((i + 6 >> 0)); prefix = _tmp$72; std = _tmp$73; suffix = _tmp$74;
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (j < layout.length && (layout.charCodeAt(j) === ch)) {
						j = j + 1 >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$75 = layout.substring(0, i); _tmp$76 = std$1; _tmp$77 = layout.substring(j); prefix = _tmp$75; std = _tmp$76; suffix = _tmp$77;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + 1 >> 0;
		}
		_tmp$78 = layout; _tmp$79 = 0; _tmp$80 = ""; prefix = _tmp$78; std = _tmp$79; suffix = _tmp$80;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var i, c1, c2;
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | 32) >>> 0;
				c2 = (c2 | 32) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _ref, _i, i, v;
		_ref = tab;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), null];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var _q, _r, buf, n, _r$1, _q$1;
		if (x < 10) {
			if (!((pad === 0))) {
				b = $append(b, pad);
			}
			return $append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = $append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = $append(b, ((48 + (_r = x % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		n = 32;
		if (x === 0) {
			return $append(b, 48);
		}
		while (x >= 10) {
			n = n - 1 >> 0;
			buf[n] = (((_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			x = (_q$1 = x / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		n = n - 1 >> 0;
		buf[n] = ((x + 48 >>> 0) << 24 >>> 24);
		return $appendSlice(b, $subslice(new ($sliceType($Uint8))(buf), n));
	};
	atoi = function(s) {
		var x, err, neg, _tuple$1, q, rem, _tmp, _tmp$1, _tmp$2, _tmp$3;
		x = 0;
		err = null;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s); q = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		x = ((q.low + ((q.high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, null)) || !(rem === "")) {
			_tmp = 0; _tmp$1 = atoiError; x = _tmp; err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x; _tmp$3 = null; x = _tmp$2; err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var u, buf, start, _r, _q;
		u = nanosec;
		buf = ($arrayType($Uint8, 9)).zero(); $copy(buf, ($arrayType($Uint8, 9)).zero(), ($arrayType($Uint8, 9)));
		start = 9;
		while (start > 0) {
			start = start - 1 >> 0;
			buf[start] = (((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			u = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (n > 0 && (buf[(n - 1 >> 0)] === 48)) {
				n = n - 1 >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new ($sliceType($Uint8))(buf), 0, n));
	};
	Time.Ptr.prototype.String = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return t.Format("2006-01-02 15:04:05.999999999 -0700 MST");
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.Ptr.prototype.Format = function(layout) {
		var t, _tuple$1, name, offset, abs, year, month, day, hour, min, sec, b, buf, max, _tuple$2, prefix, std, suffix, _tuple$3, _tuple$4, _ref, y, _r, y$1, m, s, _r$1, hr, _r$2, hr$1, _q, zone$1, absoffset, _q$1, _r$3, _r$4, _q$2, zone$2, _q$3, _r$5;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.locabs(); name = _tuple$1[0]; offset = _tuple$1[1]; abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		b = ($sliceType($Uint8)).nil;
		buf = ($arrayType($Uint8, 64)).zero(); $copy(buf, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = $subslice(new ($sliceType($Uint8))(buf), 0, 0);
		} else {
			b = ($sliceType($Uint8)).make(0, max, function() { return 0; });
		}
		while (!(layout === "")) {
			_tuple$2 = nextStdChunk(layout); prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true); year = _tuple$3[0]; month = _tuple$3[1]; day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs); hour = _tuple$4[0]; min = _tuple$4[1]; sec = _tuple$4[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r = y % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = $append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("000")));
				} else if (year < 100) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("00")));
				} else if (year < 1000) {
					b = $append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes((new Month(month)).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = (new Month(month)).String();
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes((new Weekday(absWeekday(abs))).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = (new Weekday(absWeekday(abs))).String();
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$1 = hour % 12, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("PM")));
				} else {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("pm")));
				} else {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = $append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = $append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29)) {
					b = $append(b, 58);
				}
				b = appendUint(b, ((_r$3 = zone$1 % 60, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = $append(b, 58);
					}
					b = appendUint(b, ((_r$4 = absoffset % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = $append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$5 = zone$2 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return $bytesToString(b);
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	quote = function(s) {
		return "\"" + s + "\"";
	};
	ParseError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var x;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), null];
		}
		return [(x = ((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), (((x >>> 16 << 16) * 10 >> 0) + (x << 16 >>> 16) * 10) >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), null];
	};
	cutspace = function(s) {
		while (s.length > 0 && (s.charCodeAt(0) === 32)) {
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		while (prefix.length > 0) {
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, null];
	};
	Parse = $pkg.Parse = function(layout, value) {
		return parse(layout, value, $pkg.UTC, $pkg.Local);
	};
	parse = function(layout, value, defaultLocation, local) {
		var _tmp, _tmp$1, alayout, avalue, rangeErrString, amSet, pmSet, year, month, day, hour, min, sec, nsec, z, zoneOffset, zoneName, err, _tuple$1, prefix, std, suffix, stdstr, _tuple$2, p, _ref, _tmp$2, _tmp$3, _tuple$3, _tmp$4, _tmp$5, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, n, _tuple$16, _tmp$6, _tmp$7, _ref$1, _tmp$8, _tmp$9, _ref$2, _tmp$10, _tmp$11, _tmp$12, _tmp$13, sign, hour$1, min$1, seconds, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$40, _tmp$41, hr, mm, ss, _tuple$17, _tuple$18, _tuple$19, x, _ref$3, _tuple$20, n$1, ok, _tmp$42, _tmp$43, ndigit, _tuple$21, i, _tuple$22, t, x$1, x$2, _tuple$23, x$3, name, offset, t$1, _tuple$24, x$4, offset$1, ok$1, x$5, x$6, _tuple$25;
		_tmp = layout; _tmp$1 = value; alayout = _tmp; avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ($ptrType(Location)).nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = null;
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, null))) {
				return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$2 = value.substring(0, 2); _tmp$3 = value.substring(2); p = _tmp$2; value = _tmp$3;
				_tuple$3 = atoi(p); year = _tuple$3[0]; err = _tuple$3[1];
				if (year >= 69) {
					year = year + 1900 >> 0;
				} else {
					year = year + 2000 >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tmp$4 = value.substring(0, 4); _tmp$5 = value.substring(4); p = _tmp$4; value = _tmp$5;
				_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];
			} else if (_ref === 258) {
				_tuple$5 = lookup(shortMonthNames, value); month = _tuple$5[0]; value = _tuple$5[1]; err = _tuple$5[2];
			} else if (_ref === 257) {
				_tuple$6 = lookup(longMonthNames, value); month = _tuple$6[0]; value = _tuple$6[1]; err = _tuple$6[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$7 = getnum(value, std === 260); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$8 = lookup(shortDayNames, value); value = _tuple$8[1]; err = _tuple$8[2];
			} else if (_ref === 261) {
				_tuple$9 = lookup(longDayNames, value); value = _tuple$9[1]; err = _tuple$9[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$10 = getnum(value, std === 265); day = _tuple$10[0]; value = _tuple$10[1]; err = _tuple$10[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$11 = getnum(value, false); hour = _tuple$11[0]; value = _tuple$11[1]; err = _tuple$11[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$12 = getnum(value, std === 524); hour = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$13 = getnum(value, std === 526); min = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$14 = getnum(value, std === 528); sec = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$15 = nextStdChunk(layout); std = _tuple$15[1];
					std = std & 65535;
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (n < value.length && isDigit(value, n)) {
						n = n + 1 >> 0;
					}
					_tuple$16 = parseNanoseconds(value, n); nsec = _tuple$16[0]; rangeErrString = _tuple$16[1]; err = _tuple$16[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$6 = value.substring(0, 2); _tmp$7 = value.substring(2); p = _tmp$6; value = _tmp$7;
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$8 = value.substring(0, 2); _tmp$9 = value.substring(2); p = _tmp$8; value = _tmp$9;
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = $pkg.UTC;
					break;
				}
				_tmp$10 = ""; _tmp$11 = ""; _tmp$12 = ""; _tmp$13 = ""; sign = _tmp$10; hour$1 = _tmp$11; min$1 = _tmp$12; seconds = _tmp$13;
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tmp$14 = value.substring(0, 1); _tmp$15 = value.substring(1, 3); _tmp$16 = value.substring(4, 6); _tmp$17 = "00"; _tmp$18 = value.substring(6); sign = _tmp$14; hour$1 = _tmp$15; min$1 = _tmp$16; seconds = _tmp$17; value = _tmp$18;
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tmp$19 = value.substring(0, 1); _tmp$20 = value.substring(1, 3); _tmp$21 = "00"; _tmp$22 = "00"; _tmp$23 = value.substring(3); sign = _tmp$19; hour$1 = _tmp$20; min$1 = _tmp$21; seconds = _tmp$22; value = _tmp$23;
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tmp$24 = value.substring(0, 1); _tmp$25 = value.substring(1, 3); _tmp$26 = value.substring(4, 6); _tmp$27 = value.substring(7, 9); _tmp$28 = value.substring(9); sign = _tmp$24; hour$1 = _tmp$25; min$1 = _tmp$26; seconds = _tmp$27; value = _tmp$28;
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tmp$29 = value.substring(0, 1); _tmp$30 = value.substring(1, 3); _tmp$31 = value.substring(3, 5); _tmp$32 = value.substring(5, 7); _tmp$33 = value.substring(7); sign = _tmp$29; hour$1 = _tmp$30; min$1 = _tmp$31; seconds = _tmp$32; value = _tmp$33;
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tmp$34 = value.substring(0, 1); _tmp$35 = value.substring(1, 3); _tmp$36 = value.substring(3, 5); _tmp$37 = "00"; _tmp$38 = value.substring(5); sign = _tmp$34; hour$1 = _tmp$35; min$1 = _tmp$36; seconds = _tmp$37; value = _tmp$38;
				}
				_tmp$39 = 0; _tmp$40 = 0; _tmp$41 = 0; hr = _tmp$39; mm = _tmp$40; ss = _tmp$41;
				_tuple$17 = atoi(hour$1); hr = _tuple$17[0]; err = _tuple$17[1];
				if ($interfaceIsEqual(err, null)) {
					_tuple$18 = atoi(min$1); mm = _tuple$18[0]; err = _tuple$18[1];
				}
				if ($interfaceIsEqual(err, null)) {
					_tuple$19 = atoi(seconds); ss = _tuple$19[0]; err = _tuple$19[1];
				}
				zoneOffset = (x = (((((hr >>> 16 << 16) * 60 >> 0) + (hr << 16 >>> 16) * 60) >> 0) + mm >> 0), (((x >>> 16 << 16) * 60 >> 0) + (x << 16 >>> 16) * 60) >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = $pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$20 = parseTimeZone(value); n$1 = _tuple$20[0]; ok = _tuple$20[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tmp$42 = value.substring(0, n$1); _tmp$43 = value.substring(n$1); zoneName = _tmp$42; value = _tmp$43;
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$21 = parseNanoseconds(value, ndigit); nsec = _tuple$21[0]; rangeErrString = _tuple$21[1]; err = _tuple$21[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57) {
					i = i + 1 >> 0;
				}
				_tuple$22 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$22[0]; rangeErrString = _tuple$22[1]; err = _tuple$22[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, null))) {
				return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + 12 >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (!(z === ($ptrType(Location)).nil)) {
			return [Date(year, (month >> 0), day, hour, min, sec, nsec, z), null];
		}
		if (!((zoneOffset === -1))) {
			t = new Time.Ptr(); $copy(t, Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			t.sec = (x$1 = t.sec, x$2 = new $Int64(0, zoneOffset), new $Int64(x$1.high - x$2.high, x$1.low - x$2.low));
			_tuple$23 = local.lookup((x$3 = t.sec, new $Int64(x$3.high + -15, x$3.low + 2288912640))); name = _tuple$23[0]; offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, null];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, null];
		}
		if (!(zoneName === "")) {
			t$1 = new Time.Ptr(); $copy(t$1, Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			_tuple$24 = local.lookupName(zoneName, (x$4 = t$1.sec, new $Int64(x$4.high + -15, x$4.low + 2288912640))); offset$1 = _tuple$24[0]; ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$5 = t$1.sec, x$6 = new $Int64(0, offset$1), new $Int64(x$5.high - x$6.high, x$5.low - x$6.low));
				t$1.loc = local;
				return [t$1, null];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3)); offset$1 = _tuple$25[0];
				offset$1 = (((offset$1 >>> 16 << 16) * 3600 >> 0) + (offset$1 << 16 >>> 16) * 3600) >> 0;
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, null];
		}
		return [Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation), null];
	};
	parseTimeZone = function(value) {
		var length, ok, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, nUpper, c, _ref, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0; _tmp$1 = false; length = _tmp; ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4; _tmp$3 = true; length = _tmp$2; ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length; _tmp$5 = true; length = _tmp$4; ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (nUpper < 6) {
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + 1 >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tmp$6 = 0; _tmp$7 = false; length = _tmp$6; ok = _tmp$7;
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5; _tmp$9 = true; length = _tmp$8; ok = _tmp$9;
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4; _tmp$11 = true; length = _tmp$10; ok = _tmp$11;
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tmp$12 = 3; _tmp$13 = true; length = _tmp$12; ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0; _tmp$15 = false; length = _tmp$14; ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var sign, _tuple$1, x, rem, err;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1)); x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, null))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.high, -x.low);
		}
		if ((x.high === 0 && x.low === 0) || (x.high < -1 || (x.high === -1 && x.low < 4294967282)) || (0 < x.high || (0 === x.high && 12 < x.low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var ns, rangeErrString, err, _tuple$1, scaleDigits, i;
		ns = 0;
		rangeErrString = "";
		err = null;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes)); ns = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, null))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (i < scaleDigits) {
			ns = (((ns >>> 16 << 16) * 10 >> 0) + (ns << 16 >>> 16) * 10) >> 0;
			i = i + 1 >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var x, rem, err, i, c, _tmp, _tmp$1, _tmp$2, x$1, x$2, x$3, _tmp$3, _tmp$4, _tmp$5;
		x = new $Int64(0, 0);
		rem = "";
		err = null;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.high > 214748364 || (x.high === 214748364 && x.low >= 3435973835))) {
				_tmp = new $Int64(0, 0); _tmp$1 = ""; _tmp$2 = errLeadingInt; x = _tmp; rem = _tmp$1; err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.high + x$3.high, x$2.low + x$3.low)), new $Int64(x$1.high - 0, x$1.low - 48));
			i = i + 1 >> 0;
		}
		_tmp$3 = x; _tmp$4 = s.substring(i); _tmp$5 = null; x = _tmp$3; rem = _tmp$4; err = _tmp$5;
		return [x, rem, err];
	};
	ParseDuration = $pkg.ParseDuration = function(s) {
		var orig, f, neg, c, g, x, err, pl, _tuple$1, pre, post, pl$1, _tuple$2, scale, n, i, c$1, u, _tuple$3, _entry, unit, ok;
		orig = s;
		f = 0;
		neg = false;
		if (!(s === "")) {
			c = s.charCodeAt(0);
			if ((c === 45) || (c === 43)) {
				neg = c === 45;
				s = s.substring(1);
			}
		}
		if (s === "0") {
			return [new Duration(0, 0), null];
		}
		if (s === "") {
			return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
		}
		while (!(s === "")) {
			g = 0;
			x = new $Int64(0, 0);
			err = null;
			if (!((s.charCodeAt(0) === 46) || (48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pl = s.length;
			_tuple$1 = leadingInt(s); x = _tuple$1[0]; s = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, null))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			g = $flatten64(x);
			pre = !((pl === s.length));
			post = false;
			if (!(s === "") && (s.charCodeAt(0) === 46)) {
				s = s.substring(1);
				pl$1 = s.length;
				_tuple$2 = leadingInt(s); x = _tuple$2[0]; s = _tuple$2[1]; err = _tuple$2[2];
				if (!($interfaceIsEqual(err, null))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
				scale = 1;
				n = pl$1 - s.length >> 0;
				while (n > 0) {
					scale = scale * 10;
					n = n - 1 >> 0;
				}
				g = g + ($flatten64(x) / scale);
				post = !((pl$1 === s.length));
			}
			if (!pre && !post) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			i = 0;
			while (i < s.length) {
				c$1 = s.charCodeAt(i);
				if ((c$1 === 46) || (48 <= c$1 && c$1 <= 57)) {
					break;
				}
				i = i + 1 >> 0;
			}
			if (i === 0) {
				return [new Duration(0, 0), errors.New("time: missing unit in duration " + orig)];
			}
			u = s.substring(0, i);
			s = s.substring(i);
			_tuple$3 = (_entry = unitMap[u], _entry !== undefined ? [_entry.v, true] : [0, false]); unit = _tuple$3[0]; ok = _tuple$3[1];
			if (!ok) {
				return [new Duration(0, 0), errors.New("time: unknown unit " + u + " in duration " + orig)];
			}
			f = f + (g * unit);
		}
		if (neg) {
			f = -f;
		}
		if (f < -9.223372036854776e+18 || f > 9.223372036854776e+18) {
			return [new Duration(0, 0), errors.New("time: overflow parsing duration")];
		}
		return [new Duration(0, f), null];
	};
	readFile = function(name) {
		var _tuple$1, f, err, buf, ret, n, _tuple$2;
		var $deferred = [];
		try {
			_tuple$1 = syscall.Open(name, 0, 0); f = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, null))) {
				return [($sliceType($Uint8)).nil, err];
			}
			$deferred.push({ recv: f, method: "Close", args: [] });
			buf = ($arrayType($Uint8, 4096)).zero(); $copy(buf, ($arrayType($Uint8, 4096)).zero(), ($arrayType($Uint8, 4096)));
			ret = ($sliceType($Uint8)).nil;
			n = 0;
			while (true) {
				_tuple$2 = syscall.Read(f, new ($sliceType($Uint8))(buf)); n = _tuple$2[0]; err = _tuple$2[1];
				if (n > 0) {
					ret = $appendSlice(ret, $subslice(new ($sliceType($Uint8))(buf), 0, n));
				}
				if ((n === 0) || !($interfaceIsEqual(err, null))) {
					break;
				}
			}
			return [ret, err];
		} catch($err) {
			$pushErr($err);
			return [($sliceType($Uint8)).nil, null];
		} finally {
			$callDeferred($deferred);
		}
	};
	open = function(name) {
		var _tuple$1, fd, err;
		_tuple$1 = syscall.Open(name, 0, 0); fd = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, null))) {
			return [0, err];
		}
		return [(fd >>> 0), null];
	};
	closefd = function(fd) {
		syscall.Close((fd >> 0));
	};
	preadn = function(fd, buf, off) {
		var whence, _tuple$1, err, _tuple$2, m, err$1;
		whence = 0;
		if (off < 0) {
			whence = 2;
		}
		_tuple$1 = syscall.Seek((fd >> 0), new $Int64(0, off), whence); err = _tuple$1[1];
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		while (buf.length > 0) {
			_tuple$2 = syscall.Read((fd >> 0), buf); m = _tuple$2[0]; err$1 = _tuple$2[1];
			if (m <= 0) {
				if ($interfaceIsEqual(err$1, null)) {
					return errors.New("short read");
				}
				return err$1;
			}
			buf = $subslice(buf, m);
		}
		return null;
	};
	Time.Ptr.prototype.After = function(u) {
		var t, x, x$1, x$2, x$3;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, x$1 = u.sec, (x.high > x$1.high || (x.high === x$1.high && x.low > x$1.low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.high === x$3.high && x$2.low === x$3.low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.Ptr.prototype.Before = function(u) {
		var t, x, x$1, x$2, x$3;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, x$1 = u.sec, (x.high < x$1.high || (x.high === x$1.high && x.low < x$1.low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.high === x$3.high && x$2.low === x$3.low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.Ptr.prototype.Equal = function(u) {
		var t, x, x$1;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, x$1 = u.sec, (x.high === x$1.high && x.low === x$1.low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var m;
		m = this.$val;
		return months[(m - 1 >> 0)];
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return days[d];
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.Ptr.prototype.IsZero = function() {
		var t, x;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, (x.high === 0 && x.low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.Ptr.prototype.abs = function() {
		var t, l, x, sec, x$1, x$2, x$3, _tuple$1, offset, x$4, x$5;
		t = new Time.Ptr(); $copy(t, this, Time);
		l = t.loc;
		if (l === ($ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.high + -15, x.low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ($ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.high < sec.high || (x$1.high === sec.high && x$1.low <= sec.low))) && (x$2 = l.cacheEnd, (sec.high < x$2.high || (sec.high === x$2.high && sec.low < x$2.low)))) {
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.high + x$3.high, sec.low + x$3.low));
			} else {
				_tuple$1 = l.lookup(sec); offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.high + x$4.high, sec.low + x$4.low));
			}
		}
		return (x$5 = new $Int64(sec.high + 2147483646, sec.low + 450480384), new $Uint64(x$5.high, x$5.low));
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.Ptr.prototype.locabs = function() {
		var name, offset, abs, t, l, x, sec, x$1, x$2, _tuple$1, x$3, x$4;
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = new Time.Ptr(); $copy(t, this, Time);
		l = t.loc;
		if (l === ($ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.high + -15, x.low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ($ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.high < sec.high || (x$1.high === sec.high && x$1.low <= sec.low))) && (x$2 = l.cacheEnd, (sec.high < x$2.high || (sec.high === x$2.high && sec.low < x$2.low)))) {
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
			} else {
				_tuple$1 = l.lookup(sec); name = _tuple$1[0]; offset = _tuple$1[1];
			}
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.high + x$3.high, sec.low + x$3.low));
		} else {
			name = "UTC";
		}
		abs = (x$4 = new $Int64(sec.high + 2147483646, sec.low + 450480384), new $Uint64(x$4.high, x$4.low));
		return [name, offset, abs];
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.Ptr.prototype.Date = function() {
		var year, month, day, t, _tuple$1;
		year = 0;
		month = 0;
		day = 0;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		return [year, month, day];
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.Ptr.prototype.Year = function() {
		var t, _tuple$1, year;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(false); year = _tuple$1[0];
		return year;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.Ptr.prototype.Month = function() {
		var t, _tuple$1, month;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); month = _tuple$1[1];
		return month;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.Ptr.prototype.Day = function() {
		var t, _tuple$1, day;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); day = _tuple$1[2];
		return day;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.Ptr.prototype.Weekday = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return absWeekday(t.abs());
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var sec, _q;
		sec = $div64((new $Uint64(abs.high + 0, abs.low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.Ptr.prototype.ISOWeek = function() {
		var year, week, t, _tuple$1, month, day, yday, _r, wday, _q, _r$1, jan1wday, _r$2, dec31wday;
		year = 0;
		week = 0;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		wday = (_r = ((t.Weekday() + 6 >> 0) >> 0) % 7, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$1 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + 1 >> 0;
		}
		if (week === 0) {
			year = year - 1 >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + 1 >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$2 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + 1 >> 0;
				week = 1;
			}
		}
		return [year, week];
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.Ptr.prototype.Clock = function() {
		var hour, min, sec, t, _tuple$1;
		hour = 0;
		min = 0;
		sec = 0;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = absClock(t.abs()); hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		return [hour, min, sec];
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var hour, min, sec, _q, _q$1;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.Ptr.prototype.Hour = function() {
		var t, _q;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 86400), true).low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.Ptr.prototype.Minute = function() {
		var t, _q;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 3600), true).low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.Ptr.prototype.Second = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return ($div64(t.abs(), new $Uint64(0, 60), true).low >> 0);
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.Ptr.prototype.Nanosecond = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.Ptr.prototype.YearDay = function() {
		var t, _tuple$1, yday;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(false); yday = _tuple$1[3];
		return yday + 1 >> 0;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var d, buf, w, u, neg, prec, unit, _tuple$1, _tuple$2;
		d = this;
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		w = 32;
		u = new $Uint64(d.high, d.low);
		neg = (d.high < 0 || (d.high === 0 && d.low < 0));
		if (neg) {
			u = new $Uint64(-u.high, -u.low);
		}
		if ((u.high < 0 || (u.high === 0 && u.low < 1000000000))) {
			prec = 0;
			unit = 0;
			if ((u.high === 0 && u.low === 0)) {
				return "0";
			} else if ((u.high < 0 || (u.high === 0 && u.low < 1000))) {
				prec = 0;
				unit = 110;
			} else if ((u.high < 0 || (u.high === 0 && u.low < 1000000))) {
				prec = 3;
				unit = 117;
			} else {
				prec = 6;
				unit = 109;
			}
			w = w - 2 >> 0;
			buf[w] = unit;
			buf[(w + 1 >> 0)] = 115;
			_tuple$1 = fmtFrac($subslice(new ($sliceType($Uint8))(buf), 0, w), u, prec); w = _tuple$1[0]; u = _tuple$1[1];
			w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), u);
		} else {
			w = w - 1 >> 0;
			buf[w] = 115;
			_tuple$2 = fmtFrac($subslice(new ($sliceType($Uint8))(buf), 0, w), u, 9); w = _tuple$2[0]; u = _tuple$2[1];
			w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, new $Uint64(0, 60), false);
			if ((u.high > 0 || (u.high === 0 && u.low > 0))) {
				w = w - 1 >> 0;
				buf[w] = 109;
				w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, new $Uint64(0, 60), false);
				if ((u.high > 0 || (u.high === 0 && u.low > 0))) {
					w = w - 1 >> 0;
					buf[w] = 104;
					w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - 1 >> 0;
			buf[w] = 45;
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var nw, nv, w, print, i, digit, _tmp, _tmp$1;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.length;
		print = false;
		i = 0;
		while (i < prec) {
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.high === 0 && digit.low === 0));
			if (print) {
				w = w - 1 >> 0;
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + w] = (digit.low << 24 >>> 24) + 48 << 24 >>> 24;
			}
			v = $div64(v, new $Uint64(0, 10), false);
			i = i + 1 >> 0;
		}
		if (print) {
			w = w - 1 >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + w] = 46;
		}
		_tmp = w; _tmp$1 = v; nw = _tmp; nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var w;
		w = buf.length;
		if ((v.high === 0 && v.low === 0)) {
			w = w - 1 >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + w] = 48;
		} else {
			while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
				w = w - 1 >> 0;
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + w] = ($div64(v, new $Uint64(0, 10), true).low << 24 >>> 24) + 48 << 24 >>> 24;
				v = $div64(v, new $Uint64(0, 10), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return new $Int64(d.high, d.low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, sec, nsec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.Ptr.prototype.Add = function(d) {
		var t, x, x$1, x$2, x$3, nsec, x$4, x$5;
		t = new Time.Ptr(); $copy(t, this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.high, x$2.low)), new $Int64(x.high + x$1.high, x.low + x$1.low));
		nsec = (t.nsec >> 0) + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.low + ((x$3.high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, new $Int64(x$4.high + 0, x$4.low + 1));
			nsec = nsec - 1000000000 >> 0;
		} else if (nsec < 0) {
			t.sec = (x$5 = t.sec, new $Int64(x$5.high - 0, x$5.low - 1));
			nsec = nsec + 1000000000 >> 0;
		}
		t.nsec = (nsec >>> 0);
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.Ptr.prototype.Sub = function(u) {
		var t, x, x$1, x$2, x$3, x$4, d;
		t = new Time.Ptr(); $copy(t, this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.high - x$3.high, x$2.low - x$3.low)), new Duration(x$1.high, x$1.low)), new Duration(0, 1000000000)), x$4 = new Duration(0, ((t.nsec >> 0) - (u.nsec >> 0) >> 0)), new Duration(x.high + x$4.high, x.low + x$4.low));
		if (u.Add(d).Equal($clone(t, Time))) {
			return d;
		} else if (t.Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.Ptr.prototype.AddDate = function(years, months$1, days$1) {
		var t, _tuple$1, year, month, day, _tuple$2, hour, min, sec;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.Date(); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		_tuple$2 = t.Clock(); hour = _tuple$2[0]; min = _tuple$2[1]; sec = _tuple$2[2];
		return Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc);
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.Ptr.prototype.date = function(full) {
		var year, month, day, yday, t, _tuple$1;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = absDate(t.abs(), full); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		return [year, month, day, yday];
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var year, month, day, yday, d, n, y, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, _q, end, begin;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.high - x.high, d.low - x.low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.high - x$1.high, n.low - x$1.low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.high + x$2.high, y.low + x$2.low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.high - x$3.high, d.low - x$3.low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.high + x$4.high, y.low + x$4.low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.high - x$5.high, d.low - x$5.low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.high - x$6.high, n.low - x$6.low));
		y = (x$7 = n, new $Uint64(y.high + x$7.high, y.low + x$7.low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.high - x$8.high, d.low - x$8.low));
		year = ((x$9 = (x$10 = new $Int64(y.high, y.low), new $Int64(x$10.high + -69, x$10.low + 4075721025)), x$9.low + ((x$9.high >> 31) * 4294967296)) >> 0);
		yday = (d.low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - 1 >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = (daysBefore[(month + 1 >> 0)] >> 0);
		begin = 0;
		if (day >= end) {
			month = month + 1 >> 0;
			begin = end;
		} else {
			begin = (daysBefore[month] >> 0);
		}
		month = month + 1 >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	Now = $pkg.Now = function() {
		var _tuple$1, sec, nsec;
		_tuple$1 = now(); sec = _tuple$1[0]; nsec = _tuple$1[1];
		return new Time.Ptr(new $Int64(sec.high + 14, sec.low + 2006054656), (nsec >>> 0), $pkg.Local);
	};
	Time.Ptr.prototype.UTC = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.Ptr.prototype.Local = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.Ptr.prototype.In = function(loc) {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		if (loc === ($ptrType(Location)).nil) {
			throw $panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.Ptr.prototype.Location = function() {
		var t, l;
		t = new Time.Ptr(); $copy(t, this, Time);
		l = t.loc;
		if (l === ($ptrType(Location)).nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.Ptr.prototype.Zone = function() {
		var name, offset, t, _tuple$1, x;
		name = "";
		offset = 0;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.loc.lookup((x = t.sec, new $Int64(x.high + -15, x.low + 2288912640))); name = _tuple$1[0]; offset = _tuple$1[1];
		return [name, offset];
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.Ptr.prototype.Unix = function() {
		var t, x;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, new $Int64(x.high + -15, x.low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.Ptr.prototype.UnixNano = function() {
		var t, x, x$1, x$2, x$3;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.high + -15, x$1.low + 2288912640))), new $Int64(0, 1000000000)), x$2 = (x$3 = t.nsec, new $Int64(0, x$3.constructor === Number ? x$3 : 1)), new $Int64(x.high + x$2.high, x.low + x$2.low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.Ptr.prototype.MarshalBinary = function() {
		var t, offsetMin, _tuple$1, offset, _r, _q, enc;
		t = new Time.Ptr(); $copy(t, this, Time);
		offsetMin = 0;
		if (t.Location() === utcLoc) {
			offsetMin = -1;
		} else {
			_tuple$1 = t.Zone(); offset = _tuple$1[1];
			if (!(((_r = offset % 60, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [($sliceType($Uint8)).nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [($sliceType($Uint8)).nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		}
		enc = new ($sliceType($Uint8))([1, ($shiftRightInt64(t.sec, 56).low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).low << 24 >>> 24), (t.sec.low << 24 >>> 24), ((t.nsec >>> 24 >>> 0) << 24 >>> 24), ((t.nsec >>> 16 >>> 0) << 24 >>> 24), ((t.nsec >>> 8 >>> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, null];
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.Ptr.prototype.UnmarshalBinary = function(data$1) {
		var t, buf, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, offset, _tuple$1, x$15, localoff;
		t = this;
		buf = data$1;
		if (buf.length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!((((0 < 0 || 0 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, ((7 < 0 || 7 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 7])), x$7 = $shiftLeft64(new $Int64(0, ((6 < 0 || 6 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 6])), 8), new $Int64(x$6.high | x$7.high, (x$6.low | x$7.low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, ((5 < 0 || 5 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 5])), 16), new $Int64(x$5.high | x$8.high, (x$5.low | x$8.low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, ((4 < 0 || 4 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 4])), 24), new $Int64(x$4.high | x$9.high, (x$4.low | x$9.low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, ((3 < 0 || 3 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 3])), 32), new $Int64(x$3.high | x$10.high, (x$3.low | x$10.low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, ((2 < 0 || 2 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 2])), 40), new $Int64(x$2.high | x$11.high, (x$2.low | x$11.low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, ((1 < 0 || 1 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 1])), 48), new $Int64(x$1.high | x$12.high, (x$1.low | x$12.low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, ((0 < 0 || 0 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 0])), 56), new $Int64(x.high | x$13.high, (x.low | x$13.low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = (((((((3 < 0 || 3 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 3]) >> 0) | ((((2 < 0 || 2 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 2]) >> 0) << 8 >> 0)) | ((((1 < 0 || 1 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 1]) >> 0) << 16 >> 0)) | ((((0 < 0 || 0 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 0]) >> 0) << 24 >> 0)) >>> 0);
		buf = $subslice(buf, 4);
		offset = (x$14 = (((((1 < 0 || 1 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 1]) << 16 >> 16) | ((((0 < 0 || 0 >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), (((x$14 >>> 16 << 16) * 60 >> 0) + (x$14 << 16 >>> 16) * 60) >> 0);
		if (offset === -60) {
			t.loc = utcLoc;
		} else {
			_tuple$1 = $pkg.Local.lookup((x$15 = t.sec, new $Int64(x$15.high + -15, x$15.low + 2288912640))); localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		}
		return null;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.Ptr.prototype.GobEncode = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return t.MarshalBinary();
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.Ptr.prototype.GobDecode = function(data$1) {
		var t;
		t = this;
		return t.UnmarshalBinary(data$1);
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.Ptr.prototype.MarshalJSON = function() {
		var t, y;
		t = new Time.Ptr(); $copy(t, this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [($sliceType($Uint8)).nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		return [new ($sliceType($Uint8))($stringToBytes(t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""))), null];
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.Ptr.prototype.UnmarshalJSON = function(data$1) {
		var err, t, _tuple$1;
		err = null;
		t = this;
		_tuple$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.Ptr.prototype.MarshalText = function() {
		var t, y;
		t = new Time.Ptr(); $copy(t, this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [($sliceType($Uint8)).nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		return [new ($sliceType($Uint8))($stringToBytes(t.Format("2006-01-02T15:04:05.999999999Z07:00"))), null];
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.Ptr.prototype.UnmarshalText = function(data$1) {
		var err, t, _tuple$1;
		err = null;
		t = this;
		_tuple$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = $pkg.Unix = function(sec, nsec) {
		var n, x, x$1;
		if ((nsec.high < 0 || (nsec.high === 0 && nsec.low < 0)) || (nsec.high > 0 || (nsec.high === 0 && nsec.low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.high + x.high, sec.low + x.low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.high - x$1.high, nsec.low - x$1.low));
			if ((nsec.high < 0 || (nsec.high === 0 && nsec.low < 0))) {
				nsec = new $Int64(nsec.high + 0, nsec.low + 1000000000);
				sec = new $Int64(sec.high - 0, sec.low - 1);
			}
		}
		return new Time.Ptr(new $Int64(sec.high + 14, sec.low + 2006054656), (nsec.low >>> 0), $pkg.Local);
	};
	isLeap = function(year) {
		var _r, _r$1, _r$2;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var nhi, nlo, _q, n, _q$1, n$1, _tmp, _tmp$1;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (((((n >>> 16 << 16) * base >> 0) + (n << 16 >>> 16) * base) >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (((((n$1 >>> 16 << 16) * base >> 0) + (n$1 << 16 >>> 16) * base) >> 0)) >> 0;
		}
		_tmp = hi; _tmp$1 = lo; nhi = _tmp; nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = $pkg.Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var m, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, x, x$1, y, n, x$2, d, x$3, x$4, x$5, x$6, x$7, x$8, x$9, abs, x$10, x$11, unix, _tuple$6, offset, start, end, x$12, utc, _tuple$7, _tuple$8, x$13;
		if (loc === ($ptrType(Location)).nil) {
			throw $panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12); year = _tuple$1[0]; m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000); sec = _tuple$2[0]; nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60); min = _tuple$3[0]; sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60); hour = _tuple$4[0]; min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24); day = _tuple$5[0]; hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.high - -69, x$1.low - 4075721025)), new $Uint64(x.high, x.low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.high - x$2.high, y.low - x$2.low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.high - x$3.high, y.low - x$3.low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.high + x$4.high, d.low + x$4.low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.high - x$5.high, y.low - x$5.low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.high + x$6.high, d.low + x$6.low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.high + x$7.high, d.low + x$7.low));
		d = (x$8 = new $Uint64(0, daysBefore[(month - 1 >> 0)]), new $Uint64(d.high + x$8.high, d.low + x$8.low));
		if (isLeap(year) && month >= 3) {
			d = new $Uint64(d.high + 0, d.low + 1);
		}
		d = (x$9 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.high + x$9.high, d.low + x$9.low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$10 = new $Uint64(0, ((((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0) + ((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0) >> 0) + sec >> 0)), new $Uint64(abs.high + x$10.high, abs.low + x$10.low));
		unix = (x$11 = new $Int64(abs.high, abs.low), new $Int64(x$11.high + -2147483647, x$11.low + 3844486912));
		_tuple$6 = loc.lookup(unix); offset = _tuple$6[1]; start = _tuple$6[3]; end = _tuple$6[4];
		if (!((offset === 0))) {
			utc = (x$12 = new $Int64(0, offset), new $Int64(unix.high - x$12.high, unix.low - x$12.low));
			if ((utc.high < start.high || (utc.high === start.high && utc.low < start.low))) {
				_tuple$7 = loc.lookup(new $Int64(start.high - 0, start.low - 1)); offset = _tuple$7[1];
			} else if ((utc.high > end.high || (utc.high === end.high && utc.low >= end.low))) {
				_tuple$8 = loc.lookup(end); offset = _tuple$8[1];
			}
			unix = (x$13 = new $Int64(0, offset), new $Int64(unix.high - x$13.high, unix.low - x$13.low));
		}
		return new Time.Ptr(new $Int64(unix.high + 14, unix.low + 2006054656), (nsec >>> 0), loc);
	};
	Time.Ptr.prototype.Truncate = function(d) {
		var t, _tuple$1, r;
		t = new Time.Ptr(); $copy(t, this, Time);
		if ((d.high < 0 || (d.high === 0 && d.low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d); r = _tuple$1[1];
		return t.Add(new Duration(-r.high, -r.low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.Ptr.prototype.Round = function(d) {
		var t, _tuple$1, r, x;
		t = new Time.Ptr(); $copy(t, this, Time);
		if ((d.high < 0 || (d.high === 0 && d.low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d); r = _tuple$1[1];
		if ((x = new Duration(r.high + r.high, r.low + r.low), (x.high < d.high || (x.high === d.high && x.low < d.low)))) {
			return t.Add(new Duration(-r.high, -r.low));
		}
		return t.Add(new Duration(d.high - r.high, d.low - r.low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var qmod2, r, neg, nsec, x, x$1, x$2, x$3, x$4, _q, _r, x$5, d1, x$6, x$7, x$8, x$9, x$10, sec, tmp, u1, u0, _tmp, _tmp$1, u0x, _tmp$2, _tmp$3, x$11, d1$1, x$12, d0, _tmp$4, _tmp$5, x$13, x$14, x$15;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = (t.nsec >> 0);
		if ((x = t.sec, (x.high < 0 || (x.high === 0 && x.low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.high, -x$1.low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + 1000000000 >> 0;
				t.sec = (x$2 = t.sec, new $Int64(x$2.high - 0, x$2.low - 1));
			}
		}
		if ((d.high < 0 || (d.high === 0 && d.low < 1000000000)) && (x$3 = $div64(new Duration(0, 1000000000), (new Duration(d.high + d.high, d.low + d.low)), true), (x$3.high === 0 && x$3.low === 0))) {
			qmod2 = ((_q = nsec / ((d.low + ((d.high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r = nsec % ((d.low + ((d.high >> 31) * 4294967296)) >> 0), _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		} else if ((x$4 = $div64(d, new Duration(0, 1000000000), true), (x$4.high === 0 && x$4.low === 0))) {
			d1 = (x$5 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$5.high, x$5.low));
			qmod2 = ((x$6 = $div64(t.sec, d1, false), x$6.low + ((x$6.high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$7 = $mul64((x$8 = $div64(t.sec, d1, true), new Duration(x$8.high, x$8.low)), new Duration(0, 1000000000)), x$9 = new Duration(0, nsec), new Duration(x$7.high + x$9.high, x$7.low + x$9.low));
		} else {
			sec = (x$10 = t.sec, new $Uint64(x$10.high, x$10.low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.high & 0, (sec.low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0; _tmp$1 = new $Uint64(u0.high + tmp.high, u0.low + tmp.low); u0x = _tmp; u0 = _tmp$1;
			if ((u0.high < u0x.high || (u0.high === u0x.high && u0.low < u0x.low))) {
				u1 = new $Uint64(u1.high + 0, u1.low + 1);
			}
			_tmp$2 = u0; _tmp$3 = (x$11 = new $Uint64(0, nsec), new $Uint64(u0.high + x$11.high, u0.low + x$11.low)); u0x = _tmp$2; u0 = _tmp$3;
			if ((u0.high < u0x.high || (u0.high === u0x.high && u0.low < u0x.low))) {
				u1 = new $Uint64(u1.high + 0, u1.low + 1);
			}
			d1$1 = new $Uint64(d.high, d.low);
			while (!((x$12 = $shiftRightUint64(d1$1, 63), (x$12.high === 0 && x$12.low === 1)))) {
				d1$1 = $shiftLeft64(d1$1, 1);
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.high > d1$1.high || (u1.high === d1$1.high && u1.low > d1$1.low)) || (u1.high === d1$1.high && u1.low === d1$1.low) && (u0.high > d0.high || (u0.high === d0.high && u0.low >= d0.low))) {
					qmod2 = 1;
					_tmp$4 = u0; _tmp$5 = new $Uint64(u0.high - d0.high, u0.low - d0.low); u0x = _tmp$4; u0 = _tmp$5;
					if ((u0.high > u0x.high || (u0.high === u0x.high && u0.low > u0x.low))) {
						u1 = new $Uint64(u1.high - 0, u1.low - 1);
					}
					u1 = (x$13 = d1$1, new $Uint64(u1.high - x$13.high, u1.low - x$13.low));
				}
				if ((d1$1.high === 0 && d1$1.low === 0) && (x$14 = new $Uint64(d.high, d.low), (d0.high === x$14.high && d0.low === x$14.low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, 1);
				d0 = (x$15 = $shiftLeft64((new $Uint64(d1$1.high & 0, (d1$1.low & 1) >>> 0)), 63), new $Uint64(d0.high | x$15.high, (d0.low | x$15.low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, 1);
			}
			r = new Duration(u0.high, u0.low);
		}
		if (neg && !((r.high === 0 && r.low === 0))) {
			qmod2 = (qmod2 ^ 1) >> 0;
			r = new Duration(d.high - r.high, d.low - r.low);
		}
		return [qmod2, r];
	};
	Location.Ptr.prototype.get = function() {
		var l;
		l = this;
		if (l === ($ptrType(Location)).nil) {
			return utcLoc;
		}
		if (l === localLoc) {
			localOnce.Do(initLocal);
		}
		return l;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.Ptr.prototype.String = function() {
		var l;
		l = this;
		return l.get().name;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = $pkg.FixedZone = function(name, offset) {
		var l, x;
		l = new Location.Ptr(name, new ($sliceType(zone))([new zone.Ptr(name, offset, false)]), new ($sliceType(zoneTrans))([new zoneTrans.Ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ($ptrType(zone)).nil);
		l.cacheZone = (x = l.zone, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]));
		return l;
	};
	Location.Ptr.prototype.lookup = function(sec) {
		var name, offset, isDST, start, end, l, zone$1, x, x$1, x$2, x$3, x$4, x$5, zone$2, x$6, tx, lo, hi, _q, m, lim, x$7, x$8, zone$3;
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		l = l.get();
		if (l.zone.length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ($ptrType(zone)).nil) && (x = l.cacheStart, (x.high < sec.high || (x.high === sec.high && x.low <= sec.low))) && (x$1 = l.cacheEnd, (sec.high < x$1.high || (sec.high === x$1.high && sec.low < x$1.low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.length === 0) || (x$2 = (x$3 = l.tx, ((0 < 0 || 0 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 0])).when, (sec.high < x$2.high || (sec.high === x$2.high && sec.low < x$2.low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.length > 0) {
				end = (x$6 = l.tx, ((0 < 0 || 0 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.length;
		while ((hi - lo >> 0) > 1) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + m]).when;
			if ((sec.high < lim.high || (sec.high === lim.high && sec.low < lim.low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + lo]).when;
		return [name, offset, isDST, start, end];
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.Ptr.prototype.lookupFirstZone = function() {
		var l, x, x$1, x$2, x$3, zi, x$4, _ref, _i, zi$1, x$5;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, ((0 < 0 || 0 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 0])).index, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, ((0 < 0 || 0 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 0])).index >> 0) - 1 >> 0;
			while (zi >= 0) {
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + zi])).isDST) {
					return zi;
				}
				zi = zi - 1 >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.length) {
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.Ptr.prototype.firstZoneUsed = function() {
		var l, _ref, _i, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (_i < _ref.length) {
			tx = new zoneTrans.Ptr(); $copy(tx, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.Ptr.prototype.lookupName = function(name, unix) {
		var offset, isDST, ok, l, _ref, _i, i, x, zone$1, _tuple$1, x$1, nam, offset$1, isDST$1, _tmp, _tmp$1, _tmp$2, _ref$1, _i$1, i$1, x$2, zone$2, _tmp$3, _tmp$4, _tmp$5;
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		l = l.get();
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i]));
			if (zone$1.name === name) {
				_tuple$1 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.high - x$1.high, unix.low - x$1.low))); nam = _tuple$1[0]; offset$1 = _tuple$1[1]; isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1; _tmp$1 = isDST$1; _tmp$2 = true; offset = _tmp; isDST = _tmp$1; ok = _tmp$2;
					return [offset, isDST, ok];
				}
			}
			_i++;
		}
		_ref$1 = l.zone;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset; _tmp$4 = zone$2.isDST; _tmp$5 = true; offset = _tmp$3; isDST = _tmp$4; ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	data.Ptr.prototype.read = function(n) {
		var d, p;
		d = this;
		if (d.p.length < n) {
			d.p = ($sliceType($Uint8)).nil;
			d.error = true;
			return ($sliceType($Uint8)).nil;
		}
		p = $subslice(d.p, 0, n);
		d.p = $subslice(d.p, n);
		return p;
	};
	data.prototype.read = function(n) { return this.$val.read(n); };
	data.Ptr.prototype.big4 = function() {
		var n, ok, d, p, _tmp, _tmp$1, _tmp$2, _tmp$3;
		n = 0;
		ok = false;
		d = this;
		p = d.read(4);
		if (p.length < 4) {
			d.error = true;
			_tmp = 0; _tmp$1 = false; n = _tmp; ok = _tmp$1;
			return [n, ok];
		}
		_tmp$2 = (((((((((0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0]) >>> 0) << 24 >>> 0) | ((((1 < 0 || 1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 1]) >>> 0) << 16 >>> 0)) >>> 0) | ((((2 < 0 || 2 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((3 < 0 || 3 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 3]) >>> 0)) >>> 0; _tmp$3 = true; n = _tmp$2; ok = _tmp$3;
		return [n, ok];
	};
	data.prototype.big4 = function() { return this.$val.big4(); };
	data.Ptr.prototype.byte$ = function() {
		var n, ok, d, p, _tmp, _tmp$1, _tmp$2, _tmp$3;
		n = 0;
		ok = false;
		d = this;
		p = d.read(1);
		if (p.length < 1) {
			d.error = true;
			_tmp = 0; _tmp$1 = false; n = _tmp; ok = _tmp$1;
			return [n, ok];
		}
		_tmp$2 = ((0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0]); _tmp$3 = true; n = _tmp$2; ok = _tmp$3;
		return [n, ok];
	};
	data.prototype.byte$ = function() { return this.$val.byte$(); };
	byteString = function(p) {
		var i;
		i = 0;
		while (i < p.length) {
			if (((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]) === 0) {
				return $bytesToString($subslice(p, 0, i));
			}
			i = i + 1 >> 0;
		}
		return $bytesToString(p);
	};
	loadZoneData = function(bytes) {
		var l, err, d, magic, _tmp, _tmp$1, p, _tmp$2, _tmp$3, n, i, _tuple$1, nn, ok, _tmp$4, _tmp$5, x, txtimes, txzones, x$1, zonedata, abbrev, x$2, isstd, isutc, _tmp$6, _tmp$7, zone$1, _ref, _i, i$1, ok$1, n$1, _tuple$2, _tmp$8, _tmp$9, b, _tuple$3, _tmp$10, _tmp$11, _tuple$4, _tmp$12, _tmp$13, tx, _ref$1, _i$1, i$2, ok$2, n$2, _tuple$5, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tuple$6, sec, _ref$2, _i$2, i$3, x$3, x$4, x$5, x$6, x$7, x$8, _tmp$18, _tmp$19;
		l = ($ptrType(Location)).nil;
		err = null;
		d = new data.Ptr(); $copy(d, new data.Ptr(bytes, false), data);
		magic = d.read(4);
		if (!($bytesToString(magic) === "TZif")) {
			_tmp = ($ptrType(Location)).nil; _tmp$1 = badData; l = _tmp; err = _tmp$1;
			return [l, err];
		}
		p = ($sliceType($Uint8)).nil;
		p = d.read(16);
		if (!((p.length === 16)) || !((((0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0]) === 0)) && !((((0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0]) === 50)) && !((((0 < 0 || 0 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + 0]) === 51))) {
			_tmp$2 = ($ptrType(Location)).nil; _tmp$3 = badData; l = _tmp$2; err = _tmp$3;
			return [l, err];
		}
		n = ($arrayType($Int, 6)).zero(); $copy(n, ($arrayType($Int, 6)).zero(), ($arrayType($Int, 6)));
		i = 0;
		while (i < 6) {
			_tuple$1 = d.big4(); nn = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				_tmp$4 = ($ptrType(Location)).nil; _tmp$5 = badData; l = _tmp$4; err = _tmp$5;
				return [l, err];
			}
			n[i] = (nn >> 0);
			i = i + 1 >> 0;
		}
		txtimes = new data.Ptr(); $copy(txtimes, new data.Ptr(d.read((x = n[3], (((x >>> 16 << 16) * 4 >> 0) + (x << 16 >>> 16) * 4) >> 0)), false), data);
		txzones = d.read(n[3]);
		zonedata = new data.Ptr(); $copy(zonedata, new data.Ptr(d.read((x$1 = n[4], (((x$1 >>> 16 << 16) * 6 >> 0) + (x$1 << 16 >>> 16) * 6) >> 0)), false), data);
		abbrev = d.read(n[5]);
		d.read((x$2 = n[2], (((x$2 >>> 16 << 16) * 8 >> 0) + (x$2 << 16 >>> 16) * 8) >> 0));
		isstd = d.read(n[1]);
		isutc = d.read(n[0]);
		if (d.error) {
			_tmp$6 = ($ptrType(Location)).nil; _tmp$7 = badData; l = _tmp$6; err = _tmp$7;
			return [l, err];
		}
		zone$1 = ($sliceType(zone)).make(n[4], 0, function() { return new zone.Ptr(); });
		_ref = zone$1;
		_i = 0;
		while (_i < _ref.length) {
			i$1 = _i;
			ok$1 = false;
			n$1 = 0;
			_tuple$2 = zonedata.big4(); n$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
			if (!ok$1) {
				_tmp$8 = ($ptrType(Location)).nil; _tmp$9 = badData; l = _tmp$8; err = _tmp$9;
				return [l, err];
			}
			((i$1 < 0 || i$1 >= zone$1.length) ? $throwRuntimeError("index out of range") : zone$1.array[zone$1.offset + i$1]).offset = ((n$1 >> 0) >> 0);
			b = 0;
			_tuple$3 = zonedata.byte$(); b = _tuple$3[0]; ok$1 = _tuple$3[1];
			if (!ok$1) {
				_tmp$10 = ($ptrType(Location)).nil; _tmp$11 = badData; l = _tmp$10; err = _tmp$11;
				return [l, err];
			}
			((i$1 < 0 || i$1 >= zone$1.length) ? $throwRuntimeError("index out of range") : zone$1.array[zone$1.offset + i$1]).isDST = !((b === 0));
			_tuple$4 = zonedata.byte$(); b = _tuple$4[0]; ok$1 = _tuple$4[1];
			if (!ok$1 || (b >> 0) >= abbrev.length) {
				_tmp$12 = ($ptrType(Location)).nil; _tmp$13 = badData; l = _tmp$12; err = _tmp$13;
				return [l, err];
			}
			((i$1 < 0 || i$1 >= zone$1.length) ? $throwRuntimeError("index out of range") : zone$1.array[zone$1.offset + i$1]).name = byteString($subslice(abbrev, b));
			_i++;
		}
		tx = ($sliceType(zoneTrans)).make(n[3], 0, function() { return new zoneTrans.Ptr(); });
		_ref$1 = tx;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$2 = _i$1;
			ok$2 = false;
			n$2 = 0;
			_tuple$5 = txtimes.big4(); n$2 = _tuple$5[0]; ok$2 = _tuple$5[1];
			if (!ok$2) {
				_tmp$14 = ($ptrType(Location)).nil; _tmp$15 = badData; l = _tmp$14; err = _tmp$15;
				return [l, err];
			}
			((i$2 < 0 || i$2 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + i$2]).when = new $Int64(0, (n$2 >> 0));
			if ((((i$2 < 0 || i$2 >= txzones.length) ? $throwRuntimeError("index out of range") : txzones.array[txzones.offset + i$2]) >> 0) >= zone$1.length) {
				_tmp$16 = ($ptrType(Location)).nil; _tmp$17 = badData; l = _tmp$16; err = _tmp$17;
				return [l, err];
			}
			((i$2 < 0 || i$2 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + i$2]).index = ((i$2 < 0 || i$2 >= txzones.length) ? $throwRuntimeError("index out of range") : txzones.array[txzones.offset + i$2]);
			if (i$2 < isstd.length) {
				((i$2 < 0 || i$2 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + i$2]).isstd = !((((i$2 < 0 || i$2 >= isstd.length) ? $throwRuntimeError("index out of range") : isstd.array[isstd.offset + i$2]) === 0));
			}
			if (i$2 < isutc.length) {
				((i$2 < 0 || i$2 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + i$2]).isutc = !((((i$2 < 0 || i$2 >= isutc.length) ? $throwRuntimeError("index out of range") : isutc.array[isutc.offset + i$2]) === 0));
			}
			_i$1++;
		}
		if (tx.length === 0) {
			tx = $append(tx, new zoneTrans.Ptr(new $Int64(-2147483648, 0), 0, false, false));
		}
		l = new Location.Ptr("", zone$1, tx, new $Int64(0, 0), new $Int64(0, 0), ($ptrType(zone)).nil);
		_tuple$6 = now(); sec = _tuple$6[0];
		_ref$2 = tx;
		_i$2 = 0;
		while (_i$2 < _ref$2.length) {
			i$3 = _i$2;
			if ((x$3 = ((i$3 < 0 || i$3 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + i$3]).when, (x$3.high < sec.high || (x$3.high === sec.high && x$3.low <= sec.low))) && (((i$3 + 1 >> 0) === tx.length) || (x$4 = (x$5 = i$3 + 1 >> 0, ((x$5 < 0 || x$5 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + x$5])).when, (sec.high < x$4.high || (sec.high === x$4.high && sec.low < x$4.low))))) {
				l.cacheStart = ((i$3 < 0 || i$3 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + i$3]).when;
				l.cacheEnd = new $Int64(2147483647, 4294967295);
				if ((i$3 + 1 >> 0) < tx.length) {
					l.cacheEnd = (x$6 = i$3 + 1 >> 0, ((x$6 < 0 || x$6 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + x$6])).when;
				}
				l.cacheZone = (x$7 = l.zone, x$8 = ((i$3 < 0 || i$3 >= tx.length) ? $throwRuntimeError("index out of range") : tx.array[tx.offset + i$3]).index, ((x$8 < 0 || x$8 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + x$8]));
			}
			_i$2++;
		}
		_tmp$18 = l; _tmp$19 = null; l = _tmp$18; err = _tmp$19;
		return [l, err];
	};
	loadZoneFile = function(dir, name) {
		var l, err, _tuple$1, _tuple$2, buf, _tuple$3;
		l = ($ptrType(Location)).nil;
		err = null;
		if (dir.length > 4 && dir.substring((dir.length - 4 >> 0)) === ".zip") {
			_tuple$1 = loadZoneZip(dir, name); l = _tuple$1[0]; err = _tuple$1[1];
			return [l, err];
		}
		if (!(dir === "")) {
			name = dir + "/" + name;
		}
		_tuple$2 = readFile(name); buf = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, null))) {
			return [l, err];
		}
		_tuple$3 = loadZoneData(buf); l = _tuple$3[0]; err = _tuple$3[1];
		return [l, err];
	};
	get4 = function(b) {
		if (b.length < 4) {
			return 0;
		}
		return (((((0 < 0 || 0 >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + 0]) >> 0) | ((((1 < 0 || 1 >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + 1]) >> 0) << 8 >> 0)) | ((((2 < 0 || 2 >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + 2]) >> 0) << 16 >> 0)) | ((((3 < 0 || 3 >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + 3]) >> 0) << 24 >> 0);
	};
	get2 = function(b) {
		if (b.length < 2) {
			return 0;
		}
		return (((0 < 0 || 0 >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + 0]) >> 0) | ((((1 < 0 || 1 >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + 1]) >> 0) << 8 >> 0);
	};
	loadZoneZip = function(zipfile, name) {
		var l, err, _tuple$1, fd, _tmp, _tmp$1, buf, err$1, _tmp$2, _tmp$3, n, size, off, err$2, _tmp$4, _tmp$5, i, meth, size$1, namelen, xlen, fclen, off$1, zname, _tmp$6, _tmp$7, err$3, _tmp$8, _tmp$9, err$4, _tmp$10, _tmp$11, _tuple$2, _tmp$12, _tmp$13;
		l = ($ptrType(Location)).nil;
		err = null;
		var $deferred = [];
		try {
			_tuple$1 = open(zipfile); fd = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, null))) {
				_tmp = ($ptrType(Location)).nil; _tmp$1 = errors.New("open " + zipfile + ": " + err.Error()); l = _tmp; err = _tmp$1;
				return [l, err];
			}
			$deferred.push({ fun: closefd, args: [fd] });
			buf = ($sliceType($Uint8)).make(22, 0, function() { return 0; });
			err$1 = preadn(fd, buf, -22);
			if (!($interfaceIsEqual(err$1, null)) || !((get4(buf) === 101010256))) {
				_tmp$2 = ($ptrType(Location)).nil; _tmp$3 = errors.New("corrupt zip file " + zipfile); l = _tmp$2; err = _tmp$3;
				return [l, err];
			}
			n = get2($subslice(buf, 10));
			size = get4($subslice(buf, 12));
			off = get4($subslice(buf, 16));
			buf = ($sliceType($Uint8)).make(size, 0, function() { return 0; });
			err$2 = preadn(fd, buf, off);
			if (!($interfaceIsEqual(err$2, null))) {
				_tmp$4 = ($ptrType(Location)).nil; _tmp$5 = errors.New("corrupt zip file " + zipfile); l = _tmp$4; err = _tmp$5;
				return [l, err];
			}
			i = 0;
			while (i < n) {
				if (!((get4(buf) === 33639248))) {
					break;
				}
				meth = get2($subslice(buf, 10));
				size$1 = get4($subslice(buf, 24));
				namelen = get2($subslice(buf, 28));
				xlen = get2($subslice(buf, 30));
				fclen = get2($subslice(buf, 32));
				off$1 = get4($subslice(buf, 42));
				zname = $subslice(buf, 46, (46 + namelen >> 0));
				buf = $subslice(buf, (((46 + namelen >> 0) + xlen >> 0) + fclen >> 0));
				if (!($bytesToString(zname) === name)) {
					i = i + 1 >> 0;
					continue;
				}
				if (!((meth === 0))) {
					_tmp$6 = ($ptrType(Location)).nil; _tmp$7 = errors.New("unsupported compression for " + name + " in " + zipfile); l = _tmp$6; err = _tmp$7;
					return [l, err];
				}
				buf = ($sliceType($Uint8)).make((30 + namelen >> 0), 0, function() { return 0; });
				err$3 = preadn(fd, buf, off$1);
				if (!($interfaceIsEqual(err$3, null)) || !((get4(buf) === 67324752)) || !((get2($subslice(buf, 8)) === meth)) || !((get2($subslice(buf, 26)) === namelen)) || !($bytesToString($subslice(buf, 30, (30 + namelen >> 0))) === name)) {
					_tmp$8 = ($ptrType(Location)).nil; _tmp$9 = errors.New("corrupt zip file " + zipfile); l = _tmp$8; err = _tmp$9;
					return [l, err];
				}
				xlen = get2($subslice(buf, 28));
				buf = ($sliceType($Uint8)).make(size$1, 0, function() { return 0; });
				err$4 = preadn(fd, buf, ((off$1 + 30 >> 0) + namelen >> 0) + xlen >> 0);
				if (!($interfaceIsEqual(err$4, null))) {
					_tmp$10 = ($ptrType(Location)).nil; _tmp$11 = errors.New("corrupt zip file " + zipfile); l = _tmp$10; err = _tmp$11;
					return [l, err];
				}
				_tuple$2 = loadZoneData(buf); l = _tuple$2[0]; err = _tuple$2[1];
				return [l, err];
			}
			_tmp$12 = ($ptrType(Location)).nil; _tmp$13 = errors.New("cannot find " + name + " in zip file " + zipfile); l = _tmp$12; err = _tmp$13;
			return [l, err];
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
			return [l, err];
		}
	};
	initLocal = function() {
		var _tuple$1, tz, ok, _tuple$2, z, err, _tuple$3, z$1, err$1;
		_tuple$1 = syscall.Getenv("TZ"); tz = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			_tuple$2 = loadZoneFile("", "/etc/localtime"); z = _tuple$2[0]; err = _tuple$2[1];
			if ($interfaceIsEqual(err, null)) {
				$copy(localLoc, z, Location);
				localLoc.name = "Local";
				return;
			}
		} else if (!(tz === "") && !(tz === "UTC")) {
			_tuple$3 = loadLocation(tz); z$1 = _tuple$3[0]; err$1 = _tuple$3[1];
			if ($interfaceIsEqual(err$1, null)) {
				$copy(localLoc, z$1, Location);
				return;
			}
		}
		localLoc.name = "UTC";
	};
	loadLocation = function(name) {
		var _ref, _i, zoneDir, _tuple$1, z, err;
		_ref = zoneDirs;
		_i = 0;
		while (_i < _ref.length) {
			zoneDir = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			_tuple$1 = loadZoneFile(zoneDir, name); z = _tuple$1[0]; err = _tuple$1[1];
			if ($interfaceIsEqual(err, null)) {
				z.name = name;
				return [z, null];
			}
			_i++;
		}
		return [($ptrType(Location)).nil, errors.New("unknown time zone " + name)];
	};
	$pkg.$init = function() {
		($ptrType(ParseError)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		ParseError.init([["Layout", "Layout", "", $String, ""], ["Value", "Value", "", $String, ""], ["LayoutElem", "LayoutElem", "", $String, ""], ["ValueElem", "ValueElem", "", $String, ""], ["Message", "Message", "", $String, ""]]);
		Time.methods = [["Add", "Add", "", [Duration], [Time], false, -1], ["AddDate", "AddDate", "", [$Int, $Int, $Int], [Time], false, -1], ["After", "After", "", [Time], [$Bool], false, -1], ["Before", "Before", "", [Time], [$Bool], false, -1], ["Clock", "Clock", "", [], [$Int, $Int, $Int], false, -1], ["Date", "Date", "", [], [$Int, Month, $Int], false, -1], ["Day", "Day", "", [], [$Int], false, -1], ["Equal", "Equal", "", [Time], [$Bool], false, -1], ["Format", "Format", "", [$String], [$String], false, -1], ["GobEncode", "GobEncode", "", [], [($sliceType($Uint8)), $error], false, -1], ["Hour", "Hour", "", [], [$Int], false, -1], ["ISOWeek", "ISOWeek", "", [], [$Int, $Int], false, -1], ["In", "In", "", [($ptrType(Location))], [Time], false, -1], ["IsZero", "IsZero", "", [], [$Bool], false, -1], ["Local", "Local", "", [], [Time], false, -1], ["Location", "Location", "", [], [($ptrType(Location))], false, -1], ["MarshalBinary", "MarshalBinary", "", [], [($sliceType($Uint8)), $error], false, -1], ["MarshalJSON", "MarshalJSON", "", [], [($sliceType($Uint8)), $error], false, -1], ["MarshalText", "MarshalText", "", [], [($sliceType($Uint8)), $error], false, -1], ["Minute", "Minute", "", [], [$Int], false, -1], ["Month", "Month", "", [], [Month], false, -1], ["Nanosecond", "Nanosecond", "", [], [$Int], false, -1], ["Round", "Round", "", [Duration], [Time], false, -1], ["Second", "Second", "", [], [$Int], false, -1], ["String", "String", "", [], [$String], false, -1], ["Sub", "Sub", "", [Time], [Duration], false, -1], ["Truncate", "Truncate", "", [Duration], [Time], false, -1], ["UTC", "UTC", "", [], [Time], false, -1], ["Unix", "Unix", "", [], [$Int64], false, -1], ["UnixNano", "UnixNano", "", [], [$Int64], false, -1], ["Weekday", "Weekday", "", [], [Weekday], false, -1], ["Year", "Year", "", [], [$Int], false, -1], ["YearDay", "YearDay", "", [], [$Int], false, -1], ["Zone", "Zone", "", [], [$String, $Int], false, -1], ["abs", "abs", "time", [], [$Uint64], false, -1], ["date", "date", "time", [$Bool], [$Int, Month, $Int, $Int], false, -1], ["locabs", "locabs", "time", [], [$String, $Int, $Uint64], false, -1]];
		($ptrType(Time)).methods = [["Add", "Add", "", [Duration], [Time], false, -1], ["AddDate", "AddDate", "", [$Int, $Int, $Int], [Time], false, -1], ["After", "After", "", [Time], [$Bool], false, -1], ["Before", "Before", "", [Time], [$Bool], false, -1], ["Clock", "Clock", "", [], [$Int, $Int, $Int], false, -1], ["Date", "Date", "", [], [$Int, Month, $Int], false, -1], ["Day", "Day", "", [], [$Int], false, -1], ["Equal", "Equal", "", [Time], [$Bool], false, -1], ["Format", "Format", "", [$String], [$String], false, -1], ["GobDecode", "GobDecode", "", [($sliceType($Uint8))], [$error], false, -1], ["GobEncode", "GobEncode", "", [], [($sliceType($Uint8)), $error], false, -1], ["Hour", "Hour", "", [], [$Int], false, -1], ["ISOWeek", "ISOWeek", "", [], [$Int, $Int], false, -1], ["In", "In", "", [($ptrType(Location))], [Time], false, -1], ["IsZero", "IsZero", "", [], [$Bool], false, -1], ["Local", "Local", "", [], [Time], false, -1], ["Location", "Location", "", [], [($ptrType(Location))], false, -1], ["MarshalBinary", "MarshalBinary", "", [], [($sliceType($Uint8)), $error], false, -1], ["MarshalJSON", "MarshalJSON", "", [], [($sliceType($Uint8)), $error], false, -1], ["MarshalText", "MarshalText", "", [], [($sliceType($Uint8)), $error], false, -1], ["Minute", "Minute", "", [], [$Int], false, -1], ["Month", "Month", "", [], [Month], false, -1], ["Nanosecond", "Nanosecond", "", [], [$Int], false, -1], ["Round", "Round", "", [Duration], [Time], false, -1], ["Second", "Second", "", [], [$Int], false, -1], ["String", "String", "", [], [$String], false, -1], ["Sub", "Sub", "", [Time], [Duration], false, -1], ["Truncate", "Truncate", "", [Duration], [Time], false, -1], ["UTC", "UTC", "", [], [Time], false, -1], ["Unix", "Unix", "", [], [$Int64], false, -1], ["UnixNano", "UnixNano", "", [], [$Int64], false, -1], ["UnmarshalBinary", "UnmarshalBinary", "", [($sliceType($Uint8))], [$error], false, -1], ["UnmarshalJSON", "UnmarshalJSON", "", [($sliceType($Uint8))], [$error], false, -1], ["UnmarshalText", "UnmarshalText", "", [($sliceType($Uint8))], [$error], false, -1], ["Weekday", "Weekday", "", [], [Weekday], false, -1], ["Year", "Year", "", [], [$Int], false, -1], ["YearDay", "YearDay", "", [], [$Int], false, -1], ["Zone", "Zone", "", [], [$String, $Int], false, -1], ["abs", "abs", "time", [], [$Uint64], false, -1], ["date", "date", "time", [$Bool], [$Int, Month, $Int, $Int], false, -1], ["locabs", "locabs", "time", [], [$String, $Int, $Uint64], false, -1]];
		Time.init([["sec", "sec", "time", $Int64, ""], ["nsec", "nsec", "time", $Uintptr, ""], ["loc", "loc", "time", ($ptrType(Location)), ""]]);
		Month.methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(Month)).methods = [["String", "String", "", [], [$String], false, -1]];
		Weekday.methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(Weekday)).methods = [["String", "String", "", [], [$String], false, -1]];
		Duration.methods = [["Hours", "Hours", "", [], [$Float64], false, -1], ["Minutes", "Minutes", "", [], [$Float64], false, -1], ["Nanoseconds", "Nanoseconds", "", [], [$Int64], false, -1], ["Seconds", "Seconds", "", [], [$Float64], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(Duration)).methods = [["Hours", "Hours", "", [], [$Float64], false, -1], ["Minutes", "Minutes", "", [], [$Float64], false, -1], ["Nanoseconds", "Nanoseconds", "", [], [$Int64], false, -1], ["Seconds", "Seconds", "", [], [$Float64], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(Location)).methods = [["String", "String", "", [], [$String], false, -1], ["firstZoneUsed", "firstZoneUsed", "time", [], [$Bool], false, -1], ["get", "get", "time", [], [($ptrType(Location))], false, -1], ["lookup", "lookup", "time", [$Int64], [$String, $Int, $Bool, $Int64, $Int64], false, -1], ["lookupFirstZone", "lookupFirstZone", "time", [], [$Int], false, -1], ["lookupName", "lookupName", "time", [$String, $Int64], [$Int, $Bool, $Bool], false, -1]];
		Location.init([["name", "name", "time", $String, ""], ["zone", "zone", "time", ($sliceType(zone)), ""], ["tx", "tx", "time", ($sliceType(zoneTrans)), ""], ["cacheStart", "cacheStart", "time", $Int64, ""], ["cacheEnd", "cacheEnd", "time", $Int64, ""], ["cacheZone", "cacheZone", "time", ($ptrType(zone)), ""]]);
		zone.init([["name", "name", "time", $String, ""], ["offset", "offset", "time", $Int, ""], ["isDST", "isDST", "time", $Bool, ""]]);
		zoneTrans.init([["when", "when", "time", $Int64, ""], ["index", "index", "time", $Uint8, ""], ["isstd", "isstd", "time", $Bool, ""], ["isutc", "isutc", "time", $Bool, ""]]);
		($ptrType(data)).methods = [["big4", "big4", "time", [], [$Uint32, $Bool], false, -1], ["byte$", "byte", "time", [], [$Uint8, $Bool], false, -1], ["read", "read", "time", [$Int], [($sliceType($Uint8))], false, -1]];
		data.init([["p", "p", "time", ($sliceType($Uint8)), ""], ["error", "error", "time", $Bool, ""]]);
		localLoc = new Location.Ptr();
		localOnce = new sync.Once.Ptr();
		std0x = ($arrayType($Int, 6)).zero(); $copy(std0x, $toNativeArray("Int", [260, 265, 524, 526, 528, 274]), ($arrayType($Int, 6)));
		longDayNames = new ($sliceType($String))(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new ($sliceType($String))(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new ($sliceType($String))(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new ($sliceType($String))(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = ($arrayType($String, 12)).zero(); $copy(months, $toNativeArray("String", ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]), ($arrayType($String, 12)));
		days = ($arrayType($String, 7)).zero(); $copy(days, $toNativeArray("String", ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]), ($arrayType($String, 7)));
		var _map, _key;
		unitMap = (_map = new $Map(), _key = "ns", _map[_key] = { k: _key, v: 1 }, _key = "us", _map[_key] = { k: _key, v: 1000 }, _key = "\xC2\xB5s", _map[_key] = { k: _key, v: 1000 }, _key = "\xCE\xBCs", _map[_key] = { k: _key, v: 1000 }, _key = "ms", _map[_key] = { k: _key, v: 1e+06 }, _key = "s", _map[_key] = { k: _key, v: 1e+09 }, _key = "m", _map[_key] = { k: _key, v: 6e+10 }, _key = "h", _map[_key] = { k: _key, v: 3.6e+12 }, _map);
		daysBefore = ($arrayType($Int32, 13)).zero(); $copy(daysBefore, $toNativeArray("Int32", [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]), ($arrayType($Int32, 13)));
		utcLoc = new Location.Ptr(); $copy(utcLoc, new Location.Ptr("UTC", ($sliceType(zone)).nil, ($sliceType(zoneTrans)).nil, new $Int64(0, 0), new $Int64(0, 0), ($ptrType(zone)).nil), Location);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		var _tuple;
		_tuple = syscall.Getenv("ZONEINFO"); zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new ($sliceType($String))(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
	};
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], io = $packages["io"], syscall = $packages["syscall"], time = $packages["time"], errors = $packages["errors"], runtime = $packages["runtime"], atomic = $packages["sync/atomic"], sync = $packages["sync"], PathError, SyscallError, Process, ProcAttr, Signal, ProcessState, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, lstat, useSyscallwd, supportsCloseOnExec, init, StartProcess, Getenv, Environ, NewSyscallError, IsNotExist, isNotExist, newProcess, startProcess, itod, Open, sigpipe, syscallMode, NewFile, epipecheck, OpenFile, Stat, Lstat, basename, init$1, useSyscallwdDarwin, IsPathSeparator, Pipe, Exit, fileInfoFromStat, timespecToTime, init$2;
	PathError = $pkg.PathError = $newType(0, "Struct", "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	SyscallError = $pkg.SyscallError = $newType(0, "Struct", "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		this.Syscall = Syscall_ !== undefined ? Syscall_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	Process = $pkg.Process = $newType(0, "Struct", "os.Process", "Process", "os", function(Pid_, handle_, isdone_) {
		this.$val = this;
		this.Pid = Pid_ !== undefined ? Pid_ : 0;
		this.handle = handle_ !== undefined ? handle_ : 0;
		this.isdone = isdone_ !== undefined ? isdone_ : 0;
	});
	ProcAttr = $pkg.ProcAttr = $newType(0, "Struct", "os.ProcAttr", "ProcAttr", "os", function(Dir_, Env_, Files_, Sys_) {
		this.$val = this;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Env = Env_ !== undefined ? Env_ : ($sliceType($String)).nil;
		this.Files = Files_ !== undefined ? Files_ : ($sliceType(($ptrType(File)))).nil;
		this.Sys = Sys_ !== undefined ? Sys_ : ($ptrType(syscall.SysProcAttr)).nil;
	});
	Signal = $pkg.Signal = $newType(8, "Interface", "os.Signal", "Signal", "os", null);
	ProcessState = $pkg.ProcessState = $newType(0, "Struct", "os.ProcessState", "ProcessState", "os", function(pid_, status_, rusage_) {
		this.$val = this;
		this.pid = pid_ !== undefined ? pid_ : 0;
		this.status = status_ !== undefined ? status_ : 0;
		this.rusage = rusage_ !== undefined ? rusage_ : ($ptrType(syscall.Rusage)).nil;
	});
	LinkError = $pkg.LinkError = $newType(0, "Struct", "os.LinkError", "LinkError", "os", function(Op_, Old_, New_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Old = Old_ !== undefined ? Old_ : "";
		this.New = New_ !== undefined ? New_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	File = $pkg.File = $newType(0, "Struct", "os.File", "File", "os", function(file_) {
		this.$val = this;
		this.file = file_ !== undefined ? file_ : ($ptrType(file)).nil;
	});
	file = $pkg.file = $newType(0, "Struct", "os.file", "file", "os", function(fd_, name_, dirinfo_, nepipe_) {
		this.$val = this;
		this.fd = fd_ !== undefined ? fd_ : 0;
		this.name = name_ !== undefined ? name_ : "";
		this.dirinfo = dirinfo_ !== undefined ? dirinfo_ : ($ptrType(dirInfo)).nil;
		this.nepipe = nepipe_ !== undefined ? nepipe_ : 0;
	});
	dirInfo = $pkg.dirInfo = $newType(0, "Struct", "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.nbuf = nbuf_ !== undefined ? nbuf_ : 0;
		this.bufp = bufp_ !== undefined ? bufp_ : 0;
	});
	FileInfo = $pkg.FileInfo = $newType(8, "Interface", "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, "Uint32", "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, "Struct", "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.size = size_ !== undefined ? size_ : new $Int64(0, 0);
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.modTime = modTime_ !== undefined ? modTime_ : new time.Time.Ptr();
		this.sys = sys_ !== undefined ? sys_ : null;
	});
	init = function() {
		var process, args, i;
		process = $global.process;
		if (process === undefined) {
			$pkg.Args = new ($sliceType($String))(["browser"]);
			return;
		}
		args = process.argv;
		$pkg.Args = ($sliceType($String)).make(($parseInt(args.length) - 1 >> 0), 0, function() { return ""; });
		i = 0;
		while (i < ($parseInt(args.length) - 1 >> 0)) {
			(i < 0 || i >= $pkg.Args.length) ? $throwRuntimeError("index out of range") : $pkg.Args.array[$pkg.Args.offset + i] = $internalize(args[(i + 1 >> 0)], $String);
			i = i + 1 >> 0;
		}
	};
	File.Ptr.prototype.readdirnames = function(n) {
		var names, err, f, d, size, errno, _tuple, _tmp, _tmp$1, _tmp$2, _tmp$3, nb, nc, _tuple$1, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		names = ($sliceType($String)).nil;
		err = null;
		f = this;
		if (f.file.dirinfo === ($ptrType(dirInfo)).nil) {
			f.file.dirinfo = new dirInfo.Ptr();
			f.file.dirinfo.buf = ($sliceType($Uint8)).make(4096, 0, function() { return 0; });
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = ($sliceType($String)).make(0, size, function() { return ""; });
		while (!((n === 0))) {
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = null;
				_tuple = syscall.ReadDirent(f.file.fd, d.buf); d.nbuf = _tuple[0]; errno = _tuple[1];
				if (!($interfaceIsEqual(errno, null))) {
					_tmp = names; _tmp$1 = NewSyscallError("readdirent", errno); names = _tmp; err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0; _tmp$3 = 0; nb = _tmp$2; nc = _tmp$3;
			_tuple$1 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names); nb = _tuple$1[0]; nc = _tuple$1[1]; names = _tuple$1[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.length === 0)) {
			_tmp$4 = names; _tmp$5 = io.EOF; names = _tmp$4; err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names; _tmp$7 = null; names = _tmp$6; err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	StartProcess = $pkg.StartProcess = function(name, argv, attr) {
		return startProcess(name, argv, attr);
	};
	Process.Ptr.prototype.Release = function() {
		var p;
		p = this;
		return p.release();
	};
	Process.prototype.Release = function() { return this.$val.Release(); };
	Process.Ptr.prototype.Kill = function() {
		var p;
		p = this;
		return p.kill();
	};
	Process.prototype.Kill = function() { return this.$val.Kill(); };
	Process.Ptr.prototype.Wait = function() {
		var p;
		p = this;
		return p.wait();
	};
	Process.prototype.Wait = function() { return this.$val.Wait(); };
	Process.Ptr.prototype.Signal = function(sig) {
		var p;
		p = this;
		return p.signal(sig);
	};
	Process.prototype.Signal = function(sig) { return this.$val.Signal(sig); };
	ProcessState.Ptr.prototype.UserTime = function() {
		var p;
		p = this;
		return p.userTime();
	};
	ProcessState.prototype.UserTime = function() { return this.$val.UserTime(); };
	ProcessState.Ptr.prototype.SystemTime = function() {
		var p;
		p = this;
		return p.systemTime();
	};
	ProcessState.prototype.SystemTime = function() { return this.$val.SystemTime(); };
	ProcessState.Ptr.prototype.Exited = function() {
		var p;
		p = this;
		return p.exited();
	};
	ProcessState.prototype.Exited = function() { return this.$val.Exited(); };
	ProcessState.Ptr.prototype.Success = function() {
		var p;
		p = this;
		return p.success();
	};
	ProcessState.prototype.Success = function() { return this.$val.Success(); };
	ProcessState.Ptr.prototype.Sys = function() {
		var p;
		p = this;
		return p.sys();
	};
	ProcessState.prototype.Sys = function() { return this.$val.Sys(); };
	ProcessState.Ptr.prototype.SysUsage = function() {
		var p;
		p = this;
		return p.sysUsage();
	};
	ProcessState.prototype.SysUsage = function() { return this.$val.SysUsage(); };
	File.Ptr.prototype.Readdir = function(n) {
		var fi, err, f, _tmp, _tmp$1, _tuple;
		fi = ($sliceType(FileInfo)).nil;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = ($sliceType(FileInfo)).nil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tuple = f.readdir(n); fi = _tuple[0]; err = _tuple[1];
		return [fi, err];
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.Ptr.prototype.Readdirnames = function(n) {
		var names, err, f, _tmp, _tmp$1, _tuple;
		names = ($sliceType($String)).nil;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = ($sliceType($String)).nil; _tmp$1 = $pkg.ErrInvalid; names = _tmp; err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n); names = _tuple[0]; err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	Getenv = $pkg.Getenv = function(key) {
		var _tuple, v;
		_tuple = syscall.Getenv(key); v = _tuple[0];
		return v;
	};
	Environ = $pkg.Environ = function() {
		return syscall.Environ();
	};
	PathError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Path + ": " + e.Err.Error();
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Syscall + ": " + e.Err.Error();
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = $pkg.NewSyscallError = function(syscall$1, err) {
		if ($interfaceIsEqual(err, null)) {
			return null;
		}
		return new SyscallError.Ptr(syscall$1, err);
	};
	IsNotExist = $pkg.IsNotExist = function(err) {
		return isNotExist(err);
	};
	isNotExist = function(err) {
		var pe, _ref, _type;
		_ref = err;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === null) {
			pe = _ref;
			return false;
		} else if (_type === ($ptrType(PathError))) {
			pe = _ref.$val;
			err = pe.Err;
		} else if (_type === ($ptrType(LinkError))) {
			pe = _ref.$val;
			err = pe.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	newProcess = function(pid, handle) {
		var p;
		p = new Process.Ptr(pid, handle, 0);
		runtime.SetFinalizer(p, new ($funcType([($ptrType(Process))], [$error], false))((function(recv) { return recv.Release(); })));
		return p;
	};
	Process.Ptr.prototype.setDone = function() {
		var p;
		p = this;
		atomic.StoreUint32(new ($ptrType($Uint32))(function() { return this.$target.isdone; }, function($v) { this.$target.isdone = $v; }, p), 1);
	};
	Process.prototype.setDone = function() { return this.$val.setDone(); };
	Process.Ptr.prototype.done = function() {
		var p;
		p = this;
		return atomic.LoadUint32(new ($ptrType($Uint32))(function() { return this.$target.isdone; }, function($v) { this.$target.isdone = $v; }, p)) > 0;
	};
	Process.prototype.done = function() { return this.$val.done(); };
	startProcess = function(name, argv, attr) {
		var p, err, _tuple, err$1, pe, _tmp, _tmp$1, sysattr, _ref, _i, f, _tuple$1, pid, h, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		p = ($ptrType(Process)).nil;
		err = null;
		if (!(attr === ($ptrType(ProcAttr)).nil) && attr.Sys === ($ptrType(syscall.SysProcAttr)).nil && !(attr.Dir === "")) {
			_tuple = Stat(attr.Dir); err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, null))) {
				pe = (err$1 !== null && err$1.constructor === ($ptrType(PathError)) ? err$1.$val : $typeAssertionFailed(err$1, ($ptrType(PathError))));
				pe.Op = "chdir";
				_tmp = ($ptrType(Process)).nil; _tmp$1 = pe; p = _tmp; err = _tmp$1;
				return [p, err];
			}
		}
		sysattr = new syscall.ProcAttr.Ptr(attr.Dir, attr.Env, ($sliceType($Uintptr)).nil, attr.Sys);
		if (sysattr.Env === ($sliceType($String)).nil) {
			sysattr.Env = Environ();
		}
		_ref = attr.Files;
		_i = 0;
		while (_i < _ref.length) {
			f = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			sysattr.Files = $append(sysattr.Files, f.Fd());
			_i++;
		}
		_tuple$1 = syscall.StartProcess(name, argv, sysattr); pid = _tuple$1[0]; h = _tuple$1[1]; e = _tuple$1[2];
		if (!($interfaceIsEqual(e, null))) {
			_tmp$2 = ($ptrType(Process)).nil; _tmp$3 = new PathError.Ptr("fork/exec", name, e); p = _tmp$2; err = _tmp$3;
			return [p, err];
		}
		_tmp$4 = newProcess(pid, h); _tmp$5 = null; p = _tmp$4; err = _tmp$5;
		return [p, err];
	};
	Process.Ptr.prototype.kill = function() {
		var p;
		p = this;
		return p.Signal($pkg.Kill);
	};
	Process.prototype.kill = function() { return this.$val.kill(); };
	ProcessState.Ptr.prototype.Pid = function() {
		var p;
		p = this;
		return p.pid;
	};
	ProcessState.prototype.Pid = function() { return this.$val.Pid(); };
	ProcessState.Ptr.prototype.exited = function() {
		var p;
		p = this;
		return (new syscall.WaitStatus(p.status)).Exited();
	};
	ProcessState.prototype.exited = function() { return this.$val.exited(); };
	ProcessState.Ptr.prototype.success = function() {
		var p;
		p = this;
		return (new syscall.WaitStatus(p.status)).ExitStatus() === 0;
	};
	ProcessState.prototype.success = function() { return this.$val.success(); };
	ProcessState.Ptr.prototype.sys = function() {
		var p;
		p = this;
		return new syscall.WaitStatus(p.status);
	};
	ProcessState.prototype.sys = function() { return this.$val.sys(); };
	ProcessState.Ptr.prototype.sysUsage = function() {
		var p;
		p = this;
		return p.rusage;
	};
	ProcessState.prototype.sysUsage = function() { return this.$val.sysUsage(); };
	itod = function(i) {
		var u, b, bp;
		if (i === 0) {
			return "0";
		}
		u = new $Uint64(0, i);
		if (i < 0) {
			u = new $Uint64(-u.high, -u.low);
		}
		b = ($arrayType($Uint8, 32)).zero(); $copy(b, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		bp = 32;
		while ((u.high > 0 || (u.high === 0 && u.low > 0))) {
			bp = bp - 1 >> 0;
			b[bp] = ($div64(u, new $Uint64(0, 10), true).low << 24 >>> 24) + 48 << 24 >>> 24;
			u = $div64(u, new $Uint64(0, 10), false);
		}
		if (i < 0) {
			bp = bp - 1 >> 0;
			b[bp] = 45;
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(b), bp));
	};
	ProcessState.Ptr.prototype.String = function() {
		var p, x, status, res;
		p = this;
		if (p === ($ptrType(ProcessState)).nil) {
			return "<nil>";
		}
		status = (x = p.Sys(), (x !== null && x.constructor === syscall.WaitStatus ? x.$val : $typeAssertionFailed(x, syscall.WaitStatus)));
		res = "";
		if ((new syscall.WaitStatus(status)).Exited()) {
			res = "exit status " + itod((new syscall.WaitStatus(status)).ExitStatus());
		} else if ((new syscall.WaitStatus(status)).Signaled()) {
			res = "signal: " + (new syscall.Signal((new syscall.WaitStatus(status)).Signal())).String();
		} else if ((new syscall.WaitStatus(status)).Stopped()) {
			res = "stop signal: " + (new syscall.Signal((new syscall.WaitStatus(status)).StopSignal())).String();
			if (((new syscall.WaitStatus(status)).StopSignal() === 5) && !(((new syscall.WaitStatus(status)).TrapCause() === 0))) {
				res = res + (" (trap " + itod((new syscall.WaitStatus(status)).TrapCause()) + ")");
			}
		} else if ((new syscall.WaitStatus(status)).Continued()) {
			res = "continued";
		}
		if ((new syscall.WaitStatus(status)).CoreDump()) {
			res = res + " (core dumped)";
		}
		return res;
	};
	ProcessState.prototype.String = function() { return this.$val.String(); };
	Process.Ptr.prototype.wait = function() {
		var ps, err, p, _tmp, _tmp$1, status, rusage, _tuple, pid1, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		ps = ($ptrType(ProcessState)).nil;
		err = null;
		p = this;
		if (p.Pid === -1) {
			_tmp = ($ptrType(ProcessState)).nil; _tmp$1 = new syscall.Errno(22); ps = _tmp; err = _tmp$1;
			return [ps, err];
		}
		status = 0;
		rusage = new syscall.Rusage.Ptr(); $copy(rusage, new syscall.Rusage.Ptr(), syscall.Rusage);
		_tuple = syscall.Wait4(p.Pid, new ($ptrType(syscall.WaitStatus))(function() { return status; }, function($v) { status = $v; }), 0, rusage); pid1 = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, null))) {
			_tmp$2 = ($ptrType(ProcessState)).nil; _tmp$3 = NewSyscallError("wait", e); ps = _tmp$2; err = _tmp$3;
			return [ps, err];
		}
		if (!((pid1 === 0))) {
			p.setDone();
		}
		ps = new ProcessState.Ptr(pid1, status, rusage);
		_tmp$4 = ps; _tmp$5 = null; ps = _tmp$4; err = _tmp$5;
		return [ps, err];
	};
	Process.prototype.wait = function() { return this.$val.wait(); };
	Process.Ptr.prototype.signal = function(sig) {
		var p, _tuple, s, ok, e;
		p = this;
		if (p.done()) {
			return errors.New("os: process already finished");
		}
		if (p.Pid === -1) {
			return errors.New("os: process already released");
		}
		_tuple = (sig !== null && sig.constructor === syscall.Signal ? [sig.$val, true] : [0, false]); s = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return errors.New("os: unsupported signal type");
		}
		e = syscall.Kill(p.Pid, s);
		if (!($interfaceIsEqual(e, null))) {
			return e;
		}
		return null;
	};
	Process.prototype.signal = function(sig) { return this.$val.signal(sig); };
	Process.Ptr.prototype.release = function() {
		var p;
		p = this;
		p.Pid = -1;
		runtime.SetFinalizer(p, null);
		return null;
	};
	Process.prototype.release = function() { return this.$val.release(); };
	ProcessState.Ptr.prototype.userTime = function() {
		var p, x;
		p = this;
		return $mul64((x = p.rusage.Utime.Nano(), new time.Duration(x.high, x.low)), new time.Duration(0, 1));
	};
	ProcessState.prototype.userTime = function() { return this.$val.userTime(); };
	ProcessState.Ptr.prototype.systemTime = function() {
		var p, x;
		p = this;
		return $mul64((x = p.rusage.Stime.Nano(), new time.Duration(x.high, x.low)), new time.Duration(0, 1));
	};
	ProcessState.prototype.systemTime = function() { return this.$val.systemTime(); };
	File.Ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Old + " " + e.New + ": " + e.Err.Error();
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.Ptr.prototype.Read = function(b) {
		var n, err, f, _tmp, _tmp$1, _tuple, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		n = 0;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.length > 0 && $interfaceIsEqual(e, null)) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("read", f.file.name, e);
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.Ptr.prototype.ReadAt = function(b, off) {
		var n, err, f, _tmp, _tmp$1, _tuple, m, e, _tmp$2, _tmp$3, x;
		n = 0;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (b.length > 0) {
			_tuple = f.pread(b, off); m = _tuple[0]; e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, null)) {
				_tmp$2 = n; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, null))) {
				err = new PathError.Ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.high + x.high, off.low + x.low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.Ptr.prototype.Write = function(b) {
		var n, err, f, _tmp, _tmp$1, _tuple, e, _tmp$2, _tmp$3;
		n = 0;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("write", f.file.name, e);
		}
		_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.Ptr.prototype.WriteAt = function(b, off) {
		var n, err, f, _tmp, _tmp$1, _tuple, m, e, x;
		n = 0;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (b.length > 0) {
			_tuple = f.pwrite(b, off); m = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, null))) {
				err = new PathError.Ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.high + x.high, off.low + x.low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.Ptr.prototype.Seek = function(offset, whence) {
		var ret, err, f, _tmp, _tmp$1, _tuple, r, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		ret = new $Int64(0, 0);
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = new $Int64(0, 0); _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence); r = _tuple[0]; e = _tuple[1];
		if ($interfaceIsEqual(e, null) && !(f.file.dirinfo === ($ptrType(dirInfo)).nil) && !((r.high === 0 && r.low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, null))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = new PathError.Ptr("seek", f.file.name, e); ret = _tmp$2; err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r; _tmp$5 = null; ret = _tmp$4; err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.Ptr.prototype.WriteString = function(s) {
		var ret, err, f, _tmp, _tmp$1, _tuple;
		ret = 0;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.Write(new ($sliceType($Uint8))($stringToBytes(s))); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.Ptr.prototype.Chdir = function() {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chdir", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	Open = $pkg.Open = function(name) {
		var file$1, err, _tuple;
		file$1 = ($ptrType(File)).nil;
		err = null;
		_tuple = OpenFile(name, 0, 0); file$1 = _tuple[0]; err = _tuple[1];
		return [file$1, err];
	};
	sigpipe = function() {
		throw $panic("Native function not implemented: sigpipe");
	};
	syscallMode = function(i) {
		var o;
		o = 0;
		o = (o | (((new FileMode(i)).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | 2048) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | 1024) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | 512) >>> 0;
		}
		return o;
	};
	File.Ptr.prototype.Chmod = function(mode) {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chmod", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.Ptr.prototype.Chown = function(uid, gid) {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chown", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.Ptr.prototype.Truncate = function(size) {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, null))) {
			return new PathError.Ptr("truncate", f.file.name, e);
		}
		return null;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.Ptr.prototype.Sync = function() {
		var err, f, e;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			err = $pkg.ErrInvalid;
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, null))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = null;
		return err;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.Ptr.prototype.Fd = function() {
		var f;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = $pkg.NewFile = function(fd, name) {
		var fdi, f;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ($ptrType(File)).nil;
		}
		f = new File.Ptr(new file.Ptr(fdi, name, ($ptrType(dirInfo)).nil, 0));
		runtime.SetFinalizer(f.file, new ($funcType([($ptrType(file))], [$error], false))((function(recv) { return recv.close(); })));
		return f;
	};
	epipecheck = function(file$1, e) {
		if ($interfaceIsEqual(e, new syscall.Errno(32))) {
			if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1), 1) >= 10) {
				sigpipe();
			}
		} else {
			atomic.StoreInt32(new ($ptrType($Int32))(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1), 0);
		}
	};
	OpenFile = $pkg.OpenFile = function(name, flag, perm) {
		var file$1, err, _tuple, r, e, _tmp, _tmp$1, _tmp$2, _tmp$3;
		file$1 = ($ptrType(File)).nil;
		err = null;
		_tuple = syscall.Open(name, flag | 16777216, syscallMode(perm)); r = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, null))) {
			_tmp = ($ptrType(File)).nil; _tmp$1 = new PathError.Ptr("open", name, e); file$1 = _tmp; err = _tmp$1;
			return [file$1, err];
		}
		if (!supportsCloseOnExec) {
			syscall.CloseOnExec(r);
		}
		_tmp$2 = NewFile((r >>> 0), name); _tmp$3 = null; file$1 = _tmp$2; err = _tmp$3;
		return [file$1, err];
	};
	File.Ptr.prototype.Close = function() {
		var f;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.Ptr.prototype.close = function() {
		var file$1, err, e;
		file$1 = this;
		if (file$1 === ($ptrType(file)).nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = null;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, null);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.Ptr.prototype.Stat = function() {
		var fi, err, f, _tmp, _tmp$1, stat, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		fi = null;
		err = null;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = null; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		stat = new syscall.Stat_t.Ptr(); $copy(stat, new syscall.Stat_t.Ptr(), syscall.Stat_t);
		err = syscall.Fstat(f.file.fd, stat);
		if (!($interfaceIsEqual(err, null))) {
			_tmp$2 = null; _tmp$3 = new PathError.Ptr("stat", f.file.name, err); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		_tmp$4 = fileInfoFromStat(stat, f.file.name); _tmp$5 = null; fi = _tmp$4; err = _tmp$5;
		return [fi, err];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = $pkg.Stat = function(name) {
		var fi, err, stat, _tmp, _tmp$1, _tmp$2, _tmp$3;
		fi = null;
		err = null;
		stat = new syscall.Stat_t.Ptr(); $copy(stat, new syscall.Stat_t.Ptr(), syscall.Stat_t);
		err = syscall.Stat(name, stat);
		if (!($interfaceIsEqual(err, null))) {
			_tmp = null; _tmp$1 = new PathError.Ptr("stat", name, err); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tmp$2 = fileInfoFromStat(stat, name); _tmp$3 = null; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	Lstat = $pkg.Lstat = function(name) {
		var fi, err, stat, _tmp, _tmp$1, _tmp$2, _tmp$3;
		fi = null;
		err = null;
		stat = new syscall.Stat_t.Ptr(); $copy(stat, new syscall.Stat_t.Ptr(), syscall.Stat_t);
		err = syscall.Lstat(name, stat);
		if (!($interfaceIsEqual(err, null))) {
			_tmp = null; _tmp$1 = new PathError.Ptr("lstat", name, err); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tmp$2 = fileInfoFromStat(stat, name); _tmp$3 = null; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	File.Ptr.prototype.readdir = function(n) {
		var fi, err, f, dirname, _tuple, names, _ref, _i, filename, _tuple$1, fip, lerr, _tmp, _tmp$1, _tmp$2, _tmp$3;
		fi = ($sliceType(FileInfo)).nil;
		err = null;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n); names = _tuple[0]; err = _tuple[1];
		fi = ($sliceType(FileInfo)).make(0, names.length, function() { return null; });
		_ref = names;
		_i = 0;
		while (_i < _ref.length) {
			filename = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			_tuple$1 = lstat(dirname + "/" + filename); fip = _tuple$1[0]; lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				continue;
			}
			if (!($interfaceIsEqual(lerr, null))) {
				_tmp = fi; _tmp$1 = lerr; fi = _tmp; err = _tmp$1;
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		}
		_tmp$2 = fi; _tmp$3 = err; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.Ptr.prototype.read = function(b) {
		var n, err, f, _tuple;
		n = 0;
		err = null;
		f = this;
		if (true && b.length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple = syscall.Read(f.file.fd, b); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.Ptr.prototype.pread = function(b, off) {
		var n, err, f, _tuple;
		n = 0;
		err = null;
		f = this;
		if (true && b.length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple = syscall.Pread(f.file.fd, b, off); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.Ptr.prototype.write = function(b) {
		var n, err, f, bcap, _tuple, m, err$1, _tmp, _tmp$1;
		n = 0;
		err = null;
		f = this;
		while (true) {
			bcap = b;
			if (true && bcap.length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple = syscall.Write(f.file.fd, bcap); m = _tuple[0]; err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (true && !((bcap.length === b.length)) && $interfaceIsEqual(err$1, null)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.Ptr.prototype.pwrite = function(b, off) {
		var n, err, f, _tuple;
		n = 0;
		err = null;
		f = this;
		if (true && b.length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple = syscall.Pwrite(f.file.fd, b, off); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.Ptr.prototype.seek = function(offset, whence) {
		var ret, err, f, _tuple;
		ret = new $Int64(0, 0);
		err = null;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var i;
		i = name.length - 1 >> 0;
		while (i > 0 && (name.charCodeAt(i) === 47)) {
			name = name.substring(0, i);
			i = i - 1 >> 0;
		}
		i = i - 1 >> 0;
		while (i >= 0) {
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - 1 >> 0;
		}
		return name;
	};
	init$1 = function() {
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	IsPathSeparator = $pkg.IsPathSeparator = function(c) {
		return 47 === c;
	};
	Pipe = $pkg.Pipe = function() {
		var r, w, err, p, e, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		r = ($ptrType(File)).nil;
		w = ($ptrType(File)).nil;
		err = null;
		p = ($arrayType($Int, 2)).zero(); $copy(p, ($arrayType($Int, 2)).zero(), ($arrayType($Int, 2)));
		syscall.ForkLock.RLock();
		e = syscall.Pipe($subslice(new ($sliceType($Int))(p), 0));
		if (!($interfaceIsEqual(e, null))) {
			syscall.ForkLock.RUnlock();
			_tmp = ($ptrType(File)).nil; _tmp$1 = ($ptrType(File)).nil; _tmp$2 = NewSyscallError("pipe", e); r = _tmp; w = _tmp$1; err = _tmp$2;
			return [r, w, err];
		}
		syscall.CloseOnExec(p[0]);
		syscall.CloseOnExec(p[1]);
		syscall.ForkLock.RUnlock();
		_tmp$3 = NewFile((p[0] >>> 0), "|0"); _tmp$4 = NewFile((p[1] >>> 0), "|1"); _tmp$5 = null; r = _tmp$3; w = _tmp$4; err = _tmp$5;
		return [r, w, err];
	};
	Exit = $pkg.Exit = function(code) {
		syscall.Exit(code);
	};
	fileInfoFromStat = function(st, name) {
		var fs, _ref;
		fs = new fileStat.Ptr(basename(name), st.Size, 0, timespecToTime($clone(st.Mtimespec, syscall.Timespec)), st);
		fs.mode = (((st.Mode & 511) >>> 0) >>> 0);
		_ref = (st.Mode & 61440) >>> 0;
		if (_ref === 24576 || _ref === 57344) {
			fs.mode = (fs.mode | 67108864) >>> 0;
		} else if (_ref === 8192) {
			fs.mode = (fs.mode | 69206016) >>> 0;
		} else if (_ref === 16384) {
			fs.mode = (fs.mode | 2147483648) >>> 0;
		} else if (_ref === 4096) {
			fs.mode = (fs.mode | 33554432) >>> 0;
		} else if (_ref === 40960) {
			fs.mode = (fs.mode | 134217728) >>> 0;
		} else if (_ref === 32768) {
		} else if (_ref === 49152) {
			fs.mode = (fs.mode | 16777216) >>> 0;
		}
		if (!((((st.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | 4194304) >>> 0;
		}
		if (!((((st.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | 8388608) >>> 0;
		}
		if (!((((st.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | 1048576) >>> 0;
		}
		return fs;
	};
	timespecToTime = function(ts) {
		return time.Unix(ts.Sec, ts.Nsec);
	};
	init$2 = function() {
		var _tuple, osver, err, i, _ref, _i, _rune;
		_tuple = syscall.Sysctl("kern.osrelease"); osver = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return;
		}
		i = 0;
		_ref = osver;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			if (!((osver.charCodeAt(i) === 46))) {
				_i += _rune[1];
				continue;
			}
			_i += _rune[1];
		}
		if (i > 2 || (i === 2) && osver.charCodeAt(0) >= 49 && osver.charCodeAt(1) >= 49) {
			supportsCloseOnExec = true;
		}
	};
	FileMode.prototype.String = function() {
		var m, buf, w, _ref, _i, _rune, i, c, y, _ref$1, _i$1, _rune$1, i$1, c$1, y$1;
		m = this.$val;
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				buf[w] = (c << 24 >>> 24);
				w = w + 1 >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			buf[w] = 45;
			w = w + 1 >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				buf[w] = (c$1 << 24 >>> 24);
			} else {
				buf[w] = 45;
			}
			w = w + 1 >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.Ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.Ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return (new FileMode(fs.Mode())).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.Ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.Ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.Ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.Ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	$pkg.$init = function() {
		($ptrType(PathError)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		PathError.init([["Op", "Op", "", $String, ""], ["Path", "Path", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(SyscallError)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		SyscallError.init([["Syscall", "Syscall", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(Process)).methods = [["Kill", "Kill", "", [], [$error], false, -1], ["Release", "Release", "", [], [$error], false, -1], ["Signal", "Signal", "", [Signal], [$error], false, -1], ["Wait", "Wait", "", [], [($ptrType(ProcessState)), $error], false, -1], ["done", "done", "os", [], [$Bool], false, -1], ["kill", "kill", "os", [], [$error], false, -1], ["release", "release", "os", [], [$error], false, -1], ["setDone", "setDone", "os", [], [], false, -1], ["signal", "signal", "os", [Signal], [$error], false, -1], ["wait", "wait", "os", [], [($ptrType(ProcessState)), $error], false, -1]];
		Process.init([["Pid", "Pid", "", $Int, ""], ["handle", "handle", "os", $Uintptr, ""], ["isdone", "isdone", "os", $Uint32, ""]]);
		ProcAttr.init([["Dir", "Dir", "", $String, ""], ["Env", "Env", "", ($sliceType($String)), ""], ["Files", "Files", "", ($sliceType(($ptrType(File)))), ""], ["Sys", "Sys", "", ($ptrType(syscall.SysProcAttr)), ""]]);
		Signal.init([["Signal", "Signal", "", [], [], false], ["String", "String", "", [], [$String], false]]);
		($ptrType(ProcessState)).methods = [["Exited", "Exited", "", [], [$Bool], false, -1], ["Pid", "Pid", "", [], [$Int], false, -1], ["String", "String", "", [], [$String], false, -1], ["Success", "Success", "", [], [$Bool], false, -1], ["Sys", "Sys", "", [], [$emptyInterface], false, -1], ["SysUsage", "SysUsage", "", [], [$emptyInterface], false, -1], ["SystemTime", "SystemTime", "", [], [time.Duration], false, -1], ["UserTime", "UserTime", "", [], [time.Duration], false, -1], ["exited", "exited", "os", [], [$Bool], false, -1], ["success", "success", "os", [], [$Bool], false, -1], ["sys", "sys", "os", [], [$emptyInterface], false, -1], ["sysUsage", "sysUsage", "os", [], [$emptyInterface], false, -1], ["systemTime", "systemTime", "os", [], [time.Duration], false, -1], ["userTime", "userTime", "os", [], [time.Duration], false, -1]];
		ProcessState.init([["pid", "pid", "os", $Int, ""], ["status", "status", "os", syscall.WaitStatus, ""], ["rusage", "rusage", "os", ($ptrType(syscall.Rusage)), ""]]);
		($ptrType(LinkError)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		LinkError.init([["Op", "Op", "", $String, ""], ["Old", "Old", "", $String, ""], ["New", "New", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		File.methods = [["close", "close", "os", [], [$error], false, 0]];
		($ptrType(File)).methods = [["Chdir", "Chdir", "", [], [$error], false, -1], ["Chmod", "Chmod", "", [FileMode], [$error], false, -1], ["Chown", "Chown", "", [$Int, $Int], [$error], false, -1], ["Close", "Close", "", [], [$error], false, -1], ["Fd", "Fd", "", [], [$Uintptr], false, -1], ["Name", "Name", "", [], [$String], false, -1], ["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["ReadAt", "ReadAt", "", [($sliceType($Uint8)), $Int64], [$Int, $error], false, -1], ["Readdir", "Readdir", "", [$Int], [($sliceType(FileInfo)), $error], false, -1], ["Readdirnames", "Readdirnames", "", [$Int], [($sliceType($String)), $error], false, -1], ["Seek", "Seek", "", [$Int64, $Int], [$Int64, $error], false, -1], ["Stat", "Stat", "", [], [FileInfo, $error], false, -1], ["Sync", "Sync", "", [], [$error], false, -1], ["Truncate", "Truncate", "", [$Int64], [$error], false, -1], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["WriteAt", "WriteAt", "", [($sliceType($Uint8)), $Int64], [$Int, $error], false, -1], ["WriteString", "WriteString", "", [$String], [$Int, $error], false, -1], ["close", "close", "os", [], [$error], false, 0], ["pread", "pread", "os", [($sliceType($Uint8)), $Int64], [$Int, $error], false, -1], ["pwrite", "pwrite", "os", [($sliceType($Uint8)), $Int64], [$Int, $error], false, -1], ["read", "read", "os", [($sliceType($Uint8))], [$Int, $error], false, -1], ["readdir", "readdir", "os", [$Int], [($sliceType(FileInfo)), $error], false, -1], ["readdirnames", "readdirnames", "os", [$Int], [($sliceType($String)), $error], false, -1], ["seek", "seek", "os", [$Int64, $Int], [$Int64, $error], false, -1], ["write", "write", "os", [($sliceType($Uint8))], [$Int, $error], false, -1]];
		File.init([["file", "", "os", ($ptrType(file)), ""]]);
		($ptrType(file)).methods = [["close", "close", "os", [], [$error], false, -1]];
		file.init([["fd", "fd", "os", $Int, ""], ["name", "name", "os", $String, ""], ["dirinfo", "dirinfo", "os", ($ptrType(dirInfo)), ""], ["nepipe", "nepipe", "os", $Int32, ""]]);
		dirInfo.init([["buf", "buf", "os", ($sliceType($Uint8)), ""], ["nbuf", "nbuf", "os", $Int, ""], ["bufp", "bufp", "os", $Int, ""]]);
		FileInfo.init([["IsDir", "IsDir", "", [], [$Bool], false], ["ModTime", "ModTime", "", [], [time.Time], false], ["Mode", "Mode", "", [], [FileMode], false], ["Name", "Name", "", [], [$String], false], ["Size", "Size", "", [], [$Int64], false], ["Sys", "Sys", "", [], [$emptyInterface], false]]);
		FileMode.methods = [["IsDir", "IsDir", "", [], [$Bool], false, -1], ["IsRegular", "IsRegular", "", [], [$Bool], false, -1], ["Perm", "Perm", "", [], [FileMode], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(FileMode)).methods = [["IsDir", "IsDir", "", [], [$Bool], false, -1], ["IsRegular", "IsRegular", "", [], [$Bool], false, -1], ["Perm", "Perm", "", [], [FileMode], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(fileStat)).methods = [["IsDir", "IsDir", "", [], [$Bool], false, -1], ["ModTime", "ModTime", "", [], [time.Time], false, -1], ["Mode", "Mode", "", [], [FileMode], false, -1], ["Name", "Name", "", [], [$String], false, -1], ["Size", "Size", "", [], [$Int64], false, -1], ["Sys", "Sys", "", [], [$emptyInterface], false, -1]];
		fileStat.init([["name", "name", "os", $String, ""], ["size", "size", "os", $Int64, ""], ["mode", "mode", "os", FileMode, ""], ["modTime", "modTime", "os", time.Time, ""], ["sys", "sys", "os", $emptyInterface, ""]]);
		$pkg.Args = ($sliceType($String)).nil;
		supportsCloseOnExec = false;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.Kill = new syscall.Signal(9);
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		useSyscallwd = (function() {
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
	};
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, math = $packages["math"], errors = $packages["errors"], utf8 = $packages["unicode/utf8"], NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float64info, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, ParseBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatUint, FormatInt, Itoa, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;
	NumError = $pkg.NumError = $newType(0, "Struct", "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		this.Func = Func_ !== undefined ? Func_ : "";
		this.Num = Num_ !== undefined ? Num_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	decimal = $pkg.decimal = $newType(0, "Struct", "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : ($arrayType($Uint8, 800)).zero();
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.trunc = trunc_ !== undefined ? trunc_ : false;
	});
	leftCheat = $pkg.leftCheat = $newType(0, "Struct", "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		this.delta = delta_ !== undefined ? delta_ : 0;
		this.cutoff = cutoff_ !== undefined ? cutoff_ : "";
	});
	extFloat = $pkg.extFloat = $newType(0, "Struct", "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		this.mant = mant_ !== undefined ? mant_ : new $Uint64(0, 0);
		this.exp = exp_ !== undefined ? exp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	floatInfo = $pkg.floatInfo = $newType(0, "Struct", "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		this.mantbits = mantbits_ !== undefined ? mantbits_ : 0;
		this.expbits = expbits_ !== undefined ? expbits_ : 0;
		this.bias = bias_ !== undefined ? bias_ : 0;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, "Struct", "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : ($sliceType($Uint8)).nil;
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	ParseBool = $pkg.ParseBool = function(str) {
		var value, err, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		value = false;
		err = null;
		_ref = str;
		if (_ref === "1" || _ref === "t" || _ref === "T" || _ref === "true" || _ref === "TRUE" || _ref === "True") {
			_tmp = true; _tmp$1 = null; value = _tmp; err = _tmp$1;
			return [value, err];
		} else if (_ref === "0" || _ref === "f" || _ref === "F" || _ref === "false" || _ref === "FALSE" || _ref === "False") {
			_tmp$2 = false; _tmp$3 = null; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false; _tmp$5 = syntaxError("ParseBool", str); value = _tmp$4; err = _tmp$5;
		return [value, err];
	};
	equalIgnoreCase = function(s1, s2) {
		var i, c1, c2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + 32 << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + 32 << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	special = function(s) {
		var f, ok, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1); _tmp$1 = true; f = _tmp; ok = _tmp$1;
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN(); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1); _tmp$7 = true; f = _tmp$6; ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.Ptr.prototype.set = function(s) {
		var ok, b, i, sawdot, sawdigits, esign, e;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + 1 >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + 1 >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (i < s.length) {
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + 1 >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - 1 >> 0;
					i = i + 1 >> 0;
					continue;
				}
				if (b.nd < 800) {
					b.d[b.nd] = s.charCodeAt(i);
					b.nd = b.nd + 1 >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + 1 >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + 1 >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + 1 >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + 1 >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = (((((e >>> 16 << 16) * 10 >> 0) + (e << 16 >>> 16) * 10) >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + 1 >> 0;
			}
			b.dp = b.dp + (((((e >>> 16 << 16) * esign >> 0) + (e << 16 >>> 16) * esign) >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var mantissa, exp, neg, trunc, ok, i, sawdot, sawdigits, nd, ndMant, dp, c, _ref, x, esign, e;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + 1 >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + 1 >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			_ref = true;
			if (_ref === (c === 46)) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + 1 >> 0;
				continue;
			} else if (_ref === 48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - 1 >> 0;
					i = i + 1 >> 0;
					continue;
				}
				nd = nd + 1 >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, new $Uint64(0, 10));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.high + x.high, mantissa.low + x.low));
					ndMant = ndMant + 1 >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + 1 >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + 1 >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + 1 >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + 1 >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = (((((e >>> 16 << 16) * 10 >> 0) + (e << 16 >>> 16) * 10) >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + 1 >> 0;
			}
			dp = dp + (((((e >>> 16 << 16) * esign >> 0) + (e << 16 >>> 16) * esign) >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.Ptr.prototype.floatBits = function(flt) {
		var $this = this, $args = arguments, b, overflow, d, exp, mant, n, x, n$1, x$1, n$2, y, x$2, y$1, x$3, x$4, y$2, x$5, x$6, bits, x$7, y$3, x$8, _tmp, _tmp$1;
		b = new $Uint64(0, 0);
		overflow = false;
		/* */ var $s = 0, $f = function() { while (true) { switch ($s) { case 0:
		d = $this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* if (d.nd === 0) { */ if (d.nd === 0) {} else { $s = 3; continue; }
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 1; continue;
		/* } */ case 3:
		/* if (d.dp > 310) { */ if (d.dp > 310) {} else { $s = 4; continue; }
			/* goto overflow */ $s = 2; continue;
		/* } */ case 4:
		/* if (d.dp < -330) { */ if (d.dp < -330) {} else { $s = 5; continue; }
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 1; continue;
		/* } */ case 5:
		exp = 0;
		/* while (d.dp > 0) { */ case 6: if(!(d.dp > 0)) { $s = 7; continue; }
			n = 0;
			/* if (d.dp >= powtab.length) { */ if (d.dp >= powtab.length) {} else { $s = 8; continue; }
				n = 27;
			/* } else { */ $s = 9; continue; case 8:
				n = (x = d.dp, ((x < 0 || x >= powtab.length) ? $throwRuntimeError("index out of range") : powtab.array[powtab.offset + x]));
			/* } */ case 9:
			d.Shift(-n);
			exp = exp + (n) >> 0;
		/* } */ $s = 6; continue; case 7:
		/* while (d.dp < 0 || (d.dp === 0) && d.d[0] < 53) { */ case 10: if(!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { $s = 11; continue; }
			n$1 = 0;
			/* if (-d.dp >= powtab.length) { */ if (-d.dp >= powtab.length) {} else { $s = 12; continue; }
				n$1 = 27;
			/* } else { */ $s = 13; continue; case 12:
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.length) ? $throwRuntimeError("index out of range") : powtab.array[powtab.offset + x$1]));
			/* } */ case 13:
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		/* } */ $s = 10; continue; case 11:
		exp = exp - 1 >> 0;
		/* if (exp < (flt.bias + 1 >> 0)) { */ if (exp < (flt.bias + 1 >> 0)) {} else { $s = 14; continue; }
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		/* } */ case 14:
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {} else { $s = 15; continue; }
			/* goto overflow */ $s = 2; continue;
		/* } */ case 15:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.high === x$2.high && mant.low === x$2.low))) { */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.high === x$2.high && mant.low === x$2.low))) {} else { $s = 16; continue; }
			mant = $shiftRightUint64(mant, 1);
			exp = exp + 1 >> 0;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {} else { $s = 17; continue; }
				/* goto overflow */ $s = 2; continue;
			/* } */ case 17:
		/* } */ case 16:
		/* if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.high & x$4.high, (mant.low & x$4.low) >>> 0)), (x$3.high === 0 && x$3.low === 0))) { */ if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.high & x$4.high, (mant.low & x$4.low) >>> 0)), (x$3.high === 0 && x$3.low === 0))) {} else { $s = 18; continue; }
			exp = flt.bias;
		/* } */ case 18:
		/* goto out */ $s = 1; continue;
		/* overflow: */ case 2:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 1:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.high - 0, x$6.low - 1)), new $Uint64(mant.high & x$5.high, (mant.low & x$5.low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.high | x$7.high, (bits.low | x$7.low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.high | x$8.high, (bits.low | x$8.low) >>> 0));
		}
		_tmp = bits; _tmp$1 = overflow; b = _tmp; overflow = _tmp$1;
		return [b, overflow];
		/* */ } break; } }; return $f();
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var f, ok, x, _tmp, _tmp$1, x$1, _tmp$2, _tmp$3, _tmp$4, x$2, _tmp$5;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.high === 0 && x.low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.length) ? $throwRuntimeError("index out of range") : float64pow10.array[float64pow10.offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.length) ? $throwRuntimeError("index out of range") : float64pow10.array[float64pow10.offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.length) ? $throwRuntimeError("index out of range") : float64pow10.array[float64pow10.offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var f, ok, x, _tmp, _tmp$1, x$1, _tmp$2, _tmp$3, _tmp$4, x$2, _tmp$5;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.high === 0 && x.low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.length) ? $throwRuntimeError("index out of range") : float32pow10.array[float32pow10.offset + x$1])));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float32pow10.length) ? $throwRuntimeError("index out of range") : float32pow10.array[float32pow10.offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.length) ? $throwRuntimeError("index out of range") : float32pow10.array[float32pow10.offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var f, err, _tuple, val, ok, _tmp, _tmp$1, _tuple$1, mantissa, exp, neg, trunc, ok$1, _tuple$2, f$1, ok$2, _tmp$2, _tmp$3, ext, ok$3, _tuple$3, b, ovf, _tmp$4, _tmp$5, d, _tmp$6, _tmp$7, _tuple$4, b$1, ovf$1, _tmp$8, _tmp$9;
		f = 0;
		err = null;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = null; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = null; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.Ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float32frombits((b.low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.Ptr(); $copy(d, new decimal.Ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var f, err, _tuple, val, ok, _tmp, _tmp$1, _tuple$1, mantissa, exp, neg, trunc, ok$1, _tuple$2, f$1, ok$2, _tmp$2, _tmp$3, ext, ok$3, _tuple$3, b, ovf, _tmp$4, _tmp$5, d, _tmp$6, _tmp$7, _tuple$4, b$1, ovf$1, _tmp$8, _tmp$9;
		f = 0;
		err = null;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = null; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = null; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.Ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.Ptr(); $copy(d, new decimal.Ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	ParseFloat = $pkg.ParseFloat = function(s, bitSize) {
		var f, err, _tuple, f1, err1, _tmp, _tmp$1, _tuple$1, f1$1, err1$1, _tmp$2, _tmp$3;
		f = 0;
		err = null;
		if (bitSize === 32) {
			_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];
			_tmp = $coerceFloat32(f1); _tmp$1 = err1; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s); f1$1 = _tuple$1[0]; err1$1 = _tuple$1[1];
		_tmp$2 = f1$1; _tmp$3 = err1$1; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	NumError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + e.Err.Error();
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		return new NumError.Ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		return new NumError.Ptr(fn, str, $pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var x;
		if (base < 2) {
			return new $Uint64(0, 0);
		}
		return (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.high + 0, x.low + 1));
	};
	ParseUint = $pkg.ParseUint = function(s, base, bitSize) {
		var $this = this, $args = arguments, n, err, _tmp, _tmp$1, cutoff, maxVal, s0, x, i, v, d, x$1, n1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		n = new $Uint64(0, 0);
		err = null;
		/* */ var $s = 0, $f = function() { while (true) { switch ($s) { case 0:
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); cutoff = _tmp; maxVal = _tmp$1;
		/* if (bitSize === 0) { */ if (bitSize === 0) {} else { $s = 2; continue; }
			bitSize = 32;
		/* } */ case 2:
		s0 = s;
		/* if (s.length < 1) { */ if (s.length < 1) {} else if (2 <= base && base <= 36) { $s = 3; continue; } else if (base === 0) { $s = 4; continue; } else { $s = 5; continue; }
			err = $pkg.ErrSyntax;
			/* goto Error */ $s = 1; continue;
		/* } else if (2 <= base && base <= 36) { */ $s = 6; continue; case 3:
		/* } else if (base === 0) { */ $s = 6; continue; case 4:
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {} else if (s.charCodeAt(0) === 48) { $s = 7; continue; } else { $s = 8; continue; }
				base = 16;
				s = s.substring(2);
				/* if (s.length < 1) { */ if (s.length < 1) {} else { $s = 10; continue; }
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 1; continue;
				/* } */ case 10:
			/* } else if (s.charCodeAt(0) === 48) { */ $s = 9; continue; case 7:
				base = 8;
			/* } else { */ $s = 9; continue; case 8:
				base = 10;
			/* } */ case 9:
		/* } else { */ $s = 6; continue; case 5:
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ $s = 1; continue;
		/* } */ case 6:
		n = new $Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x.high - 0, x.low - 1));
		i = 0;
		/* while (i < s.length) { */ case 11: if(!(i < s.length)) { $s = 12; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* if (48 <= d && d <= 57) { */ if (48 <= d && d <= 57) {} else if (97 <= d && d <= 122) { $s = 13; continue; } else if (65 <= d && d <= 90) { $s = 14; continue; } else { $s = 15; continue; }
				v = d - 48 << 24 >>> 24;
			/* } else if (97 <= d && d <= 122) { */ $s = 16; continue; case 13:
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else if (65 <= d && d <= 90) { */ $s = 16; continue; case 14:
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else { */ $s = 16; continue; case 15:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 1; continue;
			/* } */ case 16:
			/* if ((v >> 0) >= base) { */ if ((v >> 0) >= base) {} else { $s = 17; continue; }
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 1; continue;
			/* } */ case 17:
			/* if ((n.high > cutoff.high || (n.high === cutoff.high && n.low >= cutoff.low))) { */ if ((n.high > cutoff.high || (n.high === cutoff.high && n.low >= cutoff.low))) {} else { $s = 18; continue; }
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 1; continue;
			/* } */ case 18:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$1 = new $Uint64(0, v), new $Uint64(n.high + x$1.high, n.low + x$1.low));
			/* if ((n1.high < n.high || (n1.high === n.high && n1.low < n.low)) || (n1.high > maxVal.high || (n1.high === maxVal.high && n1.low > maxVal.low))) { */ if ((n1.high < n.high || (n1.high === n.high && n1.low < n.low)) || (n1.high > maxVal.high || (n1.high === maxVal.high && n1.low > maxVal.low))) {} else { $s = 19; continue; }
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 1; continue;
			/* } */ case 19:
			n = n1;
			i = i + 1 >> 0;
		/* } */ $s = 11; continue; case 12:
		_tmp$2 = n; _tmp$3 = null; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* Error: */ case 1:
		_tmp$4 = n; _tmp$5 = new NumError.Ptr("ParseUint", s0, err); n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ } break; } }; return $f();
	};
	ParseInt = $pkg.ParseInt = function(s, base, bitSize) {
		var i, err, _tmp, _tmp$1, s0, neg, un, _tuple, _tmp$2, _tmp$3, cutoff, _tmp$4, x, _tmp$5, _tmp$6, x$1, _tmp$7, n, _tmp$8, _tmp$9;
		i = new $Int64(0, 0);
		err = null;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0); _tmp$1 = syntaxError("ParseInt", s); i = _tmp; err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize); un = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null)) && !($interfaceIsEqual((err !== null && err.constructor === ($ptrType(NumError)) ? err.$val : $typeAssertionFailed(err, ($ptrType(NumError)))).Err, $pkg.ErrRange))) {
			(err !== null && err.constructor === ($ptrType(NumError)) ? err.$val : $typeAssertionFailed(err, ($ptrType(NumError)))).Func = "ParseInt";
			(err !== null && err.constructor === ($ptrType(NumError)) ? err.$val : $typeAssertionFailed(err, ($ptrType(NumError)))).Num = s0;
			_tmp$2 = new $Int64(0, 0); _tmp$3 = err; i = _tmp$2; err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.high > cutoff.high || (un.high === cutoff.high && un.low >= cutoff.low))) {
			_tmp$4 = (x = new $Uint64(cutoff.high - 0, cutoff.low - 1), new $Int64(x.high, x.low)); _tmp$5 = rangeError("ParseInt", s0); i = _tmp$4; err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.high > cutoff.high || (un.high === cutoff.high && un.low > cutoff.low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.high, cutoff.low), new $Int64(-x$1.high, -x$1.low)); _tmp$7 = rangeError("ParseInt", s0); i = _tmp$6; err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.high, un.low);
		if (neg) {
			n = new $Int64(-n.high, -n.low);
		}
		_tmp$8 = n; _tmp$9 = null; i = _tmp$8; err = _tmp$9;
		return [i, err];
	};
	decimal.Ptr.prototype.String = function() {
		var a, n, buf, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = ($sliceType($Uint8)).make(n, 0, function() { return 0; });
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + w] = 48;
			w = w + 1 >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + w] = 46;
			w = w + 1 >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), 0, a.dp))) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + w] = 46;
			w = w + 1 >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _ref, _i, i;
		_ref = dst;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			(i < 0 || i >= dst.length) ? $throwRuntimeError("index out of range") : dst.array[dst.offset + i] = 48;
			_i++;
		}
		return dst.length;
	};
	trim = function(a) {
		while (a.nd > 0 && (a.d[(a.nd - 1 >> 0)] === 48)) {
			a.nd = a.nd - 1 >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.Ptr.prototype.Assign = function(v) {
		var a, buf, n, v1, x;
		a = this;
		buf = ($arrayType($Uint8, 24)).zero(); $copy(buf, ($arrayType($Uint8, 24)).zero(), ($arrayType($Uint8, 24)));
		n = 0;
		while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.high - x.high, v.low - x.low));
			buf[n] = (new $Uint64(v.high + 0, v.low + 48).low << 24 >>> 24);
			n = n + 1 >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - 1 >> 0;
		while (n >= 0) {
			a.d[a.nd] = buf[n];
			a.nd = a.nd + 1 >> 0;
			n = n - 1 >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var r, w, n, c, c$1, dig, y, dig$1, y$1;
		r = 0;
		w = 0;
		n = 0;
		while (((n >> $min(k, 31)) >> 0) === 0) {
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (((n >> $min(k, 31)) >> 0) === 0) {
					n = (((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0;
					r = r + 1 >> 0;
				}
				break;
			}
			c = (a.d[r] >> 0);
			n = (((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + c >> 0) - 48 >> 0;
			r = r + 1 >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (r < a.nd) {
			c$1 = (a.d[r] >> 0);
			dig = (n >> $min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			a.d[w] = ((dig + 48 >> 0) << 24 >>> 24);
			w = w + 1 >> 0;
			n = (((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + 1 >> 0;
		}
		while (n > 0) {
			dig$1 = (n >> $min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				a.d[w] = ((dig$1 + 48 >> 0) << 24 >>> 24);
				w = w + 1 >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = (((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var i;
		i = 0;
		while (i < s.length) {
			if (i >= b.length) {
				return true;
			}
			if (!((((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + i]) < s.charCodeAt(i);
			}
			i = i + 1 >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var delta, r, w, n, y, _q, quo, rem, _q$1, quo$1, rem$1;
		delta = ((k < 0 || k >= leftcheats.length) ? $throwRuntimeError("index out of range") : leftcheats.array[leftcheats.offset + k]).delta;
		if (prefixIsLessThan($subslice(new ($sliceType($Uint8))(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.length) ? $throwRuntimeError("index out of range") : leftcheats.array[leftcheats.offset + k]).cutoff)) {
			delta = delta - 1 >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - 1 >> 0;
		while (r >= 0) {
			n = n + (((y = k, y < 32 ? ((((a.d[r] >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - ((((10 >>> 16 << 16) * quo >> 0) + (10 << 16 >>> 16) * quo) >> 0) >> 0;
			w = w - 1 >> 0;
			if (w < 800) {
				a.d[w] = ((rem + 48 >> 0) << 24 >>> 24);
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - 1 >> 0;
		}
		while (n > 0) {
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - ((((10 >>> 16 << 16) * quo$1 >> 0) + (10 << 16 >>> 16) * quo$1) >> 0) >> 0;
			w = w - 1 >> 0;
			if (w < 800) {
				a.d[w] = ((rem$1 + 48 >> 0) << 24 >>> 24);
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.Ptr.prototype.Shift = function(k) {
		var a;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (k > 27) {
				leftShift(a, 27);
				k = k - 27 >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (k < -27) {
				rightShift(a, 27);
				k = k + 27 >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if ((a.d[nd] === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = ((a.d[(nd - 1 >> 0)] - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return a.d[nd] >= 53;
	};
	decimal.Ptr.prototype.Round = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.Ptr.prototype.RoundDown = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.Ptr.prototype.RoundUp = function(nd) {
		var a, i, c, _lhs, _index;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (i >= 0) {
			c = a.d[i];
			if (c < 57) {
				_lhs = a.d; _index = i; _lhs[_index] = _lhs[_index] + 1 << 24 >>> 24;
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - 1 >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + 1 >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.Ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (i < a.dp && i < a.nd) {
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, (a.d[i] - 48 << 24 >>> 24)), new $Uint64(x.high + x$1.high, x.low + x$1.low));
			i = i + 1 >> 0;
		}
		while (i < a.dp) {
			n = $mul64(n, new $Uint64(0, 10));
			i = i + 1 >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = new $Uint64(n.high + 0, n.low + 1);
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.Ptr.prototype.floatBits = function(flt) {
		var bits, overflow, f, exp, n, mant, x, x$1, x$2, x$3, y, x$4, x$5, y$1, x$6, x$7, x$8, y$2, x$9;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.high & x$2.high, (x$1.low & x$2.low) >>> 0)), (x.high === 0 && x.low === 0)))) {
			mant = new $Uint64(mant.high + 0, mant.low + 1);
		}
		if ((x$3 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.high === x$3.high && mant.low === x$3.low))) {
			mant = $shiftRightUint64(mant, 1);
			exp = exp + 1 >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$4 = (x$5 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.high & x$5.high, (mant.low & x$5.low) >>> 0)), (x$4.high === 0 && x$4.low === 0))) {
			exp = flt.bias;
		}
		bits = (x$6 = (x$7 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$7.high - 0, x$7.low - 1)), new $Uint64(mant.high & x$6.high, (mant.low & x$6.low) >>> 0));
		bits = (x$8 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.high | x$8.high, (bits.low | x$8.low) >>> 0));
		if (f.neg) {
			bits = (x$9 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.high | x$9.high, (bits.low | x$9.low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.Ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var lower, upper, f, x, _tmp, _tmp$1, expBiased, x$1, x$2, x$3, x$4;
		lower = new extFloat.Ptr();
		upper = new extFloat.Ptr();
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.high === x.high && mant.low === x.low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = new extFloat.Ptr(); $copy(_tmp, f, extFloat); _tmp$1 = new extFloat.Ptr(); $copy(_tmp$1, f, extFloat); $copy(lower, _tmp, extFloat); $copy(upper, _tmp$1, extFloat);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		$copy(upper, new extFloat.Ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.high + 0, x$1.low + 1)), f.exp - 1 >> 0, f.neg), extFloat);
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.high === x$2.high && mant.low === x$2.low))) || (expBiased === 1)) {
			$copy(lower, new extFloat.Ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.high - 0, x$3.low - 1)), f.exp - 1 >> 0, f.neg), extFloat);
		} else {
			$copy(lower, new extFloat.Ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.high - 0, x$4.low - 1)), f.exp - 2 >> 0, f.neg), extFloat);
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.Ptr.prototype.Normalize = function() {
		var shift, f, _tmp, _tmp$1, mant, exp, x, x$1, x$2, x$3, x$4, x$5, _tmp$2, _tmp$3;
		shift = 0;
		f = this;
		_tmp = f.mant; _tmp$1 = f.exp; mant = _tmp; exp = _tmp$1;
		if ((mant.high === 0 && mant.low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.high === 0 && x.low === 0))) {
			mant = $shiftLeft64(mant, 32);
			exp = exp - 32 >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.high === 0 && x$1.low === 0))) {
			mant = $shiftLeft64(mant, 16);
			exp = exp - 16 >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.high === 0 && x$2.low === 0))) {
			mant = $shiftLeft64(mant, 8);
			exp = exp - 8 >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.high === 0 && x$3.low === 0))) {
			mant = $shiftLeft64(mant, 4);
			exp = exp - 4 >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.high === 0 && x$4.low === 0))) {
			mant = $shiftLeft64(mant, 2);
			exp = exp - 2 >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.high === 0 && x$5.low === 0))) {
			mant = $shiftLeft64(mant, 1);
			exp = exp - 1 >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant; _tmp$3 = exp; f.mant = _tmp$2; f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.Ptr.prototype.Multiply = function(g) {
		var f, _tmp, _tmp$1, fhi, flo, _tmp$2, _tmp$3, ghi, glo, cross1, cross2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, rem, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32); _tmp$1 = new $Uint64(0, (f.mant.low >>> 0)); fhi = _tmp; flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32); _tmp$3 = new $Uint64(0, (g.mant.low >>> 0)); ghi = _tmp$2; glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.high + x$2.high, x$1.low + x$2.low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.high + x$3.high, x.low + x$3.low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.low >>> 0)), x$6 = new $Uint64(0, (cross2.low >>> 0)), new $Uint64(x$5.high + x$6.high, x$5.low + x$6.low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.high + x$7.high, x$4.low + x$7.low));
		rem = new $Uint64(rem.high + 0, rem.low + 2147483648);
		f.mant = (x$8 = f.mant, x$9 = ($shiftRightUint64(rem, 32)), new $Uint64(x$8.high + x$9.high, x$8.low + x$9.low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.Ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var ok, f, errors$1, _q, i, _r, adjExp, x, shift, y, denormalExp, extrabits, halfway, x$1, x$2, x$3, mant_extra, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + 4 >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = uint64pow10[(19 - adjExp >> 0)], (mantissa.high < x.high || (mantissa.high === x.high && mantissa.low < x.low)))) {
			f.mant = $mul64(f.mant, (uint64pow10[adjExp]));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(smallPowersOfTen[adjExp], extFloat));
			errors$1 = errors$1 + 4 >> 0;
		}
		f.Multiply($clone(powersOfTen[i], extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + 1 >> 0;
		}
		errors$1 = errors$1 + 4 >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$1 = f.mant, x$2 = (x$3 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$3.high - 0, x$3.low - 1)), new $Uint64(x$1.high & x$2.high, (x$1.low & x$2.low) >>> 0));
		if ((x$4 = (x$5 = new $Int64(halfway.high, halfway.low), x$6 = new $Int64(0, errors$1), new $Int64(x$5.high - x$6.high, x$5.low - x$6.low)), x$7 = new $Int64(mant_extra.high, mant_extra.low), (x$4.high < x$7.high || (x$4.high === x$7.high && x$4.low < x$7.low))) && (x$8 = new $Int64(mant_extra.high, mant_extra.low), x$9 = (x$10 = new $Int64(halfway.high, halfway.low), x$11 = new $Int64(0, errors$1), new $Int64(x$10.high + x$11.high, x$10.low + x$11.low)), (x$8.high < x$9.high || (x$8.high === x$9.high && x$8.low < x$9.low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.Ptr.prototype.frexp10 = function() {
		var exp10, index, f, _q, x, approxExp10, _q$1, i, exp, _tmp, _tmp$1;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = (x = (-46 - f.exp >> 0), (((x >>> 16 << 16) * 28 >> 0) + (x << 16 >>> 16) * 28) >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + powersOfTen[i].exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + 1 >> 0;
			} else if (exp > -32) {
				i = i - 1 >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(powersOfTen[i], extFloat));
		_tmp = -((-348 + ((((i >>> 16 << 16) * 8 >> 0) + (i << 16 >>> 16) * 8) >> 0) >> 0)); _tmp$1 = i; exp10 = _tmp; index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var exp10, _tuple, i;
		exp10 = 0;
		_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];
		a.Multiply($clone(powersOfTen[i], extFloat));
		b.Multiply($clone(powersOfTen[i], extFloat));
		return exp10;
	};
	extFloat.Ptr.prototype.FixedDecimal = function(d, n) {
		var f, x, _tuple, exp10, shift, integer, x$1, x$2, fraction, nonAsciiName, needed, integerDigits, pow10, _tmp, _tmp$1, i, pow, x$3, rest, _q, x$4, buf, pos, v, _q$1, v1, i$1, x$5, x$6, nd, x$7, x$8, digit, x$9, x$10, x$11, ok, i$2, x$12;
		f = this;
		if ((x = f.mant, (x.high === 0 && x.low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			throw $panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(); exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.high - x$2.high, x$1.low - x$2.low));
		nonAsciiName = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0; _tmp$1 = new $Uint64(0, 1); i = _tmp; pow = _tmp$1;
		while (i < 20) {
			if ((x$3 = new $Uint64(0, integer), (pow.high > x$3.high || (pow.high === x$3.high && pow.low > x$3.low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, new $Uint64(0, 10));
			i = i + 1 >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = uint64pow10[(integerDigits - needed >> 0)];
			integer = (_q = integer / ((pow10.low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$4 = (pow10.low >>> 0), (((integer >>> 16 << 16) * x$4 >>> 0) + (integer << 16 >>> 16) * x$4) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		pos = 32;
		v = integer;
		while (v > 0) {
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - 1 >> 0;
			buf[pos] = ((v + 48 >>> 0) << 24 >>> 24);
			v = v1;
		}
		i$1 = pos;
		while (i$1 < 32) {
			(x$5 = d.d, x$6 = i$1 - pos >> 0, (x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + x$6] = buf[i$1]);
			i$1 = i$1 + 1 >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.high === 0 && pow10.low === 1))) {
				throw $panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (needed > 0) {
				fraction = $mul64(fraction, new $Uint64(0, 10));
				nonAsciiName = $mul64(nonAsciiName, new $Uint64(0, 10));
				if ((x$7 = $mul64(new $Uint64(0, 2), nonAsciiName), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.high > x$8.high || (x$7.high === x$8.high && x$7.low > x$8.low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, (nd < 0 || nd >= x$9.length) ? $throwRuntimeError("index out of range") : x$9.array[x$9.offset + nd] = (new $Uint64(digit.high + 0, digit.low + 48).low << 24 >>> 24));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.high - x$10.high, fraction.low - x$10.low));
				nd = nd + 1 >> 0;
				needed = needed - 1 >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$11.high | fraction.high, (x$11.low | fraction.low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (i$2 >= 0) {
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12.array[x$12.offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - 1 >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, i, x$7, x$8, _lhs, _index;
		if ((x = $shiftLeft64(den, shift), (num.high > x.high || (num.high === x.high && num.low > x.low)))) {
			throw $panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), nonAsciiName), x$2 = $shiftLeft64(den, shift), (x$1.high > x$2.high || (x$1.high === x$2.high && x$1.low > x$2.low)))) {
			throw $panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.high + nonAsciiName.high, num.low + nonAsciiName.low))), x$4 = $shiftLeft64(den, shift), (x$3.high < x$4.high || (x$3.high === x$4.high && x$3.low < x$4.low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.high - nonAsciiName.high, num.low - nonAsciiName.low))), x$6 = $shiftLeft64(den, shift), (x$5.high > x$6.high || (x$5.high === x$6.high && x$5.low > x$6.low)))) {
			i = d.nd - 1 >> 0;
			while (i >= 0) {
				if ((x$7 = d.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + i])) === 57) {
					d.nd = d.nd - 1 >> 0;
				} else {
					break;
				}
				i = i - 1 >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 < 0 || 0 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8.array[x$8.offset + 0] = 49);
				d.nd = 1;
				d.dp = d.dp + 1 >> 0;
			} else {
				_lhs = d.d; _index = i; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs.array[_lhs.offset + _index] = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs.array[_lhs.offset + _index]) + 1 << 24 >>> 24;
			}
			return true;
		}
		return false;
	};
	extFloat.Ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var f, x, buf, n, v, v1, x$1, nd, i, x$2, _tmp, _tmp$1, x$3, x$4, exp10, x$5, x$6, shift, integer, x$7, x$8, fraction, x$9, x$10, allowance, x$11, x$12, targetDiff, integerDigits, _tmp$2, _tmp$3, i$1, pow, x$13, i$2, pow$1, _q, digit, x$14, x$15, x$16, currentDiff, digit$1, multiplier, x$17, x$18, x$19, x$20;
		f = this;
		if ((x = f.mant, (x.high === 0 && x.low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = ($arrayType($Uint8, 24)).zero(); $copy(buf, ($arrayType($Uint8, 24)).zero(), ($arrayType($Uint8, 24)));
			n = 23;
			v = f.mant;
			while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.high - x$1.high, v.low - x$1.low));
				buf[n] = (new $Uint64(v.high + 0, v.low + 48).low << 24 >>> 24);
				n = n - 1 >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (i < nd) {
				(x$2 = d.d, (i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + i] = buf[((n + 1 >> 0) + i >> 0)]);
				i = i + 1 >> 0;
			}
			_tmp = nd; _tmp$1 = nd; d.nd = _tmp; d.dp = _tmp$1;
			while (d.nd > 0 && ((x$3 = d.d, x$4 = d.nd - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + x$4])) === 48)) {
				d.nd = d.nd - 1 >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$5 = upper.mant, new $Uint64(x$5.high + 0, x$5.low + 1));
		lower.mant = (x$6 = lower.mant, new $Uint64(x$6.high - 0, x$6.low - 1));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).low >>> 0);
		fraction = (x$7 = upper.mant, x$8 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$7.high - x$8.high, x$7.low - x$8.low));
		allowance = (x$9 = upper.mant, x$10 = lower.mant, new $Uint64(x$9.high - x$10.high, x$9.low - x$10.low));
		targetDiff = (x$11 = upper.mant, x$12 = f.mant, new $Uint64(x$11.high - x$12.high, x$11.low - x$12.low));
		integerDigits = 0;
		_tmp$2 = 0; _tmp$3 = new $Uint64(0, 1); i$1 = _tmp$2; pow = _tmp$3;
		while (i$1 < 20) {
			if ((x$13 = new $Uint64(0, integer), (pow.high > x$13.high || (pow.high === x$13.high && pow.low > x$13.low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, new $Uint64(0, 10));
			i$1 = i$1 + 1 >> 0;
		}
		i$2 = 0;
		while (i$2 < integerDigits) {
			pow$1 = uint64pow10[((integerDigits - i$2 >> 0) - 1 >> 0)];
			digit = (_q = integer / (pow$1.low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$14 = d.d, (i$2 < 0 || i$2 >= x$14.length) ? $throwRuntimeError("index out of range") : x$14.array[x$14.offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24));
			integer = integer - ((x$15 = (pow$1.low >>> 0), (((digit >>> 16 << 16) * x$15 >>> 0) + (digit << 16 >>> 16) * x$15) >>> 0)) >>> 0;
			currentDiff = (x$16 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$16.high + fraction.high, x$16.low + fraction.low));
			if ((currentDiff.high < allowance.high || (currentDiff.high === allowance.high && currentDiff.low < allowance.low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + 1 >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, new $Uint64(0, 10));
			multiplier = $mul64(multiplier, new $Uint64(0, 10));
			digit$1 = ($shiftRightUint64(fraction, shift).low >> 0);
			(x$17 = d.d, x$18 = d.nd, (x$18 < 0 || x$18 >= x$17.length) ? $throwRuntimeError("index out of range") : x$17.array[x$17.offset + x$18] = ((digit$1 + 48 >> 0) << 24 >>> 24));
			d.nd = d.nd + 1 >> 0;
			fraction = (x$19 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.high - x$19.high, fraction.low - x$19.low));
			if ((x$20 = $mul64(allowance, multiplier), (fraction.high < x$20.high || (fraction.high === x$20.high && fraction.low < x$20.low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var x, x$1, x$2, x$3, _lhs, _index, x$4, x$5, x$6, x$7, x$8, x$9, x$10;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.high < x.high || (ulpDecimal.high === x.high && ulpDecimal.low < x.low)))) {
			return false;
		}
		while ((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.high + x$3.high, currentDiff.low + x$3.low)), new $Uint64(x$2.high + ulpBinary.high, x$2.low + ulpBinary.low)), (x$1.high < targetDiff.high || (x$1.high === targetDiff.high && x$1.low < targetDiff.low)))) {
			_lhs = d.d; _index = d.nd - 1 >> 0; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs.array[_lhs.offset + _index] = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs.array[_lhs.offset + _index]) - 1 << 24 >>> 24;
			currentDiff = (x$4 = ulpDecimal, new $Uint64(currentDiff.high + x$4.high, currentDiff.low + x$4.low));
		}
		if ((x$5 = new $Uint64(currentDiff.high + ulpDecimal.high, currentDiff.low + ulpDecimal.low), x$6 = (x$7 = (x$8 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.high + x$8.high, targetDiff.low + x$8.low)), new $Uint64(x$7.high + ulpBinary.high, x$7.low + ulpBinary.low)), (x$5.high < x$6.high || (x$5.high === x$6.high && x$5.low <= x$6.low)))) {
			return false;
		}
		if ((currentDiff.high < ulpBinary.high || (currentDiff.high === ulpBinary.high && currentDiff.low < ulpBinary.low)) || (x$9 = new $Uint64(maxDiff.high - ulpBinary.high, maxDiff.low - ulpBinary.low), (currentDiff.high > x$9.high || (currentDiff.high === x$9.high && currentDiff.low > x$9.low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$10 = d.d, ((0 < 0 || 0 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10.array[x$10.offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = $pkg.AppendFloat = function(dst, f, fmt, prec, bitSize) {
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var bits, flt, _ref, x, neg, y, exp, x$1, x$2, mant, _ref$1, y$1, s, x$3, digs, ok, shortest, f, _tuple, lower, upper, buf, _ref$2, digits, _ref$3, buf$1, f$1;
		bits = new $Uint64(0, 0);
		flt = ($ptrType(floatInfo)).nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new $Uint64(0, math.Float32bits(val));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			throw $panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.high === 0 && x.low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.high - 0, x$2.low - 1)), new $Uint64(bits.high & x$1.high, (bits.low & x$1.low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.high === 0 && mant.low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + 1 >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.high | x$3.high, (mant.low | x$3.low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.Ptr(); $copy(digs, new decimalSlice.Ptr(), decimalSlice);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.Ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = new extFloat.Ptr(); $copy(lower, _tuple[0], extFloat); upper = new extFloat.Ptr(); $copy(upper, _tuple[1], extFloat);
			buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
			digs.d = new ($sliceType($Uint8))(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + 1 >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = ($arrayType($Uint8, 24)).zero(); $copy(buf$1, ($arrayType($Uint8, 24)).zero(), ($arrayType($Uint8, 24)));
				digs.d = new ($sliceType($Uint8))(buf$1);
				f$1 = new extFloat.Ptr(); $copy(f$1, new extFloat.Ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg), extFloat);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var d, digs, shortest, _ref, _ref$1;
		d = new decimal.Ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.Ptr(); $copy(digs, new decimalSlice.Ptr(), decimalSlice);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			$copy(digs, new decimalSlice.Ptr(new ($sliceType($Uint8))(d.d), d.nd, d.dp, false), decimalSlice);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			$copy(digs, new decimalSlice.Ptr(new ($sliceType($Uint8))(d.d), d.nd, d.dp, false), decimalSlice);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _ref, eprec, exp;
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var minexp, x, x$1, upper, x$2, mantlo, explo, x$3, x$4, lower, x$5, x$6, inclusive, i, _tmp, _tmp$1, _tmp$2, l, m, u, okdown, okup;
		if ((mant.high === 0 && mant.low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (x = (d.dp - d.nd >> 0), (((332 >>> 16 << 16) * x >> 0) + (332 << 16 >>> 16) * x) >> 0) >= (x$1 = (exp - (flt.mantbits >> 0) >> 0), (((100 >>> 16 << 16) * x$1 >> 0) + (100 << 16 >>> 16) * x$1) >> 0)) {
			return;
		}
		upper = new decimal.Ptr();
		upper.Assign((x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.high + 0, x$2.low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.high > x$3.high || (mant.high === x$3.high && mant.low > x$3.low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.high - 0, mant.low - 1);
			explo = exp;
		} else {
			mantlo = (x$4 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$4.high - 0, x$4.low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.Ptr();
		lower.Assign((x$5 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$5.high + 0, x$5.low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$6 = $div64(mant, new $Uint64(0, 2), true), (x$6.high === 0 && x$6.low === 0));
		i = 0;
		while (i < d.nd) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; l = _tmp; m = _tmp$1; u = _tmp$2;
			if (i < lower.nd) {
				l = lower.d[i];
			} else {
				l = 48;
			}
			m = d.d[i];
			if (i < upper.nd) {
				u = upper.d[i];
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + 1 >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var ch, x, i, m, x$1, exp, buf, i$1, _r, _q, _ref;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (i < m) {
				dst = $append(dst, (x$1 = d.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i])));
				i = i + 1 >> 0;
			}
			while (i <= prec) {
				dst = $append(dst, 48);
				i = i + 1 >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		buf = ($arrayType($Uint8, 3)).zero(); $copy(buf, ($arrayType($Uint8, 3)).zero(), ($arrayType($Uint8, 3)));
		i$1 = 3;
		while (exp >= 10) {
			i$1 = i$1 - 1 >> 0;
			buf[i$1] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - 1 >> 0;
		buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24);
		_ref = i$1;
		if (_ref === 0) {
			dst = $append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = $append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = $append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var i, x, i$1, ch, j, x$1;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (i < d.dp && i < d.nd) {
				dst = $append(dst, (x = d.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i])));
				i = i + 1 >> 0;
			}
			while (i < d.dp) {
				dst = $append(dst, 48);
				i = i + 1 >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i$1 = 0;
			while (i$1 < prec) {
				ch = 48;
				j = d.dp + i$1 >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x$1 = d.d, ((j < 0 || j >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + j]));
				}
				dst = $append(dst, ch);
				i$1 = i$1 + 1 >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var buf, w, esign, n, _r, _q, x;
		buf = ($arrayType($Uint8, 50)).zero(); $copy(buf, ($arrayType($Uint8, 50)).zero(), ($arrayType($Uint8, 50)));
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (exp > 0 || n < 1) {
			n = n + 1 >> 0;
			w = w - 1 >> 0;
			buf[w] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		w = w - 1 >> 0;
		buf[w] = esign;
		w = w - 1 >> 0;
		buf[w] = 112;
		n = 0;
		while ((mant.high > 0 || (mant.high === 0 && mant.low > 0)) || n < 1) {
			n = n + 1 >> 0;
			w = w - 1 >> 0;
			buf[w] = ((x = $div64(mant, new $Uint64(0, 10), true), new $Uint64(x.high + 0, x.low + 48)).low << 24 >>> 24);
			mant = $div64(mant, new $Uint64(0, 10), false);
		}
		if (neg) {
			w = w - 1 >> 0;
			buf[w] = 45;
		}
		return $appendSlice(dst, $subslice(new ($sliceType($Uint8))(buf), w));
	};
	max = function(a, b) {
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = $pkg.FormatUint = function(i, base) {
		var _tuple, s;
		_tuple = formatBits(($sliceType($Uint8)).nil, i, base, false, false); s = _tuple[1];
		return s;
	};
	FormatInt = $pkg.FormatInt = function(i, base) {
		var _tuple, s;
		_tuple = formatBits(($sliceType($Uint8)).nil, new $Uint64(i.high, i.low), base, (i.high < 0 || (i.high === 0 && i.low < 0)), false); s = _tuple[1];
		return s;
	};
	Itoa = $pkg.Itoa = function(i) {
		return FormatInt(new $Int64(0, i), 10);
	};
	formatBits = function(dst, u, base, neg, append_) {
		var d, s, a, i, q, x, j, q$1, x$1, s$1, b, m, b$1;
		d = ($sliceType($Uint8)).nil;
		s = "";
		if (base < 2 || base > 36) {
			throw $panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = ($arrayType($Uint8, 65)).zero(); $copy(a, ($arrayType($Uint8, 65)).zero(), ($arrayType($Uint8, 65)));
		i = 65;
		if (neg) {
			u = new $Uint64(-u.high, -u.low);
		}
		if (base === 10) {
			while ((u.high > 0 || (u.high === 0 && u.low >= 100))) {
				i = i - 2 >> 0;
				q = $div64(u, new $Uint64(0, 100), false);
				j = ((x = $mul64(q, new $Uint64(0, 100)), new $Uint64(u.high - x.high, u.low - x.low)).low >>> 0);
				a[(i + 1 >> 0)] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j);
				a[(i + 0 >> 0)] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j);
				u = q;
			}
			if ((u.high > 0 || (u.high === 0 && u.low >= 10))) {
				i = i - 1 >> 0;
				q$1 = $div64(u, new $Uint64(0, 10), false);
				a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = $mul64(q$1, new $Uint64(0, 10)), new $Uint64(u.high - x$1.high, u.low - x$1.low)).low >>> 0));
				u = q$1;
			}
		} else {
			s$1 = shifts[base];
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.low >>> 0) - 1 >>> 0;
				while ((u.high > b.high || (u.high === b.high && u.low >= b.low))) {
					i = i - 1 >> 0;
					a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.low >>> 0) & m) >>> 0));
					u = $shiftRightUint64(u, (s$1));
				}
			} else {
				b$1 = new $Uint64(0, base);
				while ((u.high > b$1.high || (u.high === b$1.high && u.low >= b$1.low))) {
					i = i - 1 >> 0;
					a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(($div64(u, b$1, true).low >>> 0));
					u = $div64(u, (b$1), false);
				}
			}
		}
		i = i - 1 >> 0;
		a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.low >>> 0));
		if (neg) {
			i = i - 1 >> 0;
			a[i] = 45;
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new ($sliceType($Uint8))(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new ($sliceType($Uint8))(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var runeTmp, _q, x, buf, width, r, _tuple, n, _ref, s$1, s$2;
		runeTmp = ($arrayType($Uint8, 4)).zero(); $copy(runeTmp, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 4)));
		buf = ($sliceType($Uint8)).make(0, (_q = (x = s.length, (((3 >>> 16 << 16) * x >> 0) + (3 << 16 >>> 16) * x) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), function() { return 0; });
		buf = $append(buf, quote);
		width = 0;
		while (s.length > 0) {
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\x")));
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new ($sliceType($Uint8))(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new ($sliceType($Uint8))(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\x")));
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - 4 >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - 4 >> 0;
					}
				} else {
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\U")));
					s$2 = 28;
					while (s$2 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - 4 >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = $pkg.Quote = function(s) {
		return quoteWith(s, 34, false);
	};
	QuoteToASCII = $pkg.QuoteToASCII = function(s) {
		return quoteWith(s, 34, true);
	};
	QuoteRune = $pkg.QuoteRune = function(r) {
		return quoteWith($encodeRune(r), 39, false);
	};
	AppendQuoteRune = $pkg.AppendQuoteRune = function(dst, r) {
		return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(QuoteRune(r))));
	};
	QuoteRuneToASCII = $pkg.QuoteRuneToASCII = function(r) {
		return quoteWith($encodeRune(r), 39, true);
	};
	AppendQuoteRuneToASCII = $pkg.AppendQuoteRuneToASCII = function(dst, r) {
		return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(QuoteRuneToASCII(r))));
	};
	CanBackquote = $pkg.CanBackquote = function(s) {
		var i, c;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if ((c < 32 && !((c === 9))) || (c === 96) || (c === 127)) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	unhex = function(b) {
		var v, ok, c, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0; _tmp$1 = true; v = _tmp; ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0; _tmp$3 = true; v = _tmp$2; ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0; _tmp$5 = true; v = _tmp$4; ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = $pkg.UnquoteChar = function(s, quote) {
		var value, multibyte, tail, err, c, _tuple, r, size, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, c$1, _ref, n, _ref$1, v, j, _tuple$1, x, ok, v$1, j$1, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = null;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
			_tmp = r; _tmp$1 = true; _tmp$2 = s.substring(size); _tmp$3 = null; value = _tmp; multibyte = _tmp$1; tail = _tmp$2; err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0); _tmp$5 = false; _tmp$6 = s.substring(1); _tmp$7 = null; value = _tmp$4; multibyte = _tmp$5; tail = _tmp$6; err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (j < n) {
				_tuple$1 = unhex(s.charCodeAt(j)); x = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + 1 >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (j$1 < 2) {
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + 1 >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	Unquote = $pkg.Unquote = function(s) {
		var t, err, n, _tmp, _tmp$1, quote, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _ref, _tmp$12, _tmp$13, _tuple, r, size, _tmp$14, _tmp$15, runeTmp, _q, x, buf, _tuple$1, c, multibyte, ss, err$1, _tmp$16, _tmp$17, n$1, _tmp$18, _tmp$19, _tmp$20, _tmp$21;
		t = "";
		err = null;
		n = s.length;
		if (n < 2) {
			_tmp = ""; _tmp$1 = $pkg.ErrSyntax; t = _tmp; err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = ""; _tmp$3 = $pkg.ErrSyntax; t = _tmp$2; err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = ""; _tmp$5 = $pkg.ErrSyntax; t = _tmp$4; err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s; _tmp$7 = null; t = _tmp$6; err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = ""; _tmp$9 = $pkg.ErrSyntax; t = _tmp$8; err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = ""; _tmp$11 = $pkg.ErrSyntax; t = _tmp$10; err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tmp$12 = s; _tmp$13 = null; t = _tmp$12; err = _tmp$13;
				return [t, err];
			} else if (_ref === 39) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s; _tmp$15 = null; t = _tmp$14; err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = ($arrayType($Uint8, 4)).zero(); $copy(runeTmp, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 4)));
		buf = ($sliceType($Uint8)).make(0, (_q = (x = s.length, (((3 >>> 16 << 16) * x >> 0) + (3 << 16 >>> 16) * x) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), function() { return 0; });
		while (s.length > 0) {
			_tuple$1 = UnquoteChar(s, quote); c = _tuple$1[0]; multibyte = _tuple$1[1]; ss = _tuple$1[2]; err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, null))) {
				_tmp$16 = ""; _tmp$17 = err$1; t = _tmp$16; err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new ($sliceType($Uint8))(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new ($sliceType($Uint8))(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = ""; _tmp$19 = $pkg.ErrSyntax; t = _tmp$18; err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf); _tmp$21 = null; t = _tmp$20; err = _tmp$21;
		return [t, err];
	};
	contains = function(s, c) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + 1 >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _tmp, _tmp$1, i, j, _q, h;
		_tmp = 0; _tmp$1 = a.length; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _tmp, _tmp$1, i, j, _q, h;
		_tmp = 0; _tmp$1 = a.length; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = $pkg.IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, rr, isPrint, isNotPrint, i, x, x$1, j, _tmp$3, _tmp$4, _tmp$5, rr$1, isPrint$1, isNotPrint$1, i$1, x$2, x$3, j$1;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16); _tmp$1 = isPrint16; _tmp$2 = isNotPrint16; rr = _tmp; isPrint = _tmp$1; isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.length || rr < (x = i & ~1, ((x < 0 || x >= isPrint.length) ? $throwRuntimeError("index out of range") : isPrint.array[isPrint.offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.length) ? $throwRuntimeError("index out of range") : isPrint.array[isPrint.offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.length || !((((j < 0 || j >= isNotPrint.length) ? $throwRuntimeError("index out of range") : isNotPrint.array[isNotPrint.offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0); _tmp$4 = isPrint32; _tmp$5 = isNotPrint32; rr$1 = _tmp$3; isPrint$1 = _tmp$4; isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.length || rr$1 < (x$2 = i$1 & ~1, ((x$2 < 0 || x$2 >= isPrint$1.length) ? $throwRuntimeError("index out of range") : isPrint$1.array[isPrint$1.offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.length) ? $throwRuntimeError("index out of range") : isPrint$1.array[isPrint$1.offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - 65536 >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.length || !((((j$1 < 0 || j$1 >= isNotPrint$1.length) ? $throwRuntimeError("index out of range") : isNotPrint$1.array[isNotPrint$1.offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.$init = function() {
		($ptrType(NumError)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		NumError.init([["Func", "Func", "", $String, ""], ["Num", "Num", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(decimal)).methods = [["Assign", "Assign", "", [$Uint64], [], false, -1], ["Round", "Round", "", [$Int], [], false, -1], ["RoundDown", "RoundDown", "", [$Int], [], false, -1], ["RoundUp", "RoundUp", "", [$Int], [], false, -1], ["RoundedInteger", "RoundedInteger", "", [], [$Uint64], false, -1], ["Shift", "Shift", "", [$Int], [], false, -1], ["String", "String", "", [], [$String], false, -1], ["floatBits", "floatBits", "strconv", [($ptrType(floatInfo))], [$Uint64, $Bool], false, -1], ["set", "set", "strconv", [$String], [$Bool], false, -1]];
		decimal.init([["d", "d", "strconv", ($arrayType($Uint8, 800)), ""], ["nd", "nd", "strconv", $Int, ""], ["dp", "dp", "strconv", $Int, ""], ["neg", "neg", "strconv", $Bool, ""], ["trunc", "trunc", "strconv", $Bool, ""]]);
		leftCheat.init([["delta", "delta", "strconv", $Int, ""], ["cutoff", "cutoff", "strconv", $String, ""]]);
		($ptrType(extFloat)).methods = [["AssignComputeBounds", "AssignComputeBounds", "", [$Uint64, $Int, $Bool, ($ptrType(floatInfo))], [extFloat, extFloat], false, -1], ["AssignDecimal", "AssignDecimal", "", [$Uint64, $Int, $Bool, $Bool, ($ptrType(floatInfo))], [$Bool], false, -1], ["FixedDecimal", "FixedDecimal", "", [($ptrType(decimalSlice)), $Int], [$Bool], false, -1], ["Multiply", "Multiply", "", [extFloat], [], false, -1], ["Normalize", "Normalize", "", [], [$Uint], false, -1], ["ShortestDecimal", "ShortestDecimal", "", [($ptrType(decimalSlice)), ($ptrType(extFloat)), ($ptrType(extFloat))], [$Bool], false, -1], ["floatBits", "floatBits", "strconv", [($ptrType(floatInfo))], [$Uint64, $Bool], false, -1], ["frexp10", "frexp10", "strconv", [], [$Int, $Int], false, -1]];
		extFloat.init([["mant", "mant", "strconv", $Uint64, ""], ["exp", "exp", "strconv", $Int, ""], ["neg", "neg", "strconv", $Bool, ""]]);
		floatInfo.init([["mantbits", "mantbits", "strconv", $Uint, ""], ["expbits", "expbits", "strconv", $Uint, ""], ["bias", "bias", "strconv", $Int, ""]]);
		decimalSlice.init([["d", "d", "strconv", ($sliceType($Uint8)), ""], ["nd", "nd", "strconv", $Int, ""], ["dp", "dp", "strconv", $Int, ""], ["neg", "neg", "strconv", $Bool, ""]]);
		optimize = true;
		powtab = new ($sliceType($Int))([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new ($sliceType($Float64))([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new ($sliceType($Float32))([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new ($sliceType(leftCheat))([new leftCheat.Ptr(0, ""), new leftCheat.Ptr(1, "5"), new leftCheat.Ptr(1, "25"), new leftCheat.Ptr(1, "125"), new leftCheat.Ptr(2, "625"), new leftCheat.Ptr(2, "3125"), new leftCheat.Ptr(2, "15625"), new leftCheat.Ptr(3, "78125"), new leftCheat.Ptr(3, "390625"), new leftCheat.Ptr(3, "1953125"), new leftCheat.Ptr(4, "9765625"), new leftCheat.Ptr(4, "48828125"), new leftCheat.Ptr(4, "244140625"), new leftCheat.Ptr(4, "1220703125"), new leftCheat.Ptr(5, "6103515625"), new leftCheat.Ptr(5, "30517578125"), new leftCheat.Ptr(5, "152587890625"), new leftCheat.Ptr(6, "762939453125"), new leftCheat.Ptr(6, "3814697265625"), new leftCheat.Ptr(6, "19073486328125"), new leftCheat.Ptr(7, "95367431640625"), new leftCheat.Ptr(7, "476837158203125"), new leftCheat.Ptr(7, "2384185791015625"), new leftCheat.Ptr(7, "11920928955078125"), new leftCheat.Ptr(8, "59604644775390625"), new leftCheat.Ptr(8, "298023223876953125"), new leftCheat.Ptr(8, "1490116119384765625"), new leftCheat.Ptr(9, "7450580596923828125")]);
		smallPowersOfTen = ($arrayType(extFloat, 8)).zero(); $copy(smallPowersOfTen, $toNativeArray("Struct", [new extFloat.Ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.Ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.Ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.Ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.Ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.Ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.Ptr(new $Uint64(2560000000, 0), -40, false)]), ($arrayType(extFloat, 8)));
		powersOfTen = ($arrayType(extFloat, 87)).zero(); $copy(powersOfTen, $toNativeArray("Struct", [new extFloat.Ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.Ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.Ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.Ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.Ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.Ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.Ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.Ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.Ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.Ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.Ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.Ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.Ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.Ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.Ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.Ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.Ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.Ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.Ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.Ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.Ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.Ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.Ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.Ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.Ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.Ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.Ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.Ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.Ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.Ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.Ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.Ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.Ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.Ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.Ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.Ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.Ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.Ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.Ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.Ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.Ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.Ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.Ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.Ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.Ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.Ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.Ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.Ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.Ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.Ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.Ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.Ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.Ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.Ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.Ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.Ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.Ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.Ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.Ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.Ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.Ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.Ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.Ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.Ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.Ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.Ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.Ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.Ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.Ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.Ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.Ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.Ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.Ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.Ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.Ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.Ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.Ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.Ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.Ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.Ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.Ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.Ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.Ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.Ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.Ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.Ptr(new $Uint64(2944860731, 2616258155), 1066, false)]), ($arrayType(extFloat, 87)));
		uint64pow10 = ($arrayType($Uint64, 20)).zero(); $copy(uint64pow10, $toNativeArray("Uint64", [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]), ($arrayType($Uint64, 20)));
		float32info = new floatInfo.Ptr(); $copy(float32info, new floatInfo.Ptr(23, 8, -127), floatInfo);
		float64info = new floatInfo.Ptr(); $copy(float64info, new floatInfo.Ptr(52, 11, -1023), floatInfo);
		isPrint16 = new ($sliceType($Uint16))([32, 126, 161, 887, 890, 894, 900, 1319, 1329, 1366, 1369, 1418, 1423, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2220, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3073, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3199, 3202, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3330, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5872, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8378, 8400, 8432, 8448, 8585, 8592, 9203, 9216, 9254, 9280, 9290, 9312, 11084, 11088, 11097, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11835, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42647, 42655, 42743, 42752, 42899, 42912, 42922, 43000, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43487, 43520, 43574, 43584, 43597, 43600, 43609, 43612, 43643, 43648, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43822, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65062, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new ($sliceType($Uint16))([173, 907, 909, 930, 1376, 1416, 1424, 1757, 2111, 2209, 2303, 2424, 2432, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3124, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6751, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9984, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42895, 43470, 43815, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new ($sliceType($Uint32))([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65930, 65936, 65947, 66000, 66045, 66176, 66204, 66208, 66256, 66304, 66339, 66352, 66378, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67679, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68223, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68479, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69760, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 70016, 70088, 70096, 70105, 71296, 71351, 71360, 71369, 73728, 74606, 74752, 74850, 74864, 74867, 77824, 78894, 92160, 92728, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127166, 127169, 127199, 127232, 127242, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127776, 127792, 127868, 127872, 127891, 127904, 127946, 127968, 127984, 128000, 128252, 128256, 128317, 128320, 128323, 128336, 128359, 128507, 128576, 128581, 128591, 128640, 128709, 128768, 128883, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new ($sliceType($Uint16))([12, 39, 59, 62, 799, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61648, 61743, 62262, 62405, 62527, 62529, 62712]);
		shifts = ($arrayType($Uint, 37)).zero(); $copy(shifts, $toNativeArray("Uint", [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]), ($arrayType($Uint, 37)));
	};
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], runtime = $packages["runtime"], strconv = $packages["strconv"], sync = $packages["sync"], math = $packages["math"], mapIter, Type, Kind, rtype, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, iword, nonEmptyInterface, initialized, kindNames, uint8Type, init, jsType, reflectType, isWrapped, copyStruct, makeValue, MakeSlice, jsObject, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, memmove, loadScalar, chanclose, chanrecv, chansend, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, overflowFloat32, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I, call;
	mapIter = $pkg.mapIter = $newType(0, "Struct", "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		this.t = t_ !== undefined ? t_ : null;
		this.m = m_ !== undefined ? m_ : null;
		this.keys = keys_ !== undefined ? keys_ : null;
		this.i = i_ !== undefined ? i_ : 0;
	});
	Type = $pkg.Type = $newType(8, "Interface", "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, "Uint", "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, "Struct", "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_, zero_) {
		this.$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.hash = hash_ !== undefined ? hash_ : 0;
		this._$2 = _$2_ !== undefined ? _$2_ : 0;
		this.align = align_ !== undefined ? align_ : 0;
		this.fieldAlign = fieldAlign_ !== undefined ? fieldAlign_ : 0;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.alg = alg_ !== undefined ? alg_ : ($ptrType($Uintptr)).nil;
		this.gc = gc_ !== undefined ? gc_ : 0;
		this.string = string_ !== undefined ? string_ : ($ptrType($String)).nil;
		this.uncommonType = uncommonType_ !== undefined ? uncommonType_ : ($ptrType(uncommonType)).nil;
		this.ptrToThis = ptrToThis_ !== undefined ? ptrToThis_ : ($ptrType(rtype)).nil;
		this.zero = zero_ !== undefined ? zero_ : 0;
	});
	method = $pkg.method = $newType(0, "Struct", "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.mtyp = mtyp_ !== undefined ? mtyp_ : ($ptrType(rtype)).nil;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
		this.ifn = ifn_ !== undefined ? ifn_ : 0;
		this.tfn = tfn_ !== undefined ? tfn_ : 0;
	});
	uncommonType = $pkg.uncommonType = $newType(0, "Struct", "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.methods = methods_ !== undefined ? methods_ : ($sliceType(method)).nil;
	});
	ChanDir = $pkg.ChanDir = $newType(4, "Int", "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, "Struct", "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
		this.slice = slice_ !== undefined ? slice_ : ($ptrType(rtype)).nil;
		this.len = len_ !== undefined ? len_ : 0;
	});
	chanType = $pkg.chanType = $newType(0, "Struct", "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
		this.dir = dir_ !== undefined ? dir_ : 0;
	});
	funcType = $pkg.funcType = $newType(0, "Struct", "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.dotdotdot = dotdotdot_ !== undefined ? dotdotdot_ : false;
		this.in$2 = in$2_ !== undefined ? in$2_ : ($sliceType(($ptrType(rtype)))).nil;
		this.out = out_ !== undefined ? out_ : ($sliceType(($ptrType(rtype)))).nil;
	});
	imethod = $pkg.imethod = $newType(0, "Struct", "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
	});
	interfaceType = $pkg.interfaceType = $newType(0, "Struct", "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.methods = methods_ !== undefined ? methods_ : ($sliceType(imethod)).nil;
	});
	mapType = $pkg.mapType = $newType(0, "Struct", "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.key = key_ !== undefined ? key_ : ($ptrType(rtype)).nil;
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
		this.bucket = bucket_ !== undefined ? bucket_ : ($ptrType(rtype)).nil;
		this.hmap = hmap_ !== undefined ? hmap_ : ($ptrType(rtype)).nil;
	});
	ptrType = $pkg.ptrType = $newType(0, "Struct", "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
	});
	sliceType = $pkg.sliceType = $newType(0, "Struct", "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
	});
	structField = $pkg.structField = $newType(0, "Struct", "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
		this.tag = tag_ !== undefined ? tag_ : ($ptrType($String)).nil;
		this.offset = offset_ !== undefined ? offset_ : 0;
	});
	structType = $pkg.structType = $newType(0, "Struct", "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.fields = fields_ !== undefined ? fields_ : ($sliceType(structField)).nil;
	});
	Method = $pkg.Method = $newType(0, "Struct", "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Func = Func_ !== undefined ? Func_ : new Value.Ptr();
		this.Index = Index_ !== undefined ? Index_ : 0;
	});
	StructField = $pkg.StructField = $newType(0, "Struct", "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Tag = Tag_ !== undefined ? Tag_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Index = Index_ !== undefined ? Index_ : ($sliceType($Int)).nil;
		this.Anonymous = Anonymous_ !== undefined ? Anonymous_ : false;
	});
	StructTag = $pkg.StructTag = $newType(8, "String", "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, "Struct", "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(structType)).nil;
		this.index = index_ !== undefined ? index_ : ($sliceType($Int)).nil;
	});
	Value = $pkg.Value = $newType(0, "Struct", "reflect.Value", "Value", "reflect", function(typ_, ptr_, scalar_, flag_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
		this.ptr = ptr_ !== undefined ? ptr_ : 0;
		this.scalar = scalar_ !== undefined ? scalar_ : 0;
		this.flag = flag_ !== undefined ? flag_ : 0;
	});
	flag = $pkg.flag = $newType(4, "Uintptr", "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, "Struct", "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
	});
	iword = $pkg.iword = $newType(4, "UnsafePointer", "reflect.iword", "iword", "reflect", null);
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, "Struct", "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		this.itab = itab_ !== undefined ? itab_ : ($ptrType(($structType([["ityp", "ityp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["link", "link", "reflect", $UnsafePointer, ""], ["bad", "bad", "reflect", $Int32, ""], ["unused", "unused", "reflect", $Int32, ""], ["fun", "fun", "reflect", ($arrayType($UnsafePointer, 100000)), ""]])))).nil;
		this.word = word_ !== undefined ? word_ : 0;
	});
	init = function() {
		var used, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, pkg, _map, _key, x$14;
		used = (function(i) {
		});
		used((x$1 = new rtype.Ptr(0, 0, 0, 0, 0, 0, ($ptrType($Uintptr)).nil, 0, ($ptrType($String)).nil, ($ptrType(uncommonType)).nil, ($ptrType(rtype)).nil, 0), new x$1.constructor.Struct(x$1)));
		used((x$2 = new uncommonType.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($sliceType(method)).nil), new x$2.constructor.Struct(x$2)));
		used((x$3 = new method.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, 0, 0), new x$3.constructor.Struct(x$3)));
		used((x$4 = new arrayType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, 0), new x$4.constructor.Struct(x$4)));
		used((x$5 = new chanType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil, 0), new x$5.constructor.Struct(x$5)));
		used((x$6 = new funcType.Ptr(new rtype.Ptr(), false, ($sliceType(($ptrType(rtype)))).nil, ($sliceType(($ptrType(rtype)))).nil), new x$6.constructor.Struct(x$6)));
		used((x$7 = new interfaceType.Ptr(new rtype.Ptr(), ($sliceType(imethod)).nil), new x$7.constructor.Struct(x$7)));
		used((x$8 = new mapType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, ($ptrType(rtype)).nil), new x$8.constructor.Struct(x$8)));
		used((x$9 = new ptrType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil), new x$9.constructor.Struct(x$9)));
		used((x$10 = new sliceType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil), new x$10.constructor.Struct(x$10)));
		used((x$11 = new structType.Ptr(new rtype.Ptr(), ($sliceType(structField)).nil), new x$11.constructor.Struct(x$11)));
		used((x$12 = new imethod.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($ptrType(rtype)).nil), new x$12.constructor.Struct(x$12)));
		used((x$13 = new structField.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($ptrType(rtype)).nil, ($ptrType($String)).nil, 0), new x$13.constructor.Struct(x$13)));
		pkg = $pkg;
		pkg.kinds = $externalize((_map = new $Map(), _key = "Bool", _map[_key] = { k: _key, v: 1 }, _key = "Int", _map[_key] = { k: _key, v: 2 }, _key = "Int8", _map[_key] = { k: _key, v: 3 }, _key = "Int16", _map[_key] = { k: _key, v: 4 }, _key = "Int32", _map[_key] = { k: _key, v: 5 }, _key = "Int64", _map[_key] = { k: _key, v: 6 }, _key = "Uint", _map[_key] = { k: _key, v: 7 }, _key = "Uint8", _map[_key] = { k: _key, v: 8 }, _key = "Uint16", _map[_key] = { k: _key, v: 9 }, _key = "Uint32", _map[_key] = { k: _key, v: 10 }, _key = "Uint64", _map[_key] = { k: _key, v: 11 }, _key = "Uintptr", _map[_key] = { k: _key, v: 12 }, _key = "Float32", _map[_key] = { k: _key, v: 13 }, _key = "Float64", _map[_key] = { k: _key, v: 14 }, _key = "Complex64", _map[_key] = { k: _key, v: 15 }, _key = "Complex128", _map[_key] = { k: _key, v: 16 }, _key = "Array", _map[_key] = { k: _key, v: 17 }, _key = "Chan", _map[_key] = { k: _key, v: 18 }, _key = "Func", _map[_key] = { k: _key, v: 19 }, _key = "Interface", _map[_key] = { k: _key, v: 20 }, _key = "Map", _map[_key] = { k: _key, v: 21 }, _key = "Ptr", _map[_key] = { k: _key, v: 22 }, _key = "Slice", _map[_key] = { k: _key, v: 23 }, _key = "String", _map[_key] = { k: _key, v: 24 }, _key = "Struct", _map[_key] = { k: _key, v: 25 }, _key = "UnsafePointer", _map[_key] = { k: _key, v: 26 }, _map), ($mapType($String, Kind)));
		pkg.RecvDir = 1;
		pkg.SendDir = 2;
		pkg.BothDir = 3;
		$reflect = pkg;
		initialized = true;
		uint8Type = (x$14 = TypeOf(new $Uint8(0)), (x$14 !== null && x$14.constructor === ($ptrType(rtype)) ? x$14.$val : $typeAssertionFailed(x$14, ($ptrType(rtype)))));
	};
	jsType = function(typ) {
		return typ.jsType;
	};
	reflectType = function(typ) {
		return typ.reflectType();
	};
	isWrapped = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) {
			return true;
		} else if (_ref === 22) {
			return typ.Elem().Kind() === 17;
		}
		return false;
	};
	copyStruct = function(dst, src, typ) {
		var fields, i, name;
		fields = jsType(typ).fields;
		i = 0;
		while (i < $parseInt(fields.length)) {
			name = $internalize(fields[i][0], $String);
			dst[$externalize(name, $String)] = src[$externalize(name, $String)];
			i = i + 1 >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var rt;
		rt = t.common();
		if ((t.Kind() === 17) || (t.Kind() === 25) || rt.pointers()) {
			return new Value.Ptr(rt, v, 0, (fl | ((t.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		if (t.Size() > 4 || (t.Kind() === 24)) {
			return new Value.Ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), 0, (((fl | ((t.Kind() >>> 0) << 4 >>> 0)) >>> 0) | 2) >>> 0);
		}
		return new Value.Ptr(rt, 0, v, (fl | ((t.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	MakeSlice = $pkg.MakeSlice = function(typ, len, cap) {
		if (!((typ.Kind() === 23))) {
			throw $panic(new $String("reflect.MakeSlice of non-slice type"));
		}
		if (len < 0) {
			throw $panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			throw $panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			throw $panic(new $String("reflect.MakeSlice: len > cap"));
		}
		return makeValue(typ, jsType(typ).make(len, cap, $externalize((function() {
			return jsType(typ.Elem()).zero();
		}), ($funcType([], [js.Object], false)))), 0);
	};
	jsObject = function() {
		return reflectType($packages[$externalize("github.com/gopherjs/gopherjs/js", $String)].Object);
	};
	TypeOf = $pkg.TypeOf = function(i) {
		var c;
		if (!initialized) {
			return new rtype.Ptr(0, 0, 0, 0, 0, 0, ($ptrType($Uintptr)).nil, 0, ($ptrType($String)).nil, ($ptrType(uncommonType)).nil, ($ptrType(rtype)).nil, 0);
		}
		if ($interfaceIsEqual(i, null)) {
			return null;
		}
		c = i.constructor;
		if (c.kind === undefined) {
			return jsObject();
		}
		return reflectType(c);
	};
	ValueOf = $pkg.ValueOf = function(i) {
		var c;
		if ($interfaceIsEqual(i, null)) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		c = i.constructor;
		if (c.kind === undefined) {
			return new Value.Ptr(jsObject(), 0, i, 320);
		}
		return makeValue(reflectType(c), i.$val, 0);
	};
	rtype.Ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = $pkg.SliceOf = function(t) {
		return reflectType($sliceType(jsType(t)));
	};
	Zero = $pkg.Zero = function(typ) {
		return makeValue(typ, jsType(typ).zero(), 0);
	};
	unsafe_New = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 25) {
			return new (jsType(typ).Ptr)();
		} else if (_ref === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var typ, ptr, s, _ref;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			ptr.$set(bits);
			return new Value.Ptr(typ, ptr, 0, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		s = 0;
		_ref = typ.Kind();
		if (_ref === 3) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.low << 24 >> 24));
		} else if (_ref === 4) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.low << 16 >> 16));
		} else if (_ref === 2 || _ref === 5) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.low >> 0));
		} else if (_ref === 8) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.low << 24 >>> 24));
		} else if (_ref === 9) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.low << 16 >>> 16));
		} else if (_ref === 7 || _ref === 10 || _ref === 12) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.low >>> 0));
		}
		return new Value.Ptr(typ, 0, s, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	memmove = function(adst, asrc, n) {
		adst.$set(asrc.$get());
	};
	loadScalar = function(p, n) {
		return p.$get();
	};
	chanclose = function(ch) {
		$notSupported($externalize("channels", $String));
		throw $panic(new $String("unreachable"));
	};
	chanrecv = function(t, ch, nb, val) {
		var selected, received;
		selected = false;
		received = false;
		$notSupported($externalize("channels", $String));
		throw $panic(new $String("unreachable"));
	};
	chansend = function(t, ch, val, nb) {
		$notSupported($externalize("channels", $String));
		throw $panic(new $String("unreachable"));
	};
	mapaccess = function(t, m, key) {
		var k, entry;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		entry = m[$externalize($internalize(k, $String), $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var kv, k, jsVal, et, newVal, entry;
		kv = key.$get();
		k = kv;
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		jsVal = val.$get();
		et = t.Elem();
		if (et.Kind() === 25) {
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		}
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize($internalize(k, $String), $String)] = entry;
	};
	mapdelete = function(t, m, key) {
		var k;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		delete m[$externalize($internalize(k, $String), $String)];
	};
	mapiterinit = function(t, m) {
		return new mapIter.Ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var iter, k;
		iter = it;
		k = iter.keys[iter.i];
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, jsType(PtrTo(iter.t.Key())));
	};
	mapiternext = function(it) {
		var iter;
		iter = it;
		iter.i = iter.i + 1 >> 0;
	};
	maplen = function(m) {
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var srcVal, val, k, _ref, slice;
		srcVal = v.iword();
		if (srcVal === jsType(v.typ).nil) {
			return makeValue(typ, jsType(typ).nil, v.flag);
		}
		val = null;
		k = typ.Kind();
		_ref = k;
		switch (0) { default: if (_ref === 18) {
			val = new (jsType(typ))();
		} else if (_ref === 23) {
			slice = new (jsType(typ))(srcVal.array);
			slice.offset = srcVal.offset;
			slice.length = srcVal.length;
			slice.capacity = srcVal.capacity;
			val = $newDataPointer(slice, jsType(PtrTo(typ)));
		} else if (_ref === 22) {
			if (typ.Elem().Kind() === 25) {
				if ($interfaceIsEqual(typ.Elem(), v.typ.Elem())) {
					val = srcVal;
					break;
				}
				val = new (jsType(typ))();
				copyStruct(val, srcVal, typ.Elem());
				break;
			}
			val = new (jsType(typ))(srcVal.$get, srcVal.$set);
		} else if (_ref === 25) {
			val = new (jsType(typ).Ptr)();
			copyStruct(val, srcVal, typ);
		} else if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) {
			val = v.ptr;
		} else {
			throw $panic(new ValueError.Ptr("reflect.Convert", k));
		} }
		return new Value.Ptr(typ.common(), val, 0, (((v.flag & 3) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	methodReceiver = function(op, v, i) {
		var rcvrtype, t, fn, name, tt, x$1, m, iface, ut, x$2, m$1, rcvr;
		rcvrtype = ($ptrType(rtype)).nil;
		t = ($ptrType(rtype)).nil;
		fn = 0;
		name = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if (i < 0 || i >= tt.methods.length) {
				throw $panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x$1 = tt.methods, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
			if (!($pointerIsEqual(m.pkgPath, ($ptrType($String)).nil))) {
				throw $panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $clone(v.ptr, nonEmptyInterface);
			if (iface.itab === ($ptrType(($structType([["ityp", "ityp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["link", "link", "reflect", $UnsafePointer, ""], ["bad", "bad", "reflect", $Int32, ""], ["unused", "unused", "reflect", $Int32, ""], ["fun", "fun", "reflect", ($arrayType($UnsafePointer, 100000)), ""]])))).nil) {
				throw $panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			name = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ($ptrType(uncommonType)).nil || i < 0 || i >= ut.methods.length) {
				throw $panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$2 = ut.methods, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + i]));
			if (!($pointerIsEqual(m$1.pkgPath, ($ptrType($String)).nil))) {
				throw $panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			name = $internalize(jsType(v.typ).methods[i][0], $String);
		}
		rcvr = v.iword();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(name, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		if (v.flag === 0) {
			throw $panic(new ValueError.Ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 1) >>> 0) === 0))) {
			throw $panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			$copy(v, makeMethodValue("Interface", $clone(v, Value)), Value);
		}
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.iword());
		}
		return v.iword();
	};
	ifaceE2I = function(t, src, dst) {
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _tuple, fn, rcvr, fv;
		if (((v.flag & 8) >>> 0) === 0) {
			throw $panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), (v.flag >> 0) >> 9 >> 0); fn = _tuple[2];
		rcvr = v.iword();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fv = (function() {
			return fn.apply(rcvr, $externalize(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments)), ($sliceType(js.Object))));
		});
		return new Value.Ptr(v.Type().common(), fv, 0, (((v.flag & 1) >>> 0) | 304) >>> 0);
	};
	rtype.Ptr.prototype.pointers = function() {
		var t, _ref;
		t = this;
		_ref = t.Kind();
		if (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	uncommonType.Ptr.prototype.Method = function(i) {
		var m, t, x$1, p, fl, mt, name, fn;
		m = new Method.Ptr();
		t = this;
		if (t === ($ptrType(uncommonType)).nil || i < 0 || i >= t.methods.length) {
			throw $panic(new $String("reflect: Method index out of range"));
		}
		p = (x$1 = t.methods, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
		if (!($pointerIsEqual(p.name, ($ptrType($String)).nil))) {
			m.Name = p.name.$get();
		}
		fl = 304;
		if (!($pointerIsEqual(p.pkgPath, ($ptrType($String)).nil))) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | 1) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		name = $internalize(t.jsType.methods[i][0], $String);
		fn = (function(rcvr) {
			return rcvr[$externalize(name, $String)].apply(rcvr, $externalize($subslice(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments)), 1), ($sliceType(js.Object))));
		});
		$copy(m.Func, new Value.Ptr(mt, fn, 0, fl), Value);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.Ptr.prototype.iword = function() {
		var v, val, _ref, newVal;
		v = new Value.Ptr(); $copy(v, this, Value);
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 2) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === null) && !(val.constructor === jsType(v.typ))) {
				_ref = v.typ.Kind();
				switch (0) { default: if (_ref === 11 || _ref === 6) {
					val = new (jsType(v.typ))(val.high, val.low);
				} else if (_ref === 15 || _ref === 16) {
					val = new (jsType(v.typ))(val.real, val.imag);
				} else if (_ref === 23) {
					if (val === val.constructor.nil) {
						val = jsType(v.typ).nil;
						break;
					}
					newVal = new (jsType(v.typ))(val.array);
					newVal.offset = val.offset;
					newVal.length = val.length;
					newVal.capacity = val.capacity;
					val = newVal;
				} }
			}
			return val;
		}
		if (v.typ.pointers()) {
			return v.ptr;
		}
		return v.scalar;
	};
	Value.prototype.iword = function() { return this.$val.iword(); };
	Value.Ptr.prototype.call = function(op, in$1) {
		var v, t, fn, rcvr, _tuple, isSlice, n, _ref, _i, x$1, i, _tmp, _tmp$1, xt, targ, m, slice, elem, i$1, x$2, x$3, xt$1, origIn, nin, nout, argsArray, _ref$1, _i$1, i$2, arg, results, _ref$2, ret, _ref$3, _i$2, i$3;
		v = new Value.Ptr(); $copy(v, this, Value);
		t = v.typ;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 8) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), (v.flag >> 0) >> 9 >> 0); t = _tuple[1]; fn = _tuple[2];
			rcvr = v.iword();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.iword();
		}
		if (fn === 0) {
			throw $panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				throw $panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.length < n) {
				throw $panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.length > n) {
				throw $panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - 1 >> 0;
			}
			if (in$1.length < n) {
				throw $panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.length > n) {
				throw $panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (_i < _ref.length) {
			x$1 = new Value.Ptr(); $copy(x$1, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), Value);
			if (x$1.Kind() === 0) {
				throw $panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		while (i < n) {
			_tmp = ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1.array[in$1.offset + i]).Type(); _tmp$1 = t.In(i); xt = _tmp; targ = _tmp$1;
			if (!xt.AssignableTo(targ)) {
				throw $panic(new $String("reflect: " + op + " using " + xt.String() + " as type " + targ.String()));
			}
			i = i + 1 >> 0;
		}
		if (!isSlice && t.IsVariadic()) {
			m = in$1.length - n >> 0;
			slice = new Value.Ptr(); $copy(slice, MakeSlice(t.In(n), m, m), Value);
			elem = t.In(n).Elem();
			i$1 = 0;
			while (i$1 < m) {
				x$3 = new Value.Ptr(); $copy(x$3, (x$2 = n + i$1 >> 0, ((x$2 < 0 || x$2 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1.array[in$1.offset + x$2])), Value);
				xt$1 = x$3.Type();
				if (!xt$1.AssignableTo(elem)) {
					throw $panic(new $String("reflect: cannot use " + xt$1.String() + " as type " + elem.String() + " in " + op));
				}
				slice.Index(i$1).Set($clone(x$3, Value));
				i$1 = i$1 + 1 >> 0;
			}
			origIn = in$1;
			in$1 = ($sliceType(Value)).make((n + 1 >> 0), 0, function() { return new Value.Ptr(); });
			$copySlice($subslice(in$1, 0, n), origIn);
			$copy(((n < 0 || n >= in$1.length) ? $throwRuntimeError("index out of range") : in$1.array[in$1.offset + n]), slice, Value);
		}
		nin = in$1.length;
		if (!((nin === t.NumIn()))) {
			throw $panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$2 = _i$1;
			arg = new Value.Ptr(); $copy(arg, ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]), Value);
			argsArray[i$2] = arg.assignTo("reflect.Value.Call", t.In(i$2).common(), ($ptrType($emptyInterface)).nil).iword();
			_i$1++;
		}
		results = fn.apply(rcvr, argsArray);
		_ref$2 = nout;
		if (_ref$2 === 0) {
			return ($sliceType(Value)).nil;
		} else if (_ref$2 === 1) {
			return new ($sliceType(Value))([$clone(makeValue(t.Out(0), results, 0), Value)]);
		} else {
			ret = ($sliceType(Value)).make(nout, 0, function() { return new Value.Ptr(); });
			_ref$3 = ret;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				i$3 = _i$2;
				$copy(((i$3 < 0 || i$3 >= ret.length) ? $throwRuntimeError("index out of range") : ret.array[ret.offset + i$3]), makeValue(t.Out(i$3), results[i$3], 0), Value);
				_i$2++;
			}
			return ret;
		}
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.Ptr.prototype.Cap = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 17) {
			return v.typ.Len();
		} else if (_ref === 23) {
			return $parseInt(v.iword().capacity) >> 0;
		}
		throw $panic(new ValueError.Ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	Value.Ptr.prototype.Elem = function() {
		var v, k, _ref, val, typ, val$1, tt, fl;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 20) {
			val = v.iword();
			if (val === null) {
				return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
			}
			typ = reflectType(val.constructor);
			return makeValue(typ, val.$val, (v.flag & 1) >>> 0);
		} else if (_ref === 22) {
			if (v.IsNil()) {
				return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
			}
			val$1 = v.iword();
			tt = v.typ.ptrType;
			fl = (((((v.flag & 1) >>> 0) | 2) >>> 0) | 4) >>> 0;
			fl = (fl | (((tt.elem.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			return new Value.Ptr(tt.elem, val$1, 0, fl);
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.Elem", k));
		}
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.Ptr.prototype.Field = function(i) {
		var v, tt, x$1, field, name, typ, fl, s;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(25);
		tt = v.typ.structType;
		if (i < 0 || i >= tt.fields.length) {
			throw $panic(new $String("reflect: Field index out of range"));
		}
		field = (x$1 = tt.fields, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
		name = $internalize(jsType(v.typ).fields[i][0], $String);
		typ = field.typ;
		fl = (v.flag & 7) >>> 0;
		if (!($pointerIsEqual(field.pkgPath, ($ptrType($String)).nil))) {
			fl = (fl | 1) >>> 0;
		}
		fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		s = v.ptr;
		if (!((((fl & 2) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
			return new Value.Ptr(typ, new (jsType(PtrTo(typ)))($externalize((function() {
				return s[$externalize(name, $String)];
			}), ($funcType([], [js.Object], false))), $externalize((function(v$1) {
				s[$externalize(name, $String)] = v$1;
			}), ($funcType([js.Object], [], false)))), 0, fl);
		}
		return makeValue(typ, s[$externalize(name, $String)], fl);
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	Value.Ptr.prototype.Index = function(i) {
		var v, k, _ref, tt, typ, fl, a, s, tt$1, typ$1, fl$1, a$1, str, fl$2;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 17) {
			tt = v.typ.arrayType;
			if (i < 0 || i > (tt.len >> 0)) {
				throw $panic(new $String("reflect: array index out of range"));
			}
			typ = tt.elem;
			fl = (v.flag & 7) >>> 0;
			fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			a = v.ptr;
			if (!((((fl & 2) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
				return new Value.Ptr(typ, new (jsType(PtrTo(typ)))($externalize((function() {
					return a[i];
				}), ($funcType([], [js.Object], false))), $externalize((function(v$1) {
					a[i] = v$1;
				}), ($funcType([js.Object], [], false)))), 0, fl);
			}
			return makeValue(typ, a[i], fl);
		} else if (_ref === 23) {
			s = v.iword();
			if (i < 0 || i >= $parseInt(s.length)) {
				throw $panic(new $String("reflect: slice index out of range"));
			}
			tt$1 = v.typ.sliceType;
			typ$1 = tt$1.elem;
			fl$1 = (6 | ((v.flag & 1) >>> 0)) >>> 0;
			fl$1 = (fl$1 | (((typ$1.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			i = i + (($parseInt(s.offset) >> 0)) >> 0;
			a$1 = s.array;
			if (!((((fl$1 & 2) >>> 0) === 0)) && !((typ$1.Kind() === 17)) && !((typ$1.Kind() === 25))) {
				return new Value.Ptr(typ$1, new (jsType(PtrTo(typ$1)))($externalize((function() {
					return a$1[i];
				}), ($funcType([], [js.Object], false))), $externalize((function(v$1) {
					a$1[i] = v$1;
				}), ($funcType([js.Object], [], false)))), 0, fl$1);
			}
			return makeValue(typ$1, a$1[i], fl$1);
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || i >= str.length) {
				throw $panic(new $String("reflect: string index out of range"));
			}
			fl$2 = (((v.flag & 1) >>> 0) | 128) >>> 0;
			return new Value.Ptr(uint8Type, 0, (str.charCodeAt(i) >>> 0), fl$2);
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.Index", k));
		}
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.Ptr.prototype.IsNil = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 18 || _ref === 22 || _ref === 23) {
			return v.iword() === jsType(v.typ).nil;
		} else if (_ref === 19) {
			return v.iword() === $throwNilPointerError;
		} else if (_ref === 21) {
			return v.iword() === false;
		} else if (_ref === 20) {
			return v.iword() === null;
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.Ptr.prototype.Len = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 17 || _ref === 23 || _ref === 24) {
			return $parseInt(v.iword().length);
		} else if (_ref === 21) {
			return $parseInt($keys(v.iword()).length);
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.Ptr.prototype.Pointer = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 23 || _ref === 26) {
			if (v.IsNil()) {
				return 0;
			}
			return v.iword();
		} else if (_ref === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.Ptr.prototype.Set = function(x$1) {
		var v, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(x$1.flag)).mustBeExported();
		if (!((((v.flag & 2) >>> 0) === 0))) {
			_ref = v.typ.Kind();
			if (_ref === 17) {
				$copy(v.ptr, x$1.ptr, jsType(v.typ));
			} else if (_ref === 20) {
				v.ptr.$set(valueInterface($clone(x$1, Value), false));
			} else if (_ref === 25) {
				copyStruct(v.ptr, x$1.ptr, v.typ);
			} else {
				v.ptr.$set(x$1.iword());
			}
			return;
		}
		v.ptr = x$1.ptr;
	};
	Value.prototype.Set = function(x$1) { return this.$val.Set(x$1); };
	Value.Ptr.prototype.SetCap = function(n) {
		var v, s, newSlice;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(23);
		s = v.ptr.$get();
		if (n < $parseInt(s.length) || n > ($parseInt(s.capacity) >> 0)) {
			throw $panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.array);
		newSlice.offset = s.offset;
		newSlice.length = s.length;
		newSlice.capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.Ptr.prototype.SetLen = function(n) {
		var v, s, newSlice;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.capacity) >> 0)) {
			throw $panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.array);
		newSlice.offset = s.offset;
		newSlice.length = n;
		newSlice.capacity = s.capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.Ptr.prototype.Slice = function(i, j) {
		var v, cap, typ, s, kind, _ref, tt, str;
		v = new Value.Ptr(); $copy(v, this, Value);
		cap = 0;
		typ = null;
		s = null;
		kind = (new flag(v.flag)).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 4) >>> 0) === 0) {
				throw $panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.arrayType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.iword());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.iword();
			cap = $parseInt(s.capacity) >> 0;
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || j < i || j > str.length) {
				throw $panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
			}
			return ValueOf(new $String(str.substring(i, j)));
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.Slice", kind));
		}
		if (i < 0 || j < i || j > cap) {
			throw $panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j), (v.flag & 1) >>> 0);
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.Ptr.prototype.Slice3 = function(i, j, k) {
		var v, cap, typ, s, kind, _ref, tt;
		v = new Value.Ptr(); $copy(v, this, Value);
		cap = 0;
		typ = null;
		s = null;
		kind = (new flag(v.flag)).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 4) >>> 0) === 0) {
				throw $panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.arrayType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.iword());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.iword();
			cap = $parseInt(s.capacity) >> 0;
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			throw $panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j, k), (v.flag & 1) >>> 0);
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if ((k >> 0) < kindNames.length) {
			return ((k < 0 || k >= kindNames.length) ? $throwRuntimeError("index out of range") : kindNames.array[kindNames.offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.Ptr.prototype.uncommon = function() {
		var t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		if (t === ($ptrType(uncommonType)).nil || $pointerIsEqual(t.pkgPath, ($ptrType($String)).nil)) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.Ptr.prototype.Name = function() {
		var t;
		t = this;
		if (t === ($ptrType(uncommonType)).nil || $pointerIsEqual(t.name, ($ptrType($String)).nil)) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.Ptr.prototype.String = function() {
		var t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.Ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.Ptr.prototype.Bits = function() {
		var t, k, x$1;
		t = this;
		if (t === ($ptrType(rtype)).nil) {
			throw $panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			throw $panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (x$1 = (t.size >> 0), (((x$1 >>> 16 << 16) * 8 >> 0) + (x$1 << 16 >>> 16) * 8) >> 0);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.Ptr.prototype.Align = function() {
		var t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.Ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.Ptr.prototype.Kind = function() {
		var t;
		t = this;
		return (((t.kind & 127) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.Ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		if (t === ($ptrType(uncommonType)).nil) {
			return 0;
		}
		return t.methods.length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, p, _ref, _i, i, x$1, _tmp, _tmp$1;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t === ($ptrType(uncommonType)).nil) {
			return [m, ok];
		}
		p = ($ptrType(method)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			p = (x$1 = t.methods, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
			if (!($pointerIsEqual(p.name, ($ptrType($String)).nil)) && p.name.$get() === name) {
				_tmp = new Method.Ptr(); $copy(_tmp, t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.Ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.Ptr.prototype.Method = function(i) {
		var m, t, tt;
		m = new Method.Ptr();
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			$copy(m, tt.Method(i), Method);
			return m;
		}
		$copy(m, t.uncommonType.Method(i), Method);
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, tt, _tuple, _tuple$1;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			_tuple = tt.MethodByName(name); $copy(m, _tuple[0], Method); ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name); $copy(m, _tuple$1[0], Method); ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.Ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.Ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			throw $panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.chanType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.Ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw $panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.funcType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.Ptr.prototype.Elem = function() {
		var t, _ref, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.arrayType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.chanType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.mapType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.ptrType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.sliceType;
			return toType(tt$4.elem);
		}
		throw $panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.Ptr.prototype.Field = function(i) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw $panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.structType;
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.Ptr.prototype.FieldByIndex = function(index) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw $panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByIndex(index);
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.Ptr.prototype.FieldByName = function(name) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw $panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByName(name);
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.Ptr.prototype.FieldByNameFunc = function(match) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw $panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByNameFunc(match);
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.Ptr.prototype.In = function(i) {
		var t, tt, x$1;
		t = this;
		if (!((t.Kind() === 19))) {
			throw $panic(new $String("reflect: In of non-func type"));
		}
		tt = t.funcType;
		return toType((x$1 = tt.in$2, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.Ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			throw $panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.mapType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.Ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			throw $panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.arrayType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.Ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw $panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.structType;
		return tt.fields.length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.Ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw $panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.funcType;
		return tt.in$2.length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.Ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw $panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.funcType;
		return tt.out.length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.Ptr.prototype.Out = function(i) {
		var t, tt, x$1;
		t = this;
		if (!((t.Kind() === 19))) {
			throw $panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.funcType;
		return toType((x$1 = tt.out, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var d, _ref;
		d = this.$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.Ptr.prototype.Method = function(i) {
		var m, t, x$1, p;
		m = new Method.Ptr();
		t = this;
		if (i < 0 || i >= t.methods.length) {
			return m;
		}
		p = (x$1 = t.methods, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
		m.Name = p.name.$get();
		if (!($pointerIsEqual(p.pkgPath, ($ptrType($String)).nil))) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, p, _ref, _i, i, x$1, _tmp, _tmp$1;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t === ($ptrType(interfaceType)).nil) {
			return [m, ok];
		}
		p = ($ptrType(imethod)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			p = (x$1 = t.methods, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
			if (p.name.$get() === name) {
				_tmp = new Method.Ptr(); $copy(_tmp, t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var tag, i, name, qvalue, _tuple, value;
		tag = this.$val;
		while (!(tag === "")) {
			i = 0;
			while (i < tag.length && (tag.charCodeAt(i) === 32)) {
				i = i + 1 >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34))) {
				i = i + 1 >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (i < tag.length && !((tag.charCodeAt(i) === 34))) {
				if (tag.charCodeAt(i) === 92) {
					i = i + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.Ptr.prototype.Field = function(i) {
		var f, t, x$1, p, t$1;
		f = new StructField.Ptr();
		t = this;
		if (i < 0 || i >= t.fields.length) {
			return f;
		}
		p = (x$1 = t.fields, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
		f.Type = toType(p.typ);
		if (!($pointerIsEqual(p.name, ($ptrType($String)).nil))) {
			f.Name = p.name.$get();
		} else {
			t$1 = f.Type;
			if (t$1.Kind() === 22) {
				t$1 = t$1.Elem();
			}
			f.Name = t$1.Name();
			f.Anonymous = true;
		}
		if (!($pointerIsEqual(p.pkgPath, ($ptrType($String)).nil))) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!($pointerIsEqual(p.tag, ($ptrType($String)).nil))) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new ($sliceType($Int))([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.Ptr.prototype.FieldByIndex = function(index) {
		var f, t, _ref, _i, i, x$1, ft;
		f = new StructField.Ptr();
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			x$1 = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (i > 0) {
				ft = f.Type;
				if ((ft.Kind() === 22) && (ft.Elem().Kind() === 25)) {
					ft = ft.Elem();
				}
				f.Type = ft;
			}
			$copy(f, f.Type.Field(x$1), StructField);
			_i++;
		}
		return f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.Ptr.prototype.FieldByNameFunc = function(match) {
		var result, ok, t, current, next, nextCount, _map, _key, visited, _tmp, _tmp$1, count, _ref, _i, scan, t$1, _entry, _key$1, _ref$1, _i$1, i, x$1, f, fname, ntyp, _entry$1, _tmp$2, _tmp$3, styp, _entry$2, _key$2, _map$1, _key$3, _key$4, _entry$3, _key$5, index;
		result = new StructField.Ptr();
		ok = false;
		t = this;
		current = new ($sliceType(fieldScan))([]);
		next = new ($sliceType(fieldScan))([new fieldScan.Ptr(t, ($sliceType($Int)).nil)]);
		nextCount = false;
		visited = (_map = new $Map(), _map);
		while (next.length > 0) {
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			while (_i < _ref.length) {
				scan = new fieldScan.Ptr(); $copy(scan, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), fieldScan);
				t$1 = scan.typ;
				if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$1 = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					i = _i$1;
					f = (x$1 = t$1.fields, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
					fname = "";
					ntyp = ($ptrType(rtype)).nil;
					if (!($pointerIsEqual(f.name, ($ptrType($String)).nil))) {
						fname = f.name.$get();
					} else {
						ntyp = f.typ;
						if (ntyp.Kind() === 22) {
							ntyp = ntyp.Elem().common();
						}
						fname = ntyp.Name();
					}
					if (match(fname)) {
						if ((_entry$1 = count[t$1.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.Ptr(); $copy(_tmp$2, new StructField.Ptr("", "", null, "", 0, ($sliceType($Int)).nil, false), StructField); _tmp$3 = false; $copy(result, _tmp$2, StructField); ok = _tmp$3;
							return [result, ok];
						}
						$copy(result, t$1.Field(i), StructField);
						result.Index = ($sliceType($Int)).nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						continue;
					}
					if (ok || ntyp === ($ptrType(rtype)).nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						continue;
					}
					styp = ntyp.structType;
					if ((_entry$2 = nextCount[styp.$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$2.$key()] = { k: _key$2, v: 2 };
						_i$1++;
						continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new $Map(), _map$1);
					}
					_key$4 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$4.$key()] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[t$1.$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$5.$key()] = { k: _key$5, v: 2 };
					}
					index = ($sliceType($Int)).nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.Ptr(styp, index));
					_i$1++;
				}
				_i++;
			}
			if (ok) {
				break;
			}
		}
		return [result, ok];
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.Ptr.prototype.FieldByName = function(name) {
		var f, present, t, hasAnon, _ref, _i, i, x$1, tf, _tmp, _tmp$1, _tuple;
		f = new StructField.Ptr();
		present = false;
		t = this;
		hasAnon = false;
		if (!(name === "")) {
			_ref = t.fields;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				tf = (x$1 = t.fields, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
				if ($pointerIsEqual(tf.name, ($ptrType($String)).nil)) {
					hasAnon = true;
					_i++;
					continue;
				}
				if (tf.name.$get() === name) {
					_tmp = new StructField.Ptr(); $copy(_tmp, t.Field(i), StructField); _tmp$1 = true; $copy(f, _tmp, StructField); present = _tmp$1;
					return [f, present];
				}
				_i++;
			}
		}
		if (!hasAnon) {
			return [f, present];
		}
		_tuple = t.FieldByNameFunc((function(s) {
			return s === name;
		})); $copy(f, _tuple[0], StructField); present = _tuple[1];
		return [f, present];
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = $pkg.PtrTo = function(t) {
		return (t !== null && t.constructor === ($ptrType(rtype)) ? t.$val : $typeAssertionFailed(t, ($ptrType(rtype)))).ptrTo();
	};
	rtype.Ptr.prototype.Implements = function(u) {
		var t;
		t = this;
		if ($interfaceIsEqual(u, null)) {
			throw $panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		if (!((u.Kind() === 20))) {
			throw $panic(new $String("reflect: non-interface type passed to Type.Implements"));
		}
		return implements$1((u !== null && u.constructor === ($ptrType(rtype)) ? u.$val : $typeAssertionFailed(u, ($ptrType(rtype)))), t);
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.Ptr.prototype.AssignableTo = function(u) {
		var t, uu;
		t = this;
		if ($interfaceIsEqual(u, null)) {
			throw $panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = (u !== null && u.constructor === ($ptrType(rtype)) ? u.$val : $typeAssertionFailed(u, ($ptrType(rtype))));
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.Ptr.prototype.ConvertibleTo = function(u) {
		var t, uu;
		t = this;
		if ($interfaceIsEqual(u, null)) {
			throw $panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = (u !== null && u.constructor === ($ptrType(rtype)) ? u.$val : $typeAssertionFailed(u, ($ptrType(rtype))));
		return !(convertOp(uu, t) === $throwNilPointerError);
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var t, v, i, j, x$1, tm, x$2, vm, v$1, i$1, j$1, x$3, tm$1, x$4, vm$1;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.interfaceType;
		if (t.methods.length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.interfaceType;
			i = 0;
			j = 0;
			while (j < v.methods.length) {
				tm = (x$1 = t.methods, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
				vm = (x$2 = v.methods, ((j < 0 || j >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + j]));
				if ($pointerIsEqual(vm.name, tm.name) && $pointerIsEqual(vm.pkgPath, tm.pkgPath) && vm.typ === tm.typ) {
					i = i + 1 >> 0;
					if (i >= t.methods.length) {
						return true;
					}
				}
				j = j + 1 >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ($ptrType(uncommonType)).nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (j$1 < v$1.methods.length) {
			tm$1 = (x$3 = t.methods, ((i$1 < 0 || i$1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + i$1]));
			vm$1 = (x$4 = v$1.methods, ((j$1 < 0 || j$1 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + j$1]));
			if ($pointerIsEqual(vm$1.name, tm$1.name) && $pointerIsEqual(vm$1.pkgPath, tm$1.pkgPath) && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + 1 >> 0;
				if (i$1 >= t.methods.length) {
					return true;
				}
			}
			j$1 = j$1 + 1 >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var kind, _ref, t, v, _ref$1, _i, i, typ, x$1, _ref$2, _i$1, i$1, typ$1, x$2, t$1, v$1, t$2, v$2, _ref$3, _i$2, i$2, x$3, tf, x$4, vf;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.funcType;
			v = V.funcType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.length === v.in$2.length)) || !((t.out.length === v.out.length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				typ = ((_i < 0 || _i >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i]);
				if (!(typ === (x$1 = v.in$2, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$2.length) ? $throwRuntimeError("index out of range") : _ref$2.array[_ref$2.offset + _i$1]);
				if (!(typ$1 === (x$2 = v.out, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.interfaceType;
			v$1 = V.interfaceType;
			if ((t$1.methods.length === 0) && (v$1.methods.length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.structType;
			v$2 = V.structType;
			if (!((t$2.fields.length === v$2.fields.length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				i$2 = _i$2;
				tf = (x$3 = t$2.fields, ((i$2 < 0 || i$2 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + i$2]));
				vf = (x$4 = v$2.fields, ((i$2 < 0 || i$2 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + i$2]));
				if (!($pointerIsEqual(tf.name, vf.name)) && ($pointerIsEqual(tf.name, ($ptrType($String)).nil) || $pointerIsEqual(vf.name, ($ptrType($String)).nil) || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!($pointerIsEqual(tf.pkgPath, vf.pkgPath)) && ($pointerIsEqual(tf.pkgPath, ($ptrType($String)).nil) || $pointerIsEqual(vf.pkgPath, ($ptrType($String)).nil) || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!($pointerIsEqual(tf.tag, vf.tag)) && ($pointerIsEqual(tf.tag, ($ptrType($String)).nil) || $pointerIsEqual(vf.tag, ($ptrType($String)).nil) || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		if (t === ($ptrType(rtype)).nil) {
			return null;
		}
		return t;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return (((((f >>> 4 >>> 0)) & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.Ptr.prototype.pointer = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			throw $panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 2) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + (new Kind(e.Kind)).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var f, k;
		f = this.$val;
		k = (new flag(f)).kind();
		if (!((k === expected))) {
			throw $panic(new ValueError.Ptr(methodName(), k));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			throw $panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			throw $panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			throw $panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			throw $panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 4) >>> 0) === 0) {
			throw $panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.Ptr.prototype.Addr = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (((v.flag & 4) >>> 0) === 0) {
			throw $panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.Ptr(v.typ.ptrTo(), v.ptr, 0, ((((v.flag & 1) >>> 0)) | 352) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.Ptr.prototype.Bool = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(1);
		if (!((((v.flag & 2) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.scalar;
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.Ptr.prototype.Bytes = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			throw $panic(new $String("reflect.Value.Bytes of non-byte slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.Ptr.prototype.runes = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			throw $panic(new $String("reflect.Value.Bytes of non-rune slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.Ptr.prototype.CanAddr = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return !((((v.flag & 4) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.Ptr.prototype.CanSet = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return ((v.flag & 5) >>> 0) === 4;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.Ptr.prototype.Call = function(in$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(19);
		(new flag(v.flag)).mustBeExported();
		return v.call("Call", in$1);
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.Ptr.prototype.CallSlice = function(in$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(19);
		(new flag(v.flag)).mustBeExported();
		return v.call("CallSlice", in$1);
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.Ptr.prototype.Close = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		chanclose(v.pointer());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	Value.Ptr.prototype.Complex = function() {
		var v, k, _ref, x$1, x$2;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 15) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return (x$1 = v.ptr.$get(), new $Complex128(x$1.real, x$1.imag));
			}
			return (x$2 = v.scalar, new $Complex128(x$2.real, x$2.imag));
		} else if (_ref === 16) {
			return v.ptr.$get();
		}
		throw $panic(new ValueError.Ptr("reflect.Value.Complex", k));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.Ptr.prototype.FieldByIndex = function(index) {
		var v, _ref, _i, i, x$1;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(25);
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			x$1 = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (i > 0) {
				if ((v.Kind() === 22) && (v.typ.Elem().Kind() === 25)) {
					if (v.IsNil()) {
						throw $panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					$copy(v, v.Elem(), Value);
				}
			}
			$copy(v, v.Field(x$1), Value);
			_i++;
		}
		return v;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.Ptr.prototype.FieldByName = function(name) {
		var v, _tuple, f, ok;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(25);
		_tuple = v.typ.FieldByName(name); f = new StructField.Ptr(); $copy(f, _tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.Ptr.prototype.FieldByNameFunc = function(match) {
		var v, _tuple, f, ok;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(25);
		_tuple = v.typ.FieldByNameFunc(match); f = new StructField.Ptr(); $copy(f, _tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.Ptr.prototype.Float = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return $coerceFloat32(v.ptr.$get());
			}
			return $coerceFloat32(v.scalar);
		} else if (_ref === 14) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return v.ptr.$get();
			}
			return v.scalar;
		}
		throw $panic(new ValueError.Ptr("reflect.Value.Float", k));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.Ptr.prototype.Int = function() {
		var v, k, p, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.ptr;
		} else {
			p = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, v);
		}
		_ref = k;
		if (_ref === 2) {
			return new $Int64(0, p.$get());
		} else if (_ref === 3) {
			return new $Int64(0, p.$get());
		} else if (_ref === 4) {
			return new $Int64(0, p.$get());
		} else if (_ref === 5) {
			return new $Int64(0, p.$get());
		} else if (_ref === 6) {
			return p.$get();
		}
		throw $panic(new ValueError.Ptr("reflect.Value.Int", k));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.Ptr.prototype.CanInterface = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.flag === 0) {
			throw $panic(new ValueError.Ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 1) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.Ptr.prototype.Interface = function() {
		var i, v;
		i = null;
		v = new Value.Ptr(); $copy(v, this, Value);
		i = valueInterface($clone(v, Value), true);
		return i;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.Ptr.prototype.InterfaceData = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(20);
		return v.ptr;
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.Ptr.prototype.IsValid = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.Ptr.prototype.Kind = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return (new flag(v.flag)).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.Ptr.prototype.MapIndex = function(key) {
		var v, tt, k, e, typ, fl, c;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(21);
		tt = v.typ.mapType;
		$copy(key, key.assignTo("reflect.Value.MapIndex", tt.key, ($ptrType($emptyInterface)).nil), Value);
		k = 0;
		if (!((((key.flag & 2) >>> 0) === 0))) {
			k = key.ptr;
		} else if (key.typ.pointers()) {
			k = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		} else {
			k = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, key);
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 1) >>> 0;
		fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		if (typ.size > 4) {
			c = unsafe_New(typ);
			memmove(c, e, typ.size);
			return new Value.Ptr(typ, c, 0, (fl | 2) >>> 0);
		} else if (typ.pointers()) {
			return new Value.Ptr(typ, e.$get(), 0, fl);
		} else {
			return new Value.Ptr(typ, 0, loadScalar(e, typ.size), fl);
		}
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.Ptr.prototype.MapKeys = function() {
		var v, tt, keyType, fl, m, mlen, it, a, i, key, c;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(21);
		tt = v.typ.mapType;
		keyType = tt.key;
		fl = (((v.flag & 1) >>> 0) | ((keyType.Kind() >>> 0) << 4 >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = ($sliceType(Value)).make(mlen, 0, function() { return new Value.Ptr(); });
		i = 0;
		i = 0;
		while (i < a.length) {
			key = mapiterkey(it);
			if (key === 0) {
				break;
			}
			if (keyType.size > 4) {
				c = unsafe_New(keyType);
				memmove(c, key, keyType.size);
				$copy(((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i]), new Value.Ptr(keyType, c, 0, (fl | 2) >>> 0), Value);
			} else if (keyType.pointers()) {
				$copy(((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i]), new Value.Ptr(keyType, key.$get(), 0, fl), Value);
			} else {
				$copy(((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i]), new Value.Ptr(keyType, 0, loadScalar(key, keyType.size), fl), Value);
			}
			mapiternext(it);
			i = i + 1 >> 0;
		}
		return $subslice(a, 0, i);
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.Ptr.prototype.Method = function(i) {
		var v, fl;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			throw $panic(new ValueError.Ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0)) || i < 0 || i >= v.typ.NumMethod()) {
			throw $panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			throw $panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 3) >>> 0;
		fl = (fl | 304) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 8) >>> 0))) >>> 0;
		return new Value.Ptr(v.typ, v.ptr, v.scalar, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.Ptr.prototype.NumMethod = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			throw $panic(new ValueError.Ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.Ptr.prototype.MethodByName = function(name) {
		var v, _tuple, m, ok;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			throw $panic(new ValueError.Ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		_tuple = v.typ.MethodByName(name); m = new Method.Ptr(); $copy(m, _tuple[0], Method); ok = _tuple[1];
		if (!ok) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.Ptr.prototype.NumField = function() {
		var v, tt;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(25);
		tt = v.typ.structType;
		return tt.fields.length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.Ptr.prototype.OverflowComplex = function(x$1) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x$1.real) || overflowFloat32(x$1.imag);
		} else if (_ref === 16) {
			return false;
		}
		throw $panic(new ValueError.Ptr("reflect.Value.OverflowComplex", k));
	};
	Value.prototype.OverflowComplex = function(x$1) { return this.$val.OverflowComplex(x$1); };
	Value.Ptr.prototype.OverflowFloat = function(x$1) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x$1);
		} else if (_ref === 14) {
			return false;
		}
		throw $panic(new ValueError.Ptr("reflect.Value.OverflowFloat", k));
	};
	Value.prototype.OverflowFloat = function(x$1) { return this.$val.OverflowFloat(x$1); };
	overflowFloat32 = function(x$1) {
		if (x$1 < 0) {
			x$1 = -x$1;
		}
		return 3.4028234663852886e+38 < x$1 && x$1 <= 1.7976931348623157e+308;
	};
	Value.Ptr.prototype.OverflowInt = function(x$1) {
		var v, k, _ref, x$2, bitSize, trunc;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$2 = v.typ.size, (((x$2 >>> 16 << 16) * 8 >>> 0) + (x$2 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightInt64(($shiftLeft64(x$1, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x$1.high === trunc.high && x$1.low === trunc.low));
		}
		throw $panic(new ValueError.Ptr("reflect.Value.OverflowInt", k));
	};
	Value.prototype.OverflowInt = function(x$1) { return this.$val.OverflowInt(x$1); };
	Value.Ptr.prototype.OverflowUint = function(x$1) {
		var v, k, _ref, x$2, bitSize, trunc;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$2 = v.typ.size, (((x$2 >>> 16 << 16) * 8 >>> 0) + (x$2 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightUint64(($shiftLeft64(x$1, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x$1.high === trunc.high && x$1.low === trunc.low));
		}
		throw $panic(new ValueError.Ptr("reflect.Value.OverflowUint", k));
	};
	Value.prototype.OverflowUint = function(x$1) { return this.$val.OverflowUint(x$1); };
	Value.Ptr.prototype.Recv = function() {
		var x$1, ok, v, _tuple;
		x$1 = new Value.Ptr();
		ok = false;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		_tuple = v.recv(false); $copy(x$1, _tuple[0], Value); ok = _tuple[1];
		return [x$1, ok];
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.Ptr.prototype.recv = function(nb) {
		var val, ok, v, tt, t, p, _tuple, selected;
		val = new Value.Ptr();
		ok = false;
		v = new Value.Ptr(); $copy(v, this, Value);
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 1) === 0) {
			throw $panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		$copy(val, new Value.Ptr(t, 0, 0, (t.Kind() >>> 0) << 4 >>> 0), Value);
		p = 0;
		if (t.size > 4) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | 2) >>> 0;
		} else if (t.pointers()) {
			p = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val);
		} else {
			p = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, val);
		}
		_tuple = chanrecv(v.typ, v.pointer(), nb, p); selected = _tuple[0]; ok = _tuple[1];
		if (!selected) {
			$copy(val, new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0), Value);
		}
		return [val, ok];
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.Ptr.prototype.Send = function(x$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		v.send($clone(x$1, Value), false);
	};
	Value.prototype.Send = function(x$1) { return this.$val.Send(x$1); };
	Value.Ptr.prototype.send = function(x$1, nb) {
		var selected, v, tt, p;
		selected = false;
		v = new Value.Ptr(); $copy(v, this, Value);
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 2) === 0) {
			throw $panic(new $String("reflect: send on recv-only channel"));
		}
		(new flag(x$1.flag)).mustBeExported();
		$copy(x$1, x$1.assignTo("reflect.Value.Send", tt.elem, ($ptrType($emptyInterface)).nil), Value);
		p = 0;
		if (!((((x$1.flag & 2) >>> 0) === 0))) {
			p = x$1.ptr;
		} else if (x$1.typ.pointers()) {
			p = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x$1);
		} else {
			p = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, x$1);
		}
		selected = chansend(v.typ, v.pointer(), p, nb);
		return selected;
	};
	Value.prototype.send = function(x$1, nb) { return this.$val.send(x$1, nb); };
	Value.Ptr.prototype.SetBool = function(x$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(1);
		v.ptr.$set(x$1);
	};
	Value.prototype.SetBool = function(x$1) { return this.$val.SetBool(x$1); };
	Value.Ptr.prototype.SetBytes = function(x$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			throw $panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		}
		v.ptr.$set(x$1);
	};
	Value.prototype.SetBytes = function(x$1) { return this.$val.SetBytes(x$1); };
	Value.Ptr.prototype.setRunes = function(x$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			throw $panic(new $String("reflect.Value.setRunes of non-rune slice"));
		}
		v.ptr.$set(x$1);
	};
	Value.prototype.setRunes = function(x$1) { return this.$val.setRunes(x$1); };
	Value.Ptr.prototype.SetComplex = function(x$1) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 15) {
			v.ptr.$set(new $Complex64(x$1.real, x$1.imag));
		} else if (_ref === 16) {
			v.ptr.$set(x$1);
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.SetComplex", k));
		}
	};
	Value.prototype.SetComplex = function(x$1) { return this.$val.SetComplex(x$1); };
	Value.Ptr.prototype.SetFloat = function(x$1) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			v.ptr.$set(x$1);
		} else if (_ref === 14) {
			v.ptr.$set(x$1);
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.SetFloat", k));
		}
	};
	Value.prototype.SetFloat = function(x$1) { return this.$val.SetFloat(x$1); };
	Value.Ptr.prototype.SetInt = function(x$1) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 2) {
			v.ptr.$set(((x$1.low + ((x$1.high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 3) {
			v.ptr.$set(((x$1.low + ((x$1.high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_ref === 4) {
			v.ptr.$set(((x$1.low + ((x$1.high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_ref === 5) {
			v.ptr.$set(((x$1.low + ((x$1.high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 6) {
			v.ptr.$set(x$1);
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.SetInt", k));
		}
	};
	Value.prototype.SetInt = function(x$1) { return this.$val.SetInt(x$1); };
	Value.Ptr.prototype.SetMapIndex = function(key, val) {
		var v, tt, k, e;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(21);
		(new flag(v.flag)).mustBeExported();
		(new flag(key.flag)).mustBeExported();
		tt = v.typ.mapType;
		$copy(key, key.assignTo("reflect.Value.SetMapIndex", tt.key, ($ptrType($emptyInterface)).nil), Value);
		k = 0;
		if (!((((key.flag & 2) >>> 0) === 0))) {
			k = key.ptr;
		} else if (key.typ.pointers()) {
			k = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		} else {
			k = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, key);
		}
		if (val.typ === ($ptrType(rtype)).nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		(new flag(val.flag)).mustBeExported();
		$copy(val, val.assignTo("reflect.Value.SetMapIndex", tt.elem, ($ptrType($emptyInterface)).nil), Value);
		e = 0;
		if (!((((val.flag & 2) >>> 0) === 0))) {
			e = val.ptr;
		} else if (val.typ.pointers()) {
			e = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val);
		} else {
			e = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, val);
		}
		mapassign(v.typ, v.pointer(), k, e);
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.Ptr.prototype.SetUint = function(x$1) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 7) {
			v.ptr.$set((x$1.low >>> 0));
		} else if (_ref === 8) {
			v.ptr.$set((x$1.low << 24 >>> 24));
		} else if (_ref === 9) {
			v.ptr.$set((x$1.low << 16 >>> 16));
		} else if (_ref === 10) {
			v.ptr.$set((x$1.low >>> 0));
		} else if (_ref === 11) {
			v.ptr.$set(x$1);
		} else if (_ref === 12) {
			v.ptr.$set((x$1.low >>> 0));
		} else {
			throw $panic(new ValueError.Ptr("reflect.Value.SetUint", k));
		}
	};
	Value.prototype.SetUint = function(x$1) { return this.$val.SetUint(x$1); };
	Value.Ptr.prototype.SetPointer = function(x$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(26);
		v.ptr.$set(x$1);
	};
	Value.prototype.SetPointer = function(x$1) { return this.$val.SetPointer(x$1); };
	Value.Ptr.prototype.SetString = function(x$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(24);
		v.ptr.$set(x$1);
	};
	Value.prototype.SetString = function(x$1) { return this.$val.SetString(x$1); };
	Value.Ptr.prototype.String = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 0) {
			return "<invalid Value>";
		} else if (_ref === 24) {
			return v.ptr.$get();
		}
		return "<" + v.typ.String() + " Value>";
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.Ptr.prototype.TryRecv = function() {
		var x$1, ok, v, _tuple;
		x$1 = new Value.Ptr();
		ok = false;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		_tuple = v.recv(true); $copy(x$1, _tuple[0], Value); ok = _tuple[1];
		return [x$1, ok];
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.Ptr.prototype.TrySend = function(x$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		return v.send($clone(x$1, Value), true);
	};
	Value.prototype.TrySend = function(x$1) { return this.$val.TrySend(x$1); };
	Value.Ptr.prototype.Type = function() {
		var v, f, i, tt, x$1, m, ut, x$2, m$1;
		v = new Value.Ptr(); $copy(v, this, Value);
		f = v.flag;
		if (f === 0) {
			throw $panic(new ValueError.Ptr("reflect.Value.Type", 0));
		}
		if (((f & 8) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if (i < 0 || i >= tt.methods.length) {
				throw $panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x$1 = tt.methods, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ($ptrType(uncommonType)).nil || i < 0 || i >= ut.methods.length) {
			throw $panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$2 = ut.methods, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.Ptr.prototype.Uint = function() {
		var v, k, p, _ref, x$1;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = (new flag(v.flag)).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.ptr;
		} else {
			p = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, v);
		}
		_ref = k;
		if (_ref === 7) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 8) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 9) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 10) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 11) {
			return p.$get();
		} else if (_ref === 12) {
			return (x$1 = p.$get(), new $Uint64(0, x$1.constructor === Number ? x$1 : 1));
		}
		throw $panic(new ValueError.Ptr("reflect.Value.Uint", k));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.Ptr.prototype.UnsafeAddr = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			throw $panic(new ValueError.Ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 4) >>> 0) === 0) {
			throw $panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	New = $pkg.New = function(typ) {
		var ptr, fl;
		if ($interfaceIsEqual(typ, null)) {
			throw $panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New((typ !== null && typ.constructor === ($ptrType(rtype)) ? typ.$val : $typeAssertionFailed(typ, ($ptrType(rtype)))));
		fl = 352;
		return new Value.Ptr(typ.common().ptrTo(), ptr, 0, fl);
	};
	Value.Ptr.prototype.assignTo = function(context, dst, target) {
		var v, fl, x$1;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (!((((v.flag & 8) >>> 0) === 0))) {
			$copy(v, makeMethodValue(context, $clone(v, Value)), Value);
		}
		if (directlyAssignable(dst, v.typ)) {
			v.typ = dst;
			fl = (v.flag & 7) >>> 0;
			fl = (fl | (((dst.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			return new Value.Ptr(dst, v.ptr, v.scalar, fl);
		} else if (implements$1(dst, v.typ)) {
			if (target === ($ptrType($emptyInterface)).nil) {
				target = $newDataPointer(null, ($ptrType($emptyInterface)));
			}
			x$1 = valueInterface($clone(v, Value), false);
			if (dst.NumMethod() === 0) {
				target.$set(x$1);
			} else {
				ifaceE2I(dst, x$1, target);
			}
			return new Value.Ptr(dst, target, 0, 322);
		}
		throw $panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.Ptr.prototype.Convert = function(t) {
		var v, op;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (!((((v.flag & 8) >>> 0) === 0))) {
			$copy(v, makeMethodValue("Convert", $clone(v, Value)), Value);
		}
		op = convertOp(t.common(), v.typ);
		if (op === $throwNilPointerError) {
			throw $panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + t.String()));
		}
		return op($clone(v, Value), t);
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6;
		_ref = src.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
		} else if (_ref === 13 || _ref === 14) {
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
		} else if (_ref === 15 || _ref === 16) {
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
		} else if (_ref === 24) {
			if ((dst.Kind() === 23) && dst.Elem().PkgPath() === "") {
				_ref$5 = dst.Elem().Kind();
				if (_ref$5 === 8) {
					return cvtStringBytes;
				} else if (_ref$5 === 5) {
					return cvtStringRunes;
				}
			}
		} else if (_ref === 23) {
			if ((dst.Kind() === 24) && src.Elem().PkgPath() === "") {
				_ref$6 = src.Elem().Kind();
				if (_ref$6 === 8) {
					return cvtBytesString;
				} else if (_ref$6 === 5) {
					return cvtRunesString;
				}
			}
		}
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if ((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "" && haveIdenticalUnderlyingType(dst.Elem().common(), src.Elem().common())) {
			return cvtDirect;
		}
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
	};
	makeFloat = function(f, v, t) {
		var typ, ptr, s, _ref;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			ptr.$set(v);
			return new Value.Ptr(typ, ptr, 0, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		s = 0;
		_ref = typ.size;
		if (_ref === 4) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set(v);
		} else if (_ref === 8) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set(v);
		}
		return new Value.Ptr(typ, 0, s, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	makeComplex = function(f, v, t) {
		var typ, ptr, _ref, s;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			_ref = typ.size;
			if (_ref === 8) {
				ptr.$set(new $Complex64(v.real, v.imag));
			} else if (_ref === 16) {
				ptr.$set(v);
			}
			return new Value.Ptr(typ, ptr, 0, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		s = 0;
		new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set(new $Complex64(v.real, v.imag));
		return new Value.Ptr(typ, 0, s, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	makeString = function(f, v, t) {
		var ret;
		ret = new Value.Ptr(); $copy(ret, New(t).Elem(), Value);
		ret.SetString(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return ret;
	};
	makeBytes = function(f, v, t) {
		var ret;
		ret = new Value.Ptr(); $copy(ret, New(t).Elem(), Value);
		ret.SetBytes(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return ret;
	};
	makeRunes = function(f, v, t) {
		var ret;
		ret = new Value.Ptr(); $copy(ret, New(t).Elem(), Value);
		ret.setRunes(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return ret;
	};
	cvtInt = function(v, t) {
		var x$1;
		return makeInt((v.flag & 1) >>> 0, (x$1 = v.Int(), new $Uint64(x$1.high, x$1.low)), t);
	};
	cvtUint = function(v, t) {
		return makeInt((v.flag & 1) >>> 0, v.Uint(), t);
	};
	cvtFloatInt = function(v, t) {
		var x$1;
		return makeInt((v.flag & 1) >>> 0, (x$1 = new $Int64(0, v.Float()), new $Uint64(x$1.high, x$1.low)), t);
	};
	cvtFloatUint = function(v, t) {
		return makeInt((v.flag & 1) >>> 0, new $Uint64(0, v.Float()), t);
	};
	cvtIntFloat = function(v, t) {
		return makeFloat((v.flag & 1) >>> 0, $flatten64(v.Int()), t);
	};
	cvtUintFloat = function(v, t) {
		return makeFloat((v.flag & 1) >>> 0, $flatten64(v.Uint()), t);
	};
	cvtFloat = function(v, t) {
		return makeFloat((v.flag & 1) >>> 0, v.Float(), t);
	};
	cvtComplex = function(v, t) {
		return makeComplex((v.flag & 1) >>> 0, v.Complex(), t);
	};
	cvtIntString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $encodeRune(v.Int().low), t);
	};
	cvtUintString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $encodeRune(v.Uint().low), t);
	};
	cvtBytesString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $bytesToString(v.Bytes()), t);
	};
	cvtStringBytes = function(v, t) {
		return makeBytes((v.flag & 1) >>> 0, new ($sliceType($Uint8))($stringToBytes(v.String())), t);
	};
	cvtRunesString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $runesToString(v.runes()), t);
	};
	cvtStringRunes = function(v, t) {
		return makeRunes((v.flag & 1) >>> 0, new ($sliceType($Int32))($stringToRunes(v.String())), t);
	};
	cvtT2I = function(v, typ) {
		var target, x$1;
		target = $newDataPointer(null, ($ptrType($emptyInterface)));
		x$1 = valueInterface($clone(v, Value), false);
		if (typ.NumMethod() === 0) {
			target.$set(x$1);
		} else {
			ifaceE2I((typ !== null && typ.constructor === ($ptrType(rtype)) ? typ.$val : $typeAssertionFailed(typ, ($ptrType(rtype)))), x$1, target);
		}
		return new Value.Ptr(typ.common(), target, 0, (((((v.flag & 1) >>> 0) | 2) >>> 0) | 320) >>> 0);
	};
	cvtI2I = function(v, typ) {
		var ret;
		if (v.IsNil()) {
			ret = new Value.Ptr(); $copy(ret, Zero(typ), Value);
			ret.flag = (ret.flag | (((v.flag & 1) >>> 0))) >>> 0;
			return ret;
		}
		return cvtT2I($clone(v.Elem(), Value), typ);
	};
	call = function() {
		throw $panic("Native function not implemented: call");
	};
	$pkg.$init = function() {
		mapIter.init([["t", "t", "reflect", Type, ""], ["m", "m", "reflect", js.Object, ""], ["keys", "keys", "reflect", js.Object, ""], ["i", "i", "reflect", $Int, ""]]);
		Type.init([["Align", "Align", "", [], [$Int], false], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false], ["Bits", "Bits", "", [], [$Int], false], ["ChanDir", "ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false], ["Elem", "Elem", "", [], [Type], false], ["Field", "Field", "", [$Int], [StructField], false], ["FieldAlign", "FieldAlign", "", [], [$Int], false], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false], ["Implements", "Implements", "", [Type], [$Bool], false], ["In", "In", "", [$Int], [Type], false], ["IsVariadic", "IsVariadic", "", [], [$Bool], false], ["Key", "Key", "", [], [Type], false], ["Kind", "Kind", "", [], [Kind], false], ["Len", "Len", "", [], [$Int], false], ["Method", "Method", "", [$Int], [Method], false], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false], ["Name", "Name", "", [], [$String], false], ["NumField", "NumField", "", [], [$Int], false], ["NumIn", "NumIn", "", [], [$Int], false], ["NumMethod", "NumMethod", "", [], [$Int], false], ["NumOut", "NumOut", "", [], [$Int], false], ["Out", "Out", "", [$Int], [Type], false], ["PkgPath", "PkgPath", "", [], [$String], false], ["Size", "Size", "", [], [$Uintptr], false], ["String", "String", "", [], [$String], false], ["common", "common", "reflect", [], [($ptrType(rtype))], false], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false]]);
		Kind.methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(Kind)).methods = [["String", "String", "", [], [$String], false, -1]];
		rtype.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 9]];
		($ptrType(rtype)).methods = [["Align", "Align", "", [], [$Int], false, -1], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, -1], ["Bits", "Bits", "", [], [$Int], false, -1], ["ChanDir", "ChanDir", "", [], [ChanDir], false, -1], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, -1], ["Elem", "Elem", "", [], [Type], false, -1], ["Field", "Field", "", [$Int], [StructField], false, -1], ["FieldAlign", "FieldAlign", "", [], [$Int], false, -1], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, -1], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, -1], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, -1], ["Implements", "Implements", "", [Type], [$Bool], false, -1], ["In", "In", "", [$Int], [Type], false, -1], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, -1], ["Key", "Key", "", [], [Type], false, -1], ["Kind", "Kind", "", [], [Kind], false, -1], ["Len", "Len", "", [], [$Int], false, -1], ["Method", "Method", "", [$Int], [Method], false, -1], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, -1], ["Name", "Name", "", [], [$String], false, -1], ["NumField", "NumField", "", [], [$Int], false, -1], ["NumIn", "NumIn", "", [], [$Int], false, -1], ["NumMethod", "NumMethod", "", [], [$Int], false, -1], ["NumOut", "NumOut", "", [], [$Int], false, -1], ["Out", "Out", "", [$Int], [Type], false, -1], ["PkgPath", "PkgPath", "", [], [$String], false, -1], ["Size", "Size", "", [], [$Uintptr], false, -1], ["String", "String", "", [], [$String], false, -1], ["common", "common", "reflect", [], [($ptrType(rtype))], false, -1], ["pointers", "pointers", "reflect", [], [$Bool], false, -1], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, -1], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 9]];
		rtype.init([["size", "size", "reflect", $Uintptr, ""], ["hash", "hash", "reflect", $Uint32, ""], ["_$2", "_", "reflect", $Uint8, ""], ["align", "align", "reflect", $Uint8, ""], ["fieldAlign", "fieldAlign", "reflect", $Uint8, ""], ["kind", "kind", "reflect", $Uint8, ""], ["alg", "alg", "reflect", ($ptrType($Uintptr)), ""], ["gc", "gc", "reflect", $UnsafePointer, ""], ["string", "string", "reflect", ($ptrType($String)), ""], ["uncommonType", "", "reflect", ($ptrType(uncommonType)), ""], ["ptrToThis", "ptrToThis", "reflect", ($ptrType(rtype)), ""], ["zero", "zero", "reflect", $UnsafePointer, ""]]);
		method.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["mtyp", "mtyp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["ifn", "ifn", "reflect", $UnsafePointer, ""], ["tfn", "tfn", "reflect", $UnsafePointer, ""]]);
		($ptrType(uncommonType)).methods = [["Method", "Method", "", [$Int], [Method], false, -1], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, -1], ["Name", "Name", "", [], [$String], false, -1], ["NumMethod", "NumMethod", "", [], [$Int], false, -1], ["PkgPath", "PkgPath", "", [], [$String], false, -1], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, -1]];
		uncommonType.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["methods", "methods", "reflect", ($sliceType(method)), ""]]);
		ChanDir.methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(ChanDir)).methods = [["String", "String", "", [], [$String], false, -1]];
		arrayType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(arrayType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, 0], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, 0], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, 0], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, 0], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, 0], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, 0], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		arrayType.init([["rtype", "", "reflect", rtype, "reflect:\"array\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""], ["slice", "slice", "reflect", ($ptrType(rtype)), ""], ["len", "len", "reflect", $Uintptr, ""]]);
		chanType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(chanType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, 0], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, 0], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, 0], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, 0], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, 0], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, 0], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		chanType.init([["rtype", "", "reflect", rtype, "reflect:\"chan\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""], ["dir", "dir", "reflect", $Uintptr, ""]]);
		funcType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(funcType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, 0], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, 0], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, 0], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, 0], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, 0], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, 0], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		funcType.init([["rtype", "", "reflect", rtype, "reflect:\"func\""], ["dotdotdot", "dotdotdot", "reflect", $Bool, ""], ["in$2", "in", "reflect", ($sliceType(($ptrType(rtype)))), ""], ["out", "out", "reflect", ($sliceType(($ptrType(rtype)))), ""]]);
		imethod.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""]]);
		interfaceType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(interfaceType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, 0], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, 0], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, 0], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, 0], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, -1], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, -1], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, -1], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		interfaceType.init([["rtype", "", "reflect", rtype, "reflect:\"interface\""], ["methods", "methods", "reflect", ($sliceType(imethod)), ""]]);
		mapType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(mapType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, 0], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, 0], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, 0], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, 0], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, 0], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, 0], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		mapType.init([["rtype", "", "reflect", rtype, "reflect:\"map\""], ["key", "key", "reflect", ($ptrType(rtype)), ""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""], ["bucket", "bucket", "reflect", ($ptrType(rtype)), ""], ["hmap", "hmap", "reflect", ($ptrType(rtype)), ""]]);
		ptrType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(ptrType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, 0], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, 0], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, 0], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, 0], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, 0], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, 0], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		ptrType.init([["rtype", "", "reflect", rtype, "reflect:\"ptr\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""]]);
		sliceType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(sliceType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, 0], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, 0], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, 0], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, 0], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, 0], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, 0], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		sliceType.init([["rtype", "", "reflect", rtype, "reflect:\"slice\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""]]);
		structField.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["tag", "tag", "reflect", ($ptrType($String)), ""], ["offset", "offset", "reflect", $Uintptr, ""]]);
		structType.methods = [["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		($ptrType(structType)).methods = [["Align", "Align", "", [], [$Int], false, 0], ["AssignableTo", "AssignableTo", "", [Type], [$Bool], false, 0], ["Bits", "Bits", "", [], [$Int], false, 0], ["ChanDir", "ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "ConvertibleTo", "", [Type], [$Bool], false, 0], ["Elem", "Elem", "", [], [Type], false, 0], ["Field", "Field", "", [$Int], [StructField], false, -1], ["FieldAlign", "FieldAlign", "", [], [$Int], false, 0], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [StructField], false, -1], ["FieldByName", "FieldByName", "", [$String], [StructField, $Bool], false, -1], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [StructField, $Bool], false, -1], ["Implements", "Implements", "", [Type], [$Bool], false, 0], ["In", "In", "", [$Int], [Type], false, 0], ["IsVariadic", "IsVariadic", "", [], [$Bool], false, 0], ["Key", "Key", "", [], [Type], false, 0], ["Kind", "Kind", "", [], [Kind], false, 0], ["Len", "Len", "", [], [$Int], false, 0], ["Method", "Method", "", [$Int], [Method], false, 0], ["MethodByName", "MethodByName", "", [$String], [Method, $Bool], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["NumField", "NumField", "", [], [$Int], false, 0], ["NumIn", "NumIn", "", [], [$Int], false, 0], ["NumMethod", "NumMethod", "", [], [$Int], false, 0], ["NumOut", "NumOut", "", [], [$Int], false, 0], ["Out", "Out", "", [$Int], [Type], false, 0], ["PkgPath", "PkgPath", "", [], [$String], false, 0], ["Size", "Size", "", [], [$Uintptr], false, 0], ["String", "String", "", [], [$String], false, 0], ["common", "common", "reflect", [], [($ptrType(rtype))], false, 0], ["pointers", "pointers", "reflect", [], [$Bool], false, 0], ["ptrTo", "ptrTo", "reflect", [], [($ptrType(rtype))], false, 0], ["uncommon", "uncommon", "reflect", [], [($ptrType(uncommonType))], false, 0]];
		structType.init([["rtype", "", "reflect", rtype, "reflect:\"struct\""], ["fields", "fields", "reflect", ($sliceType(structField)), ""]]);
		Method.init([["Name", "Name", "", $String, ""], ["PkgPath", "PkgPath", "", $String, ""], ["Type", "Type", "", Type, ""], ["Func", "Func", "", Value, ""], ["Index", "Index", "", $Int, ""]]);
		StructField.init([["Name", "Name", "", $String, ""], ["PkgPath", "PkgPath", "", $String, ""], ["Type", "Type", "", Type, ""], ["Tag", "Tag", "", StructTag, ""], ["Offset", "Offset", "", $Uintptr, ""], ["Index", "Index", "", ($sliceType($Int)), ""], ["Anonymous", "Anonymous", "", $Bool, ""]]);
		StructTag.methods = [["Get", "Get", "", [$String], [$String], false, -1]];
		($ptrType(StructTag)).methods = [["Get", "Get", "", [$String], [$String], false, -1]];
		fieldScan.init([["typ", "typ", "reflect", ($ptrType(structType)), ""], ["index", "index", "reflect", ($sliceType($Int)), ""]]);
		Value.methods = [["Addr", "Addr", "", [], [Value], false, -1], ["Bool", "Bool", "", [], [$Bool], false, -1], ["Bytes", "Bytes", "", [], [($sliceType($Uint8))], false, -1], ["Call", "Call", "", [($sliceType(Value))], [($sliceType(Value))], false, -1], ["CallSlice", "CallSlice", "", [($sliceType(Value))], [($sliceType(Value))], false, -1], ["CanAddr", "CanAddr", "", [], [$Bool], false, -1], ["CanInterface", "CanInterface", "", [], [$Bool], false, -1], ["CanSet", "CanSet", "", [], [$Bool], false, -1], ["Cap", "Cap", "", [], [$Int], false, -1], ["Close", "Close", "", [], [], false, -1], ["Complex", "Complex", "", [], [$Complex128], false, -1], ["Convert", "Convert", "", [Type], [Value], false, -1], ["Elem", "Elem", "", [], [Value], false, -1], ["Field", "Field", "", [$Int], [Value], false, -1], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [Value], false, -1], ["FieldByName", "FieldByName", "", [$String], [Value], false, -1], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [Value], false, -1], ["Float", "Float", "", [], [$Float64], false, -1], ["Index", "Index", "", [$Int], [Value], false, -1], ["Int", "Int", "", [], [$Int64], false, -1], ["Interface", "Interface", "", [], [$emptyInterface], false, -1], ["InterfaceData", "InterfaceData", "", [], [($arrayType($Uintptr, 2))], false, -1], ["IsNil", "IsNil", "", [], [$Bool], false, -1], ["IsValid", "IsValid", "", [], [$Bool], false, -1], ["Kind", "Kind", "", [], [Kind], false, -1], ["Len", "Len", "", [], [$Int], false, -1], ["MapIndex", "MapIndex", "", [Value], [Value], false, -1], ["MapKeys", "MapKeys", "", [], [($sliceType(Value))], false, -1], ["Method", "Method", "", [$Int], [Value], false, -1], ["MethodByName", "MethodByName", "", [$String], [Value], false, -1], ["NumField", "NumField", "", [], [$Int], false, -1], ["NumMethod", "NumMethod", "", [], [$Int], false, -1], ["OverflowComplex", "OverflowComplex", "", [$Complex128], [$Bool], false, -1], ["OverflowFloat", "OverflowFloat", "", [$Float64], [$Bool], false, -1], ["OverflowInt", "OverflowInt", "", [$Int64], [$Bool], false, -1], ["OverflowUint", "OverflowUint", "", [$Uint64], [$Bool], false, -1], ["Pointer", "Pointer", "", [], [$Uintptr], false, -1], ["Recv", "Recv", "", [], [Value, $Bool], false, -1], ["Send", "Send", "", [Value], [], false, -1], ["Set", "Set", "", [Value], [], false, -1], ["SetBool", "SetBool", "", [$Bool], [], false, -1], ["SetBytes", "SetBytes", "", [($sliceType($Uint8))], [], false, -1], ["SetCap", "SetCap", "", [$Int], [], false, -1], ["SetComplex", "SetComplex", "", [$Complex128], [], false, -1], ["SetFloat", "SetFloat", "", [$Float64], [], false, -1], ["SetInt", "SetInt", "", [$Int64], [], false, -1], ["SetLen", "SetLen", "", [$Int], [], false, -1], ["SetMapIndex", "SetMapIndex", "", [Value, Value], [], false, -1], ["SetPointer", "SetPointer", "", [$UnsafePointer], [], false, -1], ["SetString", "SetString", "", [$String], [], false, -1], ["SetUint", "SetUint", "", [$Uint64], [], false, -1], ["Slice", "Slice", "", [$Int, $Int], [Value], false, -1], ["Slice3", "Slice3", "", [$Int, $Int, $Int], [Value], false, -1], ["String", "String", "", [], [$String], false, -1], ["TryRecv", "TryRecv", "", [], [Value, $Bool], false, -1], ["TrySend", "TrySend", "", [Value], [$Bool], false, -1], ["Type", "Type", "", [], [Type], false, -1], ["Uint", "Uint", "", [], [$Uint64], false, -1], ["UnsafeAddr", "UnsafeAddr", "", [], [$Uintptr], false, -1], ["assignTo", "assignTo", "reflect", [$String, ($ptrType(rtype)), ($ptrType($emptyInterface))], [Value], false, -1], ["call", "call", "reflect", [$String, ($sliceType(Value))], [($sliceType(Value))], false, -1], ["iword", "iword", "reflect", [], [iword], false, -1], ["kind", "kind", "reflect", [], [Kind], false, 3], ["mustBe", "mustBe", "reflect", [Kind], [], false, 3], ["mustBeAssignable", "mustBeAssignable", "reflect", [], [], false, 3], ["mustBeExported", "mustBeExported", "reflect", [], [], false, 3], ["pointer", "pointer", "reflect", [], [$UnsafePointer], false, -1], ["recv", "recv", "reflect", [$Bool], [Value, $Bool], false, -1], ["runes", "runes", "reflect", [], [($sliceType($Int32))], false, -1], ["send", "send", "reflect", [Value, $Bool], [$Bool], false, -1], ["setRunes", "setRunes", "reflect", [($sliceType($Int32))], [], false, -1]];
		($ptrType(Value)).methods = [["Addr", "Addr", "", [], [Value], false, -1], ["Bool", "Bool", "", [], [$Bool], false, -1], ["Bytes", "Bytes", "", [], [($sliceType($Uint8))], false, -1], ["Call", "Call", "", [($sliceType(Value))], [($sliceType(Value))], false, -1], ["CallSlice", "CallSlice", "", [($sliceType(Value))], [($sliceType(Value))], false, -1], ["CanAddr", "CanAddr", "", [], [$Bool], false, -1], ["CanInterface", "CanInterface", "", [], [$Bool], false, -1], ["CanSet", "CanSet", "", [], [$Bool], false, -1], ["Cap", "Cap", "", [], [$Int], false, -1], ["Close", "Close", "", [], [], false, -1], ["Complex", "Complex", "", [], [$Complex128], false, -1], ["Convert", "Convert", "", [Type], [Value], false, -1], ["Elem", "Elem", "", [], [Value], false, -1], ["Field", "Field", "", [$Int], [Value], false, -1], ["FieldByIndex", "FieldByIndex", "", [($sliceType($Int))], [Value], false, -1], ["FieldByName", "FieldByName", "", [$String], [Value], false, -1], ["FieldByNameFunc", "FieldByNameFunc", "", [($funcType([$String], [$Bool], false))], [Value], false, -1], ["Float", "Float", "", [], [$Float64], false, -1], ["Index", "Index", "", [$Int], [Value], false, -1], ["Int", "Int", "", [], [$Int64], false, -1], ["Interface", "Interface", "", [], [$emptyInterface], false, -1], ["InterfaceData", "InterfaceData", "", [], [($arrayType($Uintptr, 2))], false, -1], ["IsNil", "IsNil", "", [], [$Bool], false, -1], ["IsValid", "IsValid", "", [], [$Bool], false, -1], ["Kind", "Kind", "", [], [Kind], false, -1], ["Len", "Len", "", [], [$Int], false, -1], ["MapIndex", "MapIndex", "", [Value], [Value], false, -1], ["MapKeys", "MapKeys", "", [], [($sliceType(Value))], false, -1], ["Method", "Method", "", [$Int], [Value], false, -1], ["MethodByName", "MethodByName", "", [$String], [Value], false, -1], ["NumField", "NumField", "", [], [$Int], false, -1], ["NumMethod", "NumMethod", "", [], [$Int], false, -1], ["OverflowComplex", "OverflowComplex", "", [$Complex128], [$Bool], false, -1], ["OverflowFloat", "OverflowFloat", "", [$Float64], [$Bool], false, -1], ["OverflowInt", "OverflowInt", "", [$Int64], [$Bool], false, -1], ["OverflowUint", "OverflowUint", "", [$Uint64], [$Bool], false, -1], ["Pointer", "Pointer", "", [], [$Uintptr], false, -1], ["Recv", "Recv", "", [], [Value, $Bool], false, -1], ["Send", "Send", "", [Value], [], false, -1], ["Set", "Set", "", [Value], [], false, -1], ["SetBool", "SetBool", "", [$Bool], [], false, -1], ["SetBytes", "SetBytes", "", [($sliceType($Uint8))], [], false, -1], ["SetCap", "SetCap", "", [$Int], [], false, -1], ["SetComplex", "SetComplex", "", [$Complex128], [], false, -1], ["SetFloat", "SetFloat", "", [$Float64], [], false, -1], ["SetInt", "SetInt", "", [$Int64], [], false, -1], ["SetLen", "SetLen", "", [$Int], [], false, -1], ["SetMapIndex", "SetMapIndex", "", [Value, Value], [], false, -1], ["SetPointer", "SetPointer", "", [$UnsafePointer], [], false, -1], ["SetString", "SetString", "", [$String], [], false, -1], ["SetUint", "SetUint", "", [$Uint64], [], false, -1], ["Slice", "Slice", "", [$Int, $Int], [Value], false, -1], ["Slice3", "Slice3", "", [$Int, $Int, $Int], [Value], false, -1], ["String", "String", "", [], [$String], false, -1], ["TryRecv", "TryRecv", "", [], [Value, $Bool], false, -1], ["TrySend", "TrySend", "", [Value], [$Bool], false, -1], ["Type", "Type", "", [], [Type], false, -1], ["Uint", "Uint", "", [], [$Uint64], false, -1], ["UnsafeAddr", "UnsafeAddr", "", [], [$Uintptr], false, -1], ["assignTo", "assignTo", "reflect", [$String, ($ptrType(rtype)), ($ptrType($emptyInterface))], [Value], false, -1], ["call", "call", "reflect", [$String, ($sliceType(Value))], [($sliceType(Value))], false, -1], ["iword", "iword", "reflect", [], [iword], false, -1], ["kind", "kind", "reflect", [], [Kind], false, 3], ["mustBe", "mustBe", "reflect", [Kind], [], false, 3], ["mustBeAssignable", "mustBeAssignable", "reflect", [], [], false, 3], ["mustBeExported", "mustBeExported", "reflect", [], [], false, 3], ["pointer", "pointer", "reflect", [], [$UnsafePointer], false, -1], ["recv", "recv", "reflect", [$Bool], [Value, $Bool], false, -1], ["runes", "runes", "reflect", [], [($sliceType($Int32))], false, -1], ["send", "send", "reflect", [Value, $Bool], [$Bool], false, -1], ["setRunes", "setRunes", "reflect", [($sliceType($Int32))], [], false, -1]];
		Value.init([["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["ptr", "ptr", "reflect", $UnsafePointer, ""], ["scalar", "scalar", "reflect", $Uintptr, ""], ["flag", "", "reflect", flag, ""]]);
		flag.methods = [["kind", "kind", "reflect", [], [Kind], false, -1], ["mustBe", "mustBe", "reflect", [Kind], [], false, -1], ["mustBeAssignable", "mustBeAssignable", "reflect", [], [], false, -1], ["mustBeExported", "mustBeExported", "reflect", [], [], false, -1]];
		($ptrType(flag)).methods = [["kind", "kind", "reflect", [], [Kind], false, -1], ["mustBe", "mustBe", "reflect", [Kind], [], false, -1], ["mustBeAssignable", "mustBeAssignable", "reflect", [], [], false, -1], ["mustBeExported", "mustBeExported", "reflect", [], [], false, -1]];
		($ptrType(ValueError)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		ValueError.init([["Method", "Method", "", $String, ""], ["Kind", "Kind", "", Kind, ""]]);
		nonEmptyInterface.init([["itab", "itab", "reflect", ($ptrType(($structType([["ityp", "ityp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["link", "link", "reflect", $UnsafePointer, ""], ["bad", "bad", "reflect", $Int32, ""], ["unused", "unused", "reflect", $Int32, ""], ["fun", "fun", "reflect", ($arrayType($UnsafePointer, 100000)), ""]])))), ""], ["word", "word", "reflect", iword, ""]]);
		initialized = false;
		kindNames = new ($sliceType($String))(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		var x;
		uint8Type = (x = TypeOf(new $Uint8(0)), (x !== null && x.constructor === ($ptrType(rtype)) ? x.$val : $typeAssertionFailed(x, ($ptrType(rtype)))));
		init();
	};
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, math = $packages["math"], strconv = $packages["strconv"], utf8 = $packages["unicode/utf8"], errors = $packages["errors"], io = $packages["io"], os = $packages["os"], reflect = $packages["reflect"], sync = $packages["sync"], fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, scanError, ss, ssave, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, space, ssFree, complexError, boolError, init, doPrec, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Fprintln, Println, Sprintln, getField, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	fmt = $pkg.fmt = $newType(0, "Struct", "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_) {
		this.$val = this;
		this.intbuf = intbuf_ !== undefined ? intbuf_ : ($arrayType($Uint8, 65)).zero();
		this.buf = buf_ !== undefined ? buf_ : ($ptrType(buffer)).nil;
		this.wid = wid_ !== undefined ? wid_ : 0;
		this.prec = prec_ !== undefined ? prec_ : 0;
		this.widPresent = widPresent_ !== undefined ? widPresent_ : false;
		this.precPresent = precPresent_ !== undefined ? precPresent_ : false;
		this.minus = minus_ !== undefined ? minus_ : false;
		this.plus = plus_ !== undefined ? plus_ : false;
		this.sharp = sharp_ !== undefined ? sharp_ : false;
		this.space = space_ !== undefined ? space_ : false;
		this.unicode = unicode_ !== undefined ? unicode_ : false;
		this.uniQuote = uniQuote_ !== undefined ? uniQuote_ : false;
		this.zero = zero_ !== undefined ? zero_ : false;
	});
	State = $pkg.State = $newType(8, "Interface", "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, "Interface", "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, "Interface", "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, "Interface", "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, "Slice", "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, "Struct", "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		this.n = n_ !== undefined ? n_ : 0;
		this.panicking = panicking_ !== undefined ? panicking_ : false;
		this.erroring = erroring_ !== undefined ? erroring_ : false;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.arg = arg_ !== undefined ? arg_ : null;
		this.value = value_ !== undefined ? value_ : new reflect.Value.Ptr();
		this.reordered = reordered_ !== undefined ? reordered_ : false;
		this.goodArgNum = goodArgNum_ !== undefined ? goodArgNum_ : false;
		this.runeBuf = runeBuf_ !== undefined ? runeBuf_ : ($arrayType($Uint8, 4)).zero();
		this.fmt = fmt_ !== undefined ? fmt_ : new fmt.Ptr();
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, "Interface", "fmt.runeUnreader", "runeUnreader", "fmt", null);
	scanError = $pkg.scanError = $newType(0, "Struct", "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : null;
	});
	ss = $pkg.ss = $newType(0, "Struct", "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		this.rr = rr_ !== undefined ? rr_ : null;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.peekRune = peekRune_ !== undefined ? peekRune_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
		this.count = count_ !== undefined ? count_ : 0;
		this.atEOF = atEOF_ !== undefined ? atEOF_ : false;
		this.ssave = ssave_ !== undefined ? ssave_ : new ssave.Ptr();
	});
	ssave = $pkg.ssave = $newType(0, "Struct", "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		this.validSave = validSave_ !== undefined ? validSave_ : false;
		this.nlIsEnd = nlIsEnd_ !== undefined ? nlIsEnd_ : false;
		this.nlIsSpace = nlIsSpace_ !== undefined ? nlIsSpace_ : false;
		this.argLimit = argLimit_ !== undefined ? argLimit_ : 0;
		this.limit = limit_ !== undefined ? limit_ : 0;
		this.maxWid = maxWid_ !== undefined ? maxWid_ : 0;
	});
	init = function() {
		var i;
		i = 0;
		while (i < 65) {
			(i < 0 || i >= padZeroBytes.length) ? $throwRuntimeError("index out of range") : padZeroBytes.array[padZeroBytes.offset + i] = 48;
			(i < 0 || i >= padSpaceBytes.length) ? $throwRuntimeError("index out of range") : padSpaceBytes.array[padSpaceBytes.offset + i] = 32;
			i = i + 1 >> 0;
		}
	};
	fmt.Ptr.prototype.clearflags = function() {
		var f;
		f = this;
		f.wid = 0;
		f.widPresent = false;
		f.prec = 0;
		f.precPresent = false;
		f.minus = false;
		f.plus = false;
		f.sharp = false;
		f.space = false;
		f.unicode = false;
		f.uniQuote = false;
		f.zero = false;
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.Ptr.prototype.init = function(buf) {
		var f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.Ptr.prototype.computePadding = function(width) {
		var padding, leftWidth, rightWidth, f, left, w, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		padding = ($sliceType($Uint8)).nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.zero) {
				_tmp = padZeroBytes; _tmp$1 = w; _tmp$2 = 0; padding = _tmp; leftWidth = _tmp$1; rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes; _tmp$4 = w; _tmp$5 = 0; padding = _tmp$3; leftWidth = _tmp$4; rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes; _tmp$7 = 0; _tmp$8 = w; padding = _tmp$6; leftWidth = _tmp$7; rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.Ptr.prototype.writePadding = function(n, padding) {
		var f, m;
		f = this;
		while (n > 0) {
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.Ptr.prototype.pad = function(b) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(b.length); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.Ptr.prototype.padString = function(s) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.Ptr.prototype.fmt_boolean = function(v) {
		var f;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.Ptr.prototype.integer = function(a, base, signedness, digits) {
		var f, buf, width, negative, prec, i, ua, _ref, runeWidth, width$1, j;
		f = this;
		if (f.precPresent && (f.prec === 0) && (a.high === 0 && a.low === 0)) {
			return;
		}
		buf = $subslice(new ($sliceType($Uint8))(f.intbuf), 0);
		if (f.widPresent) {
			width = f.wid;
			if ((base.high === 0 && base.low === 16) && f.sharp) {
				width = width + 2 >> 0;
			}
			if (width > 65) {
				buf = ($sliceType($Uint8)).make(width, 0, function() { return 0; });
			}
		}
		negative = signedness === true && (a.high < 0 || (a.high === 0 && a.low < 0));
		if (negative) {
			a = new $Int64(-a.high, -a.low);
		}
		prec = 0;
		if (f.precPresent) {
			prec = f.prec;
			f.zero = false;
		} else if (f.zero && f.widPresent && !f.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.plus || f.space) {
				prec = prec - 1 >> 0;
			}
		}
		i = buf.length;
		ua = new $Uint64(a.high, a.low);
		while ((ua.high > base.high || (ua.high === base.high && ua.low >= base.low))) {
			i = i - 1 >> 0;
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = digits.charCodeAt($flatten64($div64(ua, base, true)));
			ua = $div64(ua, (base), false);
		}
		i = i - 1 >> 0;
		(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = digits.charCodeAt($flatten64(ua));
		while (i > 0 && prec > (buf.length - i >> 0)) {
			i = i - 1 >> 0;
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 48;
		}
		if (f.sharp) {
			_ref = base;
			if ((_ref.high === 0 && _ref.low === 8)) {
				if (!((((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i]) === 48))) {
					i = i - 1 >> 0;
					(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 48;
				}
			} else if ((_ref.high === 0 && _ref.low === 16)) {
				i = i - 1 >> 0;
				(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24;
				i = i - 1 >> 0;
				(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 48;
			}
		}
		if (f.unicode) {
			i = i - 1 >> 0;
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 43;
			i = i - 1 >> 0;
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 85;
		}
		if (negative) {
			i = i - 1 >> 0;
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 45;
		} else if (f.plus) {
			i = i - 1 >> 0;
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 43;
		} else if (f.space) {
			i = i - 1 >> 0;
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + i] = 32;
		}
		if (f.unicode && f.uniQuote && (a.high > 0 || (a.high === 0 && a.low >= 0)) && (a.high < 0 || (a.high === 0 && a.low <= 1114111)) && strconv.IsPrint(((a.low + ((a.high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.low + ((a.high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.length - width$1 >> 0;
			(j < 0 || j >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + j] = 32;
			j = j + 1 >> 0;
			(j < 0 || j >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + j] = 39;
			j = j + 1 >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.low + ((a.high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			(j < 0 || j >= buf.length) ? $throwRuntimeError("index out of range") : buf.array[buf.offset + j] = 39;
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.Ptr.prototype.truncate = function(s) {
		var f, n, _ref, _i, _rune, i;
		f = this;
		if (f.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - 1 >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.Ptr.prototype.fmt_s = function(s) {
		var f;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.Ptr.prototype.fmt_sbx = function(s, b, digits) {
		var f, n, x, buf, i, c;
		f = this;
		n = b.length;
		if (b === ($sliceType($Uint8)).nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = ($sliceType($Uint8)).nil;
		i = 0;
		while (i < n) {
			if (i > 0 && f.space) {
				buf = $append(buf, 32);
			}
			if (f.sharp) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === ($sliceType($Uint8)).nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + 1 >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.Ptr.prototype.fmt_sx = function(s, digits) {
		var f;
		f = this;
		f.fmt_sbx(s, ($sliceType($Uint8)).nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.Ptr.prototype.fmt_bx = function(b, digits) {
		var f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.Ptr.prototype.fmt_q = function(s) {
		var f, quoted;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.Ptr.prototype.fmt_qc = function(c) {
		var f, quoted;
		f = this;
		quoted = ($sliceType($Uint8)).nil;
		if (f.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new ($sliceType($Uint8))(f.intbuf), 0, 0), ((c.low + ((c.high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new ($sliceType($Uint8))(f.intbuf), 0, 0), ((c.low + ((c.high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		if (f.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.Ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var f, num;
		var $deferred = [];
		try {
			f = this;
			num = strconv.AppendFloat($subslice(new ($sliceType($Uint8))(f.intbuf), 0, 1), v, verb, prec, n);
			if ((((1 < 0 || 1 >= num.length) ? $throwRuntimeError("index out of range") : num.array[num.offset + 1]) === 45) || (((1 < 0 || 1 >= num.length) ? $throwRuntimeError("index out of range") : num.array[num.offset + 1]) === 43)) {
				num = $subslice(num, 1);
			} else {
				(0 < 0 || 0 >= num.length) ? $throwRuntimeError("index out of range") : num.array[num.offset + 0] = 43;
			}
			if (math.IsInf(v, 0)) {
				if (f.zero) {
					$deferred.push({ fun: (function() {
						f.zero = true;
					}), args: [] });
					f.zero = false;
				}
			}
			if (f.zero && f.widPresent && f.wid > num.length) {
				if (f.space && v >= 0) {
					f.buf.WriteByte(32);
					f.wid = f.wid - 1 >> 0;
				} else if (f.plus || v < 0) {
					f.buf.WriteByte(((0 < 0 || 0 >= num.length) ? $throwRuntimeError("index out of range") : num.array[num.offset + 0]));
					f.wid = f.wid - 1 >> 0;
				}
				f.pad($subslice(num, 1));
				return;
			}
			if (f.space && (((0 < 0 || 0 >= num.length) ? $throwRuntimeError("index out of range") : num.array[num.offset + 0]) === 43)) {
				(0 < 0 || 0 >= num.length) ? $throwRuntimeError("index out of range") : num.array[num.offset + 0] = 32;
				f.pad(num);
				return;
			}
			if (f.plus || (((0 < 0 || 0 >= num.length) ? $throwRuntimeError("index out of range") : num.array[num.offset + 0]) === 45) || math.IsInf(v, 0)) {
				f.pad(num);
				return;
			}
			f.pad($subslice(num, 1));
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.Ptr.prototype.fmt_e64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.Ptr.prototype.fmt_E64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.Ptr.prototype.fmt_f64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.Ptr.prototype.fmt_g64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.Ptr.prototype.fmt_G64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.Ptr.prototype.fmt_fb64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.Ptr.prototype.fmt_e32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.Ptr.prototype.fmt_E32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.Ptr.prototype.fmt_f32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.Ptr.prototype.fmt_g32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.Ptr.prototype.fmt_G32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.Ptr.prototype.fmt_fb32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.Ptr.prototype.fmt_c64 = function(v, verb) {
		var f;
		f = this;
		f.fmt_complex($coerceFloat32(v.real), $coerceFloat32(v.imag), 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.Ptr.prototype.fmt_c128 = function(v, verb) {
		var f;
		f = this;
		f.fmt_complex(v.real, v.imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.Ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var f, oldPlus, oldSpace, oldWid, i, _ref;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.plus;
		oldSpace = f.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_ref === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_ref === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if (_ref === 102 || _ref === 70) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_ref === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_ref === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.plus = true;
			f.space = false;
			f.wid = oldWid;
			r = j;
			i = i + 1 >> 0;
		}
		f.space = oldSpace;
		f.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var n, err, b, _tmp, _tmp$1;
		n = 0;
		err = null;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.length; _tmp$1 = null; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var n, err, b, _tmp, _tmp$1;
		n = 0;
		err = null;
		b = this;
		b.$set($appendSlice(b.$get(), new buffer($stringToBytes(s))));
		_tmp = s.length; _tmp$1 = null; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b;
		b = this;
		b.$set($append(b.$get(), c));
		return null;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var bp, b, n, x, w;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return null;
		}
		b = bp.$get();
		n = b.length;
		while ((n + 4 >> 0) > b.capacity) {
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new ($sliceType($Uint8))(x.array), x.offset, x.offset + x.length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return null;
	};
	newPrinter = function() {
		var x, p;
		p = (x = ppFree.Get(), (x !== null && x.constructor === ($ptrType(pp)) ? x.$val : $typeAssertionFailed(x, ($ptrType(pp)))));
		p.panicking = false;
		p.erroring = false;
		p.fmt.init(new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p));
		return p;
	};
	pp.Ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = null;
		$copy(p.value, new reflect.Value.Ptr(($ptrType(reflect.rtype)).nil, 0, 0, 0), reflect.Value);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.Ptr.prototype.Width = function() {
		var wid, ok, p, _tmp, _tmp$1;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid; _tmp$1 = p.fmt.widPresent; wid = _tmp; ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.Ptr.prototype.Precision = function() {
		var prec, ok, p, _tmp, _tmp$1;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec; _tmp$1 = p.fmt.precPresent; prec = _tmp; ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.Ptr.prototype.Flag = function(b) {
		var p, _ref;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.minus;
		} else if (_ref === 43) {
			return p.fmt.plus;
		} else if (_ref === 35) {
			return p.fmt.sharp;
		} else if (_ref === 32) {
			return p.fmt.space;
		} else if (_ref === 48) {
			return p.fmt.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.Ptr.prototype.add = function(c) {
		var p, v;
		p = this;
		(new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.Ptr.prototype.Write = function(b) {
		var ret, err, p, _tuple, v;
		ret = 0;
		err = null;
		p = this;
		_tuple = (new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).Write(b); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = $pkg.Fprintf = function(w, format, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrintf(format, a);
		_tuple = w.Write((x = p.buf, $subslice(new ($sliceType($Uint8))(x.array), x.offset, x.offset + x.length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Printf = $pkg.Printf = function(format, a) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = Fprintf(os.Stdout, format, a); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Sprintf = $pkg.Sprintf = function(format, a) {
		var p, s;
		p = newPrinter();
		p.doPrintf(format, a);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	Errorf = $pkg.Errorf = function(format, a) {
		return errors.New(Sprintf(format, a));
	};
	Fprint = $pkg.Fprint = function(w, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrint(a, false, false);
		_tuple = w.Write((x = p.buf, $subslice(new ($sliceType($Uint8))(x.array), x.offset, x.offset + x.length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Fprintln = $pkg.Fprintln = function(w, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrint(a, true, true);
		_tuple = w.Write((x = p.buf, $subslice(new ($sliceType($Uint8))(x.array), x.offset, x.offset + x.length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Println = $pkg.Println = function(a) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = Fprintln(os.Stdout, a); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Sprintln = $pkg.Sprintln = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, true, true);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	getField = function(v, i) {
		var val;
		val = new reflect.Value.Ptr(); $copy(val, v.Field(i), reflect.Value);
		if ((val.Kind() === 20) && !val.IsNil()) {
			$copy(val, val.Elem(), reflect.Value);
		}
		return val;
	};
	parsenum = function(s, start, end) {
		var num, isnum, newi, _tmp, _tmp$1, _tmp$2;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0; _tmp$1 = false; _tmp$2 = end; num = _tmp; isnum = _tmp$1; newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57) {
			num = ((((num >>> 16 << 16) * 10 >> 0) + (num << 16 >>> 16) * 10) >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + 1 >> 0;
		}
		return [num, isnum, newi];
	};
	pp.Ptr.prototype.unknownType = function(v) {
		var p, v$1, v$2, v$3, v$4;
		p = this;
		if ($interfaceIsEqual(v, null)) {
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilAngleBytes);
			return;
		}
		(new ($ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteByte(63);
		(new ($ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).WriteString(reflect.TypeOf(v).String());
		(new ($ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(63);
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.Ptr.prototype.badVerb = function(verb) {
		var p, v, v$1, v$2;
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		if (!($interfaceIsEqual(p.arg, null))) {
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(reflect.TypeOf(p.arg).String());
			p.add(61);
			p.printArg(p.arg, 118, false, false, 0);
		} else if (p.value.IsValid()) {
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteString(p.value.Type().String());
			p.add(61);
			p.printValue($clone(p.value, reflect.Value), 118, false, false, 0);
		} else {
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(nilAngleBytes);
		}
		p.add(41);
		p.erroring = false;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.Ptr.prototype.fmtBool = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 116 || _ref === 118) {
			p.fmt.fmt_boolean(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.Ptr.prototype.fmtC = function(c) {
		var p, r, x, w;
		p = this;
		r = ((c.low + ((c.high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.high === c.high && x.low === c.low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new ($sliceType($Uint8))(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new ($sliceType($Uint8))(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.Ptr.prototype.fmtInt64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(v);
		} else if (_ref === 100 || _ref === 118) {
			p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
		} else if (_ref === 111) {
			p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.high || (0 === v.high && 0 <= v.low)) && (v.high < 0 || (v.high === 0 && v.low <= 1114111))) {
				p.fmt.fmt_qc(v);
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
		} else if (_ref === 85) {
			p.fmtUnicode(v);
		} else if (_ref === 88) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.Ptr.prototype.fmt0x64 = function(v, leading0x) {
		var p, sharp;
		p = this;
		sharp = p.fmt.sharp;
		p.fmt.sharp = leading0x;
		p.fmt.integer(new $Int64(v.high, v.low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.Ptr.prototype.fmtUnicode = function(v) {
		var p, precPresent, sharp, prec;
		p = this;
		precPresent = p.fmt.precPresent;
		sharp = p.fmt.sharp;
		p.fmt.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.precPresent = true;
		}
		p.fmt.unicode = true;
		p.fmt.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.unicode = false;
		p.fmt.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.precPresent = precPresent;
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.Ptr.prototype.fmtUint64 = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(new $Int64(v.high, v.low), new $Uint64(0, 2), false, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(new $Int64(v.high, v.low));
		} else if (_ref === 100) {
			p.fmt.integer(new $Int64(v.high, v.low), new $Uint64(0, 10), false, "0123456789abcdef");
		} else if (_ref === 118) {
			if (goSyntax) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new $Int64(v.high, v.low), new $Uint64(0, 10), false, "0123456789abcdef");
			}
		} else if (_ref === 111) {
			p.fmt.integer(new $Int64(v.high, v.low), new $Uint64(0, 8), false, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.high || (0 === v.high && 0 <= v.low)) && (v.high < 0 || (v.high === 0 && v.low <= 1114111))) {
				p.fmt.fmt_qc(new $Int64(v.high, v.low));
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(new $Int64(v.high, v.low), new $Uint64(0, 16), false, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.integer(new $Int64(v.high, v.low), new $Uint64(0, 16), false, "0123456789ABCDEF");
		} else if (_ref === 85) {
			p.fmtUnicode(new $Int64(v.high, v.low));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtUint64 = function(v, verb, goSyntax) { return this.$val.fmtUint64(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtFloat32 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb32(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e32(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E32(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f32(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g32(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G32(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.Ptr.prototype.fmtFloat64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb64(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e64(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E64(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f64(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g64(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G64(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.Ptr.prototype.fmtComplex64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c64(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c64(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.Ptr.prototype.fmtComplex128 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c128(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c128(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.Ptr.prototype.fmtString = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 118) {
			if (goSyntax) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
		} else if (_ref === 115) {
			p.fmt.fmt_s(v);
		} else if (_ref === 120) {
			p.fmt.fmt_sx(v, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
		} else if (_ref === 113) {
			p.fmt.fmt_q(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtString = function(v, verb, goSyntax) { return this.$val.fmtString(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) {
		var p, v$1, v$2, v$3, v$4, v$5, v$6, v$7, _ref, _i, i, c, v$8, v$9, v$10, v$11, _ref$1;
		p = this;
		if ((verb === 118) || (verb === 100)) {
			if (goSyntax) {
				if (v === ($sliceType($Uint8)).nil) {
					if ($interfaceIsEqual(typ, null)) {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteString("[]byte(nil)");
					} else {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteString(typ.String());
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(nilParenBytes);
					}
					return;
				}
				if ($interfaceIsEqual(typ, null)) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).Write(bytesBytes);
				} else {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).WriteString(typ.String());
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).WriteByte(123);
				}
			} else {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).WriteByte(91);
			}
			_ref = v;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				c = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
				if (i > 0) {
					if (goSyntax) {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).Write(commaSpaceBytes);
					} else {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$9) { p.buf = v$9; })).WriteByte(32);
					}
				}
				p.printArg(new $Uint8(c), 118, p.fmt.plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$10) { p.buf = v$10; })).WriteByte(125);
			} else {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$11) { p.buf = v$11; })).WriteByte(93);
			}
			return;
		}
		_ref$1 = verb;
		if (_ref$1 === 115) {
			p.fmt.fmt_s($bytesToString(v));
		} else if (_ref$1 === 120) {
			p.fmt.fmt_bx(v, "0123456789abcdef");
		} else if (_ref$1 === 88) {
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
		} else if (_ref$1 === 113) {
			p.fmt.fmt_q($bytesToString(v));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) { return this.$val.fmtBytes(v, verb, goSyntax, typ, depth); };
	pp.Ptr.prototype.fmtPointer = function(value, verb, goSyntax) {
		var p, use0x64, _ref, u, _ref$1, v, v$1, v$2;
		p = this;
		use0x64 = true;
		_ref = verb;
		if (_ref === 112 || _ref === 118) {
		} else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) {
			use0x64 = false;
		} else {
			p.badVerb(verb);
			return;
		}
		u = 0;
		_ref$1 = value.Kind();
		if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) {
			u = value.Pointer();
		} else {
			p.badVerb(verb);
			return;
		}
		if (goSyntax) {
			p.add(40);
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(value.Type().String());
			p.add(41);
			p.add(40);
			if (u === 0) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
		} else if ((verb === 118) && (u === 0)) {
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(nilAngleBytes);
		} else {
			if (use0x64) {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.sharp);
			} else {
				p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb, false);
			}
		}
	};
	pp.prototype.fmtPointer = function(value, verb, goSyntax) { return this.$val.fmtPointer(value, verb, goSyntax); };
	pp.Ptr.prototype.catchPanic = function(arg, verb) {
		var p, err, v, v$1, v$2, v$3, v$4;
		p = this;
		err = $recover();
		if (!($interfaceIsEqual(err, null))) {
			v = new reflect.Value.Ptr(); $copy(v, reflect.ValueOf(arg), reflect.Value);
			if ((v.Kind() === 22) && v.IsNil()) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				throw $panic(err);
			}
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(percentBangBytes);
			p.add(verb);
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(panicBytes);
			p.panicking = true;
			p.printArg(err, 118, false, false, 0);
			p.panicking = false;
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(41);
		}
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.Ptr.prototype.handleMethods = function(verb, plus, goSyntax, depth) {
		var wasString, handled, p, _tuple, x, formatter, ok, _tuple$1, x$1, stringer, ok$1, _ref, v, _ref$1, _type;
		wasString = false;
		handled = false;
		var $deferred = [];
		try {
			p = this;
			if (p.erroring) {
				return [wasString, handled];
			}
			_tuple = (x = p.arg, (x !== null && Formatter.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])); formatter = _tuple[0]; ok = _tuple[1];
			if (ok) {
				handled = true;
				wasString = false;
				$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
				formatter.Format(p, verb);
				return [wasString, handled];
			}
			if (plus) {
				p.fmt.plus = false;
			}
			if (goSyntax) {
				p.fmt.sharp = false;
				_tuple$1 = (x$1 = p.arg, (x$1 !== null && GoStringer.implementedBy.indexOf(x$1.constructor) !== -1 ? [x$1, true] : [null, false])); stringer = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					wasString = false;
					handled = true;
					$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
					p.fmtString(stringer.GoString(), 115, false);
					return [wasString, handled];
				}
			} else {
				_ref = verb;
				if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) {
					_ref$1 = p.arg;
					_type = _ref$1 !== null ? _ref$1.constructor : null;
					if ($error.implementedBy.indexOf(_type) !== -1) {
						v = _ref$1;
						wasString = false;
						handled = true;
						$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
						p.printArg(new $String(v.Error()), verb, plus, false, depth);
						return [wasString, handled];
					} else if (Stringer.implementedBy.indexOf(_type) !== -1) {
						v = _ref$1;
						wasString = false;
						handled = true;
						$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
						p.printArg(new $String(v.String()), verb, plus, false, depth);
						return [wasString, handled];
					}
				}
			}
			handled = false;
			return [wasString, handled];
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
			return [wasString, handled];
		}
	};
	pp.prototype.handleMethods = function(verb, plus, goSyntax, depth) { return this.$val.handleMethods(verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printArg = function(arg, verb, plus, goSyntax, depth) {
		var wasString, p, _ref, oldPlus, oldSharp, f, _ref$1, _type, _tuple, isString, handled;
		wasString = false;
		p = this;
		p.arg = arg;
		$copy(p.value, new reflect.Value.Ptr(($ptrType(reflect.rtype)).nil, 0, 0, 0), reflect.Value);
		if ($interfaceIsEqual(arg, null)) {
			if ((verb === 84) || (verb === 118)) {
				p.fmt.pad(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(reflect.TypeOf(arg).String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer($clone(reflect.ValueOf(arg), reflect.Value), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		oldPlus = p.fmt.plus;
		oldSharp = p.fmt.sharp;
		if (plus) {
			p.fmt.plus = false;
		}
		if (goSyntax) {
			p.fmt.sharp = false;
		}
		_ref$1 = arg;
		_type = _ref$1 !== null ? _ref$1.constructor : null;
		if (_type === $Bool) {
			f = _ref$1.$val;
			p.fmtBool(f, verb);
		} else if (_type === $Float32) {
			f = _ref$1.$val;
			p.fmtFloat32(f, verb);
		} else if (_type === $Float64) {
			f = _ref$1.$val;
			p.fmtFloat64(f, verb);
		} else if (_type === $Complex64) {
			f = _ref$1.$val;
			p.fmtComplex64(f, verb);
		} else if (_type === $Complex128) {
			f = _ref$1.$val;
			p.fmtComplex128(f, verb);
		} else if (_type === $Int) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if (_type === $Int8) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if (_type === $Int16) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if (_type === $Int32) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if (_type === $Int64) {
			f = _ref$1.$val;
			p.fmtInt64(f, verb);
		} else if (_type === $Uint) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if (_type === $Uint8) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if (_type === $Uint16) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if (_type === $Uint32) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if (_type === $Uint64) {
			f = _ref$1.$val;
			p.fmtUint64(f, verb, goSyntax);
		} else if (_type === $Uintptr) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f.constructor === Number ? f : 1), verb, goSyntax);
		} else if (_type === $String) {
			f = _ref$1.$val;
			p.fmtString(f, verb, goSyntax);
			wasString = (verb === 115) || (verb === 118);
		} else if (_type === ($sliceType($Uint8))) {
			f = _ref$1.$val;
			p.fmtBytes(f, verb, goSyntax, null, depth);
			wasString = verb === 115;
		} else {
			f = _ref$1;
			p.fmt.plus = oldPlus;
			p.fmt.sharp = oldSharp;
			_tuple = p.handleMethods(verb, plus, goSyntax, depth); isString = _tuple[0]; handled = _tuple[1];
			if (handled) {
				wasString = isString;
				return wasString;
			}
			wasString = p.printReflectValue($clone(reflect.ValueOf(arg), reflect.Value), verb, plus, goSyntax, depth);
			return wasString;
		}
		p.arg = null;
		return wasString;
	};
	pp.prototype.printArg = function(arg, verb, plus, goSyntax, depth) { return this.$val.printArg(arg, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printValue = function(value, verb, plus, goSyntax, depth) {
		var wasString, p, v, _ref, _tuple, isString, handled;
		wasString = false;
		p = this;
		if (!value.IsValid()) {
			if ((verb === 84) || (verb === 118)) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).Write(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(value.Type().String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer($clone(value, reflect.Value), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		p.arg = null;
		if (value.CanInterface()) {
			p.arg = value.Interface();
		}
		_tuple = p.handleMethods(verb, plus, goSyntax, depth); isString = _tuple[0]; handled = _tuple[1];
		if (handled) {
			wasString = isString;
			return wasString;
		}
		wasString = p.printReflectValue($clone(value, reflect.Value), verb, plus, goSyntax, depth);
		return wasString;
	};
	pp.prototype.printValue = function(value, verb, plus, goSyntax, depth) { return this.$val.printValue(value, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) {
		var wasString, p, oldValue, f, _ref, x, v, v$1, v$2, v$3, keys, _ref$1, _i, i, key, v$4, v$5, v$6, v$7, v$8, v$9, v$10, t, i$1, v$11, v$12, f$1, v$13, v$14, v$15, value$1, v$16, v$17, v$18, typ, bytes, _ref$2, _i$1, i$2, v$19, v$20, v$21, v$22, i$3, v$23, v$24, v$25, v$26, v$27, a, _ref$3, v$28, v$29;
		wasString = false;
		p = this;
		oldValue = new reflect.Value.Ptr(); $copy(oldValue, p.value, reflect.Value);
		$copy(p.value, value, reflect.Value);
		f = new reflect.Value.Ptr(); $copy(f, value, reflect.Value);
		_ref = f.Kind();
		BigSwitch:
		switch (0) { default: if (_ref === 1) {
			p.fmtBool(f.Bool(), verb);
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			p.fmtInt64(f.Int(), verb);
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			p.fmtUint64(f.Uint(), verb, goSyntax);
		} else if (_ref === 13 || _ref === 14) {
			if (f.Type().Size() === 4) {
				p.fmtFloat32(f.Float(), verb);
			} else {
				p.fmtFloat64(f.Float(), verb);
			}
		} else if (_ref === 15 || _ref === 16) {
			if (f.Type().Size() === 8) {
				p.fmtComplex64((x = f.Complex(), new $Complex64(x.real, x.imag)), verb);
			} else {
				p.fmtComplex128(f.Complex(), verb);
			}
		} else if (_ref === 24) {
			p.fmtString(f.String(), verb, goSyntax);
		} else if (_ref === 21) {
			if (goSyntax) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(f.Type().String());
				if (f.IsNil()) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteString("(nil)");
					break;
				}
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteByte(123);
			} else {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(mapBytes);
			}
			keys = f.MapKeys();
			_ref$1 = keys;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				key = new reflect.Value.Ptr(); $copy(key, ((_i < 0 || _i >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i]), reflect.Value);
				if (i > 0) {
					if (goSyntax) {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).Write(commaSpaceBytes);
					} else {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).WriteByte(32);
					}
				}
				p.printValue($clone(key, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).WriteByte(58);
				p.printValue($clone(f.MapIndex($clone(key, reflect.Value)), reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).WriteByte(125);
			} else {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).WriteByte(93);
			}
		} else if (_ref === 25) {
			if (goSyntax) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$9) { p.buf = v$9; })).WriteString(value.Type().String());
			}
			p.add(123);
			v$10 = new reflect.Value.Ptr(); $copy(v$10, f, reflect.Value);
			t = v$10.Type();
			i$1 = 0;
			while (i$1 < v$10.NumField()) {
				if (i$1 > 0) {
					if (goSyntax) {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$11) { p.buf = v$11; })).Write(commaSpaceBytes);
					} else {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$12) { p.buf = v$12; })).WriteByte(32);
					}
				}
				if (plus || goSyntax) {
					f$1 = new reflect.StructField.Ptr(); $copy(f$1, t.Field(i$1), reflect.StructField);
					if (!(f$1.Name === "")) {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$13) { p.buf = v$13; })).WriteString(f$1.Name);
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$14) { p.buf = v$14; })).WriteByte(58);
					}
				}
				p.printValue($clone(getField($clone(v$10, reflect.Value), i$1), reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				i$1 = i$1 + 1 >> 0;
			}
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$15) { p.buf = v$15; })).WriteByte(125);
		} else if (_ref === 20) {
			value$1 = new reflect.Value.Ptr(); $copy(value$1, f.Elem(), reflect.Value);
			if (!value$1.IsValid()) {
				if (goSyntax) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$16) { p.buf = v$16; })).WriteString(f.Type().String());
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$17) { p.buf = v$17; })).Write(nilParenBytes);
				} else {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$18) { p.buf = v$18; })).Write(nilAngleBytes);
				}
			} else {
				wasString = p.printValue($clone(value$1, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
			}
		} else if (_ref === 17 || _ref === 23) {
			typ = f.Type();
			if (typ.Elem().Kind() === 8) {
				bytes = ($sliceType($Uint8)).nil;
				if (f.Kind() === 23) {
					bytes = f.Bytes();
				} else if (f.CanAddr()) {
					bytes = f.Slice(0, f.Len()).Bytes();
				} else {
					bytes = ($sliceType($Uint8)).make(f.Len(), 0, function() { return 0; });
					_ref$2 = bytes;
					_i$1 = 0;
					while (_i$1 < _ref$2.length) {
						i$2 = _i$1;
						(i$2 < 0 || i$2 >= bytes.length) ? $throwRuntimeError("index out of range") : bytes.array[bytes.offset + i$2] = (f.Index(i$2).Uint().low << 24 >>> 24);
						_i$1++;
					}
				}
				p.fmtBytes(bytes, verb, goSyntax, typ, depth);
				wasString = verb === 115;
				break;
			}
			if (goSyntax) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$19) { p.buf = v$19; })).WriteString(value.Type().String());
				if ((f.Kind() === 23) && f.IsNil()) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$20) { p.buf = v$20; })).WriteString("(nil)");
					break;
				}
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$21) { p.buf = v$21; })).WriteByte(123);
			} else {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$22) { p.buf = v$22; })).WriteByte(91);
			}
			i$3 = 0;
			while (i$3 < f.Len()) {
				if (i$3 > 0) {
					if (goSyntax) {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$23) { p.buf = v$23; })).Write(commaSpaceBytes);
					} else {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$24) { p.buf = v$24; })).WriteByte(32);
					}
				}
				p.printValue($clone(f.Index(i$3), reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				i$3 = i$3 + 1 >> 0;
			}
			if (goSyntax) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$25) { p.buf = v$25; })).WriteByte(125);
			} else {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$26) { p.buf = v$26; })).WriteByte(93);
			}
		} else if (_ref === 22) {
			v$27 = f.Pointer();
			if (!((v$27 === 0)) && (depth === 0)) {
				a = new reflect.Value.Ptr(); $copy(a, f.Elem(), reflect.Value);
				_ref$3 = a.Kind();
				if (_ref$3 === 17 || _ref$3 === 23) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$28) { p.buf = v$28; })).WriteByte(38);
					p.printValue($clone(a, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 25) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$29) { p.buf = v$29; })).WriteByte(38);
					p.printValue($clone(a, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				}
			}
			p.fmtPointer($clone(value, reflect.Value), verb, goSyntax);
		} else if (_ref === 18 || _ref === 19 || _ref === 26) {
			p.fmtPointer($clone(value, reflect.Value), verb, goSyntax);
		} else {
			p.unknownType(new f.constructor.Struct(f));
		} }
		$copy(p.value, oldValue, reflect.Value);
		wasString = wasString;
		return wasString;
	};
	pp.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) { return this.$val.printReflectValue(value, verb, plus, goSyntax, depth); };
	intFromArg = function(a, argNum) {
		var num, isInt, newArgNum, _tuple, x;
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		if (argNum < a.length) {
			_tuple = (x = ((argNum < 0 || argNum >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + argNum]), (x !== null && x.constructor === $Int ? [x.$val, true] : [0, false])); num = _tuple[0]; isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var index, wid, ok, i, _tuple, width, ok$1, newi, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		index = 0;
		wid = 0;
		ok = false;
		i = 1;
		while (i < format.length) {
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp = 0; _tmp$1 = i + 1 >> 0; _tmp$2 = false; index = _tmp; wid = _tmp$1; ok = _tmp$2;
					return [index, wid, ok];
				}
				_tmp$3 = width - 1 >> 0; _tmp$4 = i + 1 >> 0; _tmp$5 = true; index = _tmp$3; wid = _tmp$4; ok = _tmp$5;
				return [index, wid, ok];
			}
			i = i + 1 >> 0;
		}
		_tmp$6 = 0; _tmp$7 = 1; _tmp$8 = false; index = _tmp$6; wid = _tmp$7; ok = _tmp$8;
		return [index, wid, ok];
	};
	pp.Ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var newArgNum, newi, found, p, _tmp, _tmp$1, _tmp$2, _tuple, index, wid, ok, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum; _tmp$1 = i; _tmp$2 = false; newArgNum = _tmp; newi = _tmp$1; found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i)); index = _tuple[0]; wid = _tuple[1]; ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index; _tmp$4 = i + wid >> 0; _tmp$5 = true; newArgNum = _tmp$3; newi = _tmp$4; found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum; _tmp$7 = i + wid >> 0; _tmp$8 = true; newArgNum = _tmp$6; newi = _tmp$7; found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.Ptr.prototype.doPrintf = function(format, a) {
		var p, end, argNum, afterIndex, i, lasti, v, _ref, _tuple, _tuple$1, v$1, _tuple$2, _tuple$3, _tuple$4, v$2, _tuple$5, _tuple$6, v$3, _tuple$7, c, w, v$4, v$5, v$6, v$7, v$8, arg, goSyntax, plus, v$9, arg$1, v$10, v$11, v$12, v$13;
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		while (i < end) {
			p.goodArgNum = true;
			lasti = i;
			while (i < end && !((format.charCodeAt(i) === 37))) {
				i = i + 1 >> 0;
			}
			if (i > lasti) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				break;
			}
			i = i + 1 >> 0;
			p.fmt.clearflags();
			F:
			while (i < end) {
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.sharp = true;
				} else if (_ref === 48) {
					p.fmt.zero = true;
				} else if (_ref === 43) {
					p.fmt.plus = true;
				} else if (_ref === 45) {
					p.fmt.minus = true;
				} else if (_ref === 32) {
					p.fmt.space = true;
				} else {
					break F;
				}
				i = i + 1 >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + 1 >> 0;
				_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.widPresent = _tuple$1[1]; argNum = _tuple$1[2];
				if (!p.fmt.widPresent) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.widPresent = _tuple$2[1]; i = _tuple$2[2];
				if (afterIndex && p.fmt.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + 1 >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + 1 >> 0;
					_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.precPresent = _tuple$4[1]; argNum = _tuple$4[2];
					if (!p.fmt.precPresent) {
						(new ($ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.precPresent = _tuple$5[1]; i = _tuple$5[2];
					if (!p.fmt.precPresent) {
						p.fmt.prec = 0;
						p.fmt.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(noVerbBytes);
				continue;
			}
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];
			i = i + (w) >> 0;
			if (c === 37) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(37);
				continue;
			}
			if (!p.goodArgNum) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).Write(percentBangBytes);
				p.add(c);
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).Write(badIndexBytes);
				continue;
			} else if (argNum >= a.length) {
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).Write(percentBangBytes);
				p.add(c);
				(new ($ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).Write(missingBytes);
				continue;
			}
			arg = ((argNum < 0 || argNum >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + argNum]);
			argNum = argNum + 1 >> 0;
			goSyntax = (c === 118) && p.fmt.sharp;
			plus = (c === 118) && p.fmt.plus;
			p.printArg(arg, c, plus, goSyntax, 0);
		}
		if (!p.reordered && argNum < a.length) {
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$9) { p.buf = v$9; })).Write(extraBytes);
			while (argNum < a.length) {
				arg$1 = ((argNum < 0 || argNum >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + argNum]);
				if (!($interfaceIsEqual(arg$1, null))) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$10) { p.buf = v$10; })).WriteString(reflect.TypeOf(arg$1).String());
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$11) { p.buf = v$11; })).WriteByte(61);
				}
				p.printArg(arg$1, 118, false, false, 0);
				if ((argNum + 1 >> 0) < a.length) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v$12) { p.buf = v$12; })).Write(commaSpaceBytes);
				}
				argNum = argNum + 1 >> 0;
			}
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$13) { p.buf = v$13; })).WriteByte(41);
		}
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.Ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var p, prevString, argNum, arg, isString, v, v$1;
		p = this;
		prevString = false;
		argNum = 0;
		while (argNum < a.length) {
			p.fmt.clearflags();
			arg = ((argNum < 0 || argNum >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + argNum]);
			if (argNum > 0) {
				isString = !($interfaceIsEqual(arg, null)) && (reflect.TypeOf(arg).Kind() === 24);
				if (addspace || !isString && !prevString) {
					(new ($ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteByte(32);
				}
			}
			prevString = p.printArg(arg, 118, false, false, 0);
			argNum = argNum + 1 >> 0;
		}
		if (addnewline) {
			(new ($ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteByte(10);
		}
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };
	ss.Ptr.prototype.Read = function(buf) {
		var n, err, s, _tmp, _tmp$1;
		n = 0;
		err = null;
		s = this;
		_tmp = 0; _tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune"); n = _tmp; err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.Ptr.prototype.ReadRune = function() {
		var r, size, err, s, _tuple;
		r = 0;
		size = 0;
		err = null;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + 1 >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_tuple = s.rr.ReadRune(); r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, null)) {
			s.count = s.count + 1 >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.Ptr.prototype.Width = function() {
		var wid, ok, s, _tmp, _tmp$1, _tmp$2, _tmp$3;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0; _tmp$1 = false; wid = _tmp; ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid; _tmp$3 = true; wid = _tmp$2; ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.Ptr.prototype.getRune = function() {
		var r, s, _tuple, err;
		r = 0;
		s = this;
		_tuple = s.ReadRune(); r = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, null))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.Ptr.prototype.UnreadRune = function() {
		var s, _tuple, x, u, ok;
		s = this;
		_tuple = (x = s.rr, (x !== null && runeUnreader.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])); u = _tuple[0]; ok = _tuple[1];
		if (ok) {
			u.UnreadRune();
		} else {
			s.peekRune = s.prevRune;
		}
		s.prevRune = -1;
		s.count = s.count - 1 >> 0;
		return null;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.Ptr.prototype.error = function(err) {
		var s, x;
		s = this;
		throw $panic((x = new scanError.Ptr(err), new x.constructor.Struct(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.Ptr.prototype.errorString = function(err) {
		var s, x;
		s = this;
		throw $panic((x = new scanError.Ptr(errors.New(err)), new x.constructor.Struct(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.Ptr.prototype.Token = function(skipSpace, f) {
		var tok, err, s;
		tok = ($sliceType($Uint8)).nil;
		err = null;
		var $deferred = [];
		try {
			s = this;
			$deferred.push({ fun: (function() {
				var e, _tuple, se, ok;
				e = $recover();
				if (!($interfaceIsEqual(e, null))) {
					_tuple = (e !== null && e.constructor === scanError ? [e.$val, true] : [new scanError.Ptr(), false]); se = new scanError.Ptr(); $copy(se, _tuple[0], scanError); ok = _tuple[1];
					if (ok) {
						err = se.err;
					} else {
						throw $panic(e);
					}
				}
			}), args: [] });
			if (f === $throwNilPointerError) {
				f = notSpace;
			}
			s.buf = $subslice(s.buf, 0, 0);
			tok = s.token(skipSpace, f);
			return [tok, err];
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
			return [tok, err];
		}
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var rx, _ref, _i, rng;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (_i < _ref.length) {
			rng = ($arrayType($Uint16, 2)).zero(); $copy(rng, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), ($arrayType($Uint16, 2)));
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		return !isSpace(r);
	};
	ss.Ptr.prototype.SkipSpace = function() {
		var s;
		s = this;
		s.skipSpace(false);
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.Ptr.prototype.free = function(old) {
		var s;
		s = this;
		if (old.validSave) {
			$copy(s.ssave, old, ssave);
			return;
		}
		if (s.buf.capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = null;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.Ptr.prototype.skipSpace = function(stopAtNewline) {
		var s, r;
		s = this;
		while (true) {
			r = s.getRune();
			if (r === -1) {
				return;
			}
			if ((r === 13) && s.peek("\n")) {
				continue;
			}
			if (r === 10) {
				if (stopAtNewline) {
					break;
				}
				if (s.ssave.nlIsSpace) {
					continue;
				}
				s.errorString("unexpected newline");
				return;
			}
			if (!isSpace(r)) {
				s.UnreadRune();
				break;
			}
		}
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.Ptr.prototype.token = function(skipSpace, f) {
		var s, r, v, x;
		s = this;
		if (skipSpace) {
			s.skipSpace(false);
		}
		while (true) {
			r = s.getRune();
			if (r === -1) {
				break;
			}
			if (!f(r)) {
				s.UnreadRune();
				break;
			}
			(new ($ptrType(buffer))(function() { return s.buf; }, function(v) { s.buf = v; })).WriteRune(r);
		}
		return (x = s.buf, $subslice(new ($sliceType($Uint8))(x.array), x.offset, x.offset + x.length));
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _ref, _i, _rune, i, c;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.Ptr.prototype.peek = function(ok) {
		var s, r;
		s = this;
		r = s.getRune();
		if (!((r === -1))) {
			s.UnreadRune();
		}
		return indexRune(ok, r) >= 0;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	$pkg.$init = function() {
		($ptrType(fmt)).methods = [["clearflags", "clearflags", "fmt", [], [], false, -1], ["computePadding", "computePadding", "fmt", [$Int], [($sliceType($Uint8)), $Int, $Int], false, -1], ["fmt_E32", "fmt_E32", "fmt", [$Float32], [], false, -1], ["fmt_E64", "fmt_E64", "fmt", [$Float64], [], false, -1], ["fmt_G32", "fmt_G32", "fmt", [$Float32], [], false, -1], ["fmt_G64", "fmt_G64", "fmt", [$Float64], [], false, -1], ["fmt_boolean", "fmt_boolean", "fmt", [$Bool], [], false, -1], ["fmt_bx", "fmt_bx", "fmt", [($sliceType($Uint8)), $String], [], false, -1], ["fmt_c128", "fmt_c128", "fmt", [$Complex128, $Int32], [], false, -1], ["fmt_c64", "fmt_c64", "fmt", [$Complex64, $Int32], [], false, -1], ["fmt_complex", "fmt_complex", "fmt", [$Float64, $Float64, $Int, $Int32], [], false, -1], ["fmt_e32", "fmt_e32", "fmt", [$Float32], [], false, -1], ["fmt_e64", "fmt_e64", "fmt", [$Float64], [], false, -1], ["fmt_f32", "fmt_f32", "fmt", [$Float32], [], false, -1], ["fmt_f64", "fmt_f64", "fmt", [$Float64], [], false, -1], ["fmt_fb32", "fmt_fb32", "fmt", [$Float32], [], false, -1], ["fmt_fb64", "fmt_fb64", "fmt", [$Float64], [], false, -1], ["fmt_g32", "fmt_g32", "fmt", [$Float32], [], false, -1], ["fmt_g64", "fmt_g64", "fmt", [$Float64], [], false, -1], ["fmt_q", "fmt_q", "fmt", [$String], [], false, -1], ["fmt_qc", "fmt_qc", "fmt", [$Int64], [], false, -1], ["fmt_s", "fmt_s", "fmt", [$String], [], false, -1], ["fmt_sbx", "fmt_sbx", "fmt", [$String, ($sliceType($Uint8)), $String], [], false, -1], ["fmt_sx", "fmt_sx", "fmt", [$String, $String], [], false, -1], ["formatFloat", "formatFloat", "fmt", [$Float64, $Uint8, $Int, $Int], [], false, -1], ["init", "init", "fmt", [($ptrType(buffer))], [], false, -1], ["integer", "integer", "fmt", [$Int64, $Uint64, $Bool, $String], [], false, -1], ["pad", "pad", "fmt", [($sliceType($Uint8))], [], false, -1], ["padString", "padString", "fmt", [$String], [], false, -1], ["truncate", "truncate", "fmt", [$String], [$String], false, -1], ["writePadding", "writePadding", "fmt", [$Int, ($sliceType($Uint8))], [], false, -1]];
		fmt.init([["intbuf", "intbuf", "fmt", ($arrayType($Uint8, 65)), ""], ["buf", "buf", "fmt", ($ptrType(buffer)), ""], ["wid", "wid", "fmt", $Int, ""], ["prec", "prec", "fmt", $Int, ""], ["widPresent", "widPresent", "fmt", $Bool, ""], ["precPresent", "precPresent", "fmt", $Bool, ""], ["minus", "minus", "fmt", $Bool, ""], ["plus", "plus", "fmt", $Bool, ""], ["sharp", "sharp", "fmt", $Bool, ""], ["space", "space", "fmt", $Bool, ""], ["unicode", "unicode", "fmt", $Bool, ""], ["uniQuote", "uniQuote", "fmt", $Bool, ""], ["zero", "zero", "fmt", $Bool, ""]]);
		State.init([["Flag", "Flag", "", [$Int], [$Bool], false], ["Precision", "Precision", "", [], [$Int, $Bool], false], ["Width", "Width", "", [], [$Int, $Bool], false], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false]]);
		Formatter.init([["Format", "Format", "", [State, $Int32], [], false]]);
		Stringer.init([["String", "String", "", [], [$String], false]]);
		GoStringer.init([["GoString", "GoString", "", [], [$String], false]]);
		($ptrType(buffer)).methods = [["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["WriteByte", "WriteByte", "", [$Uint8], [$error], false, -1], ["WriteRune", "WriteRune", "", [$Int32], [$error], false, -1], ["WriteString", "WriteString", "", [$String], [$Int, $error], false, -1]];
		buffer.init($Uint8);
		($ptrType(pp)).methods = [["Flag", "Flag", "", [$Int], [$Bool], false, -1], ["Precision", "Precision", "", [], [$Int, $Bool], false, -1], ["Width", "Width", "", [], [$Int, $Bool], false, -1], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["add", "add", "fmt", [$Int32], [], false, -1], ["argNumber", "argNumber", "fmt", [$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false, -1], ["badVerb", "badVerb", "fmt", [$Int32], [], false, -1], ["catchPanic", "catchPanic", "fmt", [$emptyInterface, $Int32], [], false, -1], ["doPrint", "doPrint", "fmt", [($sliceType($emptyInterface)), $Bool, $Bool], [], false, -1], ["doPrintf", "doPrintf", "fmt", [$String, ($sliceType($emptyInterface))], [], false, -1], ["fmt0x64", "fmt0x64", "fmt", [$Uint64, $Bool], [], false, -1], ["fmtBool", "fmtBool", "fmt", [$Bool, $Int32], [], false, -1], ["fmtBytes", "fmtBytes", "fmt", [($sliceType($Uint8)), $Int32, $Bool, reflect.Type, $Int], [], false, -1], ["fmtC", "fmtC", "fmt", [$Int64], [], false, -1], ["fmtComplex128", "fmtComplex128", "fmt", [$Complex128, $Int32], [], false, -1], ["fmtComplex64", "fmtComplex64", "fmt", [$Complex64, $Int32], [], false, -1], ["fmtFloat32", "fmtFloat32", "fmt", [$Float32, $Int32], [], false, -1], ["fmtFloat64", "fmtFloat64", "fmt", [$Float64, $Int32], [], false, -1], ["fmtInt64", "fmtInt64", "fmt", [$Int64, $Int32], [], false, -1], ["fmtPointer", "fmtPointer", "fmt", [reflect.Value, $Int32, $Bool], [], false, -1], ["fmtString", "fmtString", "fmt", [$String, $Int32, $Bool], [], false, -1], ["fmtUint64", "fmtUint64", "fmt", [$Uint64, $Int32, $Bool], [], false, -1], ["fmtUnicode", "fmtUnicode", "fmt", [$Int64], [], false, -1], ["free", "free", "fmt", [], [], false, -1], ["handleMethods", "handleMethods", "fmt", [$Int32, $Bool, $Bool, $Int], [$Bool, $Bool], false, -1], ["printArg", "printArg", "fmt", [$emptyInterface, $Int32, $Bool, $Bool, $Int], [$Bool], false, -1], ["printReflectValue", "printReflectValue", "fmt", [reflect.Value, $Int32, $Bool, $Bool, $Int], [$Bool], false, -1], ["printValue", "printValue", "fmt", [reflect.Value, $Int32, $Bool, $Bool, $Int], [$Bool], false, -1], ["unknownType", "unknownType", "fmt", [$emptyInterface], [], false, -1]];
		pp.init([["n", "n", "fmt", $Int, ""], ["panicking", "panicking", "fmt", $Bool, ""], ["erroring", "erroring", "fmt", $Bool, ""], ["buf", "buf", "fmt", buffer, ""], ["arg", "arg", "fmt", $emptyInterface, ""], ["value", "value", "fmt", reflect.Value, ""], ["reordered", "reordered", "fmt", $Bool, ""], ["goodArgNum", "goodArgNum", "fmt", $Bool, ""], ["runeBuf", "runeBuf", "fmt", ($arrayType($Uint8, 4)), ""], ["fmt", "fmt", "fmt", fmt, ""]]);
		runeUnreader.init([["UnreadRune", "UnreadRune", "", [], [$error], false]]);
		scanError.init([["err", "err", "fmt", $error, ""]]);
		($ptrType(ss)).methods = [["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["ReadRune", "ReadRune", "", [], [$Int32, $Int, $error], false, -1], ["SkipSpace", "SkipSpace", "", [], [], false, -1], ["Token", "Token", "", [$Bool, ($funcType([$Int32], [$Bool], false))], [($sliceType($Uint8)), $error], false, -1], ["UnreadRune", "UnreadRune", "", [], [$error], false, -1], ["Width", "Width", "", [], [$Int, $Bool], false, -1], ["accept", "accept", "fmt", [$String], [$Bool], false, -1], ["advance", "advance", "fmt", [$String], [$Int], false, -1], ["complexTokens", "complexTokens", "fmt", [], [$String, $String], false, -1], ["consume", "consume", "fmt", [$String, $Bool], [$Bool], false, -1], ["convertFloat", "convertFloat", "fmt", [$String, $Int], [$Float64], false, -1], ["convertString", "convertString", "fmt", [$Int32], [$String], false, -1], ["doScan", "doScan", "fmt", [($sliceType($emptyInterface))], [$Int, $error], false, -1], ["doScanf", "doScanf", "fmt", [$String, ($sliceType($emptyInterface))], [$Int, $error], false, -1], ["error", "error", "fmt", [$error], [], false, -1], ["errorString", "errorString", "fmt", [$String], [], false, -1], ["floatToken", "floatToken", "fmt", [], [$String], false, -1], ["free", "free", "fmt", [ssave], [], false, -1], ["getBase", "getBase", "fmt", [$Int32], [$Int, $String], false, -1], ["getRune", "getRune", "fmt", [], [$Int32], false, -1], ["hexByte", "hexByte", "fmt", [], [$Uint8, $Bool], false, -1], ["hexDigit", "hexDigit", "fmt", [$Int32], [$Int], false, -1], ["hexString", "hexString", "fmt", [], [$String], false, -1], ["mustReadRune", "mustReadRune", "fmt", [], [$Int32], false, -1], ["notEOF", "notEOF", "fmt", [], [], false, -1], ["okVerb", "okVerb", "fmt", [$Int32, $String, $String], [$Bool], false, -1], ["peek", "peek", "fmt", [$String], [$Bool], false, -1], ["quotedString", "quotedString", "fmt", [], [$String], false, -1], ["scanBasePrefix", "scanBasePrefix", "fmt", [], [$Int, $String, $Bool], false, -1], ["scanBool", "scanBool", "fmt", [$Int32], [$Bool], false, -1], ["scanComplex", "scanComplex", "fmt", [$Int32, $Int], [$Complex128], false, -1], ["scanInt", "scanInt", "fmt", [$Int32, $Int], [$Int64], false, -1], ["scanNumber", "scanNumber", "fmt", [$String, $Bool], [$String], false, -1], ["scanOne", "scanOne", "fmt", [$Int32, $emptyInterface], [], false, -1], ["scanRune", "scanRune", "fmt", [$Int], [$Int64], false, -1], ["scanUint", "scanUint", "fmt", [$Int32, $Int], [$Uint64], false, -1], ["skipSpace", "skipSpace", "fmt", [$Bool], [], false, -1], ["token", "token", "fmt", [$Bool, ($funcType([$Int32], [$Bool], false))], [($sliceType($Uint8))], false, -1]];
		ss.init([["rr", "rr", "fmt", io.RuneReader, ""], ["buf", "buf", "fmt", buffer, ""], ["peekRune", "peekRune", "fmt", $Int32, ""], ["prevRune", "prevRune", "fmt", $Int32, ""], ["count", "count", "fmt", $Int, ""], ["atEOF", "atEOF", "fmt", $Bool, ""], ["ssave", "", "fmt", ssave, ""]]);
		ssave.init([["validSave", "validSave", "fmt", $Bool, ""], ["nlIsEnd", "nlIsEnd", "fmt", $Bool, ""], ["nlIsSpace", "nlIsSpace", "fmt", $Bool, ""], ["argLimit", "argLimit", "fmt", $Int, ""], ["limit", "limit", "fmt", $Int, ""], ["maxWid", "maxWid", "fmt", $Int, ""]]);
		padZeroBytes = ($sliceType($Uint8)).make(65, 0, function() { return 0; });
		padSpaceBytes = ($sliceType($Uint8)).make(65, 0, function() { return 0; });
		trueBytes = new ($sliceType($Uint8))($stringToBytes("true"));
		falseBytes = new ($sliceType($Uint8))($stringToBytes("false"));
		commaSpaceBytes = new ($sliceType($Uint8))($stringToBytes(", "));
		nilAngleBytes = new ($sliceType($Uint8))($stringToBytes("<nil>"));
		nilParenBytes = new ($sliceType($Uint8))($stringToBytes("(nil)"));
		nilBytes = new ($sliceType($Uint8))($stringToBytes("nil"));
		mapBytes = new ($sliceType($Uint8))($stringToBytes("map["));
		percentBangBytes = new ($sliceType($Uint8))($stringToBytes("%!"));
		missingBytes = new ($sliceType($Uint8))($stringToBytes("(MISSING)"));
		badIndexBytes = new ($sliceType($Uint8))($stringToBytes("(BADINDEX)"));
		panicBytes = new ($sliceType($Uint8))($stringToBytes("(PANIC="));
		extraBytes = new ($sliceType($Uint8))($stringToBytes("%!(EXTRA "));
		irparenBytes = new ($sliceType($Uint8))($stringToBytes("i)"));
		bytesBytes = new ($sliceType($Uint8))($stringToBytes("[]byte{"));
		badWidthBytes = new ($sliceType($Uint8))($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new ($sliceType($Uint8))($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new ($sliceType($Uint8))($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.Ptr(); $copy(ppFree, new sync.Pool.Ptr(($sliceType($emptyInterface)).nil, (function() {
			return new pp.Ptr();
		})), sync.Pool);
		intBits = reflect.TypeOf(new $Int(0)).Bits();
		uintptrBits = reflect.TypeOf(new $Uintptr(0)).Bits();
		space = new ($sliceType(($arrayType($Uint16, 2))))([$toNativeArray("Uint16", [9, 13]), $toNativeArray("Uint16", [32, 32]), $toNativeArray("Uint16", [133, 133]), $toNativeArray("Uint16", [160, 160]), $toNativeArray("Uint16", [5760, 5760]), $toNativeArray("Uint16", [8192, 8202]), $toNativeArray("Uint16", [8232, 8233]), $toNativeArray("Uint16", [8239, 8239]), $toNativeArray("Uint16", [8287, 8287]), $toNativeArray("Uint16", [12288, 12288])]);
		ssFree = new sync.Pool.Ptr(); $copy(ssFree, new sync.Pool.Ptr(($sliceType($emptyInterface)).nil, (function() {
			return new ss.Ptr();
		})), sync.Pool);
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
	};
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, StringSlice, Search, SearchStrings, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort;
	StringSlice = $pkg.StringSlice = $newType(12, "Slice", "sort.StringSlice", "StringSlice", "sort", null);
	Search = $pkg.Search = function(n, f) {
		var _tmp, _tmp$1, i, j, _q, h;
		_tmp = 0; _tmp$1 = n; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (!f(h)) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	SearchStrings = $pkg.SearchStrings = function(a, x) {
		return Search(a.length, (function(i) {
			return ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i]) >= x;
		}));
	};
	StringSlice.prototype.Search = function(x) {
		var p;
		p = this;
		return SearchStrings($subslice(new ($sliceType($String))(p.array), p.offset, p.offset + p.length), x);
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	min = function(a, b) {
		if (a < b) {
			return a;
		}
		return b;
	};
	insertionSort = function(data, a, b) {
		var i, j;
		i = a + 1 >> 0;
		while (i < b) {
			j = i;
			while (j > a && data.Less(j, j - 1 >> 0)) {
				data.Swap(j, j - 1 >> 0);
				j = j - 1 >> 0;
			}
			i = i + 1 >> 0;
		}
	};
	siftDown = function(data, lo, hi, first) {
		var root, child;
		root = lo;
		while (true) {
			child = ((((2 >>> 16 << 16) * root >> 0) + (2 << 16 >>> 16) * root) >> 0) + 1 >> 0;
			if (child >= hi) {
				break;
			}
			if ((child + 1 >> 0) < hi && data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0)) {
				child = child + 1 >> 0;
			}
			if (!data.Less(first + root >> 0, first + child >> 0)) {
				return;
			}
			data.Swap(first + root >> 0, first + child >> 0);
			root = child;
		}
	};
	heapSort = function(data, a, b) {
		var first, lo, hi, _q, i, i$1;
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		while (i >= 0) {
			siftDown(data, i, hi, first);
			i = i - 1 >> 0;
		}
		i$1 = hi - 1 >> 0;
		while (i$1 >= 0) {
			data.Swap(first, first + i$1 >> 0);
			siftDown(data, lo, i$1, first);
			i$1 = i$1 - 1 >> 0;
		}
	};
	medianOfThree = function(data, a, b, c) {
		var m0, m1, m2;
		m0 = b;
		m1 = a;
		m2 = c;
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
		if (data.Less(m2, m1)) {
			data.Swap(m2, m1);
		}
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
	};
	swapRange = function(data, a, b, n) {
		var i;
		i = 0;
		while (i < n) {
			data.Swap(a + i >> 0, b + i >> 0);
			i = i + 1 >> 0;
		}
	};
	doPivot = function(data, lo, hi) {
		var midlo, midhi, _q, m, _q$1, s, pivot, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, d, n, _tmp$4, _tmp$5;
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		if ((hi - lo >> 0) > 40) {
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			medianOfThree(data, lo, lo + s >> 0, lo + ((((2 >>> 16 << 16) * s >> 0) + (2 << 16 >>> 16) * s) >> 0) >> 0);
			medianOfThree(data, m, m - s >> 0, m + s >> 0);
			medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ((((2 >>> 16 << 16) * s >> 0) + (2 << 16 >>> 16) * s) >> 0) >> 0);
		}
		medianOfThree(data, lo, m, hi - 1 >> 0);
		pivot = lo;
		_tmp = lo + 1 >> 0; _tmp$1 = lo + 1 >> 0; _tmp$2 = hi; _tmp$3 = hi; a = _tmp; b = _tmp$1; c = _tmp$2; d = _tmp$3;
		while (true) {
			while (b < c) {
				if (data.Less(b, pivot)) {
					b = b + 1 >> 0;
				} else if (!data.Less(pivot, b)) {
					data.Swap(a, b);
					a = a + 1 >> 0;
					b = b + 1 >> 0;
				} else {
					break;
				}
			}
			while (b < c) {
				if (data.Less(pivot, c - 1 >> 0)) {
					c = c - 1 >> 0;
				} else if (!data.Less(c - 1 >> 0, pivot)) {
					data.Swap(c - 1 >> 0, d - 1 >> 0);
					c = c - 1 >> 0;
					d = d - 1 >> 0;
				} else {
					break;
				}
			}
			if (b >= c) {
				break;
			}
			data.Swap(b, c - 1 >> 0);
			b = b + 1 >> 0;
			c = c - 1 >> 0;
		}
		n = min(b - a >> 0, a - lo >> 0);
		swapRange(data, lo, b - n >> 0, n);
		n = min(hi - d >> 0, d - c >> 0);
		swapRange(data, c, hi - n >> 0, n);
		_tmp$4 = (lo + b >> 0) - a >> 0; _tmp$5 = hi - ((d - c >> 0)) >> 0; midlo = _tmp$4; midhi = _tmp$5;
		return [midlo, midhi];
	};
	quickSort = function(data, a, b, maxDepth) {
		var _tuple, mlo, mhi;
		while ((b - a >> 0) > 7) {
			if (maxDepth === 0) {
				heapSort(data, a, b);
				return;
			}
			maxDepth = maxDepth - 1 >> 0;
			_tuple = doPivot(data, a, b); mlo = _tuple[0]; mhi = _tuple[1];
			if ((mlo - a >> 0) < (b - mhi >> 0)) {
				quickSort(data, a, mlo, maxDepth);
				a = mhi;
			} else {
				quickSort(data, mhi, b, maxDepth);
				b = mlo;
			}
		}
		if ((b - a >> 0) > 1) {
			insertionSort(data, a, b);
		}
	};
	Sort = $pkg.Sort = function(data) {
		var n, maxDepth, i;
		n = data.Len();
		maxDepth = 0;
		i = n;
		while (i > 0) {
			maxDepth = maxDepth + 1 >> 0;
			i = i >> 1 >> 0;
		}
		maxDepth = (((maxDepth >>> 16 << 16) * 2 >> 0) + (maxDepth << 16 >>> 16) * 2) >> 0;
		quickSort(data, 0, n, maxDepth);
	};
	StringSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var p;
		p = this;
		return ((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]) < ((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var p, _tmp, _tmp$1;
		p = this;
		_tmp = ((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j]); _tmp$1 = ((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]); (i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i] = _tmp; (j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j] = _tmp$1;
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var p;
		p = this;
		Sort(p);
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	$pkg.$init = function() {
		StringSlice.methods = [["Len", "Len", "", [], [$Int], false, -1], ["Less", "Less", "", [$Int, $Int], [$Bool], false, -1], ["Search", "Search", "", [$String], [$Int], false, -1], ["Sort", "Sort", "", [], [], false, -1], ["Swap", "Swap", "", [$Int, $Int], [], false, -1]];
		($ptrType(StringSlice)).methods = [["Len", "Len", "", [], [$Int], false, -1], ["Less", "Less", "", [$Int, $Int], [$Bool], false, -1], ["Search", "Search", "", [$String], [$Int], false, -1], ["Sort", "Sort", "", [], [], false, -1], ["Swap", "Swap", "", [$Int, $Int], [], false, -1]];
		StringSlice.init($String);
	};
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], errors = $packages["errors"], io = $packages["io"], utf8 = $packages["unicode/utf8"], unicode = $packages["unicode"], IndexByte, explode, hashstr, Count, Contains, Index, LastIndex, IndexRune, IndexAny, genSplit, Split, Fields, FieldsFunc, Join, HasPrefix, HasSuffix, Map, Repeat, ToLower, Replace;
	IndexByte = $pkg.IndexByte = function(s, c) {
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	explode = function(s, n) {
		var l, a, size, ch, _tmp, _tmp$1, i, cur, _tuple;
		if (n === 0) {
			return ($sliceType($String)).nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = ($sliceType($String)).make(n, 0, function() { return ""; });
		size = 0;
		ch = 0;
		_tmp = 0; _tmp$1 = 0; i = _tmp; cur = _tmp$1;
		while ((i + 1 >> 0) < n) {
			_tuple = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple[0]; size = _tuple[1];
			if (ch === 65533) {
				(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i] = "\xEF\xBF\xBD";
			} else {
				(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i] = s.substring(cur, (cur + size >> 0));
			}
			cur = cur + (size) >> 0;
			i = i + 1 >> 0;
		}
		if (cur < s.length) {
			(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i] = s.substring(cur);
		}
		return a;
	};
	hashstr = function(sep) {
		var hash, i, _tmp, _tmp$1, pow, sq, i$1, x, x$1;
		hash = 0;
		i = 0;
		while (i < sep.length) {
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + 1 >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (i$1 > 0) {
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = i$1 >> 1 >> 0;
		}
		return [hash, pow];
	};
	Count = $pkg.Count = function(s, sep) {
		var n, c, i, _tuple, hashsep, pow, h, i$1, lastmatch, i$2, x;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === c) {
					n = n + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashstr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (i$1 < sep.length) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + 1 >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + 1 >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (i$2 < s.length) {
			h = (((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0;
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0)) >>> 0;
			i$2 = i$2 + 1 >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring((i$2 - sep.length >> 0), i$2) === sep) {
				n = n + 1 >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	Contains = $pkg.Contains = function(s, substr) {
		return Index(s, substr) >= 0;
	};
	Index = $pkg.Index = function(s, sep) {
		var n, _tuple, hashsep, pow, h, i, i$1, x;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashstr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i = 0;
		while (i < n) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + 1 >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (i$1 < s.length) {
			h = (((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0;
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0)) >>> 0;
			i$1 = i$1 + 1 >> 0;
			if ((h === hashsep) && s.substring((i$1 - n >> 0), i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	LastIndex = $pkg.LastIndex = function(s, sep) {
		var n, c, i, i$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		}
		c = sep.charCodeAt(0);
		if (n === 1) {
			i = s.length - 1 >> 0;
			while (i >= 0) {
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i - 1 >> 0;
			}
			return -1;
		}
		i$1 = s.length - n >> 0;
		while (i$1 >= 0) {
			if ((s.charCodeAt(i$1) === c) && s.substring(i$1, (i$1 + n >> 0)) === sep) {
				return i$1;
			}
			i$1 = i$1 - 1 >> 0;
		}
		return -1;
	};
	IndexRune = $pkg.IndexRune = function(s, r) {
		var b, i, _ref, _i, _rune, i$1, c;
		if (r < 128) {
			b = (r << 24 >>> 24);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === b) {
					return i;
				}
				i = i + 1 >> 0;
			}
		} else {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i$1 = _i;
				c = _rune[0];
				if (c === r) {
					return i$1;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	IndexAny = $pkg.IndexAny = function(s, chars) {
		var _ref, _i, _rune, i, c, _ref$1, _i$1, _rune$1, m;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	genSplit = function(s, sep, sepSave, n) {
		var c, start, a, na, i;
		if (n === 0) {
			return ($sliceType($String)).nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = ($sliceType($String)).make(n, 0, function() { return ""; });
		na = 0;
		i = 0;
		while ((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n) {
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = s.substring(start, (i + sepSave >> 0));
				na = na + 1 >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + 1 >> 0;
		}
		(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = s.substring(start);
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = $pkg.Split = function(s, sep) {
		return genSplit(s, sep, 0, -1);
	};
	Fields = $pkg.Fields = function(s) {
		return FieldsFunc(s, unicode.IsSpace);
	};
	FieldsFunc = $pkg.FieldsFunc = function(s, f) {
		var n, inField, _ref, _i, _rune, rune, wasInField, a, na, fieldStart, _ref$1, _i$1, _rune$1, i, rune$1;
		n = 0;
		inField = false;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			rune = _rune[0];
			wasInField = inField;
			inField = !f(rune);
			if (inField && !wasInField) {
				n = n + 1 >> 0;
			}
			_i += _rune[1];
		}
		a = ($sliceType($String)).make(n, 0, function() { return ""; });
		na = 0;
		fieldStart = -1;
		_ref$1 = s;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i = _i$1;
			rune$1 = _rune$1[0];
			if (f(rune$1)) {
				if (fieldStart >= 0) {
					(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = s.substring(fieldStart, i);
					na = na + 1 >> 0;
					fieldStart = -1;
				}
			} else if (fieldStart === -1) {
				fieldStart = i;
			}
			_i$1 += _rune$1[1];
		}
		if (fieldStart >= 0) {
			(na < 0 || na >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + na] = s.substring(fieldStart);
		}
		return a;
	};
	Join = $pkg.Join = function(a, sep) {
		var x, x$1, n, i, b, bp, _ref, _i, s;
		if (a.length === 0) {
			return "";
		}
		if (a.length === 1) {
			return ((0 < 0 || 0 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 0]);
		}
		n = (x = sep.length, x$1 = (a.length - 1 >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		i = 0;
		while (i < a.length) {
			n = n + (((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + i]).length) >> 0;
			i = i + 1 >> 0;
		}
		b = ($sliceType($Uint8)).make(n, 0, function() { return 0; });
		bp = $copyString(b, ((0 < 0 || 0 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (_i < _ref.length) {
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	HasPrefix = $pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	HasSuffix = $pkg.HasSuffix = function(s, suffix) {
		return s.length >= suffix.length && s.substring((s.length - suffix.length >> 0)) === suffix;
	};
	Map = $pkg.Map = function(mapping, s) {
		var maxbytes, nbytes, b, _ref, _i, _rune, i, c, r, wid, nb;
		maxbytes = s.length;
		nbytes = 0;
		b = ($sliceType($Uint8)).nil;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			r = mapping(c);
			if (b === ($sliceType($Uint8)).nil) {
				if (r === c) {
					_i += _rune[1];
					continue;
				}
				b = ($sliceType($Uint8)).make(maxbytes, 0, function() { return 0; });
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ((((maxbytes >>> 16 << 16) * 2 >> 0) + (maxbytes << 16 >>> 16) * 2) >> 0) + 4 >> 0;
					nb = ($sliceType($Uint8)).make(maxbytes, 0, function() { return 0; });
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		}
		if (b === ($sliceType($Uint8)).nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
	};
	Repeat = $pkg.Repeat = function(s, count) {
		var x, b, bp, i;
		b = ($sliceType($Uint8)).make((x = s.length, (((x >>> 16 << 16) * count >> 0) + (x << 16 >>> 16) * count) >> 0), 0, function() { return 0; });
		bp = 0;
		i = 0;
		while (i < count) {
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			i = i + 1 >> 0;
		}
		return $bytesToString(b);
	};
	ToLower = $pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	Replace = $pkg.Replace = function(s, old, new$1, n) {
		var m, x, t, w, start, i, j, _tuple, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = ($sliceType($Uint8)).make((s.length + (x = (new$1.length - old.length >> 0), (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0) >> 0), 0, function() { return 0; });
		w = 0;
		start = 0;
		i = 0;
		while (i < n) {
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString(s.substring(start)); wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index(s.substring(start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), s.substring(start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + 1 >> 0;
		}
		w = w + ($copyString($subslice(t, w), s.substring(start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["regexp/syntax"] = (function() {
	var $pkg = {}, unicode = $packages["unicode"], sort = $packages["sort"], strings = $packages["strings"], utf8 = $packages["unicode/utf8"], bytes = $packages["bytes"], strconv = $packages["strconv"], patchList, frag, compiler, Error, ErrorCode, Flags, parser, charGroup, ranges, Prog, InstOp, EmptyOp, Inst, Regexp, Op, anyRuneNotNL, anyRune, anyTable, code1, code2, code3, perlGroup, code4, code5, code6, code7, code8, code9, code10, code11, code12, code13, code14, code15, code16, code17, posixGroup, instOpNames, Compile, minFoldRune, cleanAlt, literalRegexp, Parse, isValidCaptureName, isCharClass, matchRune, mergeCharClass, unicodeTable, cleanClass, appendLiteral, appendRange, appendFoldedRange, appendClass, appendFoldedClass, appendNegatedClass, appendTable, appendNegatedTable, negateClass, checkUTF8, nextRune, isalnum, unhex, EmptyOpContext, IsWordChar, wordRune, bw, dumpProg, u32, dumpInst, writeRegexp, escape, simplify1;
	patchList = $pkg.patchList = $newType(4, "Uint32", "syntax.patchList", "patchList", "regexp/syntax", null);
	frag = $pkg.frag = $newType(0, "Struct", "syntax.frag", "frag", "regexp/syntax", function(i_, out_) {
		this.$val = this;
		this.i = i_ !== undefined ? i_ : 0;
		this.out = out_ !== undefined ? out_ : 0;
	});
	compiler = $pkg.compiler = $newType(0, "Struct", "syntax.compiler", "compiler", "regexp/syntax", function(p_) {
		this.$val = this;
		this.p = p_ !== undefined ? p_ : ($ptrType(Prog)).nil;
	});
	Error = $pkg.Error = $newType(0, "Struct", "syntax.Error", "Error", "regexp/syntax", function(Code_, Expr_) {
		this.$val = this;
		this.Code = Code_ !== undefined ? Code_ : "";
		this.Expr = Expr_ !== undefined ? Expr_ : "";
	});
	ErrorCode = $pkg.ErrorCode = $newType(8, "String", "syntax.ErrorCode", "ErrorCode", "regexp/syntax", null);
	Flags = $pkg.Flags = $newType(2, "Uint16", "syntax.Flags", "Flags", "regexp/syntax", null);
	parser = $pkg.parser = $newType(0, "Struct", "syntax.parser", "parser", "regexp/syntax", function(flags_, stack_, free_, numCap_, wholeRegexp_, tmpClass_) {
		this.$val = this;
		this.flags = flags_ !== undefined ? flags_ : 0;
		this.stack = stack_ !== undefined ? stack_ : ($sliceType(($ptrType(Regexp)))).nil;
		this.free = free_ !== undefined ? free_ : ($ptrType(Regexp)).nil;
		this.numCap = numCap_ !== undefined ? numCap_ : 0;
		this.wholeRegexp = wholeRegexp_ !== undefined ? wholeRegexp_ : "";
		this.tmpClass = tmpClass_ !== undefined ? tmpClass_ : ($sliceType($Int32)).nil;
	});
	charGroup = $pkg.charGroup = $newType(0, "Struct", "syntax.charGroup", "charGroup", "regexp/syntax", function(sign_, class$1_) {
		this.$val = this;
		this.sign = sign_ !== undefined ? sign_ : 0;
		this.class$1 = class$1_ !== undefined ? class$1_ : ($sliceType($Int32)).nil;
	});
	ranges = $pkg.ranges = $newType(0, "Struct", "syntax.ranges", "ranges", "regexp/syntax", function(p_) {
		this.$val = this;
		this.p = p_ !== undefined ? p_ : ($ptrType(($sliceType($Int32)))).nil;
	});
	Prog = $pkg.Prog = $newType(0, "Struct", "syntax.Prog", "Prog", "regexp/syntax", function(Inst_, Start_, NumCap_) {
		this.$val = this;
		this.Inst = Inst_ !== undefined ? Inst_ : ($sliceType(Inst)).nil;
		this.Start = Start_ !== undefined ? Start_ : 0;
		this.NumCap = NumCap_ !== undefined ? NumCap_ : 0;
	});
	InstOp = $pkg.InstOp = $newType(1, "Uint8", "syntax.InstOp", "InstOp", "regexp/syntax", null);
	EmptyOp = $pkg.EmptyOp = $newType(1, "Uint8", "syntax.EmptyOp", "EmptyOp", "regexp/syntax", null);
	Inst = $pkg.Inst = $newType(0, "Struct", "syntax.Inst", "Inst", "regexp/syntax", function(Op_, Out_, Arg_, Rune_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : 0;
		this.Out = Out_ !== undefined ? Out_ : 0;
		this.Arg = Arg_ !== undefined ? Arg_ : 0;
		this.Rune = Rune_ !== undefined ? Rune_ : ($sliceType($Int32)).nil;
	});
	Regexp = $pkg.Regexp = $newType(0, "Struct", "syntax.Regexp", "Regexp", "regexp/syntax", function(Op_, Flags_, Sub_, Sub0_, Rune_, Rune0_, Min_, Max_, Cap_, Name_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Sub = Sub_ !== undefined ? Sub_ : ($sliceType(($ptrType(Regexp)))).nil;
		this.Sub0 = Sub0_ !== undefined ? Sub0_ : ($arrayType(($ptrType(Regexp)), 1)).zero();
		this.Rune = Rune_ !== undefined ? Rune_ : ($sliceType($Int32)).nil;
		this.Rune0 = Rune0_ !== undefined ? Rune0_ : ($arrayType($Int32, 2)).zero();
		this.Min = Min_ !== undefined ? Min_ : 0;
		this.Max = Max_ !== undefined ? Max_ : 0;
		this.Cap = Cap_ !== undefined ? Cap_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
	});
	Op = $pkg.Op = $newType(1, "Uint8", "syntax.Op", "Op", "regexp/syntax", null);
	patchList.prototype.next = function(p) {
		var l, x, x$1, i;
		l = this.$val;
		i = (x = p.Inst, x$1 = l >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		if (((l & 1) >>> 0) === 0) {
			return (i.Out >>> 0);
		}
		return (i.Arg >>> 0);
	};
	$ptrType(patchList).prototype.next = function(p) { return new patchList(this.$get()).next(p); };
	patchList.prototype.patch = function(p, val) {
		var l, x, x$1, i;
		l = this.$val;
		while (!((l === 0))) {
			i = (x = p.Inst, x$1 = l >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
			if (((l & 1) >>> 0) === 0) {
				l = (i.Out >>> 0);
				i.Out = val;
			} else {
				l = (i.Arg >>> 0);
				i.Arg = val;
			}
		}
	};
	$ptrType(patchList).prototype.patch = function(p, val) { return new patchList(this.$get()).patch(p, val); };
	patchList.prototype.append = function(p, l2) {
		var l1, last, next, x, x$1, i;
		l1 = this.$val;
		if (l1 === 0) {
			return l2;
		}
		if (l2 === 0) {
			return l1;
		}
		last = l1;
		while (true) {
			next = (new patchList(last)).next(p);
			if (next === 0) {
				break;
			}
			last = next;
		}
		i = (x = p.Inst, x$1 = last >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		if (((last & 1) >>> 0) === 0) {
			i.Out = (l2 >>> 0);
		} else {
			i.Arg = (l2 >>> 0);
		}
		return l1;
	};
	$ptrType(patchList).prototype.append = function(p, l2) { return new patchList(this.$get()).append(p, l2); };
	Compile = $pkg.Compile = function(re) {
		var c, f;
		c = new compiler.Ptr(); $copy(c, new compiler.Ptr(), compiler);
		c.init();
		f = new frag.Ptr(); $copy(f, c.compile(re), frag);
		(new patchList(f.out)).patch(c.p, c.inst(4).i);
		c.p.Start = (f.i >> 0);
		return [c.p, null];
	};
	compiler.Ptr.prototype.init = function() {
		var c;
		c = this;
		c.p = new Prog.Ptr();
		c.p.NumCap = 2;
		c.inst(5);
	};
	compiler.prototype.init = function() { return this.$val.init(); };
	compiler.Ptr.prototype.compile = function(re) {
		var c, _ref, f, _ref$1, _i, j, f1, bra, x, sub, ket, x$1, x$2, x$3, f$1, _ref$2, _i$1, i, sub$1, f$2, _ref$3, _i$2, sub$2;
		c = this;
		_ref = re.Op;
		if (_ref === 1) {
			return c.fail();
		} else if (_ref === 2) {
			return c.nop();
		} else if (_ref === 3) {
			if (re.Rune.length === 0) {
				return c.nop();
			}
			f = new frag.Ptr(); $copy(f, new frag.Ptr(), frag);
			_ref$1 = re.Rune;
			_i = 0;
			while (_i < _ref$1.length) {
				j = _i;
				f1 = new frag.Ptr(); $copy(f1, c.rune($subslice(re.Rune, j, (j + 1 >> 0)), re.Flags), frag);
				if (j === 0) {
					$copy(f, f1, frag);
				} else {
					$copy(f, c.cat($clone(f, frag), $clone(f1, frag)), frag);
				}
				_i++;
			}
			return f;
		} else if (_ref === 4) {
			return c.rune(re.Rune, re.Flags);
		} else if (_ref === 5) {
			return c.rune(anyRuneNotNL, 0);
		} else if (_ref === 6) {
			return c.rune(anyRune, 0);
		} else if (_ref === 7) {
			return c.empty(1);
		} else if (_ref === 8) {
			return c.empty(2);
		} else if (_ref === 9) {
			return c.empty(4);
		} else if (_ref === 10) {
			return c.empty(8);
		} else if (_ref === 11) {
			return c.empty(16);
		} else if (_ref === 12) {
			return c.empty(32);
		} else if (_ref === 13) {
			bra = new frag.Ptr(); $copy(bra, c.cap(((re.Cap << 1 >> 0) >>> 0)), frag);
			sub = new frag.Ptr(); $copy(sub, c.compile((x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]))), frag);
			ket = new frag.Ptr(); $copy(ket, c.cap((((re.Cap << 1 >> 0) | 1) >>> 0)), frag);
			return c.cat($clone(c.cat($clone(bra, frag), $clone(sub, frag)), frag), $clone(ket, frag));
		} else if (_ref === 14) {
			return c.star($clone(c.compile((x$1 = re.Sub, ((0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_ref === 15) {
			return c.plus($clone(c.compile((x$2 = re.Sub, ((0 < 0 || 0 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_ref === 16) {
			return c.quest($clone(c.compile((x$3 = re.Sub, ((0 < 0 || 0 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_ref === 18) {
			if (re.Sub.length === 0) {
				return c.nop();
			}
			f$1 = new frag.Ptr(); $copy(f$1, new frag.Ptr(), frag);
			_ref$2 = re.Sub;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				i = _i$1;
				sub$1 = ((_i$1 < 0 || _i$1 >= _ref$2.length) ? $throwRuntimeError("index out of range") : _ref$2.array[_ref$2.offset + _i$1]);
				if (i === 0) {
					$copy(f$1, c.compile(sub$1), frag);
				} else {
					$copy(f$1, c.cat($clone(f$1, frag), $clone(c.compile(sub$1), frag)), frag);
				}
				_i$1++;
			}
			return f$1;
		} else if (_ref === 19) {
			f$2 = new frag.Ptr(); $copy(f$2, new frag.Ptr(), frag);
			_ref$3 = re.Sub;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				sub$2 = ((_i$2 < 0 || _i$2 >= _ref$3.length) ? $throwRuntimeError("index out of range") : _ref$3.array[_ref$3.offset + _i$2]);
				$copy(f$2, c.alt($clone(f$2, frag), $clone(c.compile(sub$2), frag)), frag);
				_i$2++;
			}
			return f$2;
		}
		throw $panic(new $String("regexp: unhandled case in compile"));
	};
	compiler.prototype.compile = function(re) { return this.$val.compile(re); };
	compiler.Ptr.prototype.inst = function(op) {
		var c, f;
		c = this;
		f = new frag.Ptr(); $copy(f, new frag.Ptr((c.p.Inst.length >>> 0), 0), frag);
		c.p.Inst = $append(c.p.Inst, new Inst.Ptr(op, 0, 0, ($sliceType($Int32)).nil));
		return f;
	};
	compiler.prototype.inst = function(op) { return this.$val.inst(op); };
	compiler.Ptr.prototype.nop = function() {
		var c, f;
		c = this;
		f = new frag.Ptr(); $copy(f, c.inst(6), frag);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		return f;
	};
	compiler.prototype.nop = function() { return this.$val.nop(); };
	compiler.Ptr.prototype.fail = function() {
		var c;
		c = this;
		return new frag.Ptr(0, 0);
	};
	compiler.prototype.fail = function() { return this.$val.fail(); };
	compiler.Ptr.prototype.cap = function(arg) {
		var c, f, x, x$1;
		c = this;
		f = new frag.Ptr(); $copy(f, c.inst(2), frag);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])).Arg = arg;
		if (c.p.NumCap < ((arg >> 0) + 1 >> 0)) {
			c.p.NumCap = (arg >> 0) + 1 >> 0;
		}
		return f;
	};
	compiler.prototype.cap = function(arg) { return this.$val.cap(arg); };
	compiler.Ptr.prototype.cat = function(f1, f2) {
		var c;
		c = this;
		if ((f1.i === 0) || (f2.i === 0)) {
			return new frag.Ptr(0, 0);
		}
		(new patchList(f1.out)).patch(c.p, f2.i);
		return new frag.Ptr(f1.i, f2.out);
	};
	compiler.prototype.cat = function(f1, f2) { return this.$val.cat(f1, f2); };
	compiler.Ptr.prototype.alt = function(f1, f2) {
		var c, f, x, x$1, i;
		c = this;
		if (f1.i === 0) {
			return f2;
		}
		if (f2.i === 0) {
			return f1;
		}
		f = new frag.Ptr(); $copy(f, c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		i.Out = f1.i;
		i.Arg = f2.i;
		f.out = (new patchList(f1.out)).append(c.p, f2.out);
		return f;
	};
	compiler.prototype.alt = function(f1, f2) { return this.$val.alt(f1, f2); };
	compiler.Ptr.prototype.quest = function(f1, nongreedy) {
		var c, f, x, x$1, i;
		c = this;
		f = new frag.Ptr(); $copy(f, c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = ((f.i << 1 >>> 0) >>> 0);
		} else {
			i.Out = f1.i;
			f.out = ((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0);
		}
		f.out = (new patchList(f.out)).append(c.p, f1.out);
		return f;
	};
	compiler.prototype.quest = function(f1, nongreedy) { return this.$val.quest(f1, nongreedy); };
	compiler.Ptr.prototype.star = function(f1, nongreedy) {
		var c, f, x, x$1, i;
		c = this;
		f = new frag.Ptr(); $copy(f, c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = ((f.i << 1 >>> 0) >>> 0);
		} else {
			i.Out = f1.i;
			f.out = ((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0);
		}
		(new patchList(f1.out)).patch(c.p, f.i);
		return f;
	};
	compiler.prototype.star = function(f1, nongreedy) { return this.$val.star(f1, nongreedy); };
	compiler.Ptr.prototype.plus = function(f1, nongreedy) {
		var c;
		c = this;
		return new frag.Ptr(f1.i, c.star($clone(f1, frag), nongreedy).out);
	};
	compiler.prototype.plus = function(f1, nongreedy) { return this.$val.plus(f1, nongreedy); };
	compiler.Ptr.prototype.empty = function(op) {
		var c, f, x, x$1;
		c = this;
		f = new frag.Ptr(); $copy(f, c.inst(3), frag);
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])).Arg = (op >>> 0);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		return f;
	};
	compiler.prototype.empty = function(op) { return this.$val.empty(op); };
	compiler.Ptr.prototype.rune = function(r, flags) {
		var c, f, x, x$1, i;
		c = this;
		f = new frag.Ptr(); $copy(f, c.inst(7), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		i.Rune = r;
		flags = (flags & 1) >>> 0;
		if (!((r.length === 1)) || (unicode.SimpleFold(((0 < 0 || 0 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 0])) === ((0 < 0 || 0 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 0]))) {
			flags = flags & ~1;
		}
		i.Arg = (flags >>> 0);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		if ((((flags & 1) >>> 0) === 0) && ((r.length === 1) || (r.length === 2) && (((0 < 0 || 0 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 0]) === ((1 < 0 || 1 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 1])))) {
			i.Op = 8;
		} else if ((r.length === 2) && (((0 < 0 || 0 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 0]) === 0) && (((1 < 0 || 1 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 1]) === 1114111)) {
			i.Op = 9;
		} else if ((r.length === 4) && (((0 < 0 || 0 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 0]) === 0) && (((1 < 0 || 1 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 1]) === 9) && (((2 < 0 || 2 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 2]) === 11) && (((3 < 0 || 3 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 3]) === 1114111)) {
			i.Op = 10;
		}
		return f;
	};
	compiler.prototype.rune = function(r, flags) { return this.$val.rune(r, flags); };
	Error.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "error parsing regexp: " + (new ErrorCode(e.Code)).String() + ": `" + e.Expr + "`";
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ErrorCode.prototype.String = function() {
		var e;
		e = this.$val;
		return e;
	};
	$ptrType(ErrorCode).prototype.String = function() { return new ErrorCode(this.$get()).String(); };
	parser.Ptr.prototype.newRegexp = function(op) {
		var p, re;
		p = this;
		re = p.free;
		if (!(re === ($ptrType(Regexp)).nil)) {
			p.free = re.Sub0[0];
			$copy(re, new Regexp.Ptr(0, 0, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, ""), Regexp);
		} else {
			re = new Regexp.Ptr();
		}
		re.Op = op;
		return re;
	};
	parser.prototype.newRegexp = function(op) { return this.$val.newRegexp(op); };
	parser.Ptr.prototype.reuse = function(re) {
		var p;
		p = this;
		re.Sub0[0] = p.free;
		p.free = re;
	};
	parser.prototype.reuse = function(re) { return this.$val.reuse(re); };
	parser.Ptr.prototype.push = function(re) {
		var p, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17;
		p = this;
		if ((re.Op === 4) && (re.Rune.length === 2) && ((x = re.Rune, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])) === (x$1 = re.Rune, ((1 < 0 || 1 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 1])))) {
			if (p.maybeConcat((x$16 = re.Rune, ((0 < 0 || 0 >= x$16.length) ? $throwRuntimeError("index out of range") : x$16.array[x$16.offset + 0])), p.flags & ~1)) {
				return ($ptrType(Regexp)).nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = p.flags & ~1;
		} else if ((re.Op === 4) && (re.Rune.length === 4) && ((x$2 = re.Rune, ((0 < 0 || 0 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 0])) === (x$3 = re.Rune, ((1 < 0 || 1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 1]))) && ((x$4 = re.Rune, ((2 < 0 || 2 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 2])) === (x$5 = re.Rune, ((3 < 0 || 3 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + 3]))) && (unicode.SimpleFold((x$6 = re.Rune, ((0 < 0 || 0 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + 0]))) === (x$7 = re.Rune, ((2 < 0 || 2 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + 2]))) && (unicode.SimpleFold((x$8 = re.Rune, ((2 < 0 || 2 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8.array[x$8.offset + 2]))) === (x$9 = re.Rune, ((0 < 0 || 0 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9.array[x$9.offset + 0]))) || (re.Op === 4) && (re.Rune.length === 2) && (((x$10 = re.Rune, ((0 < 0 || 0 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10.array[x$10.offset + 0])) + 1 >> 0) === (x$11 = re.Rune, ((1 < 0 || 1 >= x$11.length) ? $throwRuntimeError("index out of range") : x$11.array[x$11.offset + 1]))) && (unicode.SimpleFold((x$12 = re.Rune, ((0 < 0 || 0 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12.array[x$12.offset + 0]))) === (x$13 = re.Rune, ((1 < 0 || 1 >= x$13.length) ? $throwRuntimeError("index out of range") : x$13.array[x$13.offset + 1]))) && (unicode.SimpleFold((x$14 = re.Rune, ((1 < 0 || 1 >= x$14.length) ? $throwRuntimeError("index out of range") : x$14.array[x$14.offset + 1]))) === (x$15 = re.Rune, ((0 < 0 || 0 >= x$15.length) ? $throwRuntimeError("index out of range") : x$15.array[x$15.offset + 0])))) {
			if (p.maybeConcat((x$17 = re.Rune, ((0 < 0 || 0 >= x$17.length) ? $throwRuntimeError("index out of range") : x$17.array[x$17.offset + 0])), (p.flags | 1) >>> 0)) {
				return ($ptrType(Regexp)).nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = (p.flags | 1) >>> 0;
		} else {
			p.maybeConcat(-1, 0);
		}
		p.stack = $append(p.stack, re);
		return re;
	};
	parser.prototype.push = function(re) { return this.$val.push(re); };
	parser.Ptr.prototype.maybeConcat = function(r, flags) {
		var p, n, x, x$1, re1, x$2, x$3, re2, x$4;
		p = this;
		n = p.stack.length;
		if (n < 2) {
			return false;
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + x$3]));
		if (!((re1.Op === 3)) || !((re2.Op === 3)) || !((((re1.Flags & 1) >>> 0) === ((re2.Flags & 1) >>> 0)))) {
			return false;
		}
		re2.Rune = $appendSlice(re2.Rune, re1.Rune);
		if (r >= 0) {
			re1.Rune = $subslice(new ($sliceType($Int32))(re1.Rune0), 0, 1);
			(x$4 = re1.Rune, (0 < 0 || 0 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 0] = r);
			re1.Flags = flags;
			return true;
		}
		p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
		p.reuse(re1);
		return false;
	};
	parser.prototype.maybeConcat = function(r, flags) { return this.$val.maybeConcat(r, flags); };
	parser.Ptr.prototype.newLiteral = function(r, flags) {
		var p, re;
		p = this;
		re = p.newRegexp(3);
		re.Flags = flags;
		if (!((((flags & 1) >>> 0) === 0))) {
			r = minFoldRune(r);
		}
		re.Rune0[0] = r;
		re.Rune = $subslice(new ($sliceType($Int32))(re.Rune0), 0, 1);
		return re;
	};
	parser.prototype.newLiteral = function(r, flags) { return this.$val.newLiteral(r, flags); };
	minFoldRune = function(r) {
		var min, r0;
		if (r < 65 || r > 66639) {
			return r;
		}
		min = r;
		r0 = r;
		r = unicode.SimpleFold(r);
		while (!((r === r0))) {
			if (min > r) {
				min = r;
			}
			r = unicode.SimpleFold(r);
		}
		return min;
	};
	parser.Ptr.prototype.literal = function(r) {
		var p;
		p = this;
		p.push(p.newLiteral(r, p.flags));
	};
	parser.prototype.literal = function(r) { return this.$val.literal(r); };
	parser.Ptr.prototype.op = function(op) {
		var p, re;
		p = this;
		re = p.newRegexp(op);
		re.Flags = p.flags;
		return p.push(re);
	};
	parser.prototype.op = function(op) { return this.$val.op(op); };
	parser.Ptr.prototype.repeat = function(op, min, max, before, after, lastRepeat) {
		var p, flags, n, x, x$1, sub, re, x$2, x$3, x$4;
		p = this;
		flags = p.flags;
		if (!((((p.flags & 64) >>> 0) === 0))) {
			if (after.length > 0 && (after.charCodeAt(0) === 63)) {
				after = after.substring(1);
				flags = (flags ^ 32) << 16 >>> 16;
			}
			if (!(lastRepeat === "")) {
				return ["", new Error.Ptr("invalid nested repetition operator", lastRepeat.substring(0, (lastRepeat.length - after.length >> 0)))];
			}
		}
		n = p.stack.length;
		if (n === 0) {
			return ["", new Error.Ptr("missing argument to repetition operator", before.substring(0, (before.length - after.length >> 0)))];
		}
		sub = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		if (sub.Op >= 128) {
			return ["", new Error.Ptr("missing argument to repetition operator", before.substring(0, (before.length - after.length >> 0)))];
		}
		re = p.newRegexp(op);
		re.Min = min;
		re.Max = max;
		re.Flags = flags;
		re.Sub = $subslice(new ($sliceType(($ptrType(Regexp))))(re.Sub0), 0, 1);
		(x$2 = re.Sub, (0 < 0 || 0 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 0] = sub);
		(x$3 = p.stack, x$4 = n - 1 >> 0, (x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + x$4] = re);
		return [after, null];
	};
	parser.prototype.repeat = function(op, min, max, before, after, lastRepeat) { return this.$val.repeat(op, min, max, before, after, lastRepeat); };
	parser.Ptr.prototype.concat = function() {
		var p, i, x, x$1, subs;
		p = this;
		p.maybeConcat(-1, 0);
		i = p.stack.length;
		while (i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])).Op < 128) {
			i = i - 1 >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		if (subs.length === 0) {
			return p.push(p.newRegexp(2));
		}
		return p.push(p.collapse(subs, 18));
	};
	parser.prototype.concat = function() { return this.$val.concat(); };
	parser.Ptr.prototype.alternate = function() {
		var p, i, x, x$1, subs, x$2;
		p = this;
		i = p.stack.length;
		while (i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])).Op < 128) {
			i = i - 1 >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		if (subs.length > 0) {
			cleanAlt((x$2 = subs.length - 1 >> 0, ((x$2 < 0 || x$2 >= subs.length) ? $throwRuntimeError("index out of range") : subs.array[subs.offset + x$2])));
		}
		if (subs.length === 0) {
			return p.push(p.newRegexp(1));
		}
		return p.push(p.collapse(subs, 19));
	};
	parser.prototype.alternate = function() { return this.$val.alternate(); };
	cleanAlt = function(re) {
		var _ref, x, x$1, x$2, x$3, x$4, x$5;
		_ref = re.Op;
		if (_ref === 4) {
			re.Rune = cleanClass(new ($ptrType(($sliceType($Int32))))(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re));
			if ((re.Rune.length === 2) && ((x = re.Rune, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])) === 0) && ((x$1 = re.Rune, ((1 < 0 || 1 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 1])) === 1114111)) {
				re.Rune = ($sliceType($Int32)).nil;
				re.Op = 6;
				return;
			}
			if ((re.Rune.length === 4) && ((x$2 = re.Rune, ((0 < 0 || 0 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 0])) === 0) && ((x$3 = re.Rune, ((1 < 0 || 1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 1])) === 9) && ((x$4 = re.Rune, ((2 < 0 || 2 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 2])) === 11) && ((x$5 = re.Rune, ((3 < 0 || 3 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + 3])) === 1114111)) {
				re.Rune = ($sliceType($Int32)).nil;
				re.Op = 5;
				return;
			}
			if ((re.Rune.capacity - re.Rune.length >> 0) > 100) {
				re.Rune = $appendSlice($subslice(new ($sliceType($Int32))(re.Rune0), 0, 0), re.Rune);
			}
		}
	};
	parser.Ptr.prototype.collapse = function(subs, op) {
		var p, re, _ref, _i, sub, old, x;
		p = this;
		if (subs.length === 1) {
			return ((0 < 0 || 0 >= subs.length) ? $throwRuntimeError("index out of range") : subs.array[subs.offset + 0]);
		}
		re = p.newRegexp(op);
		re.Sub = $subslice(new ($sliceType(($ptrType(Regexp))))(re.Sub0), 0, 0);
		_ref = subs;
		_i = 0;
		while (_i < _ref.length) {
			sub = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (sub.Op === op) {
				re.Sub = $appendSlice(re.Sub, sub.Sub);
				p.reuse(sub);
			} else {
				re.Sub = $append(re.Sub, sub);
			}
			_i++;
		}
		if (op === 19) {
			re.Sub = p.factor(re.Sub, re.Flags);
			if (re.Sub.length === 1) {
				old = re;
				re = (x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]));
				p.reuse(old);
			}
		}
		return re;
	};
	parser.prototype.collapse = function(subs, op) { return this.$val.collapse(subs, op); };
	parser.Ptr.prototype.factor = function(sub, flags) {
		var p, str, strflags, start, out, i, istr, iflags, _tuple, same, prefix, j, suffix, re, first, i$1, ifirst, prefix$1, j$1, reuse, suffix$1, re$1, i$2, max, j$2, _tmp, _tmp$1, j$3, _ref, _i, i$3, x;
		p = this;
		if (sub.length < 2) {
			return sub;
		}
		str = ($sliceType($Int32)).nil;
		strflags = 0;
		start = 0;
		out = $subslice(sub, 0, 0);
		i = 0;
		while (i <= sub.length) {
			istr = ($sliceType($Int32)).nil;
			iflags = 0;
			if (i < sub.length) {
				_tuple = p.leadingString(((i < 0 || i >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + i])); istr = _tuple[0]; iflags = _tuple[1];
				if (iflags === strflags) {
					same = 0;
					while (same < str.length && same < istr.length && (((same < 0 || same >= str.length) ? $throwRuntimeError("index out of range") : str.array[str.offset + same]) === ((same < 0 || same >= istr.length) ? $throwRuntimeError("index out of range") : istr.array[istr.offset + same]))) {
						same = same + 1 >> 0;
					}
					if (same > 0) {
						str = $subslice(str, 0, same);
						i = i + 1 >> 0;
						continue;
					}
				}
			}
			if (i === start) {
			} else if (i === (start + 1 >> 0)) {
				out = $append(out, ((start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start]));
			} else {
				prefix = p.newRegexp(3);
				prefix.Flags = strflags;
				prefix.Rune = $appendSlice($subslice(prefix.Rune, 0, 0), str);
				j = start;
				while (j < i) {
					(j < 0 || j >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j] = p.removeLeadingString(((j < 0 || j >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j]), str.length);
					j = j + 1 >> 0;
				}
				suffix = p.collapse($subslice(sub, start, i), 19);
				re = p.newRegexp(18);
				re.Sub = $append($subslice(re.Sub, 0, 0), prefix, suffix);
				out = $append(out, re);
			}
			start = i;
			str = istr;
			strflags = iflags;
			i = i + 1 >> 0;
		}
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		first = ($ptrType(Regexp)).nil;
		i$1 = 0;
		while (i$1 <= sub.length) {
			ifirst = ($ptrType(Regexp)).nil;
			if (i$1 < sub.length) {
				ifirst = p.leadingRegexp(((i$1 < 0 || i$1 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + i$1]));
				if (!(first === ($ptrType(Regexp)).nil) && first.Equal(ifirst)) {
					i$1 = i$1 + 1 >> 0;
					continue;
				}
			}
			if (i$1 === start) {
			} else if (i$1 === (start + 1 >> 0)) {
				out = $append(out, ((start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start]));
			} else {
				prefix$1 = first;
				j$1 = start;
				while (j$1 < i$1) {
					reuse = !((j$1 === start));
					(j$1 < 0 || j$1 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j$1] = p.removeLeadingRegexp(((j$1 < 0 || j$1 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j$1]), reuse);
					j$1 = j$1 + 1 >> 0;
				}
				suffix$1 = p.collapse($subslice(sub, start, i$1), 19);
				re$1 = p.newRegexp(18);
				re$1.Sub = $append($subslice(re$1.Sub, 0, 0), prefix$1, suffix$1);
				out = $append(out, re$1);
			}
			start = i$1;
			first = ifirst;
			i$1 = i$1 + 1 >> 0;
		}
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		i$2 = 0;
		while (i$2 <= sub.length) {
			if (i$2 < sub.length && isCharClass(((i$2 < 0 || i$2 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + i$2]))) {
				i$2 = i$2 + 1 >> 0;
				continue;
			}
			if (i$2 === start) {
			} else if (i$2 === (start + 1 >> 0)) {
				out = $append(out, ((start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start]));
			} else {
				max = start;
				j$2 = start + 1 >> 0;
				while (j$2 < i$2) {
					if (((max < 0 || max >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + max]).Op < ((j$2 < 0 || j$2 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j$2]).Op || (((max < 0 || max >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + max]).Op === ((j$2 < 0 || j$2 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j$2]).Op) && ((max < 0 || max >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + max]).Rune.length < ((j$2 < 0 || j$2 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j$2]).Rune.length) {
						max = j$2;
					}
					j$2 = j$2 + 1 >> 0;
				}
				_tmp = ((max < 0 || max >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + max]); _tmp$1 = ((start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start]); (start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start] = _tmp; (max < 0 || max >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + max] = _tmp$1;
				j$3 = start + 1 >> 0;
				while (j$3 < i$2) {
					mergeCharClass(((start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start]), ((j$3 < 0 || j$3 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j$3]));
					p.reuse(((j$3 < 0 || j$3 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + j$3]));
					j$3 = j$3 + 1 >> 0;
				}
				cleanAlt(((start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start]));
				out = $append(out, ((start < 0 || start >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + start]));
			}
			if (i$2 < sub.length) {
				out = $append(out, ((i$2 < 0 || i$2 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + i$2]));
			}
			start = i$2 + 1 >> 0;
			i$2 = i$2 + 1 >> 0;
		}
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		_ref = sub;
		_i = 0;
		while (_i < _ref.length) {
			i$3 = _i;
			if ((i$3 + 1 >> 0) < sub.length && (((i$3 < 0 || i$3 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + i$3]).Op === 2) && ((x = i$3 + 1 >> 0, ((x < 0 || x >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + x])).Op === 2)) {
				_i++;
				continue;
			}
			out = $append(out, ((i$3 < 0 || i$3 >= sub.length) ? $throwRuntimeError("index out of range") : sub.array[sub.offset + i$3]));
			_i++;
		}
		sub = out;
		return sub;
	};
	parser.prototype.factor = function(sub, flags) { return this.$val.factor(sub, flags); };
	parser.Ptr.prototype.leadingString = function(re) {
		var p, x;
		p = this;
		if ((re.Op === 18) && re.Sub.length > 0) {
			re = (x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]));
		}
		if (!((re.Op === 3))) {
			return [($sliceType($Int32)).nil, 0];
		}
		return [re.Rune, (re.Flags & 1) >>> 0];
	};
	parser.prototype.leadingString = function(re) { return this.$val.leadingString(re); };
	parser.Ptr.prototype.removeLeadingString = function(re, n) {
		var p, x, sub, x$1, _ref, old, x$2;
		p = this;
		if ((re.Op === 18) && re.Sub.length > 0) {
			sub = (x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]));
			sub = p.removeLeadingString(sub, n);
			(x$1 = re.Sub, (0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0] = sub);
			if (sub.Op === 2) {
				p.reuse(sub);
				_ref = re.Sub.length;
				if (_ref === 0 || _ref === 1) {
					re.Op = 2;
					re.Sub = ($sliceType(($ptrType(Regexp)))).nil;
				} else if (_ref === 2) {
					old = re;
					re = (x$2 = re.Sub, ((1 < 0 || 1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 1]));
					p.reuse(old);
				} else {
					$copySlice(re.Sub, $subslice(re.Sub, 1));
					re.Sub = $subslice(re.Sub, 0, (re.Sub.length - 1 >> 0));
				}
			}
			return re;
		}
		if (re.Op === 3) {
			re.Rune = $subslice(re.Rune, 0, $copySlice(re.Rune, $subslice(re.Rune, n)));
			if (re.Rune.length === 0) {
				re.Op = 2;
			}
		}
		return re;
	};
	parser.prototype.removeLeadingString = function(re, n) { return this.$val.removeLeadingString(re, n); };
	parser.Ptr.prototype.leadingRegexp = function(re) {
		var p, x, sub;
		p = this;
		if (re.Op === 2) {
			return ($ptrType(Regexp)).nil;
		}
		if ((re.Op === 18) && re.Sub.length > 0) {
			sub = (x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]));
			if (sub.Op === 2) {
				return ($ptrType(Regexp)).nil;
			}
			return sub;
		}
		return re;
	};
	parser.prototype.leadingRegexp = function(re) { return this.$val.leadingRegexp(re); };
	parser.Ptr.prototype.removeLeadingRegexp = function(re, reuse) {
		var p, x, _ref, old, x$1;
		p = this;
		if ((re.Op === 18) && re.Sub.length > 0) {
			if (reuse) {
				p.reuse((x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])));
			}
			re.Sub = $subslice(re.Sub, 0, $copySlice(re.Sub, $subslice(re.Sub, 1)));
			_ref = re.Sub.length;
			if (_ref === 0) {
				re.Op = 2;
				re.Sub = ($sliceType(($ptrType(Regexp)))).nil;
			} else if (_ref === 1) {
				old = re;
				re = (x$1 = re.Sub, ((0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0]));
				p.reuse(old);
			}
			return re;
		}
		if (reuse) {
			p.reuse(re);
		}
		return p.newRegexp(2);
	};
	parser.prototype.removeLeadingRegexp = function(re, reuse) { return this.$val.removeLeadingRegexp(re, reuse); };
	literalRegexp = function(s, flags) {
		var re, _ref, _i, _rune, c;
		re = new Regexp.Ptr(3, 0, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, "");
		re.Flags = flags;
		re.Rune = $subslice(new ($sliceType($Int32))(re.Rune0), 0, 0);
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (re.Rune.length >= re.Rune.capacity) {
				re.Rune = new ($sliceType($Int32))($stringToRunes(s));
				break;
			}
			re.Rune = $append(re.Rune, c);
			_i += _rune[1];
		}
		return re;
	};
	Parse = $pkg.Parse = function(s, flags) {
		var err, p, err$1, c, op, lastRepeat, t, repeat, _ref, _tuple, _lhs, _tuple$1, before, _ref$1, after, _tuple$2, before$1, _tuple$3, min, max, after$1, ok, _tuple$4, _ref$2, lit, i, re, _tuple$5, r, rest, err$2, _tuple$6, r$1, rest$1, _tuple$7, _tuple$8, n, x;
		if (!((((flags & 2) >>> 0) === 0))) {
			err = checkUTF8(s);
			if (!($interfaceIsEqual(err, null))) {
				return [($ptrType(Regexp)).nil, err];
			}
			return [literalRegexp(s, flags), null];
		}
		p = new parser.Ptr(); $copy(p, new parser.Ptr(), parser);
		err$1 = null;
		c = 0;
		op = 0;
		lastRepeat = "";
		p.flags = flags;
		p.wholeRegexp = s;
		t = s;
		while (!(t === "")) {
			repeat = "";
			_ref = t.charCodeAt(0);
			BigSwitch:
			switch (0) { default: if (_ref === 40) {
				if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2 && (t.charCodeAt(1) === 63)) {
					_tuple = p.parsePerlFlags(t); t = _tuple[0]; err$1 = _tuple[1];
					if (!($interfaceIsEqual(err$1, null))) {
						return [($ptrType(Regexp)).nil, err$1];
					}
					break;
				}
				p.numCap = p.numCap + 1 >> 0;
				p.op(128).Cap = p.numCap;
				t = t.substring(1);
			} else if (_ref === 124) {
				err$1 = p.parseVerticalBar();
				if (!($interfaceIsEqual(err$1, null))) {
					return [($ptrType(Regexp)).nil, err$1];
				}
				t = t.substring(1);
			} else if (_ref === 41) {
				err$1 = p.parseRightParen();
				if (!($interfaceIsEqual(err$1, null))) {
					return [($ptrType(Regexp)).nil, err$1];
				}
				t = t.substring(1);
			} else if (_ref === 94) {
				if (!((((p.flags & 16) >>> 0) === 0))) {
					p.op(9);
				} else {
					p.op(7);
				}
				t = t.substring(1);
			} else if (_ref === 36) {
				if (!((((p.flags & 16) >>> 0) === 0))) {
					_lhs = p.op(10); _lhs.Flags = (_lhs.Flags | 256) >>> 0;
				} else {
					p.op(8);
				}
				t = t.substring(1);
			} else if (_ref === 46) {
				if (!((((p.flags & 8) >>> 0) === 0))) {
					p.op(6);
				} else {
					p.op(5);
				}
				t = t.substring(1);
			} else if (_ref === 91) {
				_tuple$1 = p.parseClass(t); t = _tuple$1[0]; err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, null))) {
					return [($ptrType(Regexp)).nil, err$1];
				}
			} else if (_ref === 42 || _ref === 43 || _ref === 63) {
				before = t;
				_ref$1 = t.charCodeAt(0);
				if (_ref$1 === 42) {
					op = 14;
				} else if (_ref$1 === 43) {
					op = 15;
				} else if (_ref$1 === 63) {
					op = 16;
				}
				after = t.substring(1);
				_tuple$2 = p.repeat(op, 0, 0, before, after, lastRepeat); after = _tuple$2[0]; err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, null))) {
					return [($ptrType(Regexp)).nil, err$1];
				}
				repeat = before;
				t = after;
			} else if (_ref === 123) {
				op = 17;
				before$1 = t;
				_tuple$3 = p.parseRepeat(t); min = _tuple$3[0]; max = _tuple$3[1]; after$1 = _tuple$3[2]; ok = _tuple$3[3];
				if (!ok) {
					p.literal(123);
					t = t.substring(1);
					break;
				}
				if (min < 0 || min > 1000 || max > 1000 || max >= 0 && min > max) {
					return [($ptrType(Regexp)).nil, new Error.Ptr("invalid repeat count", before$1.substring(0, (before$1.length - after$1.length >> 0)))];
				}
				_tuple$4 = p.repeat(op, min, max, before$1, after$1, lastRepeat); after$1 = _tuple$4[0]; err$1 = _tuple$4[1];
				if (!($interfaceIsEqual(err$1, null))) {
					return [($ptrType(Regexp)).nil, err$1];
				}
				repeat = before$1;
				t = after$1;
			} else if (_ref === 92) {
				if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2) {
					_ref$2 = t.charCodeAt(1);
					if (_ref$2 === 65) {
						p.op(9);
						t = t.substring(2);
						break BigSwitch;
					} else if (_ref$2 === 98) {
						p.op(11);
						t = t.substring(2);
						break BigSwitch;
					} else if (_ref$2 === 66) {
						p.op(12);
						t = t.substring(2);
						break BigSwitch;
					} else if (_ref$2 === 67) {
						return [($ptrType(Regexp)).nil, new Error.Ptr("invalid escape sequence", t.substring(0, 2))];
					} else if (_ref$2 === 81) {
						lit = "";
						i = strings.Index(t, "\\E");
						if (i < 0) {
							lit = t.substring(2);
							t = "";
						} else {
							lit = t.substring(2, i);
							t = t.substring((i + 2 >> 0));
						}
						p.push(literalRegexp(lit, p.flags));
						break BigSwitch;
					} else if (_ref$2 === 122) {
						p.op(10);
						t = t.substring(2);
						break BigSwitch;
					}
				}
				re = p.newRegexp(4);
				re.Flags = p.flags;
				if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) {
					_tuple$5 = p.parseUnicodeClass(t, $subslice(new ($sliceType($Int32))(re.Rune0), 0, 0)); r = _tuple$5[0]; rest = _tuple$5[1]; err$2 = _tuple$5[2];
					if (!($interfaceIsEqual(err$2, null))) {
						return [($ptrType(Regexp)).nil, err$2];
					}
					if (!(r === ($sliceType($Int32)).nil)) {
						re.Rune = r;
						t = rest;
						p.push(re);
						break BigSwitch;
					}
				}
				_tuple$6 = p.parsePerlClassEscape(t, $subslice(new ($sliceType($Int32))(re.Rune0), 0, 0)); r$1 = _tuple$6[0]; rest$1 = _tuple$6[1];
				if (!(r$1 === ($sliceType($Int32)).nil)) {
					re.Rune = r$1;
					t = rest$1;
					p.push(re);
					break BigSwitch;
				}
				p.reuse(re);
				_tuple$7 = p.parseEscape(t); c = _tuple$7[0]; t = _tuple$7[1]; err$1 = _tuple$7[2];
				if (!($interfaceIsEqual(err$1, null))) {
					return [($ptrType(Regexp)).nil, err$1];
				}
				p.literal(c);
			} else {
				_tuple$8 = nextRune(t); c = _tuple$8[0]; t = _tuple$8[1]; err$1 = _tuple$8[2];
				if (!($interfaceIsEqual(err$1, null))) {
					return [($ptrType(Regexp)).nil, err$1];
				}
				p.literal(c);
			} }
			lastRepeat = repeat;
		}
		p.concat();
		if (p.swapVerticalBar()) {
			p.stack = $subslice(p.stack, 0, (p.stack.length - 1 >> 0));
		}
		p.alternate();
		n = p.stack.length;
		if (!((n === 1))) {
			return [($ptrType(Regexp)).nil, new Error.Ptr("missing closing )", s)];
		}
		return [(x = p.stack, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])), null];
	};
	parser.Ptr.prototype.parseRepeat = function(s) {
		var min, max, rest, ok, p, ok1, _tuple, _tuple$1;
		min = 0;
		max = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || !((s.charCodeAt(0) === 123))) {
			return [min, max, rest, ok];
		}
		s = s.substring(1);
		ok1 = false;
		_tuple = p.parseInt(s); min = _tuple[0]; s = _tuple[1]; ok1 = _tuple[2];
		if (!ok1) {
			return [min, max, rest, ok];
		}
		if (s === "") {
			return [min, max, rest, ok];
		}
		if (!((s.charCodeAt(0) === 44))) {
			max = min;
		} else {
			s = s.substring(1);
			if (s === "") {
				return [min, max, rest, ok];
			}
			if (s.charCodeAt(0) === 125) {
				max = -1;
			} else {
				_tuple$1 = p.parseInt(s); max = _tuple$1[0]; s = _tuple$1[1]; ok1 = _tuple$1[2];
				if (!ok1) {
					return [min, max, rest, ok];
				} else if (max < 0) {
					min = -1;
				}
			}
		}
		if (s === "" || !((s.charCodeAt(0) === 125))) {
			return [min, max, rest, ok];
		}
		rest = s.substring(1);
		ok = true;
		return [min, max, rest, ok];
	};
	parser.prototype.parseRepeat = function(s) { return this.$val.parseRepeat(s); };
	parser.Ptr.prototype.parsePerlFlags = function(s) {
		var rest, err, p, t, end, _tmp, _tmp$1, _tmp$2, _tmp$3, capture, name, _tmp$4, _tmp$5, _tmp$6, _tmp$7, re, _tmp$8, _tmp$9, c, flags, sign, sawFlag, _tuple, _tmp$10, _tmp$11, _ref, _tmp$12, _tmp$13, _tmp$14, _tmp$15;
		rest = "";
		err = null;
		p = this;
		t = s;
		if (t.length > 4 && (t.charCodeAt(2) === 80) && (t.charCodeAt(3) === 60)) {
			end = strings.IndexRune(t, 62);
			if (end < 0) {
				err = checkUTF8(t);
				if (!($interfaceIsEqual(err, null))) {
					_tmp = ""; _tmp$1 = err; rest = _tmp; err = _tmp$1;
					return [rest, err];
				}
				_tmp$2 = ""; _tmp$3 = new Error.Ptr("invalid named capture", s); rest = _tmp$2; err = _tmp$3;
				return [rest, err];
			}
			capture = t.substring(0, (end + 1 >> 0));
			name = t.substring(4, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, null))) {
				_tmp$4 = ""; _tmp$5 = err; rest = _tmp$4; err = _tmp$5;
				return [rest, err];
			}
			if (!isValidCaptureName(name)) {
				_tmp$6 = ""; _tmp$7 = new Error.Ptr("invalid named capture", capture); rest = _tmp$6; err = _tmp$7;
				return [rest, err];
			}
			p.numCap = p.numCap + 1 >> 0;
			re = p.op(128);
			re.Cap = p.numCap;
			re.Name = name;
			_tmp$8 = t.substring((end + 1 >> 0)); _tmp$9 = null; rest = _tmp$8; err = _tmp$9;
			return [rest, err];
		}
		c = 0;
		t = t.substring(2);
		flags = p.flags;
		sign = 1;
		sawFlag = false;
		Loop:
		while (!(t === "")) {
			_tuple = nextRune(t); c = _tuple[0]; t = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, null))) {
				_tmp$10 = ""; _tmp$11 = err; rest = _tmp$10; err = _tmp$11;
				return [rest, err];
			}
			_ref = c;
			if (_ref === 105) {
				flags = (flags | 1) >>> 0;
				sawFlag = true;
			} else if (_ref === 109) {
				flags = flags & ~16;
				sawFlag = true;
			} else if (_ref === 115) {
				flags = (flags | 8) >>> 0;
				sawFlag = true;
			} else if (_ref === 85) {
				flags = (flags | 32) >>> 0;
				sawFlag = true;
			} else if (_ref === 45) {
				if (sign < 0) {
					break Loop;
				}
				sign = -1;
				flags = ~flags << 16 >>> 16;
				sawFlag = false;
			} else if (_ref === 58 || _ref === 41) {
				if (sign < 0) {
					if (!sawFlag) {
						break Loop;
					}
					flags = ~flags << 16 >>> 16;
				}
				if (c === 58) {
					p.op(128);
				}
				p.flags = flags;
				_tmp$12 = t; _tmp$13 = null; rest = _tmp$12; err = _tmp$13;
				return [rest, err];
			} else {
				break Loop;
			}
		}
		_tmp$14 = ""; _tmp$15 = new Error.Ptr("invalid or unsupported Perl syntax", s.substring(0, (s.length - t.length >> 0))); rest = _tmp$14; err = _tmp$15;
		return [rest, err];
	};
	parser.prototype.parsePerlFlags = function(s) { return this.$val.parsePerlFlags(s); };
	isValidCaptureName = function(name) {
		var _ref, _i, _rune, c;
		if (name === "") {
			return false;
		}
		_ref = name;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (!((c === 95)) && !isalnum(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	parser.Ptr.prototype.parseInt = function(s) {
		var n, rest, ok, p, t, i;
		n = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || s.charCodeAt(0) < 48 || 57 < s.charCodeAt(0)) {
			return [n, rest, ok];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			return [n, rest, ok];
		}
		t = s;
		while (!(s === "") && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57) {
			s = s.substring(1);
		}
		rest = s;
		ok = true;
		t = t.substring(0, (t.length - s.length >> 0));
		i = 0;
		while (i < t.length) {
			if (n >= 100000000) {
				n = -1;
				break;
			}
			n = (((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + (t.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
			i = i + 1 >> 0;
		}
		return [n, rest, ok];
	};
	parser.prototype.parseInt = function(s) { return this.$val.parseInt(s); };
	isCharClass = function(re) {
		return (re.Op === 3) && (re.Rune.length === 1) || (re.Op === 4) || (re.Op === 5) || (re.Op === 6);
	};
	matchRune = function(re, r) {
		var _ref, x, i, x$1, x$2, x$3;
		_ref = re.Op;
		if (_ref === 3) {
			return (re.Rune.length === 1) && ((x = re.Rune, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])) === r);
		} else if (_ref === 4) {
			i = 0;
			while (i < re.Rune.length) {
				if ((x$1 = re.Rune, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i])) <= r && r <= (x$2 = re.Rune, x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + x$3]))) {
					return true;
				}
				i = i + 2 >> 0;
			}
			return false;
		} else if (_ref === 5) {
			return !((r === 10));
		} else if (_ref === 6) {
			return true;
		}
		return false;
	};
	parser.Ptr.prototype.parseVerticalBar = function() {
		var p;
		p = this;
		p.concat();
		if (!p.swapVerticalBar()) {
			p.op(129);
		}
		return null;
	};
	parser.prototype.parseVerticalBar = function() { return this.$val.parseVerticalBar(); };
	mergeCharClass = function(dst, src) {
		var _ref, x, x$1, x$2, x$3, x$4;
		_ref = dst.Op;
		switch (0) { default: if (_ref === 6) {
		} else if (_ref === 5) {
			if (matchRune(src, 10)) {
				dst.Op = 6;
			}
		} else if (_ref === 4) {
			if (src.Op === 3) {
				dst.Rune = appendLiteral(dst.Rune, (x = src.Rune, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])), src.Flags);
			} else {
				dst.Rune = appendClass(dst.Rune, src.Rune);
			}
		} else if (_ref === 3) {
			if (((x$1 = src.Rune, ((0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0])) === (x$2 = dst.Rune, ((0 < 0 || 0 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 0]))) && (src.Flags === dst.Flags)) {
				break;
			}
			dst.Op = 4;
			dst.Rune = appendLiteral($subslice(dst.Rune, 0, 0), (x$3 = dst.Rune, ((0 < 0 || 0 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 0])), dst.Flags);
			dst.Rune = appendLiteral(dst.Rune, (x$4 = src.Rune, ((0 < 0 || 0 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 0])), src.Flags);
		} }
	};
	parser.Ptr.prototype.swapVerticalBar = function() {
		var p, n, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, re1, x$8, x$9, re3, _tmp, _tmp$1, x$10, x$11, x$12, x$13, re1$1, x$14, x$15, re2, x$16, x$17, x$18, x$19, x$20, x$21;
		p = this;
		n = p.stack.length;
		if (n >= 3 && ((x = p.stack, x$1 = n - 2 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])).Op === 129) && isCharClass((x$2 = p.stack, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + x$3]))) && isCharClass((x$4 = p.stack, x$5 = n - 3 >> 0, ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + x$5])))) {
			re1 = (x$6 = p.stack, x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + x$7]));
			re3 = (x$8 = p.stack, x$9 = n - 3 >> 0, ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8.array[x$8.offset + x$9]));
			if (re1.Op > re3.Op) {
				_tmp = re3; _tmp$1 = re1; re1 = _tmp; re3 = _tmp$1;
				(x$10 = p.stack, x$11 = n - 3 >> 0, (x$11 < 0 || x$11 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10.array[x$10.offset + x$11] = re3);
			}
			mergeCharClass(re3, re1);
			p.reuse(re1);
			p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
			return true;
		}
		if (n >= 2) {
			re1$1 = (x$12 = p.stack, x$13 = n - 1 >> 0, ((x$13 < 0 || x$13 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12.array[x$12.offset + x$13]));
			re2 = (x$14 = p.stack, x$15 = n - 2 >> 0, ((x$15 < 0 || x$15 >= x$14.length) ? $throwRuntimeError("index out of range") : x$14.array[x$14.offset + x$15]));
			if (re2.Op === 129) {
				if (n >= 3) {
					cleanAlt((x$16 = p.stack, x$17 = n - 3 >> 0, ((x$17 < 0 || x$17 >= x$16.length) ? $throwRuntimeError("index out of range") : x$16.array[x$16.offset + x$17])));
				}
				(x$18 = p.stack, x$19 = n - 2 >> 0, (x$19 < 0 || x$19 >= x$18.length) ? $throwRuntimeError("index out of range") : x$18.array[x$18.offset + x$19] = re1$1);
				(x$20 = p.stack, x$21 = n - 1 >> 0, (x$21 < 0 || x$21 >= x$20.length) ? $throwRuntimeError("index out of range") : x$20.array[x$20.offset + x$21] = re2);
				return true;
			}
		}
		return false;
	};
	parser.prototype.swapVerticalBar = function() { return this.$val.swapVerticalBar(); };
	parser.Ptr.prototype.parseRightParen = function() {
		var p, n, x, x$1, re1, x$2, x$3, re2, x$4;
		p = this;
		p.concat();
		if (p.swapVerticalBar()) {
			p.stack = $subslice(p.stack, 0, (p.stack.length - 1 >> 0));
		}
		p.alternate();
		n = p.stack.length;
		if (n < 2) {
			return new Error.Ptr("unexpected )", p.wholeRegexp);
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + x$3]));
		p.stack = $subslice(p.stack, 0, (n - 2 >> 0));
		if (!((re2.Op === 128))) {
			return new Error.Ptr("unexpected )", p.wholeRegexp);
		}
		p.flags = re2.Flags;
		if (re2.Cap === 0) {
			p.push(re1);
		} else {
			re2.Op = 13;
			re2.Sub = $subslice(new ($sliceType(($ptrType(Regexp))))(re2.Sub0), 0, 1);
			(x$4 = re2.Sub, (0 < 0 || 0 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 0] = re1);
			p.push(re2);
		}
		return null;
	};
	parser.prototype.parseRightParen = function() { return this.$val.parseRightParen(); };
	parser.Ptr.prototype.parseEscape = function(s) {
		var r, rest, err, p, t, _tmp, _tmp$1, _tmp$2, _tuple, c, _tmp$3, _tmp$4, _tmp$5, _ref, i, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tuple$1, _tmp$12, _tmp$13, _tmp$14, nhex, _tuple$2, _tmp$15, _tmp$16, _tmp$17, v, _tmp$18, _tmp$19, _tmp$20, x, _tuple$3, _tmp$21, _tmp$22, _tmp$23, y, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50;
		r = 0;
		rest = "";
		err = null;
		p = this;
		t = s.substring(1);
		if (t === "") {
			_tmp = 0; _tmp$1 = ""; _tmp$2 = new Error.Ptr("trailing backslash at end of expression", ""); r = _tmp; rest = _tmp$1; err = _tmp$2;
			return [r, rest, err];
		}
		_tuple = nextRune(t); c = _tuple[0]; t = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, null))) {
			_tmp$3 = 0; _tmp$4 = ""; _tmp$5 = err; r = _tmp$3; rest = _tmp$4; err = _tmp$5;
			return [r, rest, err];
		}
		_ref = c;
		Switch:
		switch (0) { default: if (_ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
				break;
			}
			r = c - 48 >> 0;
			i = 1;
			while (i < 3) {
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = (((((r >>> 16 << 16) * 8 >> 0) + (r << 16 >>> 16) * 8) >> 0) + (t.charCodeAt(0) >> 0) >> 0) - 48 >> 0;
				t = t.substring(1);
				i = i + 1 >> 0;
			}
			_tmp$6 = r; _tmp$7 = t; _tmp$8 = null; r = _tmp$6; rest = _tmp$7; err = _tmp$8;
			return [r, rest, err];
		} else if (_ref === 48) {
			r = c - 48 >> 0;
			i = 1;
			while (i < 3) {
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = (((((r >>> 16 << 16) * 8 >> 0) + (r << 16 >>> 16) * 8) >> 0) + (t.charCodeAt(0) >> 0) >> 0) - 48 >> 0;
				t = t.substring(1);
				i = i + 1 >> 0;
			}
			_tmp$9 = r; _tmp$10 = t; _tmp$11 = null; r = _tmp$9; rest = _tmp$10; err = _tmp$11;
			return [r, rest, err];
		} else if (_ref === 120) {
			if (t === "") {
				break;
			}
			_tuple$1 = nextRune(t); c = _tuple$1[0]; t = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, null))) {
				_tmp$12 = 0; _tmp$13 = ""; _tmp$14 = err; r = _tmp$12; rest = _tmp$13; err = _tmp$14;
				return [r, rest, err];
			}
			if (c === 123) {
				nhex = 0;
				r = 0;
				while (true) {
					if (t === "") {
						break Switch;
					}
					_tuple$2 = nextRune(t); c = _tuple$2[0]; t = _tuple$2[1]; err = _tuple$2[2];
					if (!($interfaceIsEqual(err, null))) {
						_tmp$15 = 0; _tmp$16 = ""; _tmp$17 = err; r = _tmp$15; rest = _tmp$16; err = _tmp$17;
						return [r, rest, err];
					}
					if (c === 125) {
						break;
					}
					v = unhex(c);
					if (v < 0) {
						break Switch;
					}
					r = ((((r >>> 16 << 16) * 16 >> 0) + (r << 16 >>> 16) * 16) >> 0) + v >> 0;
					if (r > 1114111) {
						break Switch;
					}
					nhex = nhex + 1 >> 0;
				}
				if (nhex === 0) {
					break Switch;
				}
				_tmp$18 = r; _tmp$19 = t; _tmp$20 = null; r = _tmp$18; rest = _tmp$19; err = _tmp$20;
				return [r, rest, err];
			}
			x = unhex(c);
			_tuple$3 = nextRune(t); c = _tuple$3[0]; t = _tuple$3[1]; err = _tuple$3[2];
			if (!($interfaceIsEqual(err, null))) {
				_tmp$21 = 0; _tmp$22 = ""; _tmp$23 = err; r = _tmp$21; rest = _tmp$22; err = _tmp$23;
				return [r, rest, err];
			}
			y = unhex(c);
			if (x < 0 || y < 0) {
				break;
			}
			_tmp$24 = ((((x >>> 16 << 16) * 16 >> 0) + (x << 16 >>> 16) * 16) >> 0) + y >> 0; _tmp$25 = t; _tmp$26 = null; r = _tmp$24; rest = _tmp$25; err = _tmp$26;
			return [r, rest, err];
		} else if (_ref === 97) {
			_tmp$27 = 7; _tmp$28 = t; _tmp$29 = err; r = _tmp$27; rest = _tmp$28; err = _tmp$29;
			return [r, rest, err];
		} else if (_ref === 102) {
			_tmp$30 = 12; _tmp$31 = t; _tmp$32 = err; r = _tmp$30; rest = _tmp$31; err = _tmp$32;
			return [r, rest, err];
		} else if (_ref === 110) {
			_tmp$33 = 10; _tmp$34 = t; _tmp$35 = err; r = _tmp$33; rest = _tmp$34; err = _tmp$35;
			return [r, rest, err];
		} else if (_ref === 114) {
			_tmp$36 = 13; _tmp$37 = t; _tmp$38 = err; r = _tmp$36; rest = _tmp$37; err = _tmp$38;
			return [r, rest, err];
		} else if (_ref === 116) {
			_tmp$39 = 9; _tmp$40 = t; _tmp$41 = err; r = _tmp$39; rest = _tmp$40; err = _tmp$41;
			return [r, rest, err];
		} else if (_ref === 118) {
			_tmp$42 = 11; _tmp$43 = t; _tmp$44 = err; r = _tmp$42; rest = _tmp$43; err = _tmp$44;
			return [r, rest, err];
		} else {
			if (c < 128 && !isalnum(c)) {
				_tmp$45 = c; _tmp$46 = t; _tmp$47 = null; r = _tmp$45; rest = _tmp$46; err = _tmp$47;
				return [r, rest, err];
			}
		} }
		_tmp$48 = 0; _tmp$49 = ""; _tmp$50 = new Error.Ptr("invalid escape sequence", s.substring(0, (s.length - t.length >> 0))); r = _tmp$48; rest = _tmp$49; err = _tmp$50;
		return [r, rest, err];
	};
	parser.prototype.parseEscape = function(s) { return this.$val.parseEscape(s); };
	parser.Ptr.prototype.parseClassChar = function(s, wholeClass) {
		var r, rest, err, p, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1;
		r = 0;
		rest = "";
		err = null;
		p = this;
		if (s === "") {
			_tmp = 0; _tmp$1 = ""; _tmp$2 = new Error.Ptr("missing closing ]", wholeClass); r = _tmp; rest = _tmp$1; err = _tmp$2;
			return [r, rest, err];
		}
		if (s.charCodeAt(0) === 92) {
			_tuple = p.parseEscape(s); r = _tuple[0]; rest = _tuple[1]; err = _tuple[2];
			return [r, rest, err];
		}
		_tuple$1 = nextRune(s); r = _tuple$1[0]; rest = _tuple$1[1]; err = _tuple$1[2];
		return [r, rest, err];
	};
	parser.prototype.parseClassChar = function(s, wholeClass) { return this.$val.parseClassChar(s, wholeClass); };
	parser.Ptr.prototype.parsePerlClassEscape = function(s, r) {
		var out, rest, p, _entry, g, _tmp, _tmp$1;
		out = ($sliceType($Int32)).nil;
		rest = "";
		p = this;
		if ((((p.flags & 64) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92))) {
			return [out, rest];
		}
		g = new charGroup.Ptr(); $copy(g, (_entry = perlGroup[s.substring(0, 2)], _entry !== undefined ? _entry.v : new charGroup.Ptr()), charGroup);
		if (g.sign === 0) {
			return [out, rest];
		}
		_tmp = p.appendGroup(r, $clone(g, charGroup)); _tmp$1 = s.substring(2); out = _tmp; rest = _tmp$1;
		return [out, rest];
	};
	parser.prototype.parsePerlClassEscape = function(s, r) { return this.$val.parsePerlClassEscape(s, r); };
	parser.Ptr.prototype.parseNamedClass = function(s, r) {
		var out, rest, err, p, i, _tmp, _tmp$1, name, _entry, g, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		out = ($sliceType($Int32)).nil;
		rest = "";
		err = null;
		p = this;
		if (s.length < 2 || !((s.charCodeAt(0) === 91)) || !((s.charCodeAt(1) === 58))) {
			return [out, rest, err];
		}
		i = strings.Index(s.substring(2), ":]");
		if (i < 0) {
			return [out, rest, err];
		}
		i = i + 2 >> 0;
		_tmp = s.substring(0, (i + 2 >> 0)); _tmp$1 = s.substring((i + 2 >> 0)); name = _tmp; s = _tmp$1;
		g = new charGroup.Ptr(); $copy(g, (_entry = posixGroup[name], _entry !== undefined ? _entry.v : new charGroup.Ptr()), charGroup);
		if (g.sign === 0) {
			_tmp$2 = ($sliceType($Int32)).nil; _tmp$3 = ""; _tmp$4 = new Error.Ptr("invalid character class range", name); out = _tmp$2; rest = _tmp$3; err = _tmp$4;
			return [out, rest, err];
		}
		_tmp$5 = p.appendGroup(r, $clone(g, charGroup)); _tmp$6 = s; _tmp$7 = null; out = _tmp$5; rest = _tmp$6; err = _tmp$7;
		return [out, rest, err];
	};
	parser.prototype.parseNamedClass = function(s, r) { return this.$val.parseNamedClass(s, r); };
	parser.Ptr.prototype.appendGroup = function(r, g) {
		var p, tmp;
		p = this;
		if (((p.flags & 1) >>> 0) === 0) {
			if (g.sign < 0) {
				r = appendNegatedClass(r, g.class$1);
			} else {
				r = appendClass(r, g.class$1);
			}
		} else {
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendFoldedClass(tmp, g.class$1);
			p.tmpClass = tmp;
			tmp = cleanClass(new ($ptrType(($sliceType($Int32))))(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p));
			if (g.sign < 0) {
				r = appendNegatedClass(r, tmp);
			} else {
				r = appendClass(r, tmp);
			}
		}
		return r;
	};
	parser.prototype.appendGroup = function(r, g) { return this.$val.appendGroup(r, g); };
	unicodeTable = function(name) {
		var _entry, t, _entry$1, _entry$2, t$1, _entry$3;
		if (name === "Any") {
			return [anyTable, anyTable];
		}
		t = (_entry = unicode.Categories[name], _entry !== undefined ? _entry.v : ($ptrType(unicode.RangeTable)).nil);
		if (!(t === ($ptrType(unicode.RangeTable)).nil)) {
			return [t, (_entry$1 = unicode.FoldCategory[name], _entry$1 !== undefined ? _entry$1.v : ($ptrType(unicode.RangeTable)).nil)];
		}
		t$1 = (_entry$2 = unicode.Scripts[name], _entry$2 !== undefined ? _entry$2.v : ($ptrType(unicode.RangeTable)).nil);
		if (!(t$1 === ($ptrType(unicode.RangeTable)).nil)) {
			return [t$1, (_entry$3 = unicode.FoldScript[name], _entry$3 !== undefined ? _entry$3.v : ($ptrType(unicode.RangeTable)).nil)];
		}
		return [($ptrType(unicode.RangeTable)).nil, ($ptrType(unicode.RangeTable)).nil];
	};
	parser.Ptr.prototype.parseUnicodeClass = function(s, r) {
		var out, rest, err, p, sign, t, _tuple, c, _tmp, _tmp$1, seq, name, end, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple$1, tab, fold, _tmp$7, _tmp$8, _tmp$9, tmp, _tmp$10, _tmp$11, _tmp$12;
		out = ($sliceType($Int32)).nil;
		rest = "";
		err = null;
		p = this;
		if ((((p.flags & 128) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92)) || !((s.charCodeAt(1) === 112)) && !((s.charCodeAt(1) === 80))) {
			return [out, rest, err];
		}
		sign = 1;
		if (s.charCodeAt(1) === 80) {
			sign = -1;
		}
		t = s.substring(2);
		_tuple = nextRune(t); c = _tuple[0]; t = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, null))) {
			return [out, rest, err];
		}
		_tmp = ""; _tmp$1 = ""; seq = _tmp; name = _tmp$1;
		if (!((c === 123))) {
			seq = s.substring(0, (s.length - t.length >> 0));
			name = seq.substring(2);
		} else {
			end = strings.IndexRune(s, 125);
			if (end < 0) {
				err = checkUTF8(s);
				if (!($interfaceIsEqual(err, null))) {
					return [out, rest, err];
				}
				_tmp$2 = ($sliceType($Int32)).nil; _tmp$3 = ""; _tmp$4 = new Error.Ptr("invalid character class range", s); out = _tmp$2; rest = _tmp$3; err = _tmp$4;
				return [out, rest, err];
			}
			_tmp$5 = s.substring(0, (end + 1 >> 0)); _tmp$6 = s.substring((end + 1 >> 0)); seq = _tmp$5; t = _tmp$6;
			name = s.substring(3, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, null))) {
				return [out, rest, err];
			}
		}
		if (!(name === "") && (name.charCodeAt(0) === 94)) {
			sign = -sign;
			name = name.substring(1);
		}
		_tuple$1 = unicodeTable(name); tab = _tuple$1[0]; fold = _tuple$1[1];
		if (tab === ($ptrType(unicode.RangeTable)).nil) {
			_tmp$7 = ($sliceType($Int32)).nil; _tmp$8 = ""; _tmp$9 = new Error.Ptr("invalid character class range", seq); out = _tmp$7; rest = _tmp$8; err = _tmp$9;
			return [out, rest, err];
		}
		if ((((p.flags & 1) >>> 0) === 0) || fold === ($ptrType(unicode.RangeTable)).nil) {
			if (sign > 0) {
				r = appendTable(r, tab);
			} else {
				r = appendNegatedTable(r, tab);
			}
		} else {
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendTable(tmp, tab);
			tmp = appendTable(tmp, fold);
			p.tmpClass = tmp;
			tmp = cleanClass(new ($ptrType(($sliceType($Int32))))(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p));
			if (sign > 0) {
				r = appendClass(r, tmp);
			} else {
				r = appendNegatedClass(r, tmp);
			}
		}
		_tmp$10 = r; _tmp$11 = t; _tmp$12 = null; out = _tmp$10; rest = _tmp$11; err = _tmp$12;
		return [out, rest, err];
	};
	parser.prototype.parseUnicodeClass = function(s, r) { return this.$val.parseUnicodeClass(s, r); };
	parser.Ptr.prototype.parseClass = function(s) {
		var rest, err, p, t, re, sign, class$1, first, _tuple, size, _tmp, _tmp$1, _tuple$1, nclass, nt, err$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$2, nclass$1, nt$1, err$2, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$3, nclass$2, nt$2, _tmp$10, _tmp$11, rng, _tmp$12, _tmp$13, lo, hi, _tuple$4, _tmp$14, _tmp$15, _tuple$5, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21;
		rest = "";
		err = null;
		p = this;
		t = s.substring(1);
		re = p.newRegexp(4);
		re.Flags = p.flags;
		re.Rune = $subslice(new ($sliceType($Int32))(re.Rune0), 0, 0);
		sign = 1;
		if (!(t === "") && (t.charCodeAt(0) === 94)) {
			sign = -1;
			t = t.substring(1);
			if (((p.flags & 4) >>> 0) === 0) {
				re.Rune = $append(re.Rune, 10, 10);
			}
		}
		class$1 = re.Rune;
		first = true;
		while (t === "" || !((t.charCodeAt(0) === 93)) || first) {
			if (!(t === "") && (t.charCodeAt(0) === 45) && (((p.flags & 64) >>> 0) === 0) && !first && ((t.length === 1) || !((t.charCodeAt(1) === 93)))) {
				_tuple = utf8.DecodeRuneInString(t.substring(1)); size = _tuple[1];
				_tmp = ""; _tmp$1 = new Error.Ptr("invalid character class range", t.substring(0, (1 + size >> 0))); rest = _tmp; err = _tmp$1;
				return [rest, err];
			}
			first = false;
			if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) {
				_tuple$1 = p.parseNamedClass(t, class$1); nclass = _tuple$1[0]; nt = _tuple$1[1]; err$1 = _tuple$1[2];
				if (!($interfaceIsEqual(err$1, null))) {
					_tmp$2 = ""; _tmp$3 = err$1; rest = _tmp$2; err = _tmp$3;
					return [rest, err];
				}
				if (!(nclass === ($sliceType($Int32)).nil)) {
					_tmp$4 = nclass; _tmp$5 = nt; class$1 = _tmp$4; t = _tmp$5;
					continue;
				}
			}
			_tuple$2 = p.parseUnicodeClass(t, class$1); nclass$1 = _tuple$2[0]; nt$1 = _tuple$2[1]; err$2 = _tuple$2[2];
			if (!($interfaceIsEqual(err$2, null))) {
				_tmp$6 = ""; _tmp$7 = err$2; rest = _tmp$6; err = _tmp$7;
				return [rest, err];
			}
			if (!(nclass$1 === ($sliceType($Int32)).nil)) {
				_tmp$8 = nclass$1; _tmp$9 = nt$1; class$1 = _tmp$8; t = _tmp$9;
				continue;
			}
			_tuple$3 = p.parsePerlClassEscape(t, class$1); nclass$2 = _tuple$3[0]; nt$2 = _tuple$3[1];
			if (!(nclass$2 === ($sliceType($Int32)).nil)) {
				_tmp$10 = nclass$2; _tmp$11 = nt$2; class$1 = _tmp$10; t = _tmp$11;
				continue;
			}
			rng = t;
			_tmp$12 = 0; _tmp$13 = 0; lo = _tmp$12; hi = _tmp$13;
			_tuple$4 = p.parseClassChar(t, s); lo = _tuple$4[0]; t = _tuple$4[1]; err$2 = _tuple$4[2];
			if (!($interfaceIsEqual(err$2, null))) {
				_tmp$14 = ""; _tmp$15 = err$2; rest = _tmp$14; err = _tmp$15;
				return [rest, err];
			}
			hi = lo;
			if (t.length >= 2 && (t.charCodeAt(0) === 45) && !((t.charCodeAt(1) === 93))) {
				t = t.substring(1);
				_tuple$5 = p.parseClassChar(t, s); hi = _tuple$5[0]; t = _tuple$5[1]; err$2 = _tuple$5[2];
				if (!($interfaceIsEqual(err$2, null))) {
					_tmp$16 = ""; _tmp$17 = err$2; rest = _tmp$16; err = _tmp$17;
					return [rest, err];
				}
				if (hi < lo) {
					rng = rng.substring(0, (rng.length - t.length >> 0));
					_tmp$18 = ""; _tmp$19 = new Error.Ptr("invalid character class range", rng); rest = _tmp$18; err = _tmp$19;
					return [rest, err];
				}
			}
			if (((p.flags & 1) >>> 0) === 0) {
				class$1 = appendRange(class$1, lo, hi);
			} else {
				class$1 = appendFoldedRange(class$1, lo, hi);
			}
		}
		t = t.substring(1);
		re.Rune = class$1;
		class$1 = cleanClass(new ($ptrType(($sliceType($Int32))))(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re));
		if (sign < 0) {
			class$1 = negateClass(class$1);
		}
		re.Rune = class$1;
		p.push(re);
		_tmp$20 = t; _tmp$21 = null; rest = _tmp$20; err = _tmp$21;
		return [rest, err];
	};
	parser.prototype.parseClass = function(s) { return this.$val.parseClass(s); };
	cleanClass = function(rp) {
		var x, r, w, i, _tmp, _tmp$1, x$1, lo, hi, x$2, x$3, x$4, x$5;
		sort.Sort((x = new ranges.Ptr(rp), new x.constructor.Struct(x)));
		r = rp.$get();
		if (r.length < 2) {
			return r;
		}
		w = 2;
		i = 2;
		while (i < r.length) {
			_tmp = ((i < 0 || i >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + i]); _tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$1])); lo = _tmp; hi = _tmp$1;
			if (lo <= ((x$2 = w - 1 >> 0, ((x$2 < 0 || x$2 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$2])) + 1 >> 0)) {
				if (hi > (x$3 = w - 1 >> 0, ((x$3 < 0 || x$3 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$3]))) {
					(x$4 = w - 1 >> 0, (x$4 < 0 || x$4 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$4] = hi);
				}
				i = i + 2 >> 0;
				continue;
			}
			(w < 0 || w >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + w] = lo;
			(x$5 = w + 1 >> 0, (x$5 < 0 || x$5 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$5] = hi);
			w = w + 2 >> 0;
			i = i + 2 >> 0;
		}
		return $subslice(r, 0, w);
	};
	appendLiteral = function(r, x, flags) {
		if (!((((flags & 1) >>> 0) === 0))) {
			return appendFoldedRange(r, x, x);
		}
		return appendRange(r, x, x);
	};
	appendRange = function(r, lo, hi) {
		var n, i, _tmp, x, _tmp$1, x$1, rlo, rhi, x$2, x$3;
		n = r.length;
		i = 2;
		while (i <= 4) {
			if (n >= i) {
				_tmp = (x = n - i >> 0, ((x < 0 || x >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x])); _tmp$1 = (x$1 = (n - i >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$1])); rlo = _tmp; rhi = _tmp$1;
				if (lo <= (rhi + 1 >> 0) && rlo <= (hi + 1 >> 0)) {
					if (lo < rlo) {
						(x$2 = n - i >> 0, (x$2 < 0 || x$2 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$2] = lo);
					}
					if (hi > rhi) {
						(x$3 = (n - i >> 0) + 1 >> 0, (x$3 < 0 || x$3 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$3] = hi);
					}
					return r;
				}
			}
			i = i + 2 >> 0;
		}
		return $append(r, lo, hi);
	};
	appendFoldedRange = function(r, lo, hi) {
		var c, f;
		if (lo <= 65 && hi >= 66639) {
			return appendRange(r, lo, hi);
		}
		if (hi < 65 || lo > 66639) {
			return appendRange(r, lo, hi);
		}
		if (lo < 65) {
			r = appendRange(r, lo, 64);
			lo = 65;
		}
		if (hi > 66639) {
			r = appendRange(r, 66640, hi);
			hi = 66639;
		}
		c = lo;
		while (c <= hi) {
			r = appendRange(r, c, c);
			f = unicode.SimpleFold(c);
			while (!((f === c))) {
				r = appendRange(r, f, f);
				f = unicode.SimpleFold(f);
			}
			c = c + 1 >> 0;
		}
		return r;
	};
	appendClass = function(r, x) {
		var i, x$1;
		i = 0;
		while (i < x.length) {
			r = appendRange(r, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])));
			i = i + 2 >> 0;
		}
		return r;
	};
	appendFoldedClass = function(r, x) {
		var i, x$1;
		i = 0;
		while (i < x.length) {
			r = appendFoldedRange(r, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])));
			i = i + 2 >> 0;
		}
		return r;
	};
	appendNegatedClass = function(r, x) {
		var nextLo, i, _tmp, _tmp$1, x$1, lo, hi;
		nextLo = 0;
		i = 0;
		while (i < x.length) {
			_tmp = ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i]); _tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])); lo = _tmp; hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				r = appendRange(r, nextLo, lo - 1 >> 0);
			}
			nextLo = hi + 1 >> 0;
			i = i + 2 >> 0;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	appendTable = function(r, x) {
		var _ref, _i, xr, _tmp, _tmp$1, _tmp$2, lo, hi, stride, c, _ref$1, _i$1, xr$1, _tmp$3, _tmp$4, _tmp$5, lo$1, hi$1, stride$1, c$1;
		_ref = x.R16;
		_i = 0;
		while (_i < _ref.length) {
			xr = new unicode.Range16.Ptr(); $copy(xr, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), unicode.Range16);
			_tmp = (xr.Lo >> 0); _tmp$1 = (xr.Hi >> 0); _tmp$2 = (xr.Stride >> 0); lo = _tmp; hi = _tmp$1; stride = _tmp$2;
			if (stride === 1) {
				r = appendRange(r, lo, hi);
				_i++;
				continue;
			}
			c = lo;
			while (c <= hi) {
				r = appendRange(r, c, c);
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			xr$1 = new unicode.Range32.Ptr(); $copy(xr$1, ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]), unicode.Range32);
			_tmp$3 = (xr$1.Lo >> 0); _tmp$4 = (xr$1.Hi >> 0); _tmp$5 = (xr$1.Stride >> 0); lo$1 = _tmp$3; hi$1 = _tmp$4; stride$1 = _tmp$5;
			if (stride$1 === 1) {
				r = appendRange(r, lo$1, hi$1);
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (c$1 <= hi$1) {
				r = appendRange(r, c$1, c$1);
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		return r;
	};
	appendNegatedTable = function(r, x) {
		var nextLo, _ref, _i, xr, _tmp, _tmp$1, _tmp$2, lo, hi, stride, c, _ref$1, _i$1, xr$1, _tmp$3, _tmp$4, _tmp$5, lo$1, hi$1, stride$1, c$1;
		nextLo = 0;
		_ref = x.R16;
		_i = 0;
		while (_i < _ref.length) {
			xr = new unicode.Range16.Ptr(); $copy(xr, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), unicode.Range16);
			_tmp = (xr.Lo >> 0); _tmp$1 = (xr.Hi >> 0); _tmp$2 = (xr.Stride >> 0); lo = _tmp; hi = _tmp$1; stride = _tmp$2;
			if (stride === 1) {
				if (nextLo <= (lo - 1 >> 0)) {
					r = appendRange(r, nextLo, lo - 1 >> 0);
				}
				nextLo = hi + 1 >> 0;
				_i++;
				continue;
			}
			c = lo;
			while (c <= hi) {
				if (nextLo <= (c - 1 >> 0)) {
					r = appendRange(r, nextLo, c - 1 >> 0);
				}
				nextLo = c + 1 >> 0;
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			xr$1 = new unicode.Range32.Ptr(); $copy(xr$1, ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]), unicode.Range32);
			_tmp$3 = (xr$1.Lo >> 0); _tmp$4 = (xr$1.Hi >> 0); _tmp$5 = (xr$1.Stride >> 0); lo$1 = _tmp$3; hi$1 = _tmp$4; stride$1 = _tmp$5;
			if (stride$1 === 1) {
				if (nextLo <= (lo$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, lo$1 - 1 >> 0);
				}
				nextLo = hi$1 + 1 >> 0;
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (c$1 <= hi$1) {
				if (nextLo <= (c$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, c$1 - 1 >> 0);
				}
				nextLo = c$1 + 1 >> 0;
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	negateClass = function(r) {
		var nextLo, w, i, _tmp, _tmp$1, x, lo, hi, x$1;
		nextLo = 0;
		w = 0;
		i = 0;
		while (i < r.length) {
			_tmp = ((i < 0 || i >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + i]); _tmp$1 = (x = i + 1 >> 0, ((x < 0 || x >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x])); lo = _tmp; hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				(w < 0 || w >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + w] = nextLo;
				(x$1 = w + 1 >> 0, (x$1 < 0 || x$1 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + x$1] = lo - 1 >> 0);
				w = w + 2 >> 0;
			}
			nextLo = hi + 1 >> 0;
			i = i + 2 >> 0;
		}
		r = $subslice(r, 0, w);
		if (nextLo <= 1114111) {
			r = $append(r, nextLo, 1114111);
		}
		return r;
	};
	ranges.Ptr.prototype.Less = function(i, j) {
		var ra, p, x, x$1;
		ra = new ranges.Ptr(); $copy(ra, this, ranges);
		p = ra.p.$get();
		i = (((i >>> 16 << 16) * 2 >> 0) + (i << 16 >>> 16) * 2) >> 0;
		j = (((j >>> 16 << 16) * 2 >> 0) + (j << 16 >>> 16) * 2) >> 0;
		return ((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]) < ((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j]) || (((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]) === ((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j])) && (x = i + 1 >> 0, ((x < 0 || x >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + x])) > (x$1 = j + 1 >> 0, ((x$1 < 0 || x$1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + x$1]));
	};
	ranges.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	ranges.Ptr.prototype.Len = function() {
		var ra, _q;
		ra = new ranges.Ptr(); $copy(ra, this, ranges);
		return (_q = ra.p.$get().length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	ranges.prototype.Len = function() { return this.$val.Len(); };
	ranges.Ptr.prototype.Swap = function(i, j) {
		var ra, p, _tmp, _tmp$1, x, _tmp$2, _tmp$3, x$1, x$2, x$3;
		ra = new ranges.Ptr(); $copy(ra, this, ranges);
		p = ra.p.$get();
		i = (((i >>> 16 << 16) * 2 >> 0) + (i << 16 >>> 16) * 2) >> 0;
		j = (((j >>> 16 << 16) * 2 >> 0) + (j << 16 >>> 16) * 2) >> 0;
		_tmp = ((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j]); _tmp$1 = (x = j + 1 >> 0, ((x < 0 || x >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + x])); _tmp$2 = ((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]); _tmp$3 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + x$1])); (i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i] = _tmp; (x$2 = i + 1 >> 0, (x$2 < 0 || x$2 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + x$2] = _tmp$1); (j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j] = _tmp$2; (x$3 = j + 1 >> 0, (x$3 < 0 || x$3 >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + x$3] = _tmp$3);
	};
	ranges.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	checkUTF8 = function(s) {
		var _tuple, rune, size;
		while (!(s === "")) {
			_tuple = utf8.DecodeRuneInString(s); rune = _tuple[0]; size = _tuple[1];
			if ((rune === 65533) && (size === 1)) {
				return new Error.Ptr("invalid UTF-8", s);
			}
			s = s.substring(size);
		}
		return null;
	};
	nextRune = function(s) {
		var c, t, err, _tuple, size, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		c = 0;
		t = "";
		err = null;
		_tuple = utf8.DecodeRuneInString(s); c = _tuple[0]; size = _tuple[1];
		if ((c === 65533) && (size === 1)) {
			_tmp = 0; _tmp$1 = ""; _tmp$2 = new Error.Ptr("invalid UTF-8", s); c = _tmp; t = _tmp$1; err = _tmp$2;
			return [c, t, err];
		}
		_tmp$3 = c; _tmp$4 = s.substring(size); _tmp$5 = null; c = _tmp$3; t = _tmp$4; err = _tmp$5;
		return [c, t, err];
	};
	isalnum = function(c) {
		return 48 <= c && c <= 57 || 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	unhex = function(c) {
		if (48 <= c && c <= 57) {
			return c - 48 >> 0;
		}
		if (97 <= c && c <= 102) {
			return (c - 97 >> 0) + 10 >> 0;
		}
		if (65 <= c && c <= 70) {
			return (c - 65 >> 0) + 10 >> 0;
		}
		return -1;
	};
	InstOp.prototype.String = function() {
		var i;
		i = this.$val;
		if ((i >>> 0) >= (instOpNames.length >>> 0)) {
			return "";
		}
		return ((i < 0 || i >= instOpNames.length) ? $throwRuntimeError("index out of range") : instOpNames.array[instOpNames.offset + i]);
	};
	$ptrType(InstOp).prototype.String = function() { return new InstOp(this.$get()).String(); };
	EmptyOpContext = $pkg.EmptyOpContext = function(r1, r2) {
		var op, boundary;
		op = 32;
		boundary = 0;
		if (IsWordChar(r1)) {
			boundary = 1;
		} else if (r1 === 10) {
			op = (op | 1) >>> 0;
		} else if (r1 < 0) {
			op = (op | 5) >>> 0;
		}
		if (IsWordChar(r2)) {
			boundary = (boundary ^ 1) << 24 >>> 24;
		} else if (r2 === 10) {
			op = (op | 2) >>> 0;
		} else if (r2 < 0) {
			op = (op | 10) >>> 0;
		}
		if (!((boundary === 0))) {
			op = (op ^ 48) << 24 >>> 24;
		}
		return op;
	};
	IsWordChar = $pkg.IsWordChar = function(r) {
		return 65 <= r && r <= 90 || 97 <= r && r <= 122 || 48 <= r && r <= 57 || (r === 95);
	};
	Prog.Ptr.prototype.String = function() {
		var p, b;
		p = this;
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		dumpProg(b, p);
		return b.String();
	};
	Prog.prototype.String = function() { return this.$val.String(); };
	Prog.Ptr.prototype.skipNop = function(pc) {
		var p, x, i, x$1;
		p = this;
		i = (x = p.Inst, ((pc < 0 || pc >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pc]));
		while ((i.Op === 6) || (i.Op === 2)) {
			pc = i.Out;
			i = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + pc]));
		}
		return [i, pc];
	};
	Prog.prototype.skipNop = function(pc) { return this.$val.skipNop(pc); };
	Inst.Ptr.prototype.op = function() {
		var i, op, _ref;
		i = this;
		op = i.Op;
		_ref = op;
		if (_ref === 8 || _ref === 9 || _ref === 10) {
			op = 7;
		}
		return op;
	};
	Inst.prototype.op = function() { return this.$val.op(); };
	Prog.Ptr.prototype.Prefix = function() {
		var prefix, complete, p, _tuple, i, _tmp, _tmp$1, buf, x, _tuple$1, _tmp$2, _tmp$3;
		prefix = "";
		complete = false;
		p = this;
		_tuple = p.skipNop((p.Start >>> 0)); i = _tuple[0];
		if (!((i.op() === 7)) || !((i.Rune.length === 1))) {
			_tmp = ""; _tmp$1 = i.Op === 4; prefix = _tmp; complete = _tmp$1;
			return [prefix, complete];
		}
		buf = new bytes.Buffer.Ptr(); $copy(buf, new bytes.Buffer.Ptr(), bytes.Buffer);
		while ((i.op() === 7) && (i.Rune.length === 1) && ((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0)) {
			buf.WriteRune((x = i.Rune, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])));
			_tuple$1 = p.skipNop(i.Out); i = _tuple$1[0];
		}
		_tmp$2 = buf.String(); _tmp$3 = i.Op === 4; prefix = _tmp$2; complete = _tmp$3;
		return [prefix, complete];
	};
	Prog.prototype.Prefix = function() { return this.$val.Prefix(); };
	Prog.Ptr.prototype.StartCond = function() {
		var p, flag, pc, x, i, _ref, x$1;
		p = this;
		flag = 0;
		pc = (p.Start >>> 0);
		i = (x = p.Inst, ((pc < 0 || pc >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pc]));
		Loop:
		while (true) {
			_ref = i.Op;
			if (_ref === 3) {
				flag = (flag | ((i.Arg << 24 >>> 24))) >>> 0;
			} else if (_ref === 5) {
				return 255;
			} else if (_ref === 2 || _ref === 6) {
			} else {
				break Loop;
			}
			pc = i.Out;
			i = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + pc]));
		}
		return flag;
	};
	Prog.prototype.StartCond = function() { return this.$val.StartCond(); };
	Inst.Ptr.prototype.MatchRune = function(r) {
		var i;
		i = this;
		return !((i.MatchRunePos(r) === -1));
	};
	Inst.prototype.MatchRune = function(r) { return this.$val.MatchRune(r); };
	Inst.Ptr.prototype.MatchRunePos = function(r) {
		var i, rune, r0, r1, j, x, _q, lo, _q$1, hi, _q$2, m, x$1, c, x$2;
		i = this;
		rune = i.Rune;
		if (rune.length === 1) {
			r0 = ((0 < 0 || 0 >= rune.length) ? $throwRuntimeError("index out of range") : rune.array[rune.offset + 0]);
			if (r === r0) {
				return 0;
			}
			if (!(((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
				r1 = unicode.SimpleFold(r0);
				while (!((r1 === r0))) {
					if (r === r1) {
						return 0;
					}
					r1 = unicode.SimpleFold(r1);
				}
			}
			return -1;
		}
		j = 0;
		while (j < rune.length && j <= 8) {
			if (r < ((j < 0 || j >= rune.length) ? $throwRuntimeError("index out of range") : rune.array[rune.offset + j])) {
				return -1;
			}
			if (r <= (x = j + 1 >> 0, ((x < 0 || x >= rune.length) ? $throwRuntimeError("index out of range") : rune.array[rune.offset + x]))) {
				return (_q = j / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
			j = j + 2 >> 0;
		}
		lo = 0;
		hi = (_q$1 = rune.length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		while (lo < hi) {
			m = lo + (_q$2 = ((hi - lo >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			c = (x$1 = (((2 >>> 16 << 16) * m >> 0) + (2 << 16 >>> 16) * m) >> 0, ((x$1 < 0 || x$1 >= rune.length) ? $throwRuntimeError("index out of range") : rune.array[rune.offset + x$1]));
			if (c <= r) {
				if (r <= (x$2 = ((((2 >>> 16 << 16) * m >> 0) + (2 << 16 >>> 16) * m) >> 0) + 1 >> 0, ((x$2 < 0 || x$2 >= rune.length) ? $throwRuntimeError("index out of range") : rune.array[rune.offset + x$2]))) {
					return m;
				}
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		return -1;
	};
	Inst.prototype.MatchRunePos = function(r) { return this.$val.MatchRunePos(r); };
	wordRune = function(r) {
		return (r === 95) || (65 <= r && r <= 90) || (97 <= r && r <= 122) || (48 <= r && r <= 57);
	};
	Inst.Ptr.prototype.MatchEmptyWidth = function(before, after) {
		var i, _ref;
		i = this;
		_ref = (i.Arg << 24 >>> 24);
		if (_ref === 1) {
			return (before === 10) || (before === -1);
		} else if (_ref === 2) {
			return (after === 10) || (after === -1);
		} else if (_ref === 4) {
			return before === -1;
		} else if (_ref === 8) {
			return after === -1;
		} else if (_ref === 16) {
			return !(wordRune(before) === wordRune(after));
		} else if (_ref === 32) {
			return wordRune(before) === wordRune(after);
		}
		throw $panic(new $String("unknown empty width arg"));
	};
	Inst.prototype.MatchEmptyWidth = function(before, after) { return this.$val.MatchEmptyWidth(before, after); };
	Inst.Ptr.prototype.String = function() {
		var i, b;
		i = this;
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		dumpInst(b, i);
		return b.String();
	};
	Inst.prototype.String = function() { return this.$val.String(); };
	bw = function(b, args) {
		var _ref, _i, s;
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			b.WriteString(s);
			_i++;
		}
	};
	dumpProg = function(b, p) {
		var _ref, _i, j, x, i, pc;
		_ref = p.Inst;
		_i = 0;
		while (_i < _ref.length) {
			j = _i;
			i = (x = p.Inst, ((j < 0 || j >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + j]));
			pc = strconv.Itoa(j);
			if (pc.length < 3) {
				b.WriteString("   ".substring(pc.length));
			}
			if (j === p.Start) {
				pc = pc + "*";
			}
			bw(b, new ($sliceType($String))([pc, "\t"]));
			dumpInst(b, i);
			bw(b, new ($sliceType($String))(["\n"]));
			_i++;
		}
	};
	u32 = function(i) {
		return strconv.FormatUint(new $Uint64(0, i), 10);
	};
	dumpInst = function(b, i) {
		var _ref;
		_ref = i.Op;
		if (_ref === 0) {
			bw(b, new ($sliceType($String))(["alt -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_ref === 1) {
			bw(b, new ($sliceType($String))(["altmatch -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_ref === 2) {
			bw(b, new ($sliceType($String))(["cap ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_ref === 3) {
			bw(b, new ($sliceType($String))(["empty ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_ref === 4) {
			bw(b, new ($sliceType($String))(["match"]));
		} else if (_ref === 5) {
			bw(b, new ($sliceType($String))(["fail"]));
		} else if (_ref === 6) {
			bw(b, new ($sliceType($String))(["nop -> ", u32(i.Out)]));
		} else if (_ref === 7) {
			if (i.Rune === ($sliceType($Int32)).nil) {
				bw(b, new ($sliceType($String))(["rune <nil>"]));
			}
			bw(b, new ($sliceType($String))(["rune ", strconv.QuoteToASCII($runesToString(i.Rune))]));
			if (!(((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
				bw(b, new ($sliceType($String))(["/i"]));
			}
			bw(b, new ($sliceType($String))([" -> ", u32(i.Out)]));
		} else if (_ref === 8) {
			bw(b, new ($sliceType($String))(["rune1 ", strconv.QuoteToASCII($runesToString(i.Rune)), " -> ", u32(i.Out)]));
		} else if (_ref === 9) {
			bw(b, new ($sliceType($String))(["any -> ", u32(i.Out)]));
		} else if (_ref === 10) {
			bw(b, new ($sliceType($String))(["anynotnl -> ", u32(i.Out)]));
		}
	};
	Regexp.Ptr.prototype.Equal = function(y) {
		var x, _ref, _ref$1, _i, i, r, x$1, _ref$2, _i$1, i$1, sub, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		x = this;
		if (x === ($ptrType(Regexp)).nil || y === ($ptrType(Regexp)).nil) {
			return x === y;
		}
		if (!((x.Op === y.Op))) {
			return false;
		}
		_ref = x.Op;
		if (_ref === 10) {
			if (!((((x.Flags & 256) >>> 0) === ((y.Flags & 256) >>> 0)))) {
				return false;
			}
		} else if (_ref === 3 || _ref === 4) {
			if (!((x.Rune.length === y.Rune.length))) {
				return false;
			}
			_ref$1 = x.Rune;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				r = ((_i < 0 || _i >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i]);
				if (!((r === (x$1 = y.Rune, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]))))) {
					return false;
				}
				_i++;
			}
		} else if (_ref === 19 || _ref === 18) {
			if (!((x.Sub.length === y.Sub.length))) {
				return false;
			}
			_ref$2 = x.Sub;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				i$1 = _i$1;
				sub = ((_i$1 < 0 || _i$1 >= _ref$2.length) ? $throwRuntimeError("index out of range") : _ref$2.array[_ref$2.offset + _i$1]);
				if (!sub.Equal((x$2 = y.Sub, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
		} else if (_ref === 14 || _ref === 15 || _ref === 16) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !(x$3 = x.Sub, ((0 < 0 || 0 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 0])).Equal((x$4 = y.Sub, ((0 < 0 || 0 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 0])))) {
				return false;
			}
		} else if (_ref === 17) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !((x.Min === y.Min)) || !((x.Max === y.Max)) || !(x$5 = x.Sub, ((0 < 0 || 0 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + 0])).Equal((x$6 = y.Sub, ((0 < 0 || 0 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + 0])))) {
				return false;
			}
		} else if (_ref === 13) {
			if (!((x.Cap === y.Cap)) || !(x.Name === y.Name) || !(x$7 = x.Sub, ((0 < 0 || 0 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + 0])).Equal((x$8 = y.Sub, ((0 < 0 || 0 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8.array[x$8.offset + 0])))) {
				return false;
			}
		}
		return true;
	};
	Regexp.prototype.Equal = function(y) { return this.$val.Equal(y); };
	writeRegexp = function(b, re) {
		var _ref, _ref$1, _i, r, _r, x, x$1, x$2, i, _tmp, x$3, _tmp$1, x$4, x$5, lo, hi, i$1, _tmp$2, x$6, _tmp$3, x$7, x$8, lo$1, hi$1, x$9, x$10, x$11, sub, _ref$2, _ref$3, _i$1, sub$1, _ref$4, _i$2, i$2, sub$2;
		_ref = re.Op;
		switch (0) { default: if (_ref === 1) {
			b.WriteString("[^\\x00-\\x{10FFFF}]");
		} else if (_ref === 2) {
			b.WriteString("(?:)");
		} else if (_ref === 3) {
			if (!((((re.Flags & 1) >>> 0) === 0))) {
				b.WriteString("(?i:");
			}
			_ref$1 = re.Rune;
			_i = 0;
			while (_i < _ref$1.length) {
				r = ((_i < 0 || _i >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i]);
				escape(b, r, false);
				_i++;
			}
			if (!((((re.Flags & 1) >>> 0) === 0))) {
				b.WriteString(")");
			}
		} else if (_ref === 4) {
			if (!(((_r = re.Rune.length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
				b.WriteString("[invalid char class]");
				break;
			}
			b.WriteRune(91);
			if (re.Rune.length === 0) {
				b.WriteString("^\\x00-\\x{10FFFF}");
			} else if (((x = re.Rune, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])) === 0) && ((x$1 = re.Rune, x$2 = re.Rune.length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + x$2])) === 1114111)) {
				b.WriteRune(94);
				i = 1;
				while (i < (re.Rune.length - 1 >> 0)) {
					_tmp = (x$3 = re.Rune, ((i < 0 || i >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + i])) + 1 >> 0; _tmp$1 = (x$4 = re.Rune, x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + x$5])) - 1 >> 0; lo = _tmp; hi = _tmp$1;
					escape(b, lo, lo === 45);
					if (!((lo === hi))) {
						b.WriteRune(45);
						escape(b, hi, hi === 45);
					}
					i = i + 2 >> 0;
				}
			} else {
				i$1 = 0;
				while (i$1 < re.Rune.length) {
					_tmp$2 = (x$6 = re.Rune, ((i$1 < 0 || i$1 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + i$1])); _tmp$3 = (x$7 = re.Rune, x$8 = i$1 + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + x$8])); lo$1 = _tmp$2; hi$1 = _tmp$3;
					escape(b, lo$1, lo$1 === 45);
					if (!((lo$1 === hi$1))) {
						b.WriteRune(45);
						escape(b, hi$1, hi$1 === 45);
					}
					i$1 = i$1 + 2 >> 0;
				}
			}
			b.WriteRune(93);
		} else if (_ref === 5) {
			b.WriteString("(?-s:.)");
		} else if (_ref === 6) {
			b.WriteString("(?s:.)");
		} else if (_ref === 7) {
			b.WriteRune(94);
		} else if (_ref === 8) {
			b.WriteRune(36);
		} else if (_ref === 9) {
			b.WriteString("\\A");
		} else if (_ref === 10) {
			if (!((((re.Flags & 256) >>> 0) === 0))) {
				b.WriteString("(?-m:$)");
			} else {
				b.WriteString("\\z");
			}
		} else if (_ref === 11) {
			b.WriteString("\\b");
		} else if (_ref === 12) {
			b.WriteString("\\B");
		} else if (_ref === 13) {
			if (!(re.Name === "")) {
				b.WriteString("(?P<");
				b.WriteString(re.Name);
				b.WriteRune(62);
			} else {
				b.WriteRune(40);
			}
			if (!(((x$9 = re.Sub, ((0 < 0 || 0 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9.array[x$9.offset + 0])).Op === 2))) {
				writeRegexp(b, (x$10 = re.Sub, ((0 < 0 || 0 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10.array[x$10.offset + 0])));
			}
			b.WriteRune(41);
		} else if (_ref === 14 || _ref === 15 || _ref === 16 || _ref === 17) {
			sub = (x$11 = re.Sub, ((0 < 0 || 0 >= x$11.length) ? $throwRuntimeError("index out of range") : x$11.array[x$11.offset + 0]));
			if (sub.Op > 13 || (sub.Op === 3) && sub.Rune.length > 1) {
				b.WriteString("(?:");
				writeRegexp(b, sub);
				b.WriteString(")");
			} else {
				writeRegexp(b, sub);
			}
			_ref$2 = re.Op;
			if (_ref$2 === 14) {
				b.WriteRune(42);
			} else if (_ref$2 === 15) {
				b.WriteRune(43);
			} else if (_ref$2 === 16) {
				b.WriteRune(63);
			} else if (_ref$2 === 17) {
				b.WriteRune(123);
				b.WriteString(strconv.Itoa(re.Min));
				if (!((re.Max === re.Min))) {
					b.WriteRune(44);
					if (re.Max >= 0) {
						b.WriteString(strconv.Itoa(re.Max));
					}
				}
				b.WriteRune(125);
			}
			if (!((((re.Flags & 32) >>> 0) === 0))) {
				b.WriteRune(63);
			}
		} else if (_ref === 18) {
			_ref$3 = re.Sub;
			_i$1 = 0;
			while (_i$1 < _ref$3.length) {
				sub$1 = ((_i$1 < 0 || _i$1 >= _ref$3.length) ? $throwRuntimeError("index out of range") : _ref$3.array[_ref$3.offset + _i$1]);
				if (sub$1.Op === 19) {
					b.WriteString("(?:");
					writeRegexp(b, sub$1);
					b.WriteString(")");
				} else {
					writeRegexp(b, sub$1);
				}
				_i$1++;
			}
		} else if (_ref === 19) {
			_ref$4 = re.Sub;
			_i$2 = 0;
			while (_i$2 < _ref$4.length) {
				i$2 = _i$2;
				sub$2 = ((_i$2 < 0 || _i$2 >= _ref$4.length) ? $throwRuntimeError("index out of range") : _ref$4.array[_ref$4.offset + _i$2]);
				if (i$2 > 0) {
					b.WriteRune(124);
				}
				writeRegexp(b, sub$2);
				_i$2++;
			}
		} else {
			b.WriteString("<invalid op" + strconv.Itoa((re.Op >> 0)) + ">");
		} }
	};
	Regexp.Ptr.prototype.String = function() {
		var re, b;
		re = this;
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		writeRegexp(b, re);
		return b.String();
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	escape = function(b, r, force) {
		var _ref, s;
		if (unicode.IsPrint(r)) {
			if (strings.IndexRune("\\.+*?()|[]{}^$", r) >= 0 || force) {
				b.WriteRune(92);
			}
			b.WriteRune(r);
			return;
		}
		_ref = r;
		switch (0) { default: if (_ref === 7) {
			b.WriteString("\\a");
		} else if (_ref === 12) {
			b.WriteString("\\f");
		} else if (_ref === 10) {
			b.WriteString("\\n");
		} else if (_ref === 13) {
			b.WriteString("\\r");
		} else if (_ref === 9) {
			b.WriteString("\\t");
		} else if (_ref === 11) {
			b.WriteString("\\v");
		} else {
			if (r < 256) {
				b.WriteString("\\x");
				s = strconv.FormatInt(new $Int64(0, r), 16);
				if (s.length === 1) {
					b.WriteRune(48);
				}
				b.WriteString(s);
				break;
			}
			b.WriteString("\\x{");
			b.WriteString(strconv.FormatInt(new $Int64(0, r), 16));
			b.WriteString("}");
		} }
	};
	Regexp.Ptr.prototype.MaxCap = function() {
		var re, m, _ref, _i, sub, n;
		re = this;
		m = 0;
		if (re.Op === 13) {
			m = re.Cap;
		}
		_ref = re.Sub;
		_i = 0;
		while (_i < _ref.length) {
			sub = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			n = sub.MaxCap();
			if (m < n) {
				m = n;
			}
			_i++;
		}
		return m;
	};
	Regexp.prototype.MaxCap = function() { return this.$val.MaxCap(); };
	Regexp.Ptr.prototype.CapNames = function() {
		var re, names;
		re = this;
		names = ($sliceType($String)).make((re.MaxCap() + 1 >> 0), 0, function() { return ""; });
		re.capNames(names);
		return names;
	};
	Regexp.prototype.CapNames = function() { return this.$val.CapNames(); };
	Regexp.Ptr.prototype.capNames = function(names) {
		var re, x, _ref, _i, sub;
		re = this;
		if (re.Op === 13) {
			(x = re.Cap, (x < 0 || x >= names.length) ? $throwRuntimeError("index out of range") : names.array[names.offset + x] = re.Name);
		}
		_ref = re.Sub;
		_i = 0;
		while (_i < _ref.length) {
			sub = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			sub.capNames(names);
			_i++;
		}
	};
	Regexp.prototype.capNames = function(names) { return this.$val.capNames(names); };
	Regexp.Ptr.prototype.Simplify = function() {
		var re, _ref, nre, _ref$1, _i, i, sub, nsub, x, sub$1, x$1, sub$2, nre$1, i$1, prefix, i$2, suffix, i$3, nre2;
		re = this;
		if (re === ($ptrType(Regexp)).nil) {
			return ($ptrType(Regexp)).nil;
		}
		_ref = re.Op;
		if (_ref === 13 || _ref === 18 || _ref === 19) {
			nre = re;
			_ref$1 = re.Sub;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				sub = ((_i < 0 || _i >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i]);
				nsub = sub.Simplify();
				if (nre === re && !(nsub === sub)) {
					nre = new Regexp.Ptr();
					$copy(nre, re, Regexp);
					nre.Rune = ($sliceType($Int32)).nil;
					nre.Sub = $appendSlice($subslice(new ($sliceType(($ptrType(Regexp))))(nre.Sub0), 0, 0), $subslice(re.Sub, 0, i));
				}
				if (!(nre === re)) {
					nre.Sub = $append(nre.Sub, nsub);
				}
				_i++;
			}
			return nre;
		} else if (_ref === 14 || _ref === 15 || _ref === 16) {
			sub$1 = (x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])).Simplify();
			return simplify1(re.Op, re.Flags, sub$1, re);
		} else if (_ref === 17) {
			if ((re.Min === 0) && (re.Max === 0)) {
				return new Regexp.Ptr(2, 0, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, "");
			}
			sub$2 = (x$1 = re.Sub, ((0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0])).Simplify();
			if (re.Max === -1) {
				if (re.Min === 0) {
					return simplify1(14, re.Flags, sub$2, ($ptrType(Regexp)).nil);
				}
				if (re.Min === 1) {
					return simplify1(15, re.Flags, sub$2, ($ptrType(Regexp)).nil);
				}
				nre$1 = new Regexp.Ptr(18, 0, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, "");
				nre$1.Sub = $subslice(new ($sliceType(($ptrType(Regexp))))(nre$1.Sub0), 0, 0);
				i$1 = 0;
				while (i$1 < (re.Min - 1 >> 0)) {
					nre$1.Sub = $append(nre$1.Sub, sub$2);
					i$1 = i$1 + 1 >> 0;
				}
				nre$1.Sub = $append(nre$1.Sub, simplify1(15, re.Flags, sub$2, ($ptrType(Regexp)).nil));
				return nre$1;
			}
			if ((re.Min === 1) && (re.Max === 1)) {
				return sub$2;
			}
			prefix = ($ptrType(Regexp)).nil;
			if (re.Min > 0) {
				prefix = new Regexp.Ptr(18, 0, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, "");
				prefix.Sub = $subslice(new ($sliceType(($ptrType(Regexp))))(prefix.Sub0), 0, 0);
				i$2 = 0;
				while (i$2 < re.Min) {
					prefix.Sub = $append(prefix.Sub, sub$2);
					i$2 = i$2 + 1 >> 0;
				}
			}
			if (re.Max > re.Min) {
				suffix = simplify1(16, re.Flags, sub$2, ($ptrType(Regexp)).nil);
				i$3 = re.Min + 1 >> 0;
				while (i$3 < re.Max) {
					nre2 = new Regexp.Ptr(18, 0, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, "");
					nre2.Sub = $append($subslice(new ($sliceType(($ptrType(Regexp))))(nre2.Sub0), 0, 0), sub$2, suffix);
					suffix = simplify1(16, re.Flags, nre2, ($ptrType(Regexp)).nil);
					i$3 = i$3 + 1 >> 0;
				}
				if (prefix === ($ptrType(Regexp)).nil) {
					return suffix;
				}
				prefix.Sub = $append(prefix.Sub, suffix);
			}
			if (!(prefix === ($ptrType(Regexp)).nil)) {
				return prefix;
			}
			return new Regexp.Ptr(1, 0, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, "");
		}
		return re;
	};
	Regexp.prototype.Simplify = function() { return this.$val.Simplify(); };
	simplify1 = function(op, flags, sub, re) {
		var x;
		if (sub.Op === 2) {
			return sub;
		}
		if ((op === sub.Op) && (((flags & 32) >>> 0) === ((sub.Flags & 32) >>> 0))) {
			return sub;
		}
		if (!(re === ($ptrType(Regexp)).nil) && (re.Op === op) && (((re.Flags & 32) >>> 0) === ((flags & 32) >>> 0)) && sub === (x = re.Sub, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0]))) {
			return re;
		}
		re = new Regexp.Ptr(op, flags, ($sliceType(($ptrType(Regexp)))).nil, ($arrayType(($ptrType(Regexp)), 1)).zero(), ($sliceType($Int32)).nil, ($arrayType($Int32, 2)).zero(), 0, 0, 0, "");
		re.Sub = $append($subslice(new ($sliceType(($ptrType(Regexp))))(re.Sub0), 0, 0), sub);
		return re;
	};
	$pkg.$init = function() {
		patchList.methods = [["append", "append", "regexp/syntax", [($ptrType(Prog)), patchList], [patchList], false, -1], ["next", "next", "regexp/syntax", [($ptrType(Prog))], [patchList], false, -1], ["patch", "patch", "regexp/syntax", [($ptrType(Prog)), $Uint32], [], false, -1]];
		($ptrType(patchList)).methods = [["append", "append", "regexp/syntax", [($ptrType(Prog)), patchList], [patchList], false, -1], ["next", "next", "regexp/syntax", [($ptrType(Prog))], [patchList], false, -1], ["patch", "patch", "regexp/syntax", [($ptrType(Prog)), $Uint32], [], false, -1]];
		frag.init([["i", "i", "regexp/syntax", $Uint32, ""], ["out", "out", "regexp/syntax", patchList, ""]]);
		($ptrType(compiler)).methods = [["alt", "alt", "regexp/syntax", [frag, frag], [frag], false, -1], ["cap", "cap", "regexp/syntax", [$Uint32], [frag], false, -1], ["cat", "cat", "regexp/syntax", [frag, frag], [frag], false, -1], ["compile", "compile", "regexp/syntax", [($ptrType(Regexp))], [frag], false, -1], ["empty", "empty", "regexp/syntax", [EmptyOp], [frag], false, -1], ["fail", "fail", "regexp/syntax", [], [frag], false, -1], ["init", "init", "regexp/syntax", [], [], false, -1], ["inst", "inst", "regexp/syntax", [InstOp], [frag], false, -1], ["nop", "nop", "regexp/syntax", [], [frag], false, -1], ["plus", "plus", "regexp/syntax", [frag, $Bool], [frag], false, -1], ["quest", "quest", "regexp/syntax", [frag, $Bool], [frag], false, -1], ["rune", "rune", "regexp/syntax", [($sliceType($Int32)), Flags], [frag], false, -1], ["star", "star", "regexp/syntax", [frag, $Bool], [frag], false, -1]];
		compiler.init([["p", "p", "regexp/syntax", ($ptrType(Prog)), ""]]);
		($ptrType(Error)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		Error.init([["Code", "Code", "", ErrorCode, ""], ["Expr", "Expr", "", $String, ""]]);
		ErrorCode.methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(ErrorCode)).methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(parser)).methods = [["alternate", "alternate", "regexp/syntax", [], [($ptrType(Regexp))], false, -1], ["appendGroup", "appendGroup", "regexp/syntax", [($sliceType($Int32)), charGroup], [($sliceType($Int32))], false, -1], ["collapse", "collapse", "regexp/syntax", [($sliceType(($ptrType(Regexp)))), Op], [($ptrType(Regexp))], false, -1], ["concat", "concat", "regexp/syntax", [], [($ptrType(Regexp))], false, -1], ["factor", "factor", "regexp/syntax", [($sliceType(($ptrType(Regexp)))), Flags], [($sliceType(($ptrType(Regexp))))], false, -1], ["leadingRegexp", "leadingRegexp", "regexp/syntax", [($ptrType(Regexp))], [($ptrType(Regexp))], false, -1], ["leadingString", "leadingString", "regexp/syntax", [($ptrType(Regexp))], [($sliceType($Int32)), Flags], false, -1], ["literal", "literal", "regexp/syntax", [$Int32], [], false, -1], ["maybeConcat", "maybeConcat", "regexp/syntax", [$Int32, Flags], [$Bool], false, -1], ["newLiteral", "newLiteral", "regexp/syntax", [$Int32, Flags], [($ptrType(Regexp))], false, -1], ["newRegexp", "newRegexp", "regexp/syntax", [Op], [($ptrType(Regexp))], false, -1], ["op", "op", "regexp/syntax", [Op], [($ptrType(Regexp))], false, -1], ["parseClass", "parseClass", "regexp/syntax", [$String], [$String, $error], false, -1], ["parseClassChar", "parseClassChar", "regexp/syntax", [$String, $String], [$Int32, $String, $error], false, -1], ["parseEscape", "parseEscape", "regexp/syntax", [$String], [$Int32, $String, $error], false, -1], ["parseInt", "parseInt", "regexp/syntax", [$String], [$Int, $String, $Bool], false, -1], ["parseNamedClass", "parseNamedClass", "regexp/syntax", [$String, ($sliceType($Int32))], [($sliceType($Int32)), $String, $error], false, -1], ["parsePerlClassEscape", "parsePerlClassEscape", "regexp/syntax", [$String, ($sliceType($Int32))], [($sliceType($Int32)), $String], false, -1], ["parsePerlFlags", "parsePerlFlags", "regexp/syntax", [$String], [$String, $error], false, -1], ["parseRepeat", "parseRepeat", "regexp/syntax", [$String], [$Int, $Int, $String, $Bool], false, -1], ["parseRightParen", "parseRightParen", "regexp/syntax", [], [$error], false, -1], ["parseUnicodeClass", "parseUnicodeClass", "regexp/syntax", [$String, ($sliceType($Int32))], [($sliceType($Int32)), $String, $error], false, -1], ["parseVerticalBar", "parseVerticalBar", "regexp/syntax", [], [$error], false, -1], ["push", "push", "regexp/syntax", [($ptrType(Regexp))], [($ptrType(Regexp))], false, -1], ["removeLeadingRegexp", "removeLeadingRegexp", "regexp/syntax", [($ptrType(Regexp)), $Bool], [($ptrType(Regexp))], false, -1], ["removeLeadingString", "removeLeadingString", "regexp/syntax", [($ptrType(Regexp)), $Int], [($ptrType(Regexp))], false, -1], ["repeat", "repeat", "regexp/syntax", [Op, $Int, $Int, $String, $String, $String], [$String, $error], false, -1], ["reuse", "reuse", "regexp/syntax", [($ptrType(Regexp))], [], false, -1], ["swapVerticalBar", "swapVerticalBar", "regexp/syntax", [], [$Bool], false, -1]];
		parser.init([["flags", "flags", "regexp/syntax", Flags, ""], ["stack", "stack", "regexp/syntax", ($sliceType(($ptrType(Regexp)))), ""], ["free", "free", "regexp/syntax", ($ptrType(Regexp)), ""], ["numCap", "numCap", "regexp/syntax", $Int, ""], ["wholeRegexp", "wholeRegexp", "regexp/syntax", $String, ""], ["tmpClass", "tmpClass", "regexp/syntax", ($sliceType($Int32)), ""]]);
		charGroup.init([["sign", "sign", "regexp/syntax", $Int, ""], ["class$1", "class", "regexp/syntax", ($sliceType($Int32)), ""]]);
		ranges.methods = [["Len", "Len", "", [], [$Int], false, -1], ["Less", "Less", "", [$Int, $Int], [$Bool], false, -1], ["Swap", "Swap", "", [$Int, $Int], [], false, -1]];
		($ptrType(ranges)).methods = [["Len", "Len", "", [], [$Int], false, -1], ["Less", "Less", "", [$Int, $Int], [$Bool], false, -1], ["Swap", "Swap", "", [$Int, $Int], [], false, -1]];
		ranges.init([["p", "p", "regexp/syntax", ($ptrType(($sliceType($Int32)))), ""]]);
		($ptrType(Prog)).methods = [["Prefix", "Prefix", "", [], [$String, $Bool], false, -1], ["StartCond", "StartCond", "", [], [EmptyOp], false, -1], ["String", "String", "", [], [$String], false, -1], ["skipNop", "skipNop", "regexp/syntax", [$Uint32], [($ptrType(Inst)), $Uint32], false, -1]];
		Prog.init([["Inst", "Inst", "", ($sliceType(Inst)), ""], ["Start", "Start", "", $Int, ""], ["NumCap", "NumCap", "", $Int, ""]]);
		InstOp.methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(InstOp)).methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(Inst)).methods = [["MatchEmptyWidth", "MatchEmptyWidth", "", [$Int32, $Int32], [$Bool], false, -1], ["MatchRune", "MatchRune", "", [$Int32], [$Bool], false, -1], ["MatchRunePos", "MatchRunePos", "", [$Int32], [$Int], false, -1], ["String", "String", "", [], [$String], false, -1], ["op", "op", "regexp/syntax", [], [InstOp], false, -1]];
		Inst.init([["Op", "Op", "", InstOp, ""], ["Out", "Out", "", $Uint32, ""], ["Arg", "Arg", "", $Uint32, ""], ["Rune", "Rune", "", ($sliceType($Int32)), ""]]);
		($ptrType(Regexp)).methods = [["CapNames", "CapNames", "", [], [($sliceType($String))], false, -1], ["Equal", "Equal", "", [($ptrType(Regexp))], [$Bool], false, -1], ["MaxCap", "MaxCap", "", [], [$Int], false, -1], ["Simplify", "Simplify", "", [], [($ptrType(Regexp))], false, -1], ["String", "String", "", [], [$String], false, -1], ["capNames", "capNames", "regexp/syntax", [($sliceType($String))], [], false, -1]];
		Regexp.init([["Op", "Op", "", Op, ""], ["Flags", "Flags", "", Flags, ""], ["Sub", "Sub", "", ($sliceType(($ptrType(Regexp)))), ""], ["Sub0", "Sub0", "", ($arrayType(($ptrType(Regexp)), 1)), ""], ["Rune", "Rune", "", ($sliceType($Int32)), ""], ["Rune0", "Rune0", "", ($arrayType($Int32, 2)), ""], ["Min", "Min", "", $Int, ""], ["Max", "Max", "", $Int, ""], ["Cap", "Cap", "", $Int, ""], ["Name", "Name", "", $String, ""]]);
		anyRuneNotNL = new ($sliceType($Int32))([0, 9, 11, 1114111]);
		anyRune = new ($sliceType($Int32))([0, 1114111]);
		anyTable = new unicode.RangeTable.Ptr(new ($sliceType(unicode.Range16))([new unicode.Range16.Ptr(0, 65535, 1)]), new ($sliceType(unicode.Range32))([new unicode.Range32.Ptr(65536, 1114111, 1)]), 0);
		code1 = new ($sliceType($Int32))([48, 57]);
		code2 = new ($sliceType($Int32))([9, 10, 12, 13, 32, 32]);
		code3 = new ($sliceType($Int32))([48, 57, 65, 90, 95, 95, 97, 122]);
		var _map, _key;
		perlGroup = (_map = new $Map(), _key = "\\d", _map[_key] = { k: _key, v: new charGroup.Ptr(1, code1) }, _key = "\\D", _map[_key] = { k: _key, v: new charGroup.Ptr(-1, code1) }, _key = "\\s", _map[_key] = { k: _key, v: new charGroup.Ptr(1, code2) }, _key = "\\S", _map[_key] = { k: _key, v: new charGroup.Ptr(-1, code2) }, _key = "\\w", _map[_key] = { k: _key, v: new charGroup.Ptr(1, code3) }, _key = "\\W", _map[_key] = { k: _key, v: new charGroup.Ptr(-1, code3) }, _map);
		code4 = new ($sliceType($Int32))([48, 57, 65, 90, 97, 122]);
		code5 = new ($sliceType($Int32))([65, 90, 97, 122]);
		code6 = new ($sliceType($Int32))([0, 127]);
		code7 = new ($sliceType($Int32))([9, 9, 32, 32]);
		code8 = new ($sliceType($Int32))([0, 31, 127, 127]);
		code9 = new ($sliceType($Int32))([48, 57]);
		code10 = new ($sliceType($Int32))([33, 126]);
		code11 = new ($sliceType($Int32))([97, 122]);
		code12 = new ($sliceType($Int32))([32, 126]);
		code13 = new ($sliceType($Int32))([33, 47, 58, 64, 91, 96, 123, 126]);
		code14 = new ($sliceType($Int32))([9, 13, 32, 32]);
		code15 = new ($sliceType($Int32))([65, 90]);
		code16 = new ($sliceType($Int32))([48, 57, 65, 90, 95, 95, 97, 122]);
		code17 = new ($sliceType($Int32))([48, 57, 65, 70, 97, 102]);
		var _map$1, _key$1;
		posixGroup = (_map$1 = new $Map(), _key$1 = "[:alnum:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code4) }, _key$1 = "[:^alnum:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code4) }, _key$1 = "[:alpha:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code5) }, _key$1 = "[:^alpha:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code5) }, _key$1 = "[:ascii:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code6) }, _key$1 = "[:^ascii:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code6) }, _key$1 = "[:blank:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code7) }, _key$1 = "[:^blank:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code7) }, _key$1 = "[:cntrl:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code8) }, _key$1 = "[:^cntrl:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code8) }, _key$1 = "[:digit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code9) }, _key$1 = "[:^digit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code9) }, _key$1 = "[:graph:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code10) }, _key$1 = "[:^graph:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code10) }, _key$1 = "[:lower:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code11) }, _key$1 = "[:^lower:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code11) }, _key$1 = "[:print:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code12) }, _key$1 = "[:^print:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code12) }, _key$1 = "[:punct:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code13) }, _key$1 = "[:^punct:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code13) }, _key$1 = "[:space:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code14) }, _key$1 = "[:^space:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code14) }, _key$1 = "[:upper:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code15) }, _key$1 = "[:^upper:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code15) }, _key$1 = "[:word:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code16) }, _key$1 = "[:^word:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code16) }, _key$1 = "[:xdigit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code17) }, _key$1 = "[:^xdigit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code17) }, _map$1);
		instOpNames = new ($sliceType($String))(["InstAlt", "InstAltMatch", "InstCapture", "InstEmptyWidth", "InstMatch", "InstFail", "InstNop", "InstRune", "InstRune1", "InstRuneAny", "InstRuneAnyNotNL"]);
	};
	return $pkg;
})();
$packages["flag"] = (function() {
	var $pkg = {}, errors = $packages["errors"], fmt = $packages["fmt"], io = $packages["io"], os = $packages["os"], sort = $packages["sort"], strconv = $packages["strconv"], time = $packages["time"], boolValue, boolFlag, intValue, int64Value, uintValue, uint64Value, stringValue, float64Value, durationValue, Value, ErrorHandling, FlagSet, Flag, newBoolValue, newIntValue, newInt64Value, newUintValue, newUint64Value, newStringValue, newFloat64Value, newDurationValue, sortFlags, PrintDefaults, defaultUsage, Bool, Int, String, Duration, Parse, NewFlagSet;
	boolValue = $pkg.boolValue = $newType(1, "Bool", "flag.boolValue", "boolValue", "flag", null);
	boolFlag = $pkg.boolFlag = $newType(8, "Interface", "flag.boolFlag", "boolFlag", "flag", null);
	intValue = $pkg.intValue = $newType(4, "Int", "flag.intValue", "intValue", "flag", null);
	int64Value = $pkg.int64Value = $newType(8, "Int64", "flag.int64Value", "int64Value", "flag", null);
	uintValue = $pkg.uintValue = $newType(4, "Uint", "flag.uintValue", "uintValue", "flag", null);
	uint64Value = $pkg.uint64Value = $newType(8, "Uint64", "flag.uint64Value", "uint64Value", "flag", null);
	stringValue = $pkg.stringValue = $newType(8, "String", "flag.stringValue", "stringValue", "flag", null);
	float64Value = $pkg.float64Value = $newType(8, "Float64", "flag.float64Value", "float64Value", "flag", null);
	durationValue = $pkg.durationValue = $newType(8, "Int64", "flag.durationValue", "durationValue", "flag", null);
	Value = $pkg.Value = $newType(8, "Interface", "flag.Value", "Value", "flag", null);
	ErrorHandling = $pkg.ErrorHandling = $newType(4, "Int", "flag.ErrorHandling", "ErrorHandling", "flag", null);
	FlagSet = $pkg.FlagSet = $newType(0, "Struct", "flag.FlagSet", "FlagSet", "flag", function(Usage_, name_, parsed_, actual_, formal_, args_, errorHandling_, output_) {
		this.$val = this;
		this.Usage = Usage_ !== undefined ? Usage_ : $throwNilPointerError;
		this.name = name_ !== undefined ? name_ : "";
		this.parsed = parsed_ !== undefined ? parsed_ : false;
		this.actual = actual_ !== undefined ? actual_ : false;
		this.formal = formal_ !== undefined ? formal_ : false;
		this.args = args_ !== undefined ? args_ : ($sliceType($String)).nil;
		this.errorHandling = errorHandling_ !== undefined ? errorHandling_ : 0;
		this.output = output_ !== undefined ? output_ : null;
	});
	Flag = $pkg.Flag = $newType(0, "Struct", "flag.Flag", "Flag", "flag", function(Name_, Usage_, Value_, DefValue_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Usage = Usage_ !== undefined ? Usage_ : "";
		this.Value = Value_ !== undefined ? Value_ : null;
		this.DefValue = DefValue_ !== undefined ? DefValue_ : "";
	});
	newBoolValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(boolValue))(p.$get, p.$set);
	};
	$ptrType(boolValue).prototype.Set = function(s) {
		var b, _tuple, v, err;
		b = this;
		_tuple = strconv.ParseBool(s); v = _tuple[0]; err = _tuple[1];
		b.$set(v);
		return err;
	};
	$ptrType(boolValue).prototype.Get = function() {
		var b;
		b = this;
		return new $Bool(b.$get());
	};
	$ptrType(boolValue).prototype.String = function() {
		var b;
		b = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new boolValue(b.$get())]));
	};
	$ptrType(boolValue).prototype.IsBoolFlag = function() {
		var b;
		b = this;
		return true;
	};
	newIntValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(intValue))(p.$get, p.$set);
	};
	$ptrType(intValue).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(((v.low + ((v.high >> 31) * 4294967296)) >> 0));
		return err;
	};
	$ptrType(intValue).prototype.Get = function() {
		var i;
		i = this;
		return new $Int((i.$get() >> 0));
	};
	$ptrType(intValue).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new intValue(i.$get())]));
	};
	newInt64Value = function(val, p) {
		p.$set(val);
		return new ($ptrType(int64Value))(p.$get, p.$set);
	};
	$ptrType(int64Value).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(new int64Value(v.high, v.low));
		return err;
	};
	$ptrType(int64Value).prototype.Get = function() {
		var i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Int64(x$1.high, x$1.low));
	};
	$ptrType(int64Value).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([i.$get()]));
	};
	newUintValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(uintValue))(p.$get, p.$set);
	};
	$ptrType(uintValue).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set((v.low >>> 0));
		return err;
	};
	$ptrType(uintValue).prototype.Get = function() {
		var i;
		i = this;
		return new $Uint((i.$get() >>> 0));
	};
	$ptrType(uintValue).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new uintValue(i.$get())]));
	};
	newUint64Value = function(val, p) {
		p.$set(val);
		return new ($ptrType(uint64Value))(p.$get, p.$set);
	};
	$ptrType(uint64Value).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(new uint64Value(v.high, v.low));
		return err;
	};
	$ptrType(uint64Value).prototype.Get = function() {
		var i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Uint64(x$1.high, x$1.low));
	};
	$ptrType(uint64Value).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([i.$get()]));
	};
	newStringValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(stringValue))(p.$get, p.$set);
	};
	$ptrType(stringValue).prototype.Set = function(val) {
		var s;
		s = this;
		s.$set(val);
		return null;
	};
	$ptrType(stringValue).prototype.Get = function() {
		var s;
		s = this;
		return new $String(s.$get());
	};
	$ptrType(stringValue).prototype.String = function() {
		var s;
		s = this;
		return fmt.Sprintf("%s", new ($sliceType($emptyInterface))([new stringValue(s.$get())]));
	};
	newFloat64Value = function(val, p) {
		p.$set(val);
		return new ($ptrType(float64Value))(p.$get, p.$set);
	};
	$ptrType(float64Value).prototype.Set = function(s) {
		var f, _tuple, v, err;
		f = this;
		_tuple = strconv.ParseFloat(s, 64); v = _tuple[0]; err = _tuple[1];
		f.$set(v);
		return err;
	};
	$ptrType(float64Value).prototype.Get = function() {
		var f;
		f = this;
		return new $Float64(f.$get());
	};
	$ptrType(float64Value).prototype.String = function() {
		var f;
		f = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new float64Value(f.$get())]));
	};
	newDurationValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(durationValue))(p.$get, p.$set);
	};
	$ptrType(durationValue).prototype.Set = function(s) {
		var d, _tuple, v, err;
		d = this;
		_tuple = time.ParseDuration(s); v = _tuple[0]; err = _tuple[1];
		d.$set(new durationValue(v.high, v.low));
		return err;
	};
	$ptrType(durationValue).prototype.Get = function() {
		var d, x$1;
		d = this;
		return (x$1 = d.$get(), new time.Duration(x$1.high, x$1.low));
	};
	$ptrType(durationValue).prototype.String = function() {
		var d;
		d = this;
		return new ($ptrType(time.Duration))(d.$get, d.$set).String();
	};
	sortFlags = function(flags) {
		var list, i, _ref, _i, _keys, _entry, f, result, _ref$1, _i$1, i$1, name, _entry$1;
		list = sort.StringSlice.make($keys(flags).length, 0, function() { return ""; });
		i = 0;
		_ref = flags;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			f = _entry.v;
			(i < 0 || i >= list.length) ? $throwRuntimeError("index out of range") : list.array[list.offset + i] = f.Name;
			i = i + 1 >> 0;
			_i++;
		}
		list.Sort();
		result = ($sliceType(($ptrType(Flag)))).make(list.length, 0, function() { return ($ptrType(Flag)).nil; });
		_ref$1 = list;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$1 = _i$1;
			name = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]);
			(i$1 < 0 || i$1 >= result.length) ? $throwRuntimeError("index out of range") : result.array[result.offset + i$1] = (_entry$1 = flags[name], _entry$1 !== undefined ? _entry$1.v : ($ptrType(Flag)).nil);
			_i$1++;
		}
		return result;
	};
	FlagSet.Ptr.prototype.out = function() {
		var f;
		f = this;
		if ($interfaceIsEqual(f.output, null)) {
			return os.Stderr;
		}
		return f.output;
	};
	FlagSet.prototype.out = function() { return this.$val.out(); };
	FlagSet.Ptr.prototype.SetOutput = function(output) {
		var f;
		f = this;
		f.output = output;
	};
	FlagSet.prototype.SetOutput = function(output) { return this.$val.SetOutput(output); };
	FlagSet.Ptr.prototype.VisitAll = function(fn) {
		var f, _ref, _i, flag;
		f = this;
		_ref = sortFlags(f.formal);
		_i = 0;
		while (_i < _ref.length) {
			flag = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			fn(flag);
			_i++;
		}
	};
	FlagSet.prototype.VisitAll = function(fn) { return this.$val.VisitAll(fn); };
	FlagSet.Ptr.prototype.Visit = function(fn) {
		var f, _ref, _i, flag;
		f = this;
		_ref = sortFlags(f.actual);
		_i = 0;
		while (_i < _ref.length) {
			flag = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			fn(flag);
			_i++;
		}
	};
	FlagSet.prototype.Visit = function(fn) { return this.$val.Visit(fn); };
	FlagSet.Ptr.prototype.Lookup = function(name) {
		var f, _entry;
		f = this;
		return (_entry = f.formal[name], _entry !== undefined ? _entry.v : ($ptrType(Flag)).nil);
	};
	FlagSet.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	FlagSet.Ptr.prototype.Set = function(name, value) {
		var f, _tuple, _entry, flag, ok, err, _key;
		f = this;
		_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [($ptrType(Flag)).nil, false]); flag = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return fmt.Errorf("no such flag -%v", new ($sliceType($emptyInterface))([new $String(name)]));
		}
		err = flag.Value.Set(value);
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		if (f.actual === false) {
			f.actual = new $Map();
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
		return null;
	};
	FlagSet.prototype.Set = function(name, value) { return this.$val.Set(name, value); };
	FlagSet.Ptr.prototype.PrintDefaults = function() {
		var f;
		f = this;
		f.VisitAll((function(flag) {
			var format, _tuple, x$1, ok;
			format = "  -%s=%s: %s\n";
			_tuple = (x$1 = flag.Value, (x$1 !== null && x$1.constructor === ($ptrType(stringValue)) ? [x$1.$val, true] : [($ptrType(stringValue)).nil, false])); ok = _tuple[1];
			if (ok) {
				format = "  -%s=%q: %s\n";
			}
			fmt.Fprintf(f.out(), format, new ($sliceType($emptyInterface))([new $String(flag.Name), new $String(flag.DefValue), new $String(flag.Usage)]));
		}));
	};
	FlagSet.prototype.PrintDefaults = function() { return this.$val.PrintDefaults(); };
	PrintDefaults = $pkg.PrintDefaults = function() {
		$pkg.CommandLine.PrintDefaults();
	};
	defaultUsage = function(f) {
		if (f.name === "") {
			fmt.Fprintf(f.out(), "Usage:\n", new ($sliceType($emptyInterface))([]));
		} else {
			fmt.Fprintf(f.out(), "Usage of %s:\n", new ($sliceType($emptyInterface))([new $String(f.name)]));
		}
		f.PrintDefaults();
	};
	FlagSet.Ptr.prototype.NFlag = function() {
		var f;
		f = this;
		return $keys(f.actual).length;
	};
	FlagSet.prototype.NFlag = function() { return this.$val.NFlag(); };
	FlagSet.Ptr.prototype.Arg = function(i) {
		var f, x$1;
		f = this;
		if (i < 0 || i >= f.args.length) {
			return "";
		}
		return (x$1 = f.args, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]));
	};
	FlagSet.prototype.Arg = function(i) { return this.$val.Arg(i); };
	FlagSet.Ptr.prototype.NArg = function() {
		var f;
		f = this;
		return f.args.length;
	};
	FlagSet.prototype.NArg = function() { return this.$val.NArg(); };
	FlagSet.Ptr.prototype.Args = function() {
		var f;
		f = this;
		return f.args;
	};
	FlagSet.prototype.Args = function() { return this.$val.Args(); };
	FlagSet.Ptr.prototype.BoolVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newBoolValue(value, p), name, usage);
	};
	FlagSet.prototype.BoolVar = function(p, name, value, usage) { return this.$val.BoolVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Bool = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(false, ($ptrType($Bool)));
		f.BoolVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Bool = function(name, value, usage) { return this.$val.Bool(name, value, usage); };
	Bool = $pkg.Bool = function(name, value, usage) {
		return $pkg.CommandLine.Bool(name, value, usage);
	};
	FlagSet.Ptr.prototype.IntVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newIntValue(value, p), name, usage);
	};
	FlagSet.prototype.IntVar = function(p, name, value, usage) { return this.$val.IntVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Int = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ($ptrType($Int)));
		f.IntVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Int = function(name, value, usage) { return this.$val.Int(name, value, usage); };
	Int = $pkg.Int = function(name, value, usage) {
		return $pkg.CommandLine.Int(name, value, usage);
	};
	FlagSet.Ptr.prototype.Int64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newInt64Value(value, p), name, usage);
	};
	FlagSet.prototype.Int64Var = function(p, name, value, usage) { return this.$val.Int64Var(p, name, value, usage); };
	FlagSet.Ptr.prototype.Int64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new $Int64(0, 0), ($ptrType($Int64)));
		f.Int64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Int64 = function(name, value, usage) { return this.$val.Int64(name, value, usage); };
	FlagSet.Ptr.prototype.UintVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newUintValue(value, p), name, usage);
	};
	FlagSet.prototype.UintVar = function(p, name, value, usage) { return this.$val.UintVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Uint = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ($ptrType($Uint)));
		f.UintVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Uint = function(name, value, usage) { return this.$val.Uint(name, value, usage); };
	FlagSet.Ptr.prototype.Uint64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newUint64Value(value, p), name, usage);
	};
	FlagSet.prototype.Uint64Var = function(p, name, value, usage) { return this.$val.Uint64Var(p, name, value, usage); };
	FlagSet.Ptr.prototype.Uint64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new $Uint64(0, 0), ($ptrType($Uint64)));
		f.Uint64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Uint64 = function(name, value, usage) { return this.$val.Uint64(name, value, usage); };
	FlagSet.Ptr.prototype.StringVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newStringValue(value, p), name, usage);
	};
	FlagSet.prototype.StringVar = function(p, name, value, usage) { return this.$val.StringVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.String = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer("", ($ptrType($String)));
		f.StringVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.String = function(name, value, usage) { return this.$val.String(name, value, usage); };
	String = $pkg.String = function(name, value, usage) {
		return $pkg.CommandLine.String(name, value, usage);
	};
	FlagSet.Ptr.prototype.Float64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newFloat64Value(value, p), name, usage);
	};
	FlagSet.prototype.Float64Var = function(p, name, value, usage) { return this.$val.Float64Var(p, name, value, usage); };
	FlagSet.Ptr.prototype.Float64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ($ptrType($Float64)));
		f.Float64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Float64 = function(name, value, usage) { return this.$val.Float64(name, value, usage); };
	FlagSet.Ptr.prototype.DurationVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newDurationValue(value, p), name, usage);
	};
	FlagSet.prototype.DurationVar = function(p, name, value, usage) { return this.$val.DurationVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Duration = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new time.Duration(0, 0), ($ptrType(time.Duration)));
		f.DurationVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Duration = function(name, value, usage) { return this.$val.Duration(name, value, usage); };
	Duration = $pkg.Duration = function(name, value, usage) {
		return $pkg.CommandLine.Duration(name, value, usage);
	};
	FlagSet.Ptr.prototype.Var = function(value, name, usage) {
		var f, flag, _tuple, _entry, alreadythere, msg, _key;
		f = this;
		flag = new Flag.Ptr(name, usage, value, value.String());
		_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [($ptrType(Flag)).nil, false]); alreadythere = _tuple[1];
		if (alreadythere) {
			msg = "";
			if (f.name === "") {
				msg = fmt.Sprintf("flag redefined: %s", new ($sliceType($emptyInterface))([new $String(name)]));
			} else {
				msg = fmt.Sprintf("%s flag redefined: %s", new ($sliceType($emptyInterface))([new $String(f.name), new $String(name)]));
			}
			fmt.Fprintln(f.out(), new ($sliceType($emptyInterface))([new $String(msg)]));
			throw $panic(new $String(msg));
		}
		if (f.formal === false) {
			f.formal = new $Map();
		}
		_key = name; (f.formal || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
	};
	FlagSet.prototype.Var = function(value, name, usage) { return this.$val.Var(value, name, usage); };
	FlagSet.Ptr.prototype.failf = function(format, a) {
		var f, err;
		f = this;
		err = fmt.Errorf(format, a);
		fmt.Fprintln(f.out(), new ($sliceType($emptyInterface))([err]));
		f.usage();
		return err;
	};
	FlagSet.prototype.failf = function(format, a) { return this.$val.failf(format, a); };
	FlagSet.Ptr.prototype.usage = function() {
		var f;
		f = this;
		if (f === $pkg.CommandLine) {
			$pkg.Usage();
		} else if (f.Usage === $throwNilPointerError) {
			defaultUsage(f);
		} else {
			f.Usage();
		}
	};
	FlagSet.prototype.usage = function() { return this.$val.usage(); };
	FlagSet.Ptr.prototype.parseOne = function() {
		var f, x$1, s, num_minuses, name, has_value, value, i, m, _tuple, _entry, flag, alreadythere, _tuple$1, x$2, fv, ok, err, _tmp, x$3, _tmp$1, err$1, _key;
		f = this;
		if (f.args.length === 0) {
			return [false, null];
		}
		s = (x$1 = f.args, ((0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0]));
		if ((s.length === 0) || !((s.charCodeAt(0) === 45)) || (s.length === 1)) {
			return [false, null];
		}
		num_minuses = 1;
		if (s.charCodeAt(1) === 45) {
			num_minuses = num_minuses + 1 >> 0;
			if (s.length === 2) {
				f.args = $subslice(f.args, 1);
				return [false, null];
			}
		}
		name = s.substring(num_minuses);
		if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) {
			return [false, f.failf("bad flag syntax: %s", new ($sliceType($emptyInterface))([new $String(s)]))];
		}
		f.args = $subslice(f.args, 1);
		has_value = false;
		value = "";
		i = 1;
		while (i < name.length) {
			if (name.charCodeAt(i) === 61) {
				value = name.substring((i + 1 >> 0));
				has_value = true;
				name = name.substring(0, i);
				break;
			}
			i = i + 1 >> 0;
		}
		m = f.formal;
		_tuple = (_entry = m[name], _entry !== undefined ? [_entry.v, true] : [($ptrType(Flag)).nil, false]); flag = _tuple[0]; alreadythere = _tuple[1];
		if (!alreadythere) {
			if (name === "help" || name === "h") {
				f.usage();
				return [false, $pkg.ErrHelp];
			}
			return [false, f.failf("flag provided but not defined: -%s", new ($sliceType($emptyInterface))([new $String(name)]))];
		}
		_tuple$1 = (x$2 = flag.Value, (x$2 !== null && boolFlag.implementedBy.indexOf(x$2.constructor) !== -1 ? [x$2, true] : [null, false])); fv = _tuple$1[0]; ok = _tuple$1[1];
		if (ok && fv.IsBoolFlag()) {
			if (has_value) {
				err = fv.Set(value);
				if (!($interfaceIsEqual(err, null))) {
					return [false, f.failf("invalid boolean value %q for -%s: %v", new ($sliceType($emptyInterface))([new $String(value), new $String(name), err]))];
				}
			} else {
				fv.Set("true");
			}
		} else {
			if (!has_value && f.args.length > 0) {
				has_value = true;
				_tmp = (x$3 = f.args, ((0 < 0 || 0 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 0])); _tmp$1 = $subslice(f.args, 1); value = _tmp; f.args = _tmp$1;
			}
			if (!has_value) {
				return [false, f.failf("flag needs an argument: -%s", new ($sliceType($emptyInterface))([new $String(name)]))];
			}
			err$1 = flag.Value.Set(value);
			if (!($interfaceIsEqual(err$1, null))) {
				return [false, f.failf("invalid value %q for flag -%s: %v", new ($sliceType($emptyInterface))([new $String(value), new $String(name), err$1]))];
			}
		}
		if (f.actual === false) {
			f.actual = new $Map();
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
		return [true, null];
	};
	FlagSet.prototype.parseOne = function() { return this.$val.parseOne(); };
	FlagSet.Ptr.prototype.Parse = function(arguments$1) {
		var f, _tuple, seen, err, _ref;
		f = this;
		f.parsed = true;
		f.args = arguments$1;
		while (true) {
			_tuple = f.parseOne(); seen = _tuple[0]; err = _tuple[1];
			if (seen) {
				continue;
			}
			if ($interfaceIsEqual(err, null)) {
				break;
			}
			_ref = f.errorHandling;
			if (_ref === 0) {
				return err;
			} else if (_ref === 1) {
				os.Exit(2);
			} else if (_ref === 2) {
				throw $panic(err);
			}
		}
		return null;
	};
	FlagSet.prototype.Parse = function(arguments$1) { return this.$val.Parse(arguments$1); };
	FlagSet.Ptr.prototype.Parsed = function() {
		var f;
		f = this;
		return f.parsed;
	};
	FlagSet.prototype.Parsed = function() { return this.$val.Parsed(); };
	Parse = $pkg.Parse = function() {
		$pkg.CommandLine.Parse($subslice(os.Args, 1));
	};
	NewFlagSet = $pkg.NewFlagSet = function(name, errorHandling) {
		var f;
		f = new FlagSet.Ptr($throwNilPointerError, name, false, false, false, ($sliceType($String)).nil, errorHandling, null);
		return f;
	};
	FlagSet.Ptr.prototype.Init = function(name, errorHandling) {
		var f;
		f = this;
		f.name = name;
		f.errorHandling = errorHandling;
	};
	FlagSet.prototype.Init = function(name, errorHandling) { return this.$val.Init(name, errorHandling); };
	$pkg.$init = function() {
		($ptrType(boolValue)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["IsBoolFlag", "IsBoolFlag", "", [], [$Bool], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		boolFlag.init([["IsBoolFlag", "IsBoolFlag", "", [], [$Bool], false], ["Set", "Set", "", [$String], [$error], false], ["String", "String", "", [], [$String], false]]);
		($ptrType(intValue)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(int64Value)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(uintValue)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(uint64Value)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(stringValue)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(float64Value)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		($ptrType(durationValue)).methods = [["Get", "Get", "", [], [$emptyInterface], false, -1], ["Set", "Set", "", [$String], [$error], false, -1], ["String", "String", "", [], [$String], false, -1]];
		Value.init([["Set", "Set", "", [$String], [$error], false], ["String", "String", "", [], [$String], false]]);
		($ptrType(FlagSet)).methods = [["Arg", "Arg", "", [$Int], [$String], false, -1], ["Args", "Args", "", [], [($sliceType($String))], false, -1], ["Bool", "Bool", "", [$String, $Bool, $String], [($ptrType($Bool))], false, -1], ["BoolVar", "BoolVar", "", [($ptrType($Bool)), $String, $Bool, $String], [], false, -1], ["Duration", "Duration", "", [$String, time.Duration, $String], [($ptrType(time.Duration))], false, -1], ["DurationVar", "DurationVar", "", [($ptrType(time.Duration)), $String, time.Duration, $String], [], false, -1], ["Float64", "Float64", "", [$String, $Float64, $String], [($ptrType($Float64))], false, -1], ["Float64Var", "Float64Var", "", [($ptrType($Float64)), $String, $Float64, $String], [], false, -1], ["Init", "Init", "", [$String, ErrorHandling], [], false, -1], ["Int", "Int", "", [$String, $Int, $String], [($ptrType($Int))], false, -1], ["Int64", "Int64", "", [$String, $Int64, $String], [($ptrType($Int64))], false, -1], ["Int64Var", "Int64Var", "", [($ptrType($Int64)), $String, $Int64, $String], [], false, -1], ["IntVar", "IntVar", "", [($ptrType($Int)), $String, $Int, $String], [], false, -1], ["Lookup", "Lookup", "", [$String], [($ptrType(Flag))], false, -1], ["NArg", "NArg", "", [], [$Int], false, -1], ["NFlag", "NFlag", "", [], [$Int], false, -1], ["Parse", "Parse", "", [($sliceType($String))], [$error], false, -1], ["Parsed", "Parsed", "", [], [$Bool], false, -1], ["PrintDefaults", "PrintDefaults", "", [], [], false, -1], ["Set", "Set", "", [$String, $String], [$error], false, -1], ["SetOutput", "SetOutput", "", [io.Writer], [], false, -1], ["String", "String", "", [$String, $String, $String], [($ptrType($String))], false, -1], ["StringVar", "StringVar", "", [($ptrType($String)), $String, $String, $String], [], false, -1], ["Uint", "Uint", "", [$String, $Uint, $String], [($ptrType($Uint))], false, -1], ["Uint64", "Uint64", "", [$String, $Uint64, $String], [($ptrType($Uint64))], false, -1], ["Uint64Var", "Uint64Var", "", [($ptrType($Uint64)), $String, $Uint64, $String], [], false, -1], ["UintVar", "UintVar", "", [($ptrType($Uint)), $String, $Uint, $String], [], false, -1], ["Var", "Var", "", [Value, $String, $String], [], false, -1], ["Visit", "Visit", "", [($funcType([($ptrType(Flag))], [], false))], [], false, -1], ["VisitAll", "VisitAll", "", [($funcType([($ptrType(Flag))], [], false))], [], false, -1], ["failf", "failf", "flag", [$String, ($sliceType($emptyInterface))], [$error], true, -1], ["out", "out", "flag", [], [io.Writer], false, -1], ["parseOne", "parseOne", "flag", [], [$Bool, $error], false, -1], ["usage", "usage", "flag", [], [], false, -1]];
		FlagSet.init([["Usage", "Usage", "", ($funcType([], [], false)), ""], ["name", "name", "flag", $String, ""], ["parsed", "parsed", "flag", $Bool, ""], ["actual", "actual", "flag", ($mapType($String, ($ptrType(Flag)))), ""], ["formal", "formal", "flag", ($mapType($String, ($ptrType(Flag)))), ""], ["args", "args", "flag", ($sliceType($String)), ""], ["errorHandling", "errorHandling", "flag", ErrorHandling, ""], ["output", "output", "flag", io.Writer, ""]]);
		Flag.init([["Name", "Name", "", $String, ""], ["Usage", "Usage", "", $String, ""], ["Value", "Value", "", Value, ""], ["DefValue", "DefValue", "", $String, ""]]);
		$pkg.ErrHelp = errors.New("flag: help requested");
		var x;
		$pkg.CommandLine = NewFlagSet((x = os.Args, ((0 < 0 || 0 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 0])), 1);
		$pkg.Usage = (function() {
			var x$1;
			fmt.Fprintf(os.Stderr, "Usage of %s:\n", new ($sliceType($emptyInterface))([new $String((x$1 = os.Args, ((0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0])))]));
			PrintDefaults();
		});
	};
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], errors = $packages["errors"], io = $packages["io"], utf8 = $packages["unicode/utf8"], Writer, errNegativeRead, NewWriterSize, NewWriter;
	Writer = $pkg.Writer = $newType(0, "Struct", "bufio.Writer", "Writer", "bufio", function(err_, buf_, n_, wr_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : null;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.n = n_ !== undefined ? n_ : 0;
		this.wr = wr_ !== undefined ? wr_ : null;
	});
	NewWriterSize = $pkg.NewWriterSize = function(w, size) {
		var _tuple, b, ok;
		_tuple = (w !== null && w.constructor === ($ptrType(Writer)) ? [w.$val, true] : [($ptrType(Writer)).nil, false]); b = _tuple[0]; ok = _tuple[1];
		if (ok && b.buf.length >= size) {
			return b;
		}
		if (size <= 0) {
			size = 4096;
		}
		return new Writer.Ptr(null, ($sliceType($Uint8)).make(size, 0, function() { return 0; }), 0, w);
	};
	NewWriter = $pkg.NewWriter = function(w) {
		return NewWriterSize(w, 4096);
	};
	Writer.Ptr.prototype.Reset = function(w) {
		var b;
		b = this;
		b.err = null;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.Ptr.prototype.Flush = function() {
		var b, err;
		b = this;
		err = b.flush();
		return err;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.Ptr.prototype.flush = function() {
		var b, _tuple, n, err;
		b = this;
		if (!($interfaceIsEqual(b.err, null))) {
			return b.err;
		}
		if (b.n === 0) {
			return null;
		}
		_tuple = b.wr.Write($subslice(b.buf, 0, b.n)); n = _tuple[0]; err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, null)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, null))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			return err;
		}
		b.n = 0;
		return null;
	};
	Writer.prototype.flush = function() { return this.$val.flush(); };
	Writer.Ptr.prototype.Available = function() {
		var b;
		b = this;
		return b.buf.length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.Ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.Ptr.prototype.Write = function(p) {
		var nn, err, b, n, _tuple, _tmp, _tmp$1, n$1, _tmp$2, _tmp$3;
		nn = 0;
		err = null;
		b = this;
		while (p.length > b.Available() && $interfaceIsEqual(b.err, null)) {
			n = 0;
			if (b.Buffered() === 0) {
				_tuple = b.wr.Write(p); n = _tuple[0]; b.err = _tuple[1];
			} else {
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				b.flush();
			}
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		}
		if (!($interfaceIsEqual(b.err, null))) {
			_tmp = nn; _tmp$1 = b.err; nn = _tmp; err = _tmp$1;
			return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn; _tmp$3 = null; nn = _tmp$2; err = _tmp$3;
		return [nn, err];
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.Ptr.prototype.WriteByte = function(c) {
		var b, x, x$1;
		b = this;
		if (!($interfaceIsEqual(b.err, null))) {
			return b.err;
		}
		if (b.Available() <= 0 && !($interfaceIsEqual(b.flush(), null))) {
			return b.err;
		}
		(x = b.buf, x$1 = b.n, (x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1] = c);
		b.n = b.n + 1 >> 0;
		return null;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.Ptr.prototype.WriteRune = function(r) {
		var size, err, b, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, n, _tmp$6, _tmp$7, _tuple, _tmp$8, _tmp$9;
		size = 0;
		err = null;
		b = this;
		if (r < 128) {
			err = b.WriteByte((r << 24 >>> 24));
			if (!($interfaceIsEqual(err, null))) {
				_tmp = 0; _tmp$1 = err; size = _tmp; err = _tmp$1;
				return [size, err];
			}
			_tmp$2 = 1; _tmp$3 = null; size = _tmp$2; err = _tmp$3;
			return [size, err];
		}
		if (!($interfaceIsEqual(b.err, null))) {
			_tmp$4 = 0; _tmp$5 = b.err; size = _tmp$4; err = _tmp$5;
			return [size, err];
		}
		n = b.Available();
		if (n < 4) {
			b.flush();
			if (!($interfaceIsEqual(b.err, null))) {
				_tmp$6 = 0; _tmp$7 = b.err; size = _tmp$6; err = _tmp$7;
				return [size, err];
			}
			n = b.Available();
			if (n < 4) {
				_tuple = b.WriteString($encodeRune(r)); size = _tuple[0]; err = _tuple[1];
				return [size, err];
			}
		}
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size; _tmp$9 = null; size = _tmp$8; err = _tmp$9;
		return [size, err];
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.Ptr.prototype.WriteString = function(s) {
		var b, nn, n, n$1;
		b = this;
		nn = 0;
		while (s.length > b.Available() && $interfaceIsEqual(b.err, null)) {
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = s.substring(n);
			b.flush();
		}
		if (!($interfaceIsEqual(b.err, null))) {
			return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		return [nn, null];
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.Ptr.prototype.ReadFrom = function(r) {
		var n, err, b, _tuple, x, w, ok, _tuple$1, m, err1, _tmp, _tmp$1, nr, _tuple$2, _tmp$2, _tmp$3, x$1, _tmp$4, _tmp$5;
		n = new $Int64(0, 0);
		err = null;
		b = this;
		if (b.Buffered() === 0) {
			_tuple = (x = b.wr, (x !== null && io.ReaderFrom.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])); w = _tuple[0]; ok = _tuple[1];
			if (ok) {
				_tuple$1 = w.ReadFrom(r); n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
		}
		m = 0;
		while (true) {
			if (b.Available() === 0) {
				err1 = b.flush();
				if (!($interfaceIsEqual(err1, null))) {
					_tmp = n; _tmp$1 = err1; n = _tmp; err = _tmp$1;
					return [n, err];
				}
			}
			nr = 0;
			while (nr < 100) {
				_tuple$2 = r.Read($subslice(b.buf, b.n)); m = _tuple$2[0]; err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, null))) {
					break;
				}
				nr = nr + 1 >> 0;
			}
			if (nr === 100) {
				_tmp$2 = n; _tmp$3 = io.ErrNoProgress; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x$1 = new $Int64(0, m), new $Int64(n.high + x$1.high, n.low + x$1.low));
			if (!($interfaceIsEqual(err, null))) {
				break;
			}
		}
		if ($interfaceIsEqual(err, io.EOF)) {
			if (b.Available() === 0) {
				err = b.flush();
			} else {
				err = null;
			}
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	$pkg.$init = function() {
		($ptrType(Writer)).methods = [["Available", "Available", "", [], [$Int], false, -1], ["Buffered", "Buffered", "", [], [$Int], false, -1], ["Flush", "Flush", "", [], [$error], false, -1], ["ReadFrom", "ReadFrom", "", [io.Reader], [$Int64, $error], false, -1], ["Reset", "Reset", "", [io.Writer], [], false, -1], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false, -1], ["WriteByte", "WriteByte", "", [$Uint8], [$error], false, -1], ["WriteRune", "WriteRune", "", [$Int32], [$Int, $error], false, -1], ["WriteString", "WriteString", "", [$String], [$Int, $error], false, -1], ["flush", "flush", "bufio", [], [$error], false, -1]];
		Writer.init([["err", "err", "bufio", $error, ""], ["buf", "buf", "bufio", ($sliceType($Uint8)), ""], ["n", "n", "bufio", $Int, ""], ["wr", "wr", "bufio", io.Writer, ""]]);
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
	};
	return $pkg;
})();
$packages["text/tabwriter"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], io = $packages["io"], utf8 = $packages["unicode/utf8"];
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["runtime/pprof"] = (function() {
	var $pkg = {}, bufio = $packages["bufio"], bytes = $packages["bytes"], fmt = $packages["fmt"], io = $packages["io"], runtime = $packages["runtime"], sort = $packages["sort"], strings = $packages["strings"], sync = $packages["sync"], tabwriter = $packages["text/tabwriter"];
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["testing"] = (function() {
	var $pkg = {}, flag = $packages["flag"], fmt = $packages["fmt"], js = $packages["github.com/gopherjs/gopherjs/js"], os = $packages["os"], time = $packages["time"], runtime = $packages["runtime"], sync = $packages["sync"], atomic = $packages["sync/atomic"], bytes = $packages["bytes"], io = $packages["io"], strings = $packages["strings"], pprof = $packages["runtime/pprof"], strconv = $packages["strconv"], common, T, matchBenchmarks, benchTime, benchmarkMemory, short$1, outputDir, chatty, coverProfile, match, memProfile, memProfileRate, cpuProfile, blockProfile, blockProfileRate, timeout, cpuListStr, parallel, init, Main2, decorate;
	common = $pkg.common = $newType(0, "Struct", "testing.common", "common", "testing", function(mu_, output_, failed_, skipped_, finished_, start_, duration_, self_, signal_) {
		this.$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.RWMutex.Ptr();
		this.output = output_ !== undefined ? output_ : ($sliceType($Uint8)).nil;
		this.failed = failed_ !== undefined ? failed_ : false;
		this.skipped = skipped_ !== undefined ? skipped_ : false;
		this.finished = finished_ !== undefined ? finished_ : false;
		this.start = start_ !== undefined ? start_ : new time.Time.Ptr();
		this.duration = duration_ !== undefined ? duration_ : new time.Duration(0, 0);
		this.self = self_ !== undefined ? self_ : null;
		this.signal = signal_ !== undefined ? signal_ : ($chanType($emptyInterface, false, false)).nil;
	});
	T = $pkg.T = $newType(0, "Struct", "testing.T", "T", "testing", function(common_, name_, startParallel_) {
		this.$val = this;
		this.common = common_ !== undefined ? common_ : new common.Ptr();
		this.name = name_ !== undefined ? name_ : "";
		this.startParallel = startParallel_ !== undefined ? startParallel_ : ($chanType($Bool, false, false)).nil;
	});
	init = function() {
		var x;
		x = false;
		if (x) {
			Main2("", "", ($sliceType($String)).nil, ($sliceType(($funcType([($ptrType(T))], [], false)))).nil);
		}
	};
	Main2 = $pkg.Main2 = function(pkgPath, dir, names, tests) {
		var _tuple, d, err, ok, start, i, t, err$1, duration, status, exitCode;
		flag.Parse();
		if (tests.length === 0) {
			fmt.Println(new ($sliceType($emptyInterface))([new $String("testing: warning: no tests to run")]));
		}
		_tuple = os.Open(dir); d = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			throw $panic(err);
		}
		d.Chdir();
		ok = true;
		start = new time.Time.Ptr(); $copy(start, time.Now(), time.Time);
		i = 0;
		while (i < tests.length) {
			t = [undefined];
			t[0] = new T.Ptr(new common.Ptr(new sync.RWMutex.Ptr(), ($sliceType($Uint8)).nil, false, false, false, time.Now(), new time.Duration(0, 0), null, ($chanType($emptyInterface, false, false)).nil), ((i < 0 || i >= names.length) ? $throwRuntimeError("index out of range") : names.array[names.offset + i]), ($chanType($Bool, false, false)).nil);
			t[0].common.self = t[0];
			if (chatty.$get()) {
				fmt.Printf("=== RUN %s\n", new ($sliceType($emptyInterface))([new $String(t[0].name)]));
			}
			err$1 = $catch($externalize((function(t) { return function() {
				((i < 0 || i >= tests.length) ? $throwRuntimeError("index out of range") : tests.array[tests.offset + i])(t[0]);
			}; })(t), ($funcType([], [], false))));
			$jsErr = null;
			if (!(err$1 === null)) {
				if (!(err$1.$exit === undefined)) {
					err$1 = null;
				} else if (!(err$1.$notSupported === undefined)) {
					t[0].common.log($internalize(err$1.message, $String));
					t[0].common.skip();
					err$1 = null;
				} else {
					t[0].common.Fail();
				}
			}
			t[0].common.duration = time.Now().Sub($clone(t[0].common.start, time.Time));
			t[0].report();
			if (!(err$1 === null)) {
				$throw(err$1);
			}
			ok = ok && !t[0].common.failed;
			i = i + 1 >> 0;
		}
		duration = time.Now().Sub($clone(start, time.Time));
		status = "ok  ";
		exitCode = 0;
		if (!ok) {
			status = "FAIL";
			exitCode = 1;
		}
		fmt.Printf("%s\t%s\t%.3fs\n", new ($sliceType($emptyInterface))([new $String(status), new $String(pkgPath), new $Float64(duration.Seconds())]));
		os.Exit(exitCode);
	};
	decorate = function(s) {
		var _tuple, file, line, ok, index, buf, lines, l, x, _ref, _i, i, line$1;
		_tuple = runtime.Caller(3); file = _tuple[1]; line = _tuple[2]; ok = _tuple[3];
		if (ok) {
			index = strings.LastIndex(file, "/");
			if (index >= 0) {
				file = file.substring((index + 1 >> 0));
			} else {
				index = strings.LastIndex(file, "\\");
				if (index >= 0) {
					file = file.substring((index + 1 >> 0));
				}
			}
		} else {
			file = "???";
			line = 1;
		}
		buf = new bytes.Buffer.Ptr();
		buf.WriteByte(9);
		fmt.Fprintf(buf, "%s:%d: ", new ($sliceType($emptyInterface))([new $String(file), new $Int(line)]));
		lines = strings.Split(s, "\n");
		l = lines.length;
		if (l > 1 && (x = l - 1 >> 0, ((x < 0 || x >= lines.length) ? $throwRuntimeError("index out of range") : lines.array[lines.offset + x])) === "") {
			lines = $subslice(lines, 0, (l - 1 >> 0));
		}
		_ref = lines;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			line$1 = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (i > 0) {
				buf.WriteString("\n\t\t");
			}
			buf.WriteString(line$1);
			_i++;
		}
		buf.WriteByte(10);
		return buf.String();
	};
	common.Ptr.prototype.Fail = function() {
		var c;
		var $deferred = [];
		try {
			c = this;
			c.mu.Lock();
			$deferred.push({ recv: c.mu, method: "Unlock", args: [] });
			c.failed = true;
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	common.prototype.Fail = function() { return this.$val.Fail(); };
	common.Ptr.prototype.Failed = function() {
		var c;
		var $deferred = [];
		try {
			c = this;
			c.mu.RLock();
			$deferred.push({ recv: c.mu, method: "RUnlock", args: [] });
			return c.failed;
		} catch($err) {
			$pushErr($err);
			return false;
		} finally {
			$callDeferred($deferred);
		}
	};
	common.prototype.Failed = function() { return this.$val.Failed(); };
	common.Ptr.prototype.FailNow = function() {
		var c;
		c = this;
		c.Fail();
		c.finished = true;
		runtime.Goexit();
	};
	common.prototype.FailNow = function() { return this.$val.FailNow(); };
	common.Ptr.prototype.log = function(s) {
		var c;
		var $deferred = [];
		try {
			c = this;
			c.mu.Lock();
			$deferred.push({ recv: c.mu, method: "Unlock", args: [] });
			c.output = $appendSlice(c.output, new ($sliceType($Uint8))($stringToBytes(decorate(s))));
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	common.prototype.log = function(s) { return this.$val.log(s); };
	common.Ptr.prototype.Log = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
	};
	common.prototype.Log = function(args) { return this.$val.Log(args); };
	common.Ptr.prototype.Logf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
	};
	common.prototype.Logf = function(format, args) { return this.$val.Logf(format, args); };
	common.Ptr.prototype.Error = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
		c.Fail();
	};
	common.prototype.Error = function(args) { return this.$val.Error(args); };
	common.Ptr.prototype.Errorf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
		c.Fail();
	};
	common.prototype.Errorf = function(format, args) { return this.$val.Errorf(format, args); };
	common.Ptr.prototype.Fatal = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
		c.FailNow();
	};
	common.prototype.Fatal = function(args) { return this.$val.Fatal(args); };
	common.Ptr.prototype.Fatalf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
		c.FailNow();
	};
	common.prototype.Fatalf = function(format, args) { return this.$val.Fatalf(format, args); };
	common.Ptr.prototype.Skip = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
		c.SkipNow();
	};
	common.prototype.Skip = function(args) { return this.$val.Skip(args); };
	common.Ptr.prototype.Skipf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
		c.SkipNow();
	};
	common.prototype.Skipf = function(format, args) { return this.$val.Skipf(format, args); };
	common.Ptr.prototype.SkipNow = function() {
		var c;
		c = this;
		c.skip();
		c.finished = true;
		runtime.Goexit();
	};
	common.prototype.SkipNow = function() { return this.$val.SkipNow(); };
	common.Ptr.prototype.skip = function() {
		var c;
		var $deferred = [];
		try {
			c = this;
			c.mu.Lock();
			$deferred.push({ recv: c.mu, method: "Unlock", args: [] });
			c.skipped = true;
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	common.prototype.skip = function() { return this.$val.skip(); };
	common.Ptr.prototype.Skipped = function() {
		var c;
		var $deferred = [];
		try {
			c = this;
			c.mu.RLock();
			$deferred.push({ recv: c.mu, method: "RUnlock", args: [] });
			return c.skipped;
		} catch($err) {
			$pushErr($err);
			return false;
		} finally {
			$callDeferred($deferred);
		}
	};
	common.prototype.Skipped = function() { return this.$val.Skipped(); };
	T.Ptr.prototype.Parallel = function() {
		var t;
		t = this;
		$notSupported("send");
		undefined;
		$copy(t.common.start, time.Now(), time.Time);
	};
	T.prototype.Parallel = function() { return this.$val.Parallel(); };
	T.Ptr.prototype.report = function() {
		var t, tstr, format;
		t = this;
		tstr = fmt.Sprintf("(%.2f seconds)", new ($sliceType($emptyInterface))([new $Float64(t.common.duration.Seconds())]));
		format = "--- %s: %s %s\n%s";
		if (t.common.Failed()) {
			fmt.Printf(format, new ($sliceType($emptyInterface))([new $String("FAIL"), new $String(t.name), new $String(tstr), t.common.output]));
		} else if (chatty.$get()) {
			if (t.common.Skipped()) {
				fmt.Printf(format, new ($sliceType($emptyInterface))([new $String("SKIP"), new $String(t.name), new $String(tstr), t.common.output]));
			} else {
				fmt.Printf(format, new ($sliceType($emptyInterface))([new $String("PASS"), new $String(t.name), new $String(tstr), t.common.output]));
			}
		}
	};
	T.prototype.report = function() { return this.$val.report(); };
	$pkg.$init = function() {
		($ptrType(common)).methods = [["Error", "Error", "", [($sliceType($emptyInterface))], [], true, -1], ["Errorf", "Errorf", "", [$String, ($sliceType($emptyInterface))], [], true, -1], ["Fail", "Fail", "", [], [], false, -1], ["FailNow", "FailNow", "", [], [], false, -1], ["Failed", "Failed", "", [], [$Bool], false, -1], ["Fatal", "Fatal", "", [($sliceType($emptyInterface))], [], true, -1], ["Fatalf", "Fatalf", "", [$String, ($sliceType($emptyInterface))], [], true, -1], ["Log", "Log", "", [($sliceType($emptyInterface))], [], true, -1], ["Logf", "Logf", "", [$String, ($sliceType($emptyInterface))], [], true, -1], ["Skip", "Skip", "", [($sliceType($emptyInterface))], [], true, -1], ["SkipNow", "SkipNow", "", [], [], false, -1], ["Skipf", "Skipf", "", [$String, ($sliceType($emptyInterface))], [], true, -1], ["Skipped", "Skipped", "", [], [$Bool], false, -1], ["log", "log", "testing", [$String], [], false, -1], ["private$", "private", "testing", [], [], false, -1], ["skip", "skip", "testing", [], [], false, -1]];
		common.init([["mu", "mu", "testing", sync.RWMutex, ""], ["output", "output", "testing", ($sliceType($Uint8)), ""], ["failed", "failed", "testing", $Bool, ""], ["skipped", "skipped", "testing", $Bool, ""], ["finished", "finished", "testing", $Bool, ""], ["start", "start", "testing", time.Time, ""], ["duration", "duration", "testing", time.Duration, ""], ["self", "self", "testing", $emptyInterface, ""], ["signal", "signal", "testing", ($chanType($emptyInterface, false, false)), ""]]);
		($ptrType(T)).methods = [["Error", "Error", "", [($sliceType($emptyInterface))], [], true, 0], ["Errorf", "Errorf", "", [$String, ($sliceType($emptyInterface))], [], true, 0], ["Fail", "Fail", "", [], [], false, 0], ["FailNow", "FailNow", "", [], [], false, 0], ["Failed", "Failed", "", [], [$Bool], false, 0], ["Fatal", "Fatal", "", [($sliceType($emptyInterface))], [], true, 0], ["Fatalf", "Fatalf", "", [$String, ($sliceType($emptyInterface))], [], true, 0], ["Log", "Log", "", [($sliceType($emptyInterface))], [], true, 0], ["Logf", "Logf", "", [$String, ($sliceType($emptyInterface))], [], true, 0], ["Parallel", "Parallel", "", [], [], false, -1], ["Skip", "Skip", "", [($sliceType($emptyInterface))], [], true, 0], ["SkipNow", "SkipNow", "", [], [], false, 0], ["Skipf", "Skipf", "", [$String, ($sliceType($emptyInterface))], [], true, 0], ["Skipped", "Skipped", "", [], [$Bool], false, 0], ["log", "log", "testing", [$String], [], false, 0], ["private$", "private", "testing", [], [], false, 0], ["report", "report", "testing", [], [], false, -1], ["skip", "skip", "testing", [], [], false, 0]];
		T.init([["common", "", "testing", common, ""], ["name", "name", "testing", $String, ""], ["startParallel", "startParallel", "testing", ($chanType($Bool, false, false)), ""]]);
		matchBenchmarks = flag.String("test.bench", "", "regular expression to select benchmarks to run");
		benchTime = flag.Duration("test.benchtime", new time.Duration(0, 1000000000), "approximate run time for each benchmark");
		benchmarkMemory = flag.Bool("test.benchmem", false, "print memory allocations for benchmarks");
		short$1 = flag.Bool("test.short", false, "run smaller test suite to save time");
		outputDir = flag.String("test.outputdir", "", "directory in which to write profiles");
		chatty = flag.Bool("test.v", false, "verbose: print additional output");
		coverProfile = flag.String("test.coverprofile", "", "write a coverage profile to the named file after execution");
		match = flag.String("test.run", "", "regular expression to select tests and examples to run");
		memProfile = flag.String("test.memprofile", "", "write a memory profile to the named file after execution");
		memProfileRate = flag.Int("test.memprofilerate", 0, "if >=0, sets runtime.MemProfileRate");
		cpuProfile = flag.String("test.cpuprofile", "", "write a cpu profile to the named file during execution");
		blockProfile = flag.String("test.blockprofile", "", "write a goroutine blocking profile to the named file after execution");
		blockProfileRate = flag.Int("test.blockprofilerate", 1, "if >= 0, calls runtime.SetBlockProfileRate()");
		timeout = flag.Duration("test.timeout", new time.Duration(0, 0), "if positive, sets an aggregate time limit for all tests");
		cpuListStr = flag.String("test.cpu", "", "comma-separated list of number of CPUs to use for each test");
		parallel = flag.Int("test.parallel", runtime.GOMAXPROCS(0), "maximum test parallelism");
		init();
	};
	return $pkg;
})();
$packages["regexp"] = (function() {
	var $pkg = {}, testing = $packages["testing"], io = $packages["io"], syntax = $packages["regexp/syntax"], bytes = $packages["bytes"], sort = $packages["sort"], unicode = $packages["unicode"], strconv = $packages["strconv"], strings = $packages["strings"], sync = $packages["sync"], utf8 = $packages["unicode/utf8"], queue, entry, thread, machine, onePassProg, onePassInst, queueOnePass, runeSlice, Regexp, input, inputString, inputBytes, inputReader, empty, noRune, noNext, anyRuneNotNL, anyRune, notOnePass, progMachine, onePassPrefix, onePassNext, iop, newQueue, mergeRuneSets, cleanupOnePass, onePassCopy, makeOnePass, compileOnePass, Compile, compile, MustCompile, quote, extract;
	queue = $pkg.queue = $newType(0, "Struct", "regexp.queue", "queue", "regexp", function(sparse_, dense_) {
		this.$val = this;
		this.sparse = sparse_ !== undefined ? sparse_ : ($sliceType($Uint32)).nil;
		this.dense = dense_ !== undefined ? dense_ : ($sliceType(entry)).nil;
	});
	entry = $pkg.entry = $newType(0, "Struct", "regexp.entry", "entry", "regexp", function(pc_, t_) {
		this.$val = this;
		this.pc = pc_ !== undefined ? pc_ : 0;
		this.t = t_ !== undefined ? t_ : ($ptrType(thread)).nil;
	});
	thread = $pkg.thread = $newType(0, "Struct", "regexp.thread", "thread", "regexp", function(inst_, cap_) {
		this.$val = this;
		this.inst = inst_ !== undefined ? inst_ : ($ptrType(syntax.Inst)).nil;
		this.cap = cap_ !== undefined ? cap_ : ($sliceType($Int)).nil;
	});
	machine = $pkg.machine = $newType(0, "Struct", "regexp.machine", "machine", "regexp", function(re_, p_, op_, q0_, q1_, pool_, matched_, matchcap_, inputBytes_, inputString_, inputReader_) {
		this.$val = this;
		this.re = re_ !== undefined ? re_ : ($ptrType(Regexp)).nil;
		this.p = p_ !== undefined ? p_ : ($ptrType(syntax.Prog)).nil;
		this.op = op_ !== undefined ? op_ : ($ptrType(onePassProg)).nil;
		this.q0 = q0_ !== undefined ? q0_ : new queue.Ptr();
		this.q1 = q1_ !== undefined ? q1_ : new queue.Ptr();
		this.pool = pool_ !== undefined ? pool_ : ($sliceType(($ptrType(thread)))).nil;
		this.matched = matched_ !== undefined ? matched_ : false;
		this.matchcap = matchcap_ !== undefined ? matchcap_ : ($sliceType($Int)).nil;
		this.inputBytes = inputBytes_ !== undefined ? inputBytes_ : new inputBytes.Ptr();
		this.inputString = inputString_ !== undefined ? inputString_ : new inputString.Ptr();
		this.inputReader = inputReader_ !== undefined ? inputReader_ : new inputReader.Ptr();
	});
	onePassProg = $pkg.onePassProg = $newType(0, "Struct", "regexp.onePassProg", "onePassProg", "regexp", function(Inst_, Start_, NumCap_) {
		this.$val = this;
		this.Inst = Inst_ !== undefined ? Inst_ : ($sliceType(onePassInst)).nil;
		this.Start = Start_ !== undefined ? Start_ : 0;
		this.NumCap = NumCap_ !== undefined ? NumCap_ : 0;
	});
	onePassInst = $pkg.onePassInst = $newType(0, "Struct", "regexp.onePassInst", "onePassInst", "regexp", function(Inst_, Next_) {
		this.$val = this;
		this.Inst = Inst_ !== undefined ? Inst_ : new syntax.Inst.Ptr();
		this.Next = Next_ !== undefined ? Next_ : ($sliceType($Uint32)).nil;
	});
	queueOnePass = $pkg.queueOnePass = $newType(0, "Struct", "regexp.queueOnePass", "queueOnePass", "regexp", function(sparse_, dense_, size_, nextIndex_) {
		this.$val = this;
		this.sparse = sparse_ !== undefined ? sparse_ : ($sliceType($Uint32)).nil;
		this.dense = dense_ !== undefined ? dense_ : ($sliceType($Uint32)).nil;
		this.size = size_ !== undefined ? size_ : 0;
		this.nextIndex = nextIndex_ !== undefined ? nextIndex_ : 0;
	});
	runeSlice = $pkg.runeSlice = $newType(12, "Slice", "regexp.runeSlice", "runeSlice", "regexp", null);
	Regexp = $pkg.Regexp = $newType(0, "Struct", "regexp.Regexp", "Regexp", "regexp", function(expr_, prog_, onepass_, prefix_, prefixBytes_, prefixComplete_, prefixRune_, prefixEnd_, cond_, numSubexp_, subexpNames_, longest_, mu_, machine_) {
		this.$val = this;
		this.expr = expr_ !== undefined ? expr_ : "";
		this.prog = prog_ !== undefined ? prog_ : ($ptrType(syntax.Prog)).nil;
		this.onepass = onepass_ !== undefined ? onepass_ : ($ptrType(onePassProg)).nil;
		this.prefix = prefix_ !== undefined ? prefix_ : "";
		this.prefixBytes = prefixBytes_ !== undefined ? prefixBytes_ : ($sliceType($Uint8)).nil;
		this.prefixComplete = prefixComplete_ !== undefined ? prefixComplete_ : false;
		this.prefixRune = prefixRune_ !== undefined ? prefixRune_ : 0;
		this.prefixEnd = prefixEnd_ !== undefined ? prefixEnd_ : 0;
		this.cond = cond_ !== undefined ? cond_ : 0;
		this.numSubexp = numSubexp_ !== undefined ? numSubexp_ : 0;
		this.subexpNames = subexpNames_ !== undefined ? subexpNames_ : ($sliceType($String)).nil;
		this.longest = longest_ !== undefined ? longest_ : false;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.machine = machine_ !== undefined ? machine_ : ($sliceType(($ptrType(machine)))).nil;
	});
	input = $pkg.input = $newType(8, "Interface", "regexp.input", "input", "regexp", null);
	inputString = $pkg.inputString = $newType(0, "Struct", "regexp.inputString", "inputString", "regexp", function(str_) {
		this.$val = this;
		this.str = str_ !== undefined ? str_ : "";
	});
	inputBytes = $pkg.inputBytes = $newType(0, "Struct", "regexp.inputBytes", "inputBytes", "regexp", function(str_) {
		this.$val = this;
		this.str = str_ !== undefined ? str_ : ($sliceType($Uint8)).nil;
	});
	inputReader = $pkg.inputReader = $newType(0, "Struct", "regexp.inputReader", "inputReader", "regexp", function(r_, atEOT_, pos_) {
		this.$val = this;
		this.r = r_ !== undefined ? r_ : null;
		this.atEOT = atEOT_ !== undefined ? atEOT_ : false;
		this.pos = pos_ !== undefined ? pos_ : 0;
	});
	machine.Ptr.prototype.newInputBytes = function(b) {
		var m;
		m = this;
		m.inputBytes.str = b;
		return m.inputBytes;
	};
	machine.prototype.newInputBytes = function(b) { return this.$val.newInputBytes(b); };
	machine.Ptr.prototype.newInputString = function(s) {
		var m;
		m = this;
		m.inputString.str = s;
		return m.inputString;
	};
	machine.prototype.newInputString = function(s) { return this.$val.newInputString(s); };
	machine.Ptr.prototype.newInputReader = function(r) {
		var m;
		m = this;
		m.inputReader.r = r;
		m.inputReader.atEOT = false;
		m.inputReader.pos = 0;
		return m.inputReader;
	};
	machine.prototype.newInputReader = function(r) { return this.$val.newInputReader(r); };
	progMachine = function(p, op) {
		var m, n, ncap;
		m = new machine.Ptr(($ptrType(Regexp)).nil, p, op, new queue.Ptr(), new queue.Ptr(), ($sliceType(($ptrType(thread)))).nil, false, ($sliceType($Int)).nil, new inputBytes.Ptr(), new inputString.Ptr(), new inputReader.Ptr());
		n = m.p.Inst.length;
		$copy(m.q0, new queue.Ptr(($sliceType($Uint32)).make(n, 0, function() { return 0; }), ($sliceType(entry)).make(0, n, function() { return new entry.Ptr(); })), queue);
		$copy(m.q1, new queue.Ptr(($sliceType($Uint32)).make(n, 0, function() { return 0; }), ($sliceType(entry)).make(0, n, function() { return new entry.Ptr(); })), queue);
		ncap = p.NumCap;
		if (ncap < 2) {
			ncap = 2;
		}
		m.matchcap = ($sliceType($Int)).make(ncap, 0, function() { return 0; });
		return m;
	};
	machine.Ptr.prototype.init = function(ncap) {
		var m, _ref, _i, t;
		m = this;
		_ref = m.pool;
		_i = 0;
		while (_i < _ref.length) {
			t = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			t.cap = $subslice(t.cap, 0, ncap);
			_i++;
		}
		m.matchcap = $subslice(m.matchcap, 0, ncap);
	};
	machine.prototype.init = function(ncap) { return this.$val.init(ncap); };
	machine.Ptr.prototype.alloc = function(i) {
		var m, t, n, x, x$1;
		m = this;
		t = ($ptrType(thread)).nil;
		n = m.pool.length;
		if (n > 0) {
			t = (x = m.pool, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
			m.pool = $subslice(m.pool, 0, (n - 1 >> 0));
		} else {
			t = new thread.Ptr();
			t.cap = ($sliceType($Int)).make(m.matchcap.length, m.matchcap.capacity, function() { return 0; });
		}
		t.inst = i;
		return t;
	};
	machine.prototype.alloc = function(i) { return this.$val.alloc(i); };
	machine.Ptr.prototype.match = function(i, pos) {
		var m, startCond, _ref, _i, i$1, x, _tmp, _tmp$1, runq, nextq, _tmp$2, _tmp$3, r, r1, _tmp$4, _tmp$5, width, width1, _tuple, _tuple$1, flag, advance, _tuple$2, _tuple$3, x$1, _tmp$6, _tmp$7, _tuple$4, _tmp$8, _tmp$9;
		m = this;
		startCond = m.re.cond;
		if (startCond === 255) {
			return false;
		}
		m.matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (_i < _ref.length) {
			i$1 = _i;
			(x = m.matchcap, (i$1 < 0 || i$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i$1] = -1);
			_i++;
		}
		_tmp = m.q0; _tmp$1 = m.q1; runq = _tmp; nextq = _tmp$1;
		_tmp$2 = -1; _tmp$3 = -1; r = _tmp$2; r1 = _tmp$3;
		_tmp$4 = 0; _tmp$5 = 0; width = _tmp$4; width1 = _tmp$5;
		_tuple = i.step(pos); r = _tuple[0]; width = _tuple[1];
		if (!((r === -1))) {
			_tuple$1 = i.step(pos + width >> 0); r1 = _tuple$1[0]; width1 = _tuple$1[1];
		}
		flag = 0;
		if (pos === 0) {
			flag = syntax.EmptyOpContext(-1, r);
		} else {
			flag = i.context(pos);
		}
		while (true) {
			if (runq.dense.length === 0) {
				if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
					break;
				}
				if (m.matched) {
					break;
				}
				if (m.re.prefix.length > 0 && !((r1 === m.re.prefixRune)) && i.canCheckPrefix()) {
					advance = i.index(m.re, pos);
					if (advance < 0) {
						break;
					}
					pos = pos + (advance) >> 0;
					_tuple$2 = i.step(pos); r = _tuple$2[0]; width = _tuple$2[1];
					_tuple$3 = i.step(pos + width >> 0); r1 = _tuple$3[0]; width1 = _tuple$3[1];
				}
			}
			if (!m.matched) {
				if (m.matchcap.length > 0) {
					(x$1 = m.matchcap, (0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0] = pos);
				}
				m.add(runq, (m.p.Start >>> 0), pos, m.matchcap, flag, ($ptrType(thread)).nil);
			}
			flag = syntax.EmptyOpContext(r, r1);
			m.step(runq, nextq, pos, pos + width >> 0, r, flag);
			if (width === 0) {
				break;
			}
			if ((m.matchcap.length === 0) && m.matched) {
				break;
			}
			pos = pos + (width) >> 0;
			_tmp$6 = r1; _tmp$7 = width1; r = _tmp$6; width = _tmp$7;
			if (!((r === -1))) {
				_tuple$4 = i.step(pos + width >> 0); r1 = _tuple$4[0]; width1 = _tuple$4[1];
			}
			_tmp$8 = nextq; _tmp$9 = runq; runq = _tmp$8; nextq = _tmp$9;
		}
		m.clear(nextq);
		return m.matched;
	};
	machine.prototype.match = function(i, pos) { return this.$val.match(i, pos); };
	machine.Ptr.prototype.clear = function(q) {
		var m, _ref, _i, d;
		m = this;
		_ref = q.dense;
		_i = 0;
		while (_i < _ref.length) {
			d = new entry.Ptr(); $copy(d, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), entry);
			if (!(d.t === ($ptrType(thread)).nil)) {
				m.pool = $append(m.pool, d.t);
			}
			_i++;
		}
		q.dense = $subslice(q.dense, 0, 0);
	};
	machine.prototype.clear = function(q) { return this.$val.clear(q); };
	machine.Ptr.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) {
		var m, longest, j, x, d, t, x$1, x$2, i, add, _ref, x$3, x$4, _ref$1, _i, d$1, x$5;
		m = this;
		longest = m.re.longest;
		j = 0;
		while (j < runq.dense.length) {
			d = (x = runq.dense, ((j < 0 || j >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + j]));
			t = d.t;
			if (t === ($ptrType(thread)).nil) {
				j = j + 1 >> 0;
				continue;
			}
			if (longest && m.matched && t.cap.length > 0 && (x$1 = m.matchcap, ((0 < 0 || 0 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + 0])) < (x$2 = t.cap, ((0 < 0 || 0 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + 0]))) {
				m.pool = $append(m.pool, t);
				j = j + 1 >> 0;
				continue;
			}
			i = t.inst;
			add = false;
			_ref = i.Op;
			if (_ref === 4) {
				if (t.cap.length > 0 && (!longest || !m.matched || (x$3 = m.matchcap, ((1 < 0 || 1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 1])) < pos)) {
					(x$4 = t.cap, (1 < 0 || 1 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 1] = pos);
					$copySlice(m.matchcap, t.cap);
				}
				if (!longest) {
					_ref$1 = $subslice(runq.dense, (j + 1 >> 0));
					_i = 0;
					while (_i < _ref$1.length) {
						d$1 = new entry.Ptr(); $copy(d$1, ((_i < 0 || _i >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i]), entry);
						if (!(d$1.t === ($ptrType(thread)).nil)) {
							m.pool = $append(m.pool, d$1.t);
						}
						_i++;
					}
					runq.dense = $subslice(runq.dense, 0, 0);
				}
				m.matched = true;
			} else if (_ref === 7) {
				add = i.MatchRune(c);
			} else if (_ref === 8) {
				add = c === (x$5 = i.Rune, ((0 < 0 || 0 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + 0]));
			} else if (_ref === 9) {
				add = true;
			} else if (_ref === 10) {
				add = !((c === 10));
			} else {
				throw $panic(new $String("bad inst"));
			}
			if (add) {
				t = m.add(nextq, i.Out, nextPos, t.cap, nextCond, t);
			}
			if (!(t === ($ptrType(thread)).nil)) {
				m.pool = $append(m.pool, t);
			}
			j = j + 1 >> 0;
		}
		runq.dense = $subslice(runq.dense, 0, 0);
	};
	machine.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) { return this.$val.step(runq, nextq, pos, nextPos, c, nextCond); };
	machine.Ptr.prototype.add = function(q, pc, pos, cap, cond, t) {
		var m, x, j, x$1, j$1, x$2, d, x$3, x$4, i, _ref, x$5, opos, x$6, x$7;
		m = this;
		if (pc === 0) {
			return t;
		}
		j = (x = q.sparse, ((pc < 0 || pc >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pc]));
		if (j < (q.dense.length >>> 0) && ((x$1 = q.dense, ((j < 0 || j >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + j])).pc === pc)) {
			return t;
		}
		j$1 = q.dense.length;
		q.dense = $subslice(q.dense, 0, (j$1 + 1 >> 0));
		d = (x$2 = q.dense, ((j$1 < 0 || j$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + j$1]));
		d.t = ($ptrType(thread)).nil;
		d.pc = pc;
		(x$3 = q.sparse, (pc < 0 || pc >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + pc] = (j$1 >>> 0));
		i = (x$4 = m.p.Inst, ((pc < 0 || pc >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + pc]));
		_ref = i.Op;
		if (_ref === 5) {
		} else if (_ref === 0 || _ref === 1) {
			t = m.add(q, i.Out, pos, cap, cond, t);
			t = m.add(q, i.Arg, pos, cap, cond, t);
		} else if (_ref === 3) {
			if (((i.Arg << 24 >>> 24) & ~cond) === 0) {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if (_ref === 6) {
			t = m.add(q, i.Out, pos, cap, cond, t);
		} else if (_ref === 2) {
			if ((i.Arg >> 0) < cap.length) {
				opos = (x$5 = i.Arg, ((x$5 < 0 || x$5 >= cap.length) ? $throwRuntimeError("index out of range") : cap.array[cap.offset + x$5]));
				(x$6 = i.Arg, (x$6 < 0 || x$6 >= cap.length) ? $throwRuntimeError("index out of range") : cap.array[cap.offset + x$6] = pos);
				m.add(q, i.Out, pos, cap, cond, ($ptrType(thread)).nil);
				(x$7 = i.Arg, (x$7 < 0 || x$7 >= cap.length) ? $throwRuntimeError("index out of range") : cap.array[cap.offset + x$7] = opos);
			} else {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if (_ref === 4 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10) {
			if (t === ($ptrType(thread)).nil) {
				t = m.alloc(i);
			} else {
				t.inst = i;
			}
			if (cap.length > 0 && !($sliceIsEqual(t.cap, 0, cap, 0))) {
				$copySlice(t.cap, cap);
			}
			d.t = t;
			t = ($ptrType(thread)).nil;
		} else {
			throw $panic(new $String("unhandled"));
		}
		return t;
	};
	machine.prototype.add = function(q, pc, pos, cap, cond, t) { return this.$val.add(q, pc, pos, cap, cond, t); };
	machine.Ptr.prototype.onepass = function(i, pos) {
		var m, startCond, _ref, _i, i$1, x, _tmp, _tmp$1, r, r1, _tmp$2, _tmp$3, width, width1, _tuple, _tuple$1, flag, pc, x$1, inst, _tuple$2, _tuple$3, x$2, _ref$1, x$3, x$4, x$5, x$6, x$7, _tmp$4, _tmp$5, _tuple$4;
		m = this;
		startCond = m.re.cond;
		if (startCond === 255) {
			return false;
		}
		m.matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (_i < _ref.length) {
			i$1 = _i;
			(x = m.matchcap, (i$1 < 0 || i$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i$1] = -1);
			_i++;
		}
		_tmp = -1; _tmp$1 = -1; r = _tmp; r1 = _tmp$1;
		_tmp$2 = 0; _tmp$3 = 0; width = _tmp$2; width1 = _tmp$3;
		_tuple = i.step(pos); r = _tuple[0]; width = _tuple[1];
		if (!((r === -1))) {
			_tuple$1 = i.step(pos + width >> 0); r1 = _tuple$1[0]; width1 = _tuple$1[1];
		}
		flag = 0;
		if (pos === 0) {
			flag = syntax.EmptyOpContext(-1, r);
		} else {
			flag = i.context(pos);
		}
		pc = m.op.Start;
		inst = new onePassInst.Ptr(); $copy(inst, (x$1 = m.op.Inst, ((pc < 0 || pc >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + pc])), onePassInst);
		if ((pos === 0) && (((inst.Inst.Arg << 24 >>> 24) & ~flag) === 0) && m.re.prefix.length > 0 && i.canCheckPrefix()) {
			if (i.hasPrefix(m.re)) {
				pos = pos + (m.re.prefix.length) >> 0;
				_tuple$2 = i.step(pos); r = _tuple$2[0]; width = _tuple$2[1];
				_tuple$3 = i.step(pos + width >> 0); r1 = _tuple$3[0]; width1 = _tuple$3[1];
				flag = i.context(pos);
				pc = (m.re.prefixEnd >> 0);
			} else {
				return m.matched;
			}
		}
		while (true) {
			$copy(inst, (x$2 = m.op.Inst, ((pc < 0 || pc >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + pc])), onePassInst);
			pc = (inst.Inst.Out >> 0);
			_ref$1 = inst.Inst.Op;
			if (_ref$1 === 4) {
				m.matched = true;
				if (m.matchcap.length > 0) {
					(x$3 = m.matchcap, (0 < 0 || 0 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + 0] = 0);
					(x$4 = m.matchcap, (1 < 0 || 1 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 1] = pos);
				}
				return m.matched;
			} else if (_ref$1 === 7) {
				if (!inst.Inst.MatchRune(r)) {
					return m.matched;
				}
			} else if (_ref$1 === 8) {
				if (!((r === (x$5 = inst.Inst.Rune, ((0 < 0 || 0 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + 0]))))) {
					return m.matched;
				}
			} else if (_ref$1 === 9) {
			} else if (_ref$1 === 10) {
				if (r === 10) {
					return m.matched;
				}
			} else if (_ref$1 === 0 || _ref$1 === 1) {
				pc = (onePassNext(inst, r) >> 0);
				continue;
			} else if (_ref$1 === 5) {
				return m.matched;
			} else if (_ref$1 === 6) {
				continue;
			} else if (_ref$1 === 3) {
				if (!((((inst.Inst.Arg << 24 >>> 24) & ~flag) === 0))) {
					return m.matched;
				}
				continue;
			} else if (_ref$1 === 2) {
				if ((inst.Inst.Arg >> 0) < m.matchcap.length) {
					(x$6 = m.matchcap, x$7 = inst.Inst.Arg, (x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + x$7] = pos);
				}
				continue;
			} else {
				throw $panic(new $String("bad inst"));
			}
			if (width === 0) {
				break;
			}
			flag = syntax.EmptyOpContext(r, r1);
			pos = pos + (width) >> 0;
			_tmp$4 = r1; _tmp$5 = width1; r = _tmp$4; width = _tmp$5;
			if (!((r === -1))) {
				_tuple$4 = i.step(pos + width >> 0); r1 = _tuple$4[0]; width1 = _tuple$4[1];
			}
		}
		return m.matched;
	};
	machine.prototype.onepass = function(i, pos) { return this.$val.onepass(i, pos); };
	Regexp.Ptr.prototype.doExecute = function(r, b, s, pos, ncap) {
		var re, m, i, cap;
		re = this;
		m = re.get();
		i = null;
		if (!($interfaceIsEqual(r, null))) {
			i = m.newInputReader(r);
		} else if (!(b === ($sliceType($Uint8)).nil)) {
			i = m.newInputBytes(b);
		} else {
			i = m.newInputString(s);
		}
		if (!(m.op === notOnePass)) {
			if (!m.onepass(i, pos)) {
				re.put(m);
				return ($sliceType($Int)).nil;
			}
		} else {
			m.init(ncap);
			if (!m.match(i, pos)) {
				re.put(m);
				return ($sliceType($Int)).nil;
			}
		}
		if (ncap === 0) {
			re.put(m);
			return empty;
		}
		cap = ($sliceType($Int)).make(m.matchcap.length, 0, function() { return 0; });
		$copySlice(cap, m.matchcap);
		re.put(m);
		return cap;
	};
	Regexp.prototype.doExecute = function(r, b, s, pos, ncap) { return this.$val.doExecute(r, b, s, pos, ncap); };
	onePassPrefix = function(p) {
		var prefix, complete, pc, x, x$1, i, _tmp, _tmp$1, _tmp$2, x$2, x$3, _tmp$3, _tmp$4, _tmp$5, buf, x$4, _tmp$6, _tmp$7, x$5, x$6, _tmp$8, _tmp$9, _tmp$10;
		prefix = "";
		complete = false;
		pc = 0;
		i = (x = p.Inst, x$1 = p.Start, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		if (!((i.Op === 3)) || (((((i.Arg << 24 >>> 24)) & 4) >>> 0) === 0)) {
			_tmp = ""; _tmp$1 = i.Op === 4; _tmp$2 = (p.Start >>> 0); prefix = _tmp; complete = _tmp$1; pc = _tmp$2;
			return [prefix, complete, pc];
		}
		pc = i.Out;
		i = (x$2 = p.Inst, ((pc < 0 || pc >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + pc]));
		while (i.Op === 6) {
			pc = i.Out;
			i = (x$3 = p.Inst, ((pc < 0 || pc >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + pc]));
		}
		if (!((iop(i) === 7)) || !((i.Rune.length === 1))) {
			_tmp$3 = ""; _tmp$4 = i.Op === 4; _tmp$5 = (p.Start >>> 0); prefix = _tmp$3; complete = _tmp$4; pc = _tmp$5;
			return [prefix, complete, pc];
		}
		buf = new bytes.Buffer.Ptr(); $copy(buf, new bytes.Buffer.Ptr(), bytes.Buffer);
		while ((iop(i) === 7) && (i.Rune.length === 1) && ((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0)) {
			buf.WriteRune((x$4 = i.Rune, ((0 < 0 || 0 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + 0])));
			_tmp$6 = i.Out; _tmp$7 = (x$5 = p.Inst, x$6 = i.Out, ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + x$6])); pc = _tmp$6; i = _tmp$7;
		}
		_tmp$8 = buf.String(); _tmp$9 = (i.Op === 3) && !((((((i.Arg << 24 >>> 24)) & 4) >>> 0) === 0)); _tmp$10 = pc; prefix = _tmp$8; complete = _tmp$9; pc = _tmp$10;
		return [prefix, complete, pc];
	};
	onePassNext = function(i, r) {
		var next, x;
		next = i.Inst.MatchRunePos(r);
		if (next >= 0) {
			return (x = i.Next, ((next < 0 || next >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + next]));
		}
		if (i.Inst.Op === 1) {
			return i.Inst.Out;
		}
		return 0;
	};
	iop = function(i) {
		var op, _ref;
		op = i.Op;
		_ref = op;
		if (_ref === 8 || _ref === 9 || _ref === 10) {
			op = 7;
		}
		return op;
	};
	queueOnePass.Ptr.prototype.empty = function() {
		var q;
		q = this;
		return q.nextIndex >= q.size;
	};
	queueOnePass.prototype.empty = function() { return this.$val.empty(); };
	queueOnePass.Ptr.prototype.next = function() {
		var n, q, x, x$1;
		n = 0;
		q = this;
		n = (x = q.dense, x$1 = q.nextIndex, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
		q.nextIndex = q.nextIndex + 1 >>> 0;
		return n;
	};
	queueOnePass.prototype.next = function() { return this.$val.next(); };
	queueOnePass.Ptr.prototype.clear = function() {
		var q;
		q = this;
		q.size = 0;
		q.nextIndex = 0;
	};
	queueOnePass.prototype.clear = function() { return this.$val.clear(); };
	queueOnePass.Ptr.prototype.contains = function(u) {
		var q, x, x$1, x$2, x$3;
		q = this;
		if (u >= (q.sparse.length >>> 0)) {
			return false;
		}
		return (x = q.sparse, ((u < 0 || u >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + u])) < q.size && ((x$1 = q.dense, x$2 = (x$3 = q.sparse, ((u < 0 || u >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + u])), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + x$2])) === u);
	};
	queueOnePass.prototype.contains = function(u) { return this.$val.contains(u); };
	queueOnePass.Ptr.prototype.insert = function(u) {
		var q;
		q = this;
		if (!q.contains(u)) {
			q.insertNew(u);
		}
	};
	queueOnePass.prototype.insert = function(u) { return this.$val.insert(u); };
	queueOnePass.Ptr.prototype.insertNew = function(u) {
		var q, x, x$1, x$2;
		q = this;
		if (u >= (q.sparse.length >>> 0)) {
			return;
		}
		(x = q.sparse, (u < 0 || u >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + u] = q.size);
		(x$1 = q.dense, x$2 = q.size, (x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + x$2] = u);
		q.size = q.size + 1 >>> 0;
	};
	queueOnePass.prototype.insertNew = function(u) { return this.$val.insertNew(u); };
	newQueue = function(size) {
		var q;
		q = ($ptrType(queueOnePass)).nil;
		q = new queueOnePass.Ptr(($sliceType($Uint32)).make(size, 0, function() { return 0; }), ($sliceType($Uint32)).make(size, 0, function() { return 0; }), 0, 0);
		return q;
	};
	mergeRuneSets = function(leftRunes, rightRunes, leftPC, rightPC) {
		var leftLen, rightLen, _tmp, _tmp$1, lx, rx, merged, next, ok, ix, extend, x, x$1;
		var $deferred = [];
		try {
			leftLen = leftRunes.$get().length;
			rightLen = rightRunes.$get().length;
			if (!(((leftLen & 1) === 0)) || !(((rightLen & 1) === 0))) {
				throw $panic(new $String("mergeRuneSets odd length []rune"));
			}
			_tmp = 0; _tmp$1 = 0; lx = _tmp; rx = _tmp$1;
			merged = ($sliceType($Int32)).make(0, 0, function() { return 0; });
			next = ($sliceType($Uint32)).make(0, 0, function() { return 0; });
			ok = true;
			$deferred.push({ fun: (function() {
				if (!ok) {
					merged = ($sliceType($Int32)).nil;
					next = ($sliceType($Uint32)).nil;
				}
			}), args: [] });
			ix = -1;
			extend = (function(newLow, newArray, pc) {
				var x, x$1, x$2, x$3, x$4, x$5, _lhs;
				if (ix > 0 && (x = newArray.$get(), x$1 = newLow.$get(), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])) <= ((ix < 0 || ix >= merged.length) ? $throwRuntimeError("index out of range") : merged.array[merged.offset + ix])) {
					return false;
				}
				merged = $append(merged, (x$2 = newArray.$get(), x$3 = newLow.$get(), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + x$3])), (x$4 = newArray.$get(), x$5 = newLow.$get() + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + x$5])));
				_lhs = newLow; _lhs.$set(_lhs.$get() + 2 >> 0);
				ix = ix + 2 >> 0;
				next = $append(next, pc);
				return true;
			});
			while (lx < leftLen || rx < rightLen) {
				if (rx >= rightLen) {
					ok = extend(new ($ptrType($Int))(function() { return lx; }, function($v) { lx = $v; }), leftRunes, leftPC);
				} else if (lx >= leftLen) {
					ok = extend(new ($ptrType($Int))(function() { return rx; }, function($v) { rx = $v; }), rightRunes, rightPC);
				} else if ((x = rightRunes.$get(), ((rx < 0 || rx >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + rx])) < (x$1 = leftRunes.$get(), ((lx < 0 || lx >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + lx]))) {
					ok = extend(new ($ptrType($Int))(function() { return rx; }, function($v) { rx = $v; }), rightRunes, rightPC);
				} else {
					ok = extend(new ($ptrType($Int))(function() { return lx; }, function($v) { lx = $v; }), leftRunes, leftPC);
				}
				if (!ok) {
					return [noRune, noNext];
				}
			}
			return [merged, next];
		} catch($err) {
			$pushErr($err);
			return [($sliceType($Int32)).nil, ($sliceType($Uint32)).nil];
		} finally {
			$callDeferred($deferred);
		}
	};
	cleanupOnePass = function(prog, original) {
		var _ref, _i, ix, instOriginal, _ref$1, x, x$1, x$2;
		_ref = original.Inst;
		_i = 0;
		while (_i < _ref.length) {
			ix = _i;
			instOriginal = new syntax.Inst.Ptr(); $copy(instOriginal, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), syntax.Inst);
			_ref$1 = instOriginal.Op;
			if (_ref$1 === 0 || _ref$1 === 1 || _ref$1 === 7) {
			} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 6 || _ref$1 === 4 || _ref$1 === 5) {
				(x = prog.Inst, ((ix < 0 || ix >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + ix])).Next = ($sliceType($Uint32)).nil;
			} else if (_ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10) {
				(x$1 = prog.Inst, ((ix < 0 || ix >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + ix])).Next = ($sliceType($Uint32)).nil;
				$copy((x$2 = prog.Inst, ((ix < 0 || ix >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + ix])), new onePassInst.Ptr(instOriginal, ($sliceType($Uint32)).nil), onePassInst);
			}
			_i++;
		}
	};
	onePassCopy = function(prog) {
		var p, _ref, _i, inst, _ref$1, _i$1, p_A_Alt, pc, _ref$2, x, x$1, p_A_Other, x$2, x$3, x$4, instAlt, _tmp, _tmp$1, x$5, x$6, x$7, x$8, instOther, x$9, x$10, p_B_Alt, x$11, x$12, p_B_Other, patch, _tmp$2, _tmp$3;
		p = new onePassProg.Ptr(($sliceType(onePassInst)).nil, prog.Start, prog.NumCap);
		_ref = prog.Inst;
		_i = 0;
		while (_i < _ref.length) {
			inst = new syntax.Inst.Ptr(); $copy(inst, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), syntax.Inst);
			p.Inst = $append(p.Inst, new onePassInst.Ptr(inst, ($sliceType($Uint32)).nil));
			_i++;
		}
		_ref$1 = p.Inst;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			p_A_Alt = [undefined];
			pc = _i$1;
			_ref$2 = (x = p.Inst, ((pc < 0 || pc >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pc])).Inst.Op;
			if (_ref$2 === 0 || _ref$2 === 1) {
				p_A_Other = new ($ptrType($Uint32))(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, (x$1 = p.Inst, ((pc < 0 || pc >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + pc])));
				p_A_Alt[0] = new ($ptrType($Uint32))(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, (x$2 = p.Inst, ((pc < 0 || pc >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + pc])));
				instAlt = new onePassInst.Ptr(); $copy(instAlt, (x$3 = p.Inst, x$4 = p_A_Alt[0].$get(), ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + x$4])), onePassInst);
				if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
					_tmp = p_A_Other; _tmp$1 = p_A_Alt[0]; p_A_Alt[0] = _tmp; p_A_Other = _tmp$1;
					$copy(instAlt, (x$5 = p.Inst, x$6 = p_A_Alt[0].$get(), ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + x$6])), onePassInst);
					if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
						_i$1++;
						continue;
					}
				}
				instOther = new onePassInst.Ptr(); $copy(instOther, (x$7 = p.Inst, x$8 = p_A_Other.$get(), ((x$8 < 0 || x$8 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + x$8])), onePassInst);
				if ((instOther.Inst.Op === 0) || (instOther.Inst.Op === 1)) {
					_i$1++;
					continue;
				}
				p_B_Alt = new ($ptrType($Uint32))(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, (x$9 = p.Inst, x$10 = p_A_Alt[0].$get(), ((x$10 < 0 || x$10 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9.array[x$9.offset + x$10])));
				p_B_Other = new ($ptrType($Uint32))(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, (x$11 = p.Inst, x$12 = p_A_Alt[0].$get(), ((x$12 < 0 || x$12 >= x$11.length) ? $throwRuntimeError("index out of range") : x$11.array[x$11.offset + x$12])));
				patch = false;
				if (instAlt.Inst.Out === (pc >>> 0)) {
					patch = true;
				} else if (instAlt.Inst.Arg === (pc >>> 0)) {
					patch = true;
					_tmp$2 = p_B_Other; _tmp$3 = p_B_Alt; p_B_Alt = _tmp$2; p_B_Other = _tmp$3;
				}
				if (patch) {
					p_B_Alt.$set(p_A_Other.$get());
				}
				if (p_A_Other.$get() === p_B_Alt.$get()) {
					p_A_Alt[0].$set(p_B_Other.$get());
				}
			} else {
				_i$1++;
				continue;
			}
			_i$1++;
		}
		return p;
	};
	runeSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.length;
	};
	$ptrType(runeSlice).prototype.Len = function() { return this.$get().Len(); };
	runeSlice.prototype.Less = function(i, j) {
		var p;
		p = this;
		return ((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]) < ((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j]);
	};
	$ptrType(runeSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	runeSlice.prototype.Swap = function(i, j) {
		var p, _tmp, _tmp$1;
		p = this;
		_tmp = ((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j]); _tmp$1 = ((i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i]); (i < 0 || i >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + i] = _tmp; (j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p.array[p.offset + j] = _tmp$1;
	};
	$ptrType(runeSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	runeSlice.prototype.Sort = function() {
		var p;
		p = this;
		sort.Sort(p);
	};
	$ptrType(runeSlice).prototype.Sort = function() { return this.$get().Sort(); };
	makeOnePass = function(p) {
		var instQueue, visitQueue, build, check, onePassRunes, m, pc, x, inst, _ref, _ref$1, _i, i, x$1;
		if (p.Inst.length >= 1000) {
			return notOnePass;
		}
		instQueue = newQueue(p.Inst.length);
		visitQueue = newQueue(p.Inst.length);
		build = $throwNilPointerError;
		check = $throwNilPointerError;
		onePassRunes = ($sliceType(($sliceType($Int32)))).make(p.Inst.length, 0, function() { return ($sliceType($Int32)).nil; });
		build = (function(pc, q) {
			var x, inst, _ref;
			if (q.contains(pc)) {
				return;
			}
			inst = new onePassInst.Ptr(); $copy(inst, (x = p.Inst, ((pc < 0 || pc >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pc])), onePassInst);
			_ref = inst.Inst.Op;
			if (_ref === 0 || _ref === 1) {
				q.insert(inst.Inst.Out);
				build(inst.Inst.Out, q);
				q.insert(inst.Inst.Arg);
			} else if (_ref === 4 || _ref === 5) {
			} else {
				q.insert(inst.Inst.Out);
			}
		});
		check = (function(pc, m) {
			var ok, x, inst, _ref, _entry, matchOut, _entry$1, matchArg, _tmp, _tmp$1, _tmp$2, _tmp$3, _key, _tuple, x$1, x$2, x$3, x$4, x$5, _entry$2, _key$1, x$6, _q, i, _entry$3, _key$2, x$7, _q$1, i$1, _key$3, _key$4, runes, x$8, r0, r1, _q$2, i$2, _key$5, runes$1, x$9, r0$1, r1$1, x$10, x$11, _q$3, i$3, _key$6, _key$7, _q$4, i$4;
			ok = false;
			ok = true;
			inst = (x = p.Inst, ((pc < 0 || pc >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pc]));
			if (visitQueue.contains(pc)) {
				return ok;
			}
			visitQueue.insert(pc);
			_ref = inst.Inst.Op;
			switch (0) { default: if (_ref === 0 || _ref === 1) {
				ok = check(inst.Inst.Out, m) && check(inst.Inst.Arg, m);
				matchOut = (_entry = m[inst.Inst.Out], _entry !== undefined ? _entry.v : false);
				matchArg = (_entry$1 = m[inst.Inst.Arg], _entry$1 !== undefined ? _entry$1.v : false);
				if (matchOut && matchArg) {
					ok = false;
					break;
				}
				if (matchArg) {
					_tmp = inst.Inst.Arg; _tmp$1 = inst.Inst.Out; inst.Inst.Out = _tmp; inst.Inst.Arg = _tmp$1;
					_tmp$2 = matchArg; _tmp$3 = matchOut; matchOut = _tmp$2; matchArg = _tmp$3;
				}
				if (matchOut) {
					_key = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: true };
					inst.Inst.Op = 1;
				}
				_tuple = mergeRuneSets(new ($ptrType(($sliceType($Int32))))(function() { return (x$2 = inst.Inst.Out, ((x$2 < 0 || x$2 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x$2])); }, function($v) { (x$1 = inst.Inst.Out, (x$1 < 0 || x$1 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x$1] = $v); }, onePassRunes), new ($ptrType(($sliceType($Int32))))(function() { return (x$4 = inst.Inst.Arg, ((x$4 < 0 || x$4 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x$4])); }, function($v) { (x$3 = inst.Inst.Arg, (x$3 < 0 || x$3 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target.array[this.$target.offset + x$3] = $v); }, onePassRunes), inst.Inst.Out, inst.Inst.Arg); (pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = _tuple[0]; inst.Next = _tuple[1];
				if (inst.Next.length > 0 && ((x$5 = inst.Next, ((0 < 0 || 0 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + 0])) === 4294967295)) {
					ok = false;
					break;
				}
			} else if (_ref === 2 || _ref === 6) {
				ok = check(inst.Inst.Out, m);
				_key$1 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: (_entry$2 = m[inst.Inst.Out], _entry$2 !== undefined ? _entry$2.v : false) };
				(pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = $appendSlice(new ($sliceType($Int32))([]), (x$6 = inst.Inst.Out, ((x$6 < 0 || x$6 >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + x$6])));
				inst.Next = new ($sliceType($Uint32))([]);
				i = (_q = ((pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc]).length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				while (i >= 0) {
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i = i - 1 >> 0;
				}
			} else if (_ref === 3) {
				ok = check(inst.Inst.Out, m);
				_key$2 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: (_entry$3 = m[inst.Inst.Out], _entry$3 !== undefined ? _entry$3.v : false) };
				(pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = $appendSlice(new ($sliceType($Int32))([]), (x$7 = inst.Inst.Out, ((x$7 < 0 || x$7 >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + x$7])));
				inst.Next = new ($sliceType($Uint32))([]);
				i$1 = (_q$1 = ((pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc]).length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (i$1 >= 0) {
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$1 = i$1 - 1 >> 0;
				}
			} else if (_ref === 4 || _ref === 5) {
				_key$3 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: inst.Inst.Op === 4 };
				break;
			} else if (_ref === 7) {
				ok = check(inst.Inst.Out, m);
				_key$4 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$4] = { k: _key$4, v: false };
				if (inst.Next.length > 0) {
					break;
				}
				if (inst.Inst.Rune.length === 0) {
					(pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = new ($sliceType($Int32))([]);
					inst.Next = new ($sliceType($Uint32))([inst.Inst.Out]);
					break;
				}
				runes = ($sliceType($Int32)).make(0, 0, function() { return 0; });
				if ((inst.Inst.Rune.length === 1) && !(((((inst.Inst.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
					r0 = (x$8 = inst.Inst.Rune, ((0 < 0 || 0 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8.array[x$8.offset + 0]));
					runes = $append(runes, r0, r0);
					r1 = unicode.SimpleFold(r0);
					while (!((r1 === r0))) {
						runes = $append(runes, r1, r1);
						r1 = unicode.SimpleFold(r1);
					}
					sort.Sort($subslice(new runeSlice(runes.array), runes.offset, runes.offset + runes.length));
				} else {
					runes = $appendSlice(runes, inst.Inst.Rune);
				}
				(pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = runes;
				inst.Next = new ($sliceType($Uint32))([]);
				i$2 = (_q$2 = ((pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc]).length / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (i$2 >= 0) {
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$2 = i$2 - 1 >> 0;
				}
				inst.Inst.Op = 7;
			} else if (_ref === 8) {
				ok = check(inst.Inst.Out, m);
				_key$5 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: false };
				if (inst.Next.length > 0) {
					break;
				}
				runes$1 = new ($sliceType($Int32))([]);
				if (!(((((inst.Inst.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
					r0$1 = (x$9 = inst.Inst.Rune, ((0 < 0 || 0 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9.array[x$9.offset + 0]));
					runes$1 = $append(runes$1, r0$1, r0$1);
					r1$1 = unicode.SimpleFold(r0$1);
					while (!((r1$1 === r0$1))) {
						runes$1 = $append(runes$1, r1$1, r1$1);
						r1$1 = unicode.SimpleFold(r1$1);
					}
					sort.Sort($subslice(new runeSlice(runes$1.array), runes$1.offset, runes$1.offset + runes$1.length));
				} else {
					runes$1 = $append(runes$1, (x$10 = inst.Inst.Rune, ((0 < 0 || 0 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10.array[x$10.offset + 0])), (x$11 = inst.Inst.Rune, ((0 < 0 || 0 >= x$11.length) ? $throwRuntimeError("index out of range") : x$11.array[x$11.offset + 0])));
				}
				(pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = runes$1;
				inst.Next = new ($sliceType($Uint32))([]);
				i$3 = (_q$3 = ((pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc]).length / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (i$3 >= 0) {
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$3 = i$3 - 1 >> 0;
				}
				inst.Inst.Op = 7;
			} else if (_ref === 9) {
				ok = check(inst.Inst.Out, m);
				_key$6 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$6] = { k: _key$6, v: false };
				if (inst.Next.length > 0) {
					break;
				}
				(pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = $appendSlice(new ($sliceType($Int32))([]), anyRune);
				inst.Next = new ($sliceType($Uint32))([inst.Inst.Out]);
			} else if (_ref === 10) {
				ok = check(inst.Inst.Out, m);
				_key$7 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$7] = { k: _key$7, v: false };
				if (inst.Next.length > 0) {
					break;
				}
				(pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc] = $appendSlice(new ($sliceType($Int32))([]), anyRuneNotNL);
				inst.Next = new ($sliceType($Uint32))([]);
				i$4 = (_q$4 = ((pc < 0 || pc >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + pc]).length / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (i$4 >= 0) {
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$4 = i$4 - 1 >> 0;
				}
			} }
			return ok;
		});
		instQueue.clear();
		instQueue.insert((p.Start >>> 0));
		m = new $Map();
		while (!instQueue.empty()) {
			pc = instQueue.next();
			inst = new onePassInst.Ptr(); $copy(inst, (x = p.Inst, ((pc < 0 || pc >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pc])), onePassInst);
			visitQueue.clear();
			if (!check(pc, m)) {
				p = notOnePass;
				break;
			}
			_ref = inst.Inst.Op;
			if (_ref === 0 || _ref === 1) {
				instQueue.insert(inst.Inst.Out);
				instQueue.insert(inst.Inst.Arg);
			} else if (_ref === 2 || _ref === 3 || _ref === 6) {
				instQueue.insert(inst.Inst.Out);
			} else if (_ref === 4) {
			} else if (_ref === 5) {
			} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10) {
			} else {
			}
		}
		if (!(p === notOnePass)) {
			_ref$1 = p.Inst;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				(x$1 = p.Inst, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i])).Inst.Rune = ((i < 0 || i >= onePassRunes.length) ? $throwRuntimeError("index out of range") : onePassRunes.array[onePassRunes.offset + i]);
				_i++;
			}
		}
		return p;
	};
	compileOnePass = function(prog) {
		var p, x, x$1, x$2, x$3, _ref, _i, inst, x$4, x$5, opOut, _ref$1, x$6, x$7;
		p = ($ptrType(onePassProg)).nil;
		if (prog.Start === 0) {
			p = notOnePass;
			return p;
		}
		if (!(((x = prog.Inst, x$1 = prog.Start, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])).Op === 3)) || !((((((x$2 = prog.Inst, x$3 = prog.Start, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + x$3])).Arg << 24 >>> 24) & 4) >>> 0) === 4))) {
			p = notOnePass;
			return p;
		}
		_ref = prog.Inst;
		_i = 0;
		while (_i < _ref.length) {
			inst = new syntax.Inst.Ptr(); $copy(inst, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), syntax.Inst);
			opOut = (x$4 = prog.Inst, x$5 = inst.Out, ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + x$5])).Op;
			_ref$1 = inst.Op;
			if (_ref$1 === 0 || _ref$1 === 1) {
				if ((opOut === 4) || ((x$6 = prog.Inst, x$7 = inst.Arg, ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + x$7])).Op === 4)) {
					p = notOnePass;
					return p;
				}
			} else if (_ref$1 === 3) {
				if (opOut === 4) {
					if ((((inst.Arg << 24 >>> 24) & 8) >>> 0) === 8) {
						_i++;
						continue;
					}
					p = notOnePass;
					return p;
				}
			} else {
				if (opOut === 4) {
					p = notOnePass;
					return p;
				}
			}
			_i++;
		}
		p = onePassCopy(prog);
		p = makeOnePass(p);
		if (!(p === notOnePass)) {
			cleanupOnePass(p, prog);
		}
		p = p;
		return p;
	};
	Regexp.Ptr.prototype.String = function() {
		var re;
		re = this;
		return re.expr;
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	Compile = $pkg.Compile = function(expr) {
		return compile(expr, 212, false);
	};
	Regexp.Ptr.prototype.Longest = function() {
		var re;
		re = this;
		re.longest = true;
	};
	Regexp.prototype.Longest = function() { return this.$val.Longest(); };
	compile = function(expr, mode, longest) {
		var _tuple, re, err, maxCap, capNames, _tuple$1, prog, regexp, _tuple$2, _tuple$3, _tuple$4;
		_tuple = syntax.Parse(expr, mode); re = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return [($ptrType(Regexp)).nil, err];
		}
		maxCap = re.MaxCap();
		capNames = re.CapNames();
		re = re.Simplify();
		_tuple$1 = syntax.Compile(re); prog = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, null))) {
			return [($ptrType(Regexp)).nil, err];
		}
		regexp = new Regexp.Ptr(expr, prog, compileOnePass(prog), "", ($sliceType($Uint8)).nil, false, 0, 0, prog.StartCond(), maxCap, capNames, longest, new sync.Mutex.Ptr(), ($sliceType(($ptrType(machine)))).nil);
		if (regexp.onepass === notOnePass) {
			_tuple$2 = prog.Prefix(); regexp.prefix = _tuple$2[0]; regexp.prefixComplete = _tuple$2[1];
		} else {
			_tuple$3 = onePassPrefix(prog); regexp.prefix = _tuple$3[0]; regexp.prefixComplete = _tuple$3[1]; regexp.prefixEnd = _tuple$3[2];
		}
		if (!(regexp.prefix === "")) {
			regexp.prefixBytes = new ($sliceType($Uint8))($stringToBytes(regexp.prefix));
			_tuple$4 = utf8.DecodeRuneInString(regexp.prefix); regexp.prefixRune = _tuple$4[0];
		}
		return [regexp, null];
	};
	Regexp.Ptr.prototype.get = function() {
		var re, n, x, x$1, z, z$1;
		re = this;
		re.mu.Lock();
		n = re.machine.length;
		if (n > 0) {
			z = (x = re.machine, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
			re.machine = $subslice(re.machine, 0, (n - 1 >> 0));
			re.mu.Unlock();
			return z;
		}
		re.mu.Unlock();
		z$1 = progMachine(re.prog, re.onepass);
		z$1.re = re;
		return z$1;
	};
	Regexp.prototype.get = function() { return this.$val.get(); };
	Regexp.Ptr.prototype.put = function(z) {
		var re;
		re = this;
		re.mu.Lock();
		re.machine = $append(re.machine, z);
		re.mu.Unlock();
	};
	Regexp.prototype.put = function(z) { return this.$val.put(z); };
	MustCompile = $pkg.MustCompile = function(str) {
		var _tuple, regexp, error;
		_tuple = Compile(str); regexp = _tuple[0]; error = _tuple[1];
		if (!($interfaceIsEqual(error, null))) {
			throw $panic(new $String("regexp: Compile(" + quote(str) + "): " + error.Error()));
		}
		return regexp;
	};
	quote = function(s) {
		if (strconv.CanBackquote(s)) {
			return "`" + s + "`";
		}
		return strconv.Quote(s);
	};
	Regexp.Ptr.prototype.NumSubexp = function() {
		var re;
		re = this;
		return re.numSubexp;
	};
	Regexp.prototype.NumSubexp = function() { return this.$val.NumSubexp(); };
	Regexp.Ptr.prototype.SubexpNames = function() {
		var re;
		re = this;
		return re.subexpNames;
	};
	Regexp.prototype.SubexpNames = function() { return this.$val.SubexpNames(); };
	inputString.Ptr.prototype.step = function(pos) {
		var i, c;
		i = this;
		if (pos < i.str.length) {
			c = i.str.charCodeAt(pos);
			if (c < 128) {
				return [(c >> 0), 1];
			}
			return utf8.DecodeRuneInString(i.str.substring(pos));
		}
		return [-1, 0];
	};
	inputString.prototype.step = function(pos) { return this.$val.step(pos); };
	inputString.Ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputString.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputString.Ptr.prototype.hasPrefix = function(re) {
		var i;
		i = this;
		return strings.HasPrefix(i.str, re.prefix);
	};
	inputString.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputString.Ptr.prototype.index = function(re, pos) {
		var i;
		i = this;
		return strings.Index(i.str.substring(pos), re.prefix);
	};
	inputString.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputString.Ptr.prototype.context = function(pos) {
		var i, _tmp, _tmp$1, r1, r2, _tuple, _tuple$1;
		i = this;
		_tmp = -1; _tmp$1 = -1; r1 = _tmp; r2 = _tmp$1;
		if (pos > 0 && pos <= i.str.length) {
			_tuple = utf8.DecodeLastRuneInString(i.str.substring(0, pos)); r1 = _tuple[0];
		}
		if (pos < i.str.length) {
			_tuple$1 = utf8.DecodeRuneInString(i.str.substring(pos)); r2 = _tuple$1[0];
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputString.prototype.context = function(pos) { return this.$val.context(pos); };
	inputBytes.Ptr.prototype.step = function(pos) {
		var i, x, c;
		i = this;
		if (pos < i.str.length) {
			c = (x = i.str, ((pos < 0 || pos >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + pos]));
			if (c < 128) {
				return [(c >> 0), 1];
			}
			return utf8.DecodeRune($subslice(i.str, pos));
		}
		return [-1, 0];
	};
	inputBytes.prototype.step = function(pos) { return this.$val.step(pos); };
	inputBytes.Ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputBytes.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputBytes.Ptr.prototype.hasPrefix = function(re) {
		var i;
		i = this;
		return bytes.HasPrefix(i.str, re.prefixBytes);
	};
	inputBytes.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputBytes.Ptr.prototype.index = function(re, pos) {
		var i;
		i = this;
		return bytes.Index($subslice(i.str, pos), re.prefixBytes);
	};
	inputBytes.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputBytes.Ptr.prototype.context = function(pos) {
		var i, _tmp, _tmp$1, r1, r2, _tuple, _tuple$1;
		i = this;
		_tmp = -1; _tmp$1 = -1; r1 = _tmp; r2 = _tmp$1;
		if (pos > 0 && pos <= i.str.length) {
			_tuple = utf8.DecodeLastRune($subslice(i.str, 0, pos)); r1 = _tuple[0];
		}
		if (pos < i.str.length) {
			_tuple$1 = utf8.DecodeRune($subslice(i.str, pos)); r2 = _tuple$1[0];
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputBytes.prototype.context = function(pos) { return this.$val.context(pos); };
	inputReader.Ptr.prototype.step = function(pos) {
		var i, _tuple, r, w, err;
		i = this;
		if (!i.atEOT && !((pos === i.pos))) {
			return [-1, 0];
		}
		_tuple = i.r.ReadRune(); r = _tuple[0]; w = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, null))) {
			i.atEOT = true;
			return [-1, 0];
		}
		i.pos = i.pos + (w) >> 0;
		return [r, w];
	};
	inputReader.prototype.step = function(pos) { return this.$val.step(pos); };
	inputReader.Ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return false;
	};
	inputReader.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputReader.Ptr.prototype.hasPrefix = function(re) {
		var i;
		i = this;
		return false;
	};
	inputReader.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputReader.Ptr.prototype.index = function(re, pos) {
		var i;
		i = this;
		return -1;
	};
	inputReader.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputReader.Ptr.prototype.context = function(pos) {
		var i;
		i = this;
		return 0;
	};
	inputReader.prototype.context = function(pos) { return this.$val.context(pos); };
	Regexp.Ptr.prototype.LiteralPrefix = function() {
		var prefix, complete, re, _tmp, _tmp$1;
		prefix = "";
		complete = false;
		re = this;
		_tmp = re.prefix; _tmp$1 = re.prefixComplete; prefix = _tmp; complete = _tmp$1;
		return [prefix, complete];
	};
	Regexp.prototype.LiteralPrefix = function() { return this.$val.LiteralPrefix(); };
	Regexp.Ptr.prototype.MatchReader = function(r) {
		var re;
		re = this;
		return !(re.doExecute(r, ($sliceType($Uint8)).nil, "", 0, 0) === ($sliceType($Int)).nil);
	};
	Regexp.prototype.MatchReader = function(r) { return this.$val.MatchReader(r); };
	Regexp.Ptr.prototype.MatchString = function(s) {
		var re;
		re = this;
		return !(re.doExecute(null, ($sliceType($Uint8)).nil, s, 0, 0) === ($sliceType($Int)).nil);
	};
	Regexp.prototype.MatchString = function(s) { return this.$val.MatchString(s); };
	Regexp.Ptr.prototype.Match = function(b) {
		var re;
		re = this;
		return !(re.doExecute(null, b, "", 0, 0) === ($sliceType($Int)).nil);
	};
	Regexp.prototype.Match = function(b) { return this.$val.Match(b); };
	Regexp.Ptr.prototype.ReplaceAllString = function(src, repl) {
		var re, n, x, b;
		re = this;
		n = 2;
		if (strings.Index(repl, "$") >= 0) {
			n = (x = (re.numSubexp + 1 >> 0), (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0);
		}
		b = re.replaceAll(($sliceType($Uint8)).nil, src, n, (function(dst, match) {
			return re.expand(dst, repl, ($sliceType($Uint8)).nil, src, match);
		}));
		return $bytesToString(b);
	};
	Regexp.prototype.ReplaceAllString = function(src, repl) { return this.$val.ReplaceAllString(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllLiteralString = function(src, repl) {
		var re;
		re = this;
		return $bytesToString(re.replaceAll(($sliceType($Uint8)).nil, src, 2, (function(dst, match) {
			return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(repl)));
		})));
	};
	Regexp.prototype.ReplaceAllLiteralString = function(src, repl) { return this.$val.ReplaceAllLiteralString(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllStringFunc = function(src, repl) {
		var re, b;
		re = this;
		b = re.replaceAll(($sliceType($Uint8)).nil, src, 2, (function(dst, match) {
			return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(repl(src.substring(((0 < 0 || 0 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 0]), ((1 < 0 || 1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 1]))))));
		}));
		return $bytesToString(b);
	};
	Regexp.prototype.ReplaceAllStringFunc = function(src, repl) { return this.$val.ReplaceAllStringFunc(src, repl); };
	Regexp.Ptr.prototype.replaceAll = function(bsrc, src, nmatch, repl) {
		var re, lastMatchEnd, searchPos, buf, endPos, a, width, _tuple, _tuple$1;
		re = this;
		lastMatchEnd = 0;
		searchPos = 0;
		buf = ($sliceType($Uint8)).nil;
		endPos = 0;
		if (!(bsrc === ($sliceType($Uint8)).nil)) {
			endPos = bsrc.length;
		} else {
			endPos = src.length;
		}
		while (searchPos <= endPos) {
			a = re.doExecute(null, bsrc, src, searchPos, nmatch);
			if (a.length === 0) {
				break;
			}
			if (!(bsrc === ($sliceType($Uint8)).nil)) {
				buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd, ((0 < 0 || 0 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 0])));
			} else {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes(src.substring(lastMatchEnd, ((0 < 0 || 0 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 0])))));
			}
			if (((1 < 0 || 1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 1]) > lastMatchEnd || (((0 < 0 || 0 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 0]) === 0)) {
				buf = repl(buf, a);
			}
			lastMatchEnd = ((1 < 0 || 1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 1]);
			width = 0;
			if (!(bsrc === ($sliceType($Uint8)).nil)) {
				_tuple = utf8.DecodeRune($subslice(bsrc, searchPos)); width = _tuple[1];
			} else {
				_tuple$1 = utf8.DecodeRuneInString(src.substring(searchPos)); width = _tuple$1[1];
			}
			if ((searchPos + width >> 0) > ((1 < 0 || 1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 1])) {
				searchPos = searchPos + (width) >> 0;
			} else if ((searchPos + 1 >> 0) > ((1 < 0 || 1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 1])) {
				searchPos = searchPos + 1 >> 0;
			} else {
				searchPos = ((1 < 0 || 1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 1]);
			}
		}
		if (!(bsrc === ($sliceType($Uint8)).nil)) {
			buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd));
		} else {
			buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes(src.substring(lastMatchEnd))));
		}
		return buf;
	};
	Regexp.prototype.replaceAll = function(bsrc, src, nmatch, repl) { return this.$val.replaceAll(bsrc, src, nmatch, repl); };
	Regexp.Ptr.prototype.ReplaceAll = function(src, repl) {
		var re, n, x, srepl, b;
		re = this;
		n = 2;
		if (bytes.IndexByte(repl, 36) >= 0) {
			n = (x = (re.numSubexp + 1 >> 0), (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0);
		}
		srepl = "";
		b = re.replaceAll(src, "", n, (function(dst, match) {
			if (!((srepl.length === repl.length))) {
				srepl = $bytesToString(repl);
			}
			return re.expand(dst, srepl, src, "", match);
		}));
		return b;
	};
	Regexp.prototype.ReplaceAll = function(src, repl) { return this.$val.ReplaceAll(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllLiteral = function(src, repl) {
		var re;
		re = this;
		return re.replaceAll(src, "", 2, (function(dst, match) {
			return $appendSlice(dst, repl);
		}));
	};
	Regexp.prototype.ReplaceAllLiteral = function(src, repl) { return this.$val.ReplaceAllLiteral(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllFunc = function(src, repl) {
		var re;
		re = this;
		return re.replaceAll(src, "", 2, (function(dst, match) {
			return $appendSlice(dst, repl($subslice(src, ((0 < 0 || 0 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 0]), ((1 < 0 || 1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 1]))));
		}));
	};
	Regexp.prototype.ReplaceAllFunc = function(src, repl) { return this.$val.ReplaceAllFunc(src, repl); };
	Regexp.Ptr.prototype.pad = function(a) {
		var re, x, n;
		re = this;
		if (a === ($sliceType($Int)).nil) {
			return ($sliceType($Int)).nil;
		}
		n = (x = (1 + re.numSubexp >> 0), (((x >>> 16 << 16) * 2 >> 0) + (x << 16 >>> 16) * 2) >> 0);
		while (a.length < n) {
			a = $append(a, -1);
		}
		return a;
	};
	Regexp.prototype.pad = function(a) { return this.$val.pad(a); };
	Regexp.Ptr.prototype.allMatches = function(s, b, n, deliver) {
		var re, end, _tmp, _tmp$1, _tmp$2, pos, i, prevMatchEnd, matches, accept, width, _tuple, _tuple$1;
		re = this;
		end = 0;
		if (b === ($sliceType($Uint8)).nil) {
			end = s.length;
		} else {
			end = b.length;
		}
		_tmp = 0; _tmp$1 = 0; _tmp$2 = -1; pos = _tmp; i = _tmp$1; prevMatchEnd = _tmp$2;
		while (i < n && pos <= end) {
			matches = re.doExecute(null, b, s, pos, re.prog.NumCap);
			if (matches.length === 0) {
				break;
			}
			accept = true;
			if (((1 < 0 || 1 >= matches.length) ? $throwRuntimeError("index out of range") : matches.array[matches.offset + 1]) === pos) {
				if (((0 < 0 || 0 >= matches.length) ? $throwRuntimeError("index out of range") : matches.array[matches.offset + 0]) === prevMatchEnd) {
					accept = false;
				}
				width = 0;
				if (b === ($sliceType($Uint8)).nil) {
					_tuple = utf8.DecodeRuneInString(s.substring(pos, end)); width = _tuple[1];
				} else {
					_tuple$1 = utf8.DecodeRune($subslice(b, pos, end)); width = _tuple$1[1];
				}
				if (width > 0) {
					pos = pos + (width) >> 0;
				} else {
					pos = end + 1 >> 0;
				}
			} else {
				pos = ((1 < 0 || 1 >= matches.length) ? $throwRuntimeError("index out of range") : matches.array[matches.offset + 1]);
			}
			prevMatchEnd = ((1 < 0 || 1 >= matches.length) ? $throwRuntimeError("index out of range") : matches.array[matches.offset + 1]);
			if (accept) {
				deliver(re.pad(matches));
				i = i + 1 >> 0;
			}
		}
	};
	Regexp.prototype.allMatches = function(s, b, n, deliver) { return this.$val.allMatches(s, b, n, deliver); };
	Regexp.Ptr.prototype.Find = function(b) {
		var re, a;
		re = this;
		a = re.doExecute(null, b, "", 0, 2);
		if (a === ($sliceType($Int)).nil) {
			return ($sliceType($Uint8)).nil;
		}
		return $subslice(b, ((0 < 0 || 0 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 0]), ((1 < 0 || 1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 1]));
	};
	Regexp.prototype.Find = function(b) { return this.$val.Find(b); };
	Regexp.Ptr.prototype.FindIndex = function(b) {
		var loc, re, a;
		loc = ($sliceType($Int)).nil;
		re = this;
		a = re.doExecute(null, b, "", 0, 2);
		if (a === ($sliceType($Int)).nil) {
			loc = ($sliceType($Int)).nil;
			return loc;
		}
		loc = $subslice(a, 0, 2);
		return loc;
	};
	Regexp.prototype.FindIndex = function(b) { return this.$val.FindIndex(b); };
	Regexp.Ptr.prototype.FindString = function(s) {
		var re, a;
		re = this;
		a = re.doExecute(null, ($sliceType($Uint8)).nil, s, 0, 2);
		if (a === ($sliceType($Int)).nil) {
			return "";
		}
		return s.substring(((0 < 0 || 0 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 0]), ((1 < 0 || 1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + 1]));
	};
	Regexp.prototype.FindString = function(s) { return this.$val.FindString(s); };
	Regexp.Ptr.prototype.FindStringIndex = function(s) {
		var loc, re, a;
		loc = ($sliceType($Int)).nil;
		re = this;
		a = re.doExecute(null, ($sliceType($Uint8)).nil, s, 0, 2);
		if (a === ($sliceType($Int)).nil) {
			loc = ($sliceType($Int)).nil;
			return loc;
		}
		loc = $subslice(a, 0, 2);
		return loc;
	};
	Regexp.prototype.FindStringIndex = function(s) { return this.$val.FindStringIndex(s); };
	Regexp.Ptr.prototype.FindReaderIndex = function(r) {
		var loc, re, a;
		loc = ($sliceType($Int)).nil;
		re = this;
		a = re.doExecute(r, ($sliceType($Uint8)).nil, "", 0, 2);
		if (a === ($sliceType($Int)).nil) {
			loc = ($sliceType($Int)).nil;
			return loc;
		}
		loc = $subslice(a, 0, 2);
		return loc;
	};
	Regexp.prototype.FindReaderIndex = function(r) { return this.$val.FindReaderIndex(r); };
	Regexp.Ptr.prototype.FindSubmatch = function(b) {
		var re, a, ret, _ref, _i, i, x, x$1, x$2;
		re = this;
		a = re.doExecute(null, b, "", 0, re.prog.NumCap);
		if (a === ($sliceType($Int)).nil) {
			return ($sliceType(($sliceType($Uint8)))).nil;
		}
		ret = ($sliceType(($sliceType($Uint8)))).make((1 + re.numSubexp >> 0), 0, function() { return ($sliceType($Uint8)).nil; });
		_ref = ret;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			if (((((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0) < a.length && (x = (((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0, ((x < 0 || x >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + x])) >= 0) {
				(i < 0 || i >= ret.length) ? $throwRuntimeError("index out of range") : ret.array[ret.offset + i] = $subslice(b, (x$1 = (((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0, ((x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + x$1])), (x$2 = ((((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0) + 1 >> 0, ((x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + x$2])));
			}
			_i++;
		}
		return ret;
	};
	Regexp.prototype.FindSubmatch = function(b) { return this.$val.FindSubmatch(b); };
	Regexp.Ptr.prototype.Expand = function(dst, template, src, match) {
		var re;
		re = this;
		return re.expand(dst, $bytesToString(template), src, "", match);
	};
	Regexp.prototype.Expand = function(dst, template, src, match) { return this.$val.Expand(dst, template, src, match); };
	Regexp.Ptr.prototype.ExpandString = function(dst, template, src, match) {
		var re;
		re = this;
		return re.expand(dst, template, ($sliceType($Uint8)).nil, src, match);
	};
	Regexp.prototype.ExpandString = function(dst, template, src, match) { return this.$val.ExpandString(dst, template, src, match); };
	Regexp.Ptr.prototype.expand = function(dst, template, bsrc, src, match) {
		var re, i, _tuple, name, num, rest, ok, x, x$1, x$2, x$3, x$4, _ref, _i, i$1, namei, x$5, x$6, x$7, x$8, x$9;
		re = this;
		while (template.length > 0) {
			i = strings.Index(template, "$");
			if (i < 0) {
				break;
			}
			dst = $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(template.substring(0, i))));
			template = template.substring(i);
			if (template.length > 1 && (template.charCodeAt(1) === 36)) {
				dst = $append(dst, 36);
				template = template.substring(2);
				continue;
			}
			_tuple = extract(template); name = _tuple[0]; num = _tuple[1]; rest = _tuple[2]; ok = _tuple[3];
			if (!ok) {
				dst = $append(dst, 36);
				template = template.substring(1);
				continue;
			}
			template = rest;
			if (num >= 0) {
				if ((((((2 >>> 16 << 16) * num >> 0) + (2 << 16 >>> 16) * num) >> 0) + 1 >> 0) < match.length && (x = (((2 >>> 16 << 16) * num >> 0) + (2 << 16 >>> 16) * num) >> 0, ((x < 0 || x >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x])) >= 0) {
					if (!(bsrc === ($sliceType($Uint8)).nil)) {
						dst = $appendSlice(dst, $subslice(bsrc, (x$1 = (((2 >>> 16 << 16) * num >> 0) + (2 << 16 >>> 16) * num) >> 0, ((x$1 < 0 || x$1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$1])), (x$2 = ((((2 >>> 16 << 16) * num >> 0) + (2 << 16 >>> 16) * num) >> 0) + 1 >> 0, ((x$2 < 0 || x$2 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$2]))));
					} else {
						dst = $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(src.substring((x$3 = (((2 >>> 16 << 16) * num >> 0) + (2 << 16 >>> 16) * num) >> 0, ((x$3 < 0 || x$3 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$3])), (x$4 = ((((2 >>> 16 << 16) * num >> 0) + (2 << 16 >>> 16) * num) >> 0) + 1 >> 0, ((x$4 < 0 || x$4 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$4]))))));
					}
				}
			} else {
				_ref = re.subexpNames;
				_i = 0;
				while (_i < _ref.length) {
					i$1 = _i;
					namei = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
					if (name === namei && (((((2 >>> 16 << 16) * i$1 >> 0) + (2 << 16 >>> 16) * i$1) >> 0) + 1 >> 0) < match.length && (x$5 = (((2 >>> 16 << 16) * i$1 >> 0) + (2 << 16 >>> 16) * i$1) >> 0, ((x$5 < 0 || x$5 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$5])) >= 0) {
						if (!(bsrc === ($sliceType($Uint8)).nil)) {
							dst = $appendSlice(dst, $subslice(bsrc, (x$6 = (((2 >>> 16 << 16) * i$1 >> 0) + (2 << 16 >>> 16) * i$1) >> 0, ((x$6 < 0 || x$6 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$6])), (x$7 = ((((2 >>> 16 << 16) * i$1 >> 0) + (2 << 16 >>> 16) * i$1) >> 0) + 1 >> 0, ((x$7 < 0 || x$7 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$7]))));
						} else {
							dst = $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(src.substring((x$8 = (((2 >>> 16 << 16) * i$1 >> 0) + (2 << 16 >>> 16) * i$1) >> 0, ((x$8 < 0 || x$8 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$8])), (x$9 = ((((2 >>> 16 << 16) * i$1 >> 0) + (2 << 16 >>> 16) * i$1) >> 0) + 1 >> 0, ((x$9 < 0 || x$9 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$9]))))));
						}
						break;
					}
					_i++;
				}
			}
		}
		dst = $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(template)));
		return dst;
	};
	Regexp.prototype.expand = function(dst, template, bsrc, src, match) { return this.$val.expand(dst, template, bsrc, src, match); };
	extract = function(str) {
		var name, num, rest, ok, brace, i, _tuple, rune, size, i$1;
		name = "";
		num = 0;
		rest = "";
		ok = false;
		if (str.length < 2 || !((str.charCodeAt(0) === 36))) {
			return [name, num, rest, ok];
		}
		brace = false;
		if (str.charCodeAt(1) === 123) {
			brace = true;
			str = str.substring(2);
		} else {
			str = str.substring(1);
		}
		i = 0;
		while (i < str.length) {
			_tuple = utf8.DecodeRuneInString(str.substring(i)); rune = _tuple[0]; size = _tuple[1];
			if (!unicode.IsLetter(rune) && !unicode.IsDigit(rune) && !((rune === 95))) {
				break;
			}
			i = i + (size) >> 0;
		}
		if (i === 0) {
			return [name, num, rest, ok];
		}
		name = str.substring(0, i);
		if (brace) {
			if (i >= str.length || !((str.charCodeAt(i) === 125))) {
				return [name, num, rest, ok];
			}
			i = i + 1 >> 0;
		}
		num = 0;
		i$1 = 0;
		while (i$1 < name.length) {
			if (name.charCodeAt(i$1) < 48 || 57 < name.charCodeAt(i$1) || num >= 100000000) {
				num = -1;
				break;
			}
			num = (((((num >>> 16 << 16) * 10 >> 0) + (num << 16 >>> 16) * 10) >> 0) + (name.charCodeAt(i$1) >> 0) >> 0) - 48 >> 0;
			i$1 = i$1 + 1 >> 0;
		}
		if ((name.charCodeAt(0) === 48) && name.length > 1) {
			num = -1;
		}
		rest = str.substring(i);
		ok = true;
		return [name, num, rest, ok];
	};
	Regexp.Ptr.prototype.FindSubmatchIndex = function(b) {
		var re;
		re = this;
		return re.pad(re.doExecute(null, b, "", 0, re.prog.NumCap));
	};
	Regexp.prototype.FindSubmatchIndex = function(b) { return this.$val.FindSubmatchIndex(b); };
	Regexp.Ptr.prototype.FindStringSubmatch = function(s) {
		var re, a, ret, _ref, _i, i, x, x$1, x$2;
		re = this;
		a = re.doExecute(null, ($sliceType($Uint8)).nil, s, 0, re.prog.NumCap);
		if (a === ($sliceType($Int)).nil) {
			return ($sliceType($String)).nil;
		}
		ret = ($sliceType($String)).make((1 + re.numSubexp >> 0), 0, function() { return ""; });
		_ref = ret;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			if (((((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0) < a.length && (x = (((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0, ((x < 0 || x >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + x])) >= 0) {
				(i < 0 || i >= ret.length) ? $throwRuntimeError("index out of range") : ret.array[ret.offset + i] = s.substring((x$1 = (((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0, ((x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + x$1])), (x$2 = ((((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0) + 1 >> 0, ((x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError("index out of range") : a.array[a.offset + x$2])));
			}
			_i++;
		}
		return ret;
	};
	Regexp.prototype.FindStringSubmatch = function(s) { return this.$val.FindStringSubmatch(s); };
	Regexp.Ptr.prototype.FindStringSubmatchIndex = function(s) {
		var re;
		re = this;
		return re.pad(re.doExecute(null, ($sliceType($Uint8)).nil, s, 0, re.prog.NumCap));
	};
	Regexp.prototype.FindStringSubmatchIndex = function(s) { return this.$val.FindStringSubmatchIndex(s); };
	Regexp.Ptr.prototype.FindReaderSubmatchIndex = function(r) {
		var re;
		re = this;
		return re.pad(re.doExecute(r, ($sliceType($Uint8)).nil, "", 0, re.prog.NumCap));
	};
	Regexp.prototype.FindReaderSubmatchIndex = function(r) { return this.$val.FindReaderSubmatchIndex(r); };
	Regexp.Ptr.prototype.FindAll = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = ($sliceType(($sliceType($Uint8)))).make(0, 10, function() { return ($sliceType($Uint8)).nil; });
		re.allMatches("", b, n, (function(match) {
			result = $append(result, $subslice(b, ((0 < 0 || 0 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 0]), ((1 < 0 || 1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 1])));
		}));
		if (result.length === 0) {
			return ($sliceType(($sliceType($Uint8)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAll = function(b, n) { return this.$val.FindAll(b, n); };
	Regexp.Ptr.prototype.FindAllIndex = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = ($sliceType(($sliceType($Int)))).make(0, 10, function() { return ($sliceType($Int)).nil; });
		re.allMatches("", b, n, (function(match) {
			result = $append(result, $subslice(match, 0, 2));
		}));
		if (result.length === 0) {
			return ($sliceType(($sliceType($Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllIndex = function(b, n) { return this.$val.FindAllIndex(b, n); };
	Regexp.Ptr.prototype.FindAllString = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = ($sliceType($String)).make(0, 10, function() { return ""; });
		re.allMatches(s, ($sliceType($Uint8)).nil, n, (function(match) {
			result = $append(result, s.substring(((0 < 0 || 0 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 0]), ((1 < 0 || 1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 1])));
		}));
		if (result.length === 0) {
			return ($sliceType($String)).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllString = function(s, n) { return this.$val.FindAllString(s, n); };
	Regexp.Ptr.prototype.FindAllStringIndex = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = ($sliceType(($sliceType($Int)))).make(0, 10, function() { return ($sliceType($Int)).nil; });
		re.allMatches(s, ($sliceType($Uint8)).nil, n, (function(match) {
			result = $append(result, $subslice(match, 0, 2));
		}));
		if (result.length === 0) {
			return ($sliceType(($sliceType($Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllStringIndex = function(s, n) { return this.$val.FindAllStringIndex(s, n); };
	Regexp.Ptr.prototype.FindAllSubmatch = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = ($sliceType(($sliceType(($sliceType($Uint8)))))).make(0, 10, function() { return ($sliceType(($sliceType($Uint8)))).nil; });
		re.allMatches("", b, n, (function(match) {
			var _q, slice, _ref, _i, j, x, x$1, x$2;
			slice = ($sliceType(($sliceType($Uint8)))).make((_q = match.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 0, function() { return ($sliceType($Uint8)).nil; });
			_ref = slice;
			_i = 0;
			while (_i < _ref.length) {
				j = _i;
				if ((x = (((2 >>> 16 << 16) * j >> 0) + (2 << 16 >>> 16) * j) >> 0, ((x < 0 || x >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x])) >= 0) {
					(j < 0 || j >= slice.length) ? $throwRuntimeError("index out of range") : slice.array[slice.offset + j] = $subslice(b, (x$1 = (((2 >>> 16 << 16) * j >> 0) + (2 << 16 >>> 16) * j) >> 0, ((x$1 < 0 || x$1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$1])), (x$2 = ((((2 >>> 16 << 16) * j >> 0) + (2 << 16 >>> 16) * j) >> 0) + 1 >> 0, ((x$2 < 0 || x$2 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$2])));
				}
				_i++;
			}
			result = $append(result, slice);
		}));
		if (result.length === 0) {
			return ($sliceType(($sliceType(($sliceType($Uint8)))))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllSubmatch = function(b, n) { return this.$val.FindAllSubmatch(b, n); };
	Regexp.Ptr.prototype.FindAllSubmatchIndex = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = ($sliceType(($sliceType($Int)))).make(0, 10, function() { return ($sliceType($Int)).nil; });
		re.allMatches("", b, n, (function(match) {
			result = $append(result, match);
		}));
		if (result.length === 0) {
			return ($sliceType(($sliceType($Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllSubmatchIndex = function(b, n) { return this.$val.FindAllSubmatchIndex(b, n); };
	Regexp.Ptr.prototype.FindAllStringSubmatch = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = ($sliceType(($sliceType($String)))).make(0, 10, function() { return ($sliceType($String)).nil; });
		re.allMatches(s, ($sliceType($Uint8)).nil, n, (function(match) {
			var _q, slice, _ref, _i, j, x, x$1, x$2;
			slice = ($sliceType($String)).make((_q = match.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 0, function() { return ""; });
			_ref = slice;
			_i = 0;
			while (_i < _ref.length) {
				j = _i;
				if ((x = (((2 >>> 16 << 16) * j >> 0) + (2 << 16 >>> 16) * j) >> 0, ((x < 0 || x >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x])) >= 0) {
					(j < 0 || j >= slice.length) ? $throwRuntimeError("index out of range") : slice.array[slice.offset + j] = s.substring((x$1 = (((2 >>> 16 << 16) * j >> 0) + (2 << 16 >>> 16) * j) >> 0, ((x$1 < 0 || x$1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$1])), (x$2 = ((((2 >>> 16 << 16) * j >> 0) + (2 << 16 >>> 16) * j) >> 0) + 1 >> 0, ((x$2 < 0 || x$2 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + x$2])));
				}
				_i++;
			}
			result = $append(result, slice);
		}));
		if (result.length === 0) {
			return ($sliceType(($sliceType($String)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllStringSubmatch = function(s, n) { return this.$val.FindAllStringSubmatch(s, n); };
	Regexp.Ptr.prototype.FindAllStringSubmatchIndex = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = ($sliceType(($sliceType($Int)))).make(0, 10, function() { return ($sliceType($Int)).nil; });
		re.allMatches(s, ($sliceType($Uint8)).nil, n, (function(match) {
			result = $append(result, match);
		}));
		if (result.length === 0) {
			return ($sliceType(($sliceType($Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllStringSubmatchIndex = function(s, n) { return this.$val.FindAllStringSubmatchIndex(s, n); };
	Regexp.Ptr.prototype.Split = function(s, n) {
		var re, matches, strings$1, beg, end, _ref, _i, match;
		re = this;
		if (n === 0) {
			return ($sliceType($String)).nil;
		}
		if (re.expr.length > 0 && (s.length === 0)) {
			return new ($sliceType($String))([""]);
		}
		matches = re.FindAllStringIndex(s, n);
		strings$1 = ($sliceType($String)).make(0, matches.length, function() { return ""; });
		beg = 0;
		end = 0;
		_ref = matches;
		_i = 0;
		while (_i < _ref.length) {
			match = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (n > 0 && strings$1.length >= (n - 1 >> 0)) {
				break;
			}
			end = ((0 < 0 || 0 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 0]);
			if (!((((1 < 0 || 1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 1]) === 0))) {
				strings$1 = $append(strings$1, s.substring(beg, end));
			}
			beg = ((1 < 0 || 1 >= match.length) ? $throwRuntimeError("index out of range") : match.array[match.offset + 1]);
			_i++;
		}
		if (!((end === s.length))) {
			strings$1 = $append(strings$1, s.substring(beg));
		}
		return strings$1;
	};
	Regexp.prototype.Split = function(s, n) { return this.$val.Split(s, n); };
	$pkg.$init = function() {
		queue.init([["sparse", "sparse", "regexp", ($sliceType($Uint32)), ""], ["dense", "dense", "regexp", ($sliceType(entry)), ""]]);
		entry.init([["pc", "pc", "regexp", $Uint32, ""], ["t", "t", "regexp", ($ptrType(thread)), ""]]);
		thread.init([["inst", "inst", "regexp", ($ptrType(syntax.Inst)), ""], ["cap", "cap", "regexp", ($sliceType($Int)), ""]]);
		($ptrType(machine)).methods = [["add", "add", "regexp", [($ptrType(queue)), $Uint32, $Int, ($sliceType($Int)), syntax.EmptyOp, ($ptrType(thread))], [($ptrType(thread))], false, -1], ["alloc", "alloc", "regexp", [($ptrType(syntax.Inst))], [($ptrType(thread))], false, -1], ["clear", "clear", "regexp", [($ptrType(queue))], [], false, -1], ["free", "free", "regexp", [($ptrType(thread))], [], false, -1], ["init", "init", "regexp", [$Int], [], false, -1], ["match", "match", "regexp", [input, $Int], [$Bool], false, -1], ["newInputBytes", "newInputBytes", "regexp", [($sliceType($Uint8))], [input], false, -1], ["newInputReader", "newInputReader", "regexp", [io.RuneReader], [input], false, -1], ["newInputString", "newInputString", "regexp", [$String], [input], false, -1], ["onepass", "onepass", "regexp", [input, $Int], [$Bool], false, -1], ["step", "step", "regexp", [($ptrType(queue)), ($ptrType(queue)), $Int, $Int, $Int32, syntax.EmptyOp], [], false, -1]];
		machine.init([["re", "re", "regexp", ($ptrType(Regexp)), ""], ["p", "p", "regexp", ($ptrType(syntax.Prog)), ""], ["op", "op", "regexp", ($ptrType(onePassProg)), ""], ["q0", "q0", "regexp", queue, ""], ["q1", "q1", "regexp", queue, ""], ["pool", "pool", "regexp", ($sliceType(($ptrType(thread)))), ""], ["matched", "matched", "regexp", $Bool, ""], ["matchcap", "matchcap", "regexp", ($sliceType($Int)), ""], ["inputBytes", "inputBytes", "regexp", inputBytes, ""], ["inputString", "inputString", "regexp", inputString, ""], ["inputReader", "inputReader", "regexp", inputReader, ""]]);
		onePassProg.init([["Inst", "Inst", "", ($sliceType(onePassInst)), ""], ["Start", "Start", "", $Int, ""], ["NumCap", "NumCap", "", $Int, ""]]);
		($ptrType(onePassInst)).methods = [["MatchEmptyWidth", "MatchEmptyWidth", "", [$Int32, $Int32], [$Bool], false, 0], ["MatchRune", "MatchRune", "", [$Int32], [$Bool], false, 0], ["MatchRunePos", "MatchRunePos", "", [$Int32], [$Int], false, 0], ["String", "String", "", [], [$String], false, 0], ["op", "op", "regexp/syntax", [], [syntax.InstOp], false, 0]];
		onePassInst.init([["Inst", "", "", syntax.Inst, ""], ["Next", "Next", "", ($sliceType($Uint32)), ""]]);
		($ptrType(queueOnePass)).methods = [["clear", "clear", "regexp", [], [], false, -1], ["contains", "contains", "regexp", [$Uint32], [$Bool], false, -1], ["empty", "empty", "regexp", [], [$Bool], false, -1], ["insert", "insert", "regexp", [$Uint32], [], false, -1], ["insertNew", "insertNew", "regexp", [$Uint32], [], false, -1], ["next", "next", "regexp", [], [$Uint32], false, -1], ["reset", "reset", "regexp", [], [], false, -1]];
		queueOnePass.init([["sparse", "sparse", "regexp", ($sliceType($Uint32)), ""], ["dense", "dense", "regexp", ($sliceType($Uint32)), ""], ["size", "size", "regexp", $Uint32, ""], ["nextIndex", "nextIndex", "regexp", $Uint32, ""]]);
		runeSlice.methods = [["Len", "Len", "", [], [$Int], false, -1], ["Less", "Less", "", [$Int, $Int], [$Bool], false, -1], ["Sort", "Sort", "", [], [], false, -1], ["Swap", "Swap", "", [$Int, $Int], [], false, -1]];
		($ptrType(runeSlice)).methods = [["Len", "Len", "", [], [$Int], false, -1], ["Less", "Less", "", [$Int, $Int], [$Bool], false, -1], ["Sort", "Sort", "", [], [], false, -1], ["Swap", "Swap", "", [$Int, $Int], [], false, -1]];
		runeSlice.init($Int32);
		($ptrType(Regexp)).methods = [["Expand", "Expand", "", [($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Int))], [($sliceType($Uint8))], false, -1], ["ExpandString", "ExpandString", "", [($sliceType($Uint8)), $String, $String, ($sliceType($Int))], [($sliceType($Uint8))], false, -1], ["Find", "Find", "", [($sliceType($Uint8))], [($sliceType($Uint8))], false, -1], ["FindAll", "FindAll", "", [($sliceType($Uint8)), $Int], [($sliceType(($sliceType($Uint8))))], false, -1], ["FindAllIndex", "FindAllIndex", "", [($sliceType($Uint8)), $Int], [($sliceType(($sliceType($Int))))], false, -1], ["FindAllString", "FindAllString", "", [$String, $Int], [($sliceType($String))], false, -1], ["FindAllStringIndex", "FindAllStringIndex", "", [$String, $Int], [($sliceType(($sliceType($Int))))], false, -1], ["FindAllStringSubmatch", "FindAllStringSubmatch", "", [$String, $Int], [($sliceType(($sliceType($String))))], false, -1], ["FindAllStringSubmatchIndex", "FindAllStringSubmatchIndex", "", [$String, $Int], [($sliceType(($sliceType($Int))))], false, -1], ["FindAllSubmatch", "FindAllSubmatch", "", [($sliceType($Uint8)), $Int], [($sliceType(($sliceType(($sliceType($Uint8))))))], false, -1], ["FindAllSubmatchIndex", "FindAllSubmatchIndex", "", [($sliceType($Uint8)), $Int], [($sliceType(($sliceType($Int))))], false, -1], ["FindIndex", "FindIndex", "", [($sliceType($Uint8))], [($sliceType($Int))], false, -1], ["FindReaderIndex", "FindReaderIndex", "", [io.RuneReader], [($sliceType($Int))], false, -1], ["FindReaderSubmatchIndex", "FindReaderSubmatchIndex", "", [io.RuneReader], [($sliceType($Int))], false, -1], ["FindString", "FindString", "", [$String], [$String], false, -1], ["FindStringIndex", "FindStringIndex", "", [$String], [($sliceType($Int))], false, -1], ["FindStringSubmatch", "FindStringSubmatch", "", [$String], [($sliceType($String))], false, -1], ["FindStringSubmatchIndex", "FindStringSubmatchIndex", "", [$String], [($sliceType($Int))], false, -1], ["FindSubmatch", "FindSubmatch", "", [($sliceType($Uint8))], [($sliceType(($sliceType($Uint8))))], false, -1], ["FindSubmatchIndex", "FindSubmatchIndex", "", [($sliceType($Uint8))], [($sliceType($Int))], false, -1], ["LiteralPrefix", "LiteralPrefix", "", [], [$String, $Bool], false, -1], ["Longest", "Longest", "", [], [], false, -1], ["Match", "Match", "", [($sliceType($Uint8))], [$Bool], false, -1], ["MatchReader", "MatchReader", "", [io.RuneReader], [$Bool], false, -1], ["MatchString", "MatchString", "", [$String], [$Bool], false, -1], ["NumSubexp", "NumSubexp", "", [], [$Int], false, -1], ["ReplaceAll", "ReplaceAll", "", [($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false, -1], ["ReplaceAllFunc", "ReplaceAllFunc", "", [($sliceType($Uint8)), ($funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false))], [($sliceType($Uint8))], false, -1], ["ReplaceAllLiteral", "ReplaceAllLiteral", "", [($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false, -1], ["ReplaceAllLiteralString", "ReplaceAllLiteralString", "", [$String, $String], [$String], false, -1], ["ReplaceAllString", "ReplaceAllString", "", [$String, $String], [$String], false, -1], ["ReplaceAllStringFunc", "ReplaceAllStringFunc", "", [$String, ($funcType([$String], [$String], false))], [$String], false, -1], ["Split", "Split", "", [$String, $Int], [($sliceType($String))], false, -1], ["String", "String", "", [], [$String], false, -1], ["SubexpNames", "SubexpNames", "", [], [($sliceType($String))], false, -1], ["allMatches", "allMatches", "regexp", [$String, ($sliceType($Uint8)), $Int, ($funcType([($sliceType($Int))], [], false))], [], false, -1], ["doExecute", "doExecute", "regexp", [io.RuneReader, ($sliceType($Uint8)), $String, $Int, $Int], [($sliceType($Int))], false, -1], ["expand", "expand", "regexp", [($sliceType($Uint8)), $String, ($sliceType($Uint8)), $String, ($sliceType($Int))], [($sliceType($Uint8))], false, -1], ["get", "get", "regexp", [], [($ptrType(machine))], false, -1], ["pad", "pad", "regexp", [($sliceType($Int))], [($sliceType($Int))], false, -1], ["put", "put", "regexp", [($ptrType(machine))], [], false, -1], ["replaceAll", "replaceAll", "regexp", [($sliceType($Uint8)), $String, $Int, ($funcType([($sliceType($Uint8)), ($sliceType($Int))], [($sliceType($Uint8))], false))], [($sliceType($Uint8))], false, -1]];
		Regexp.init([["expr", "expr", "regexp", $String, ""], ["prog", "prog", "regexp", ($ptrType(syntax.Prog)), ""], ["onepass", "onepass", "regexp", ($ptrType(onePassProg)), ""], ["prefix", "prefix", "regexp", $String, ""], ["prefixBytes", "prefixBytes", "regexp", ($sliceType($Uint8)), ""], ["prefixComplete", "prefixComplete", "regexp", $Bool, ""], ["prefixRune", "prefixRune", "regexp", $Int32, ""], ["prefixEnd", "prefixEnd", "regexp", $Uint32, ""], ["cond", "cond", "regexp", syntax.EmptyOp, ""], ["numSubexp", "numSubexp", "regexp", $Int, ""], ["subexpNames", "subexpNames", "regexp", ($sliceType($String)), ""], ["longest", "longest", "regexp", $Bool, ""], ["mu", "mu", "regexp", sync.Mutex, ""], ["machine", "machine", "regexp", ($sliceType(($ptrType(machine)))), ""]]);
		input.init([["canCheckPrefix", "canCheckPrefix", "regexp", [], [$Bool], false], ["context", "context", "regexp", [$Int], [syntax.EmptyOp], false], ["hasPrefix", "hasPrefix", "regexp", [($ptrType(Regexp))], [$Bool], false], ["index", "index", "regexp", [($ptrType(Regexp)), $Int], [$Int], false], ["step", "step", "regexp", [$Int], [$Int32, $Int], false]]);
		($ptrType(inputString)).methods = [["canCheckPrefix", "canCheckPrefix", "regexp", [], [$Bool], false, -1], ["context", "context", "regexp", [$Int], [syntax.EmptyOp], false, -1], ["hasPrefix", "hasPrefix", "regexp", [($ptrType(Regexp))], [$Bool], false, -1], ["index", "index", "regexp", [($ptrType(Regexp)), $Int], [$Int], false, -1], ["step", "step", "regexp", [$Int], [$Int32, $Int], false, -1]];
		inputString.init([["str", "str", "regexp", $String, ""]]);
		($ptrType(inputBytes)).methods = [["canCheckPrefix", "canCheckPrefix", "regexp", [], [$Bool], false, -1], ["context", "context", "regexp", [$Int], [syntax.EmptyOp], false, -1], ["hasPrefix", "hasPrefix", "regexp", [($ptrType(Regexp))], [$Bool], false, -1], ["index", "index", "regexp", [($ptrType(Regexp)), $Int], [$Int], false, -1], ["step", "step", "regexp", [$Int], [$Int32, $Int], false, -1]];
		inputBytes.init([["str", "str", "regexp", ($sliceType($Uint8)), ""]]);
		($ptrType(inputReader)).methods = [["canCheckPrefix", "canCheckPrefix", "regexp", [], [$Bool], false, -1], ["context", "context", "regexp", [$Int], [syntax.EmptyOp], false, -1], ["hasPrefix", "hasPrefix", "regexp", [($ptrType(Regexp))], [$Bool], false, -1], ["index", "index", "regexp", [($ptrType(Regexp)), $Int], [$Int], false, -1], ["step", "step", "regexp", [$Int], [$Int32, $Int], false, -1]];
		inputReader.init([["r", "r", "regexp", io.RuneReader, ""], ["atEOT", "atEOT", "regexp", $Bool, ""], ["pos", "pos", "regexp", $Int, ""]]);
		empty = ($sliceType($Int)).make(0, 0, function() { return 0; });
		noRune = new ($sliceType($Int32))([]);
		noNext = new ($sliceType($Uint32))([4294967295]);
		anyRuneNotNL = new ($sliceType($Int32))([0, 9, 11, 1114111]);
		anyRune = new ($sliceType($Int32))([0, 1114111]);
		notOnePass = ($ptrType(onePassProg)).nil;
	};
	return $pkg;
})();
$packages["github.com/mattn/go-runewidth"] = (function() {
	var $pkg = {}, os = $packages["os"], regexp = $packages["regexp"], strings = $packages["strings"], interval, Condition, condition, combining, ambiguous, reLoc, RuneWidth, IsAmbiguousWidth, StringWidth, IsEastAsian;
	interval = $pkg.interval = $newType(0, "Struct", "runewidth.interval", "interval", "github.com/mattn/go-runewidth", function(first_, last_) {
		this.$val = this;
		this.first = first_ !== undefined ? first_ : 0;
		this.last = last_ !== undefined ? last_ : 0;
	});
	Condition = $pkg.Condition = $newType(0, "Struct", "runewidth.Condition", "Condition", "github.com/mattn/go-runewidth", function(EastAsianWidth_) {
		this.$val = this;
		this.EastAsianWidth = EastAsianWidth_ !== undefined ? EastAsianWidth_ : false;
	});
	Condition.Ptr.prototype.RuneWidth = function(r) {
		var c, _ref, _i, iv;
		c = this;
		if (r === 0) {
			return 0;
		}
		if (r < 32 || (r >= 127 && r < 160)) {
			return 1;
		}
		_ref = combining;
		_i = 0;
		while (_i < _ref.length) {
			iv = new interval.Ptr(); $copy(iv, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), interval);
			if (iv.first <= r && r <= iv.last) {
				return 0;
			}
			_i++;
		}
		if (c.EastAsianWidth && IsAmbiguousWidth(r)) {
			return 2;
		}
		if (r >= 4352 && (r <= 4447 || (r === 9001) || (r === 9002) || (r >= 11904 && r <= 42191 && !((r === 12351))) || (r >= 44032 && r <= 55203) || (r >= 63744 && r <= 64255) || (r >= 65072 && r <= 65135) || (r >= 65280 && r <= 65376) || (r >= 65504 && r <= 65510) || (r >= 131072 && r <= 196605) || (r >= 196608 && r <= 262141))) {
			return 2;
		}
		return 1;
	};
	Condition.prototype.RuneWidth = function(r) { return this.$val.RuneWidth(r); };
	Condition.Ptr.prototype.StringWidth = function(s) {
		var width, c, _ref, _i, r;
		width = 0;
		c = this;
		_ref = new ($sliceType($Int32))($stringToRunes(s));
		_i = 0;
		while (_i < _ref.length) {
			r = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			width = width + (c.RuneWidth(r)) >> 0;
			_i++;
		}
		width = width;
		return width;
	};
	Condition.prototype.StringWidth = function(s) { return this.$val.StringWidth(s); };
	Condition.Ptr.prototype.Truncate = function(s, w, tail) {
		var c, i, r, tw, width, cw;
		c = this;
		i = w;
		r = new ($sliceType($Int32))($stringToRunes(s));
		if (i > (r.length - 1 >> 0)) {
			i = r.length - 1 >> 0;
		}
		tw = StringWidth(tail);
		w = w - (tw) >> 0;
		width = StringWidth($runesToString(r));
		if (width < w) {
			return s;
		}
		while (true) {
			if (i <= 0 || width <= w) {
				break;
			}
			cw = RuneWidth(((i < 0 || i >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + i]));
			width = width - (cw) >> 0;
			i = i - 1 >> 0;
		}
		return $runesToString($subslice(r, 0, (i + 1 >> 0))) + tail;
	};
	Condition.prototype.Truncate = function(s, w, tail) { return this.$val.Truncate(s, w, tail); };
	RuneWidth = $pkg.RuneWidth = function(r) {
		condition.EastAsianWidth = $pkg.EastAsianWidth;
		return condition.RuneWidth(r);
	};
	IsAmbiguousWidth = $pkg.IsAmbiguousWidth = function(r) {
		var _ref, _i, iv;
		_ref = ambiguous;
		_i = 0;
		while (_i < _ref.length) {
			iv = new interval.Ptr(); $copy(iv, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), interval);
			if (iv.first <= r && r <= iv.last) {
				return true;
			}
			_i++;
		}
		return false;
	};
	StringWidth = $pkg.StringWidth = function(s) {
		var width;
		width = 0;
		condition.EastAsianWidth = $pkg.EastAsianWidth;
		width = condition.StringWidth(s);
		return width;
	};
	IsEastAsian = $pkg.IsEastAsian = function() {
		var locale, charset, r, _ref, _i, pos, b, mbc_max, _ref$1;
		locale = os.Getenv("LC_CTYPE");
		if (locale === "") {
			locale = os.Getenv("LANG");
		}
		if (locale === "POSIX" || locale === "C") {
			return false;
		}
		if (locale.length > 1 && (locale.charCodeAt(0) === 67) && ((locale.charCodeAt(1) === 46) || (locale.charCodeAt(1) === 45))) {
			return false;
		}
		charset = strings.ToLower(locale);
		r = reLoc.FindStringSubmatch(locale);
		if (r.length === 2) {
			charset = strings.ToLower(((1 < 0 || 1 >= r.length) ? $throwRuntimeError("index out of range") : r.array[r.offset + 1]));
		}
		if (strings.HasSuffix(charset, "@cjk_narrow")) {
			return false;
		}
		_ref = new ($sliceType($Uint8))($stringToBytes(charset));
		_i = 0;
		while (_i < _ref.length) {
			pos = _i;
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (b === 64) {
				charset = charset.substring(0, pos);
				break;
			}
			_i++;
		}
		mbc_max = 1;
		_ref$1 = charset;
		if (_ref$1 === "utf-8" || _ref$1 === "utf8") {
			mbc_max = 6;
		} else if (_ref$1 === "jis") {
			mbc_max = 8;
		} else if (_ref$1 === "eucjp") {
			mbc_max = 3;
		} else if (_ref$1 === "euckr" || _ref$1 === "euccn") {
			mbc_max = 2;
		} else if (_ref$1 === "sjis" || _ref$1 === "cp932" || _ref$1 === "cp51932" || _ref$1 === "cp936" || _ref$1 === "cp949" || _ref$1 === "cp950") {
			mbc_max = 2;
		} else if (_ref$1 === "big5") {
			mbc_max = 2;
		} else if (_ref$1 === "gbk" || _ref$1 === "gb2312") {
			mbc_max = 2;
		}
		if (mbc_max > 1 && (!((charset.charCodeAt(0) === 117)) || strings.HasPrefix(locale, "ja") || strings.HasPrefix(locale, "ko") || strings.HasPrefix(locale, "zh"))) {
			return true;
		}
		return false;
	};
	$pkg.$init = function() {
		interval.init([["first", "first", "github.com/mattn/go-runewidth", $Int32, ""], ["last", "last", "github.com/mattn/go-runewidth", $Int32, ""]]);
		($ptrType(Condition)).methods = [["RuneWidth", "RuneWidth", "", [$Int32], [$Int], false, -1], ["StringWidth", "StringWidth", "", [$String], [$Int], false, -1], ["Truncate", "Truncate", "", [$String, $Int, $String], [$String], false, -1]];
		Condition.init([["EastAsianWidth", "EastAsianWidth", "", $Bool, ""]]);
		combining = new ($sliceType(interval))([new interval.Ptr(768, 879), new interval.Ptr(1155, 1158), new interval.Ptr(1160, 1161), new interval.Ptr(1425, 1469), new interval.Ptr(1471, 1471), new interval.Ptr(1473, 1474), new interval.Ptr(1476, 1477), new interval.Ptr(1479, 1479), new interval.Ptr(1536, 1539), new interval.Ptr(1552, 1557), new interval.Ptr(1611, 1630), new interval.Ptr(1648, 1648), new interval.Ptr(1750, 1764), new interval.Ptr(1767, 1768), new interval.Ptr(1770, 1773), new interval.Ptr(1807, 1807), new interval.Ptr(1809, 1809), new interval.Ptr(1840, 1866), new interval.Ptr(1958, 1968), new interval.Ptr(2027, 2035), new interval.Ptr(2305, 2306), new interval.Ptr(2364, 2364), new interval.Ptr(2369, 2376), new interval.Ptr(2381, 2381), new interval.Ptr(2385, 2388), new interval.Ptr(2402, 2403), new interval.Ptr(2433, 2433), new interval.Ptr(2492, 2492), new interval.Ptr(2497, 2500), new interval.Ptr(2509, 2509), new interval.Ptr(2530, 2531), new interval.Ptr(2561, 2562), new interval.Ptr(2620, 2620), new interval.Ptr(2625, 2626), new interval.Ptr(2631, 2632), new interval.Ptr(2635, 2637), new interval.Ptr(2672, 2673), new interval.Ptr(2689, 2690), new interval.Ptr(2748, 2748), new interval.Ptr(2753, 2757), new interval.Ptr(2759, 2760), new interval.Ptr(2765, 2765), new interval.Ptr(2786, 2787), new interval.Ptr(2817, 2817), new interval.Ptr(2876, 2876), new interval.Ptr(2879, 2879), new interval.Ptr(2881, 2883), new interval.Ptr(2893, 2893), new interval.Ptr(2902, 2902), new interval.Ptr(2946, 2946), new interval.Ptr(3008, 3008), new interval.Ptr(3021, 3021), new interval.Ptr(3134, 3136), new interval.Ptr(3142, 3144), new interval.Ptr(3146, 3149), new interval.Ptr(3157, 3158), new interval.Ptr(3260, 3260), new interval.Ptr(3263, 3263), new interval.Ptr(3270, 3270), new interval.Ptr(3276, 3277), new interval.Ptr(3298, 3299), new interval.Ptr(3393, 3395), new interval.Ptr(3405, 3405), new interval.Ptr(3530, 3530), new interval.Ptr(3538, 3540), new interval.Ptr(3542, 3542), new interval.Ptr(3633, 3633), new interval.Ptr(3636, 3642), new interval.Ptr(3655, 3662), new interval.Ptr(3761, 3761), new interval.Ptr(3764, 3769), new interval.Ptr(3771, 3772), new interval.Ptr(3784, 3789), new interval.Ptr(3864, 3865), new interval.Ptr(3893, 3893), new interval.Ptr(3895, 3895), new interval.Ptr(3897, 3897), new interval.Ptr(3953, 3966), new interval.Ptr(3968, 3972), new interval.Ptr(3974, 3975), new interval.Ptr(3984, 3991), new interval.Ptr(3993, 4028), new interval.Ptr(4038, 4038), new interval.Ptr(4141, 4144), new interval.Ptr(4146, 4146), new interval.Ptr(4150, 4151), new interval.Ptr(4153, 4153), new interval.Ptr(4184, 4185), new interval.Ptr(4448, 4607), new interval.Ptr(4959, 4959), new interval.Ptr(5906, 5908), new interval.Ptr(5938, 5940), new interval.Ptr(5970, 5971), new interval.Ptr(6002, 6003), new interval.Ptr(6068, 6069), new interval.Ptr(6071, 6077), new interval.Ptr(6086, 6086), new interval.Ptr(6089, 6099), new interval.Ptr(6109, 6109), new interval.Ptr(6155, 6157), new interval.Ptr(6313, 6313), new interval.Ptr(6432, 6434), new interval.Ptr(6439, 6440), new interval.Ptr(6450, 6450), new interval.Ptr(6457, 6459), new interval.Ptr(6679, 6680), new interval.Ptr(6912, 6915), new interval.Ptr(6964, 6964), new interval.Ptr(6966, 6970), new interval.Ptr(6972, 6972), new interval.Ptr(6978, 6978), new interval.Ptr(7019, 7027), new interval.Ptr(7616, 7626), new interval.Ptr(7678, 7679), new interval.Ptr(8203, 8207), new interval.Ptr(8234, 8238), new interval.Ptr(8288, 8291), new interval.Ptr(8298, 8303), new interval.Ptr(8400, 8431), new interval.Ptr(12330, 12335), new interval.Ptr(12441, 12442), new interval.Ptr(43014, 43014), new interval.Ptr(43019, 43019), new interval.Ptr(43045, 43046), new interval.Ptr(64286, 64286), new interval.Ptr(65024, 65039), new interval.Ptr(65056, 65059), new interval.Ptr(65279, 65279), new interval.Ptr(65529, 65531), new interval.Ptr(68097, 68099), new interval.Ptr(68101, 68102), new interval.Ptr(68108, 68111), new interval.Ptr(68152, 68154), new interval.Ptr(68159, 68159), new interval.Ptr(119143, 119145), new interval.Ptr(119155, 119170), new interval.Ptr(119173, 119179), new interval.Ptr(119210, 119213), new interval.Ptr(119362, 119364), new interval.Ptr(917505, 917505), new interval.Ptr(917536, 917631), new interval.Ptr(917760, 917999)]);
		ambiguous = new ($sliceType(interval))([new interval.Ptr(161, 161), new interval.Ptr(164, 164), new interval.Ptr(167, 168), new interval.Ptr(170, 170), new interval.Ptr(174, 174), new interval.Ptr(176, 180), new interval.Ptr(182, 186), new interval.Ptr(188, 191), new interval.Ptr(198, 198), new interval.Ptr(208, 208), new interval.Ptr(215, 216), new interval.Ptr(222, 225), new interval.Ptr(230, 230), new interval.Ptr(232, 234), new interval.Ptr(236, 237), new interval.Ptr(240, 240), new interval.Ptr(242, 243), new interval.Ptr(247, 250), new interval.Ptr(252, 252), new interval.Ptr(254, 254), new interval.Ptr(257, 257), new interval.Ptr(273, 273), new interval.Ptr(275, 275), new interval.Ptr(283, 283), new interval.Ptr(294, 295), new interval.Ptr(299, 299), new interval.Ptr(305, 307), new interval.Ptr(312, 312), new interval.Ptr(319, 322), new interval.Ptr(324, 324), new interval.Ptr(328, 331), new interval.Ptr(333, 333), new interval.Ptr(338, 339), new interval.Ptr(358, 359), new interval.Ptr(363, 363), new interval.Ptr(462, 462), new interval.Ptr(464, 464), new interval.Ptr(466, 466), new interval.Ptr(468, 468), new interval.Ptr(470, 470), new interval.Ptr(472, 472), new interval.Ptr(474, 474), new interval.Ptr(476, 476), new interval.Ptr(593, 593), new interval.Ptr(609, 609), new interval.Ptr(708, 708), new interval.Ptr(711, 711), new interval.Ptr(713, 715), new interval.Ptr(717, 717), new interval.Ptr(720, 720), new interval.Ptr(728, 731), new interval.Ptr(733, 733), new interval.Ptr(735, 735), new interval.Ptr(913, 929), new interval.Ptr(931, 937), new interval.Ptr(945, 961), new interval.Ptr(963, 969), new interval.Ptr(1025, 1025), new interval.Ptr(1040, 1103), new interval.Ptr(1105, 1105), new interval.Ptr(8208, 8208), new interval.Ptr(8211, 8214), new interval.Ptr(8216, 8217), new interval.Ptr(8220, 8221), new interval.Ptr(8224, 8226), new interval.Ptr(8228, 8231), new interval.Ptr(8240, 8240), new interval.Ptr(8242, 8243), new interval.Ptr(8245, 8245), new interval.Ptr(8251, 8251), new interval.Ptr(8254, 8254), new interval.Ptr(8308, 8308), new interval.Ptr(8319, 8319), new interval.Ptr(8321, 8324), new interval.Ptr(8364, 8364), new interval.Ptr(8451, 8451), new interval.Ptr(8453, 8453), new interval.Ptr(8457, 8457), new interval.Ptr(8467, 8467), new interval.Ptr(8470, 8470), new interval.Ptr(8481, 8482), new interval.Ptr(8486, 8486), new interval.Ptr(8491, 8491), new interval.Ptr(8531, 8532), new interval.Ptr(8539, 8542), new interval.Ptr(8544, 8555), new interval.Ptr(8560, 8569), new interval.Ptr(8592, 8601), new interval.Ptr(8632, 8633), new interval.Ptr(8658, 8658), new interval.Ptr(8660, 8660), new interval.Ptr(8679, 8679), new interval.Ptr(8704, 8704), new interval.Ptr(8706, 8707), new interval.Ptr(8711, 8712), new interval.Ptr(8715, 8715), new interval.Ptr(8719, 8719), new interval.Ptr(8721, 8721), new interval.Ptr(8725, 8725), new interval.Ptr(8730, 8730), new interval.Ptr(8733, 8736), new interval.Ptr(8739, 8739), new interval.Ptr(8741, 8741), new interval.Ptr(8743, 8748), new interval.Ptr(8750, 8750), new interval.Ptr(8756, 8759), new interval.Ptr(8764, 8765), new interval.Ptr(8776, 8776), new interval.Ptr(8780, 8780), new interval.Ptr(8786, 8786), new interval.Ptr(8800, 8801), new interval.Ptr(8804, 8807), new interval.Ptr(8810, 8811), new interval.Ptr(8814, 8815), new interval.Ptr(8834, 8835), new interval.Ptr(8838, 8839), new interval.Ptr(8853, 8853), new interval.Ptr(8857, 8857), new interval.Ptr(8869, 8869), new interval.Ptr(8895, 8895), new interval.Ptr(8978, 8978), new interval.Ptr(9312, 9449), new interval.Ptr(9451, 9547), new interval.Ptr(9552, 9587), new interval.Ptr(9600, 9615), new interval.Ptr(9618, 9621), new interval.Ptr(9632, 9633), new interval.Ptr(9635, 9641), new interval.Ptr(9650, 9651), new interval.Ptr(9654, 9655), new interval.Ptr(9660, 9661), new interval.Ptr(9664, 9665), new interval.Ptr(9670, 9672), new interval.Ptr(9675, 9675), new interval.Ptr(9678, 9681), new interval.Ptr(9698, 9701), new interval.Ptr(9711, 9711), new interval.Ptr(9733, 9734), new interval.Ptr(9737, 9737), new interval.Ptr(9742, 9743), new interval.Ptr(9748, 9749), new interval.Ptr(9756, 9756), new interval.Ptr(9758, 9758), new interval.Ptr(9792, 9792), new interval.Ptr(9794, 9794), new interval.Ptr(9824, 9825), new interval.Ptr(9827, 9829), new interval.Ptr(9831, 9834), new interval.Ptr(9836, 9837), new interval.Ptr(9839, 9839), new interval.Ptr(10045, 10045), new interval.Ptr(10102, 10111), new interval.Ptr(57344, 63743), new interval.Ptr(65533, 65533), new interval.Ptr(983040, 1048573), new interval.Ptr(1048576, 1114109)]);
		reLoc = regexp.MustCompile("^[a-z][a-z][a-z]?(?:_[A-Z][A-Z])?\\.(.+)");
		$pkg.EastAsianWidth = IsEastAsian();
		condition = new Condition.Ptr($pkg.EastAsianWidth);
	};
	return $pkg;
})();
$packages["code.google.com/p/go.net/html/atom"] = (function() {
	var $pkg = {}, Atom, table, fnv, match, Lookup, String;
	Atom = $pkg.Atom = $newType(4, "Uint32", "atom.Atom", "Atom", "code.google.com/p/go.net/html/atom", null);
	Atom.prototype.String = function() {
		var a, start, n;
		a = this.$val;
		start = ((a >>> 8 >>> 0) >>> 0);
		n = (((a & 255) >>> 0) >>> 0);
		if ((start + n >>> 0) > 1529) {
			return "";
		}
		return "abbradiogrouparamalignmarkbdialogaccept-charsetbodyaccesskeygenavaluealtdescanvasidefaultfootereversedetailsampatternobrowspanoembedfnoframesetitleasyncitemidirnamediagroupingaudioncancelabelooptgrouplaceholderubyautocompleteautofocusandboxmplaintextrackindisabledivarautoplaybasefontimeupdatebdoncanplaythrough1bgsoundlowbrbigblinkblockquoteborderbuttonabortranslatecodefercolgroupostercolorcolspannotation-xmlcommandraggablegendcontrolshapecoordsmallcrossoriginsourcefieldsetfigcaptionafterprintfigurequiredforeignObjectforeignobjectformactionbeforeprintformenctypemustmatchallengeformmethodformnovalidatetimeterformtargeth6heightmlhgroupreloadhiddenoscripthigh2hreflanghttp-equivideonclickiframeimageimglyph3isindexismappletitemrefacenteritemscopeditemtypematheaderspacermaxlength4minmtextareadonlymultiplemutedoncloseamlesspellcheckedoncontextmenuoncuechangeondblclickondragendondragenterondragleaveondragoverondragstarticleondropzonemptiedondurationchangeonendedonerroronfocusrcdoclassectionbluronhashchangeoninputoninvalidonkeydownloadonkeypressrclangonkeyupublicontenteditableonloadeddatalistingonloadedmetadatabindexonloadstartonmessageonmousedownonmousemoveonmouseoutputonmouseoveronmouseuponmousewheelonofflinertononlineonpagehidelonpageshowidth5onpausemaponplayingonpopstateonprogresstrikeytypeonratechangeonresetonresizestrongonscrollonseekedonseekingonselectedonshowraponstalledonstorageonsubmitempropenonsuspendonunloadonvolumechangeonwaitingoptimumanifestepromptoptionbeforeunloaddresstylesummarysupsvgsystemarquee".substring(start, (start + n >>> 0));
	};
	$ptrType(Atom).prototype.String = function() { return new Atom(this.$get()).String(); };
	Atom.prototype.string = function() {
		var a;
		a = this.$val;
		return "abbradiogrouparamalignmarkbdialogaccept-charsetbodyaccesskeygenavaluealtdescanvasidefaultfootereversedetailsampatternobrowspanoembedfnoframesetitleasyncitemidirnamediagroupingaudioncancelabelooptgrouplaceholderubyautocompleteautofocusandboxmplaintextrackindisabledivarautoplaybasefontimeupdatebdoncanplaythrough1bgsoundlowbrbigblinkblockquoteborderbuttonabortranslatecodefercolgroupostercolorcolspannotation-xmlcommandraggablegendcontrolshapecoordsmallcrossoriginsourcefieldsetfigcaptionafterprintfigurequiredforeignObjectforeignobjectformactionbeforeprintformenctypemustmatchallengeformmethodformnovalidatetimeterformtargeth6heightmlhgroupreloadhiddenoscripthigh2hreflanghttp-equivideonclickiframeimageimglyph3isindexismappletitemrefacenteritemscopeditemtypematheaderspacermaxlength4minmtextareadonlymultiplemutedoncloseamlesspellcheckedoncontextmenuoncuechangeondblclickondragendondragenterondragleaveondragoverondragstarticleondropzonemptiedondurationchangeonendedonerroronfocusrcdoclassectionbluronhashchangeoninputoninvalidonkeydownloadonkeypressrclangonkeyupublicontenteditableonloadeddatalistingonloadedmetadatabindexonloadstartonmessageonmousedownonmousemoveonmouseoutputonmouseoveronmouseuponmousewheelonofflinertononlineonpagehidelonpageshowidth5onpausemaponplayingonpopstateonprogresstrikeytypeonratechangeonresetonresizestrongonscrollonseekedonseekingonselectedonshowraponstalledonstorageonsubmitempropenonsuspendonunloadonvolumechangeonwaitingoptimumanifestepromptoptionbeforeunloaddresstylesummarysupsvgsystemarquee".substring((a >>> 8 >>> 0), ((a >>> 8 >>> 0) + ((a & 255) >>> 0) >>> 0));
	};
	$ptrType(Atom).prototype.string = function() { return new Atom(this.$get()).string(); };
	fnv = function(h, s) {
		var _ref, _i, i;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			h = (h ^ ((((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]) >>> 0))) >>> 0;
			h = (((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0;
			_i++;
		}
		return h;
	};
	match = function(s, t) {
		var _ref, _i, i, c;
		_ref = t;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (!((s.charCodeAt(i) === c))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Lookup = $pkg.Lookup = function(s) {
		var h, a, a$1;
		if ((s.length === 0) || s.length > 16) {
			return 0;
		}
		h = fnv(3246237246, s);
		a = table[((h & 511) >>> 0)];
		if (((((a & 255) >>> 0) >> 0) === s.length) && match((new Atom(a)).string(), s)) {
			return a;
		}
		a$1 = table[((((h >>> 16 >>> 0)) & 511) >>> 0)];
		if (((((a$1 & 255) >>> 0) >> 0) === s.length) && match((new Atom(a$1)).string(), s)) {
			return a$1;
		}
		return 0;
	};
	String = $pkg.String = function(s) {
		var a;
		a = Lookup(s);
		if (!((a === 0))) {
			return (new Atom(a)).String();
		}
		return $bytesToString(s);
	};
	$pkg.$init = function() {
		Atom.methods = [["String", "String", "", [], [$String], false, -1], ["string", "string", "code.google.com/p/go.net/html/atom", [], [$String], false, -1]];
		($ptrType(Atom)).methods = [["String", "String", "", [], [$String], false, -1], ["string", "string", "code.google.com/p/go.net/html/atom", [], [$String], false, -1]];
		table = ($arrayType(Atom, 512)).zero(); $copy(table, $toNativeArray("Uint32", [0, 295691, 370441, 0, 376582, 0, 0, 372743, 5636, 0, 186119, 317706, 349446, 106761, 15875, 105223, 0, 2817, 0, 0, 195079, 279304, 0, 27396, 0, 0, 263177, 342536, 95747, 0, 0, 0, 359944, 172042, 386819, 0, 128264, 0, 0, 0, 0, 0, 0, 163591, 139021, 225547, 320514, 358408, 78082, 214541, 0, 178693, 321543, 162310, 43780, 348936, 0, 0, 67331, 0, 0, 0, 0, 0, 39682, 209672, 10247, 20738, 326410, 316931, 389639, 13065, 0, 22790, 184582, 183813, 0, 0, 0, 0, 0, 216836, 12036, 0, 0, 34568, 337159, 83717, 36357, 235783, 0, 77826, 0, 86273, 361476, 202756, 0, 277254, 259589, 70660, 100359, 332295, 81410, 0, 120072, 0, 200707, 67843, 0, 0, 0, 195078, 91394, 95752, 152578, 0, 90119, 14598, 310025, 146953, 184323, 0, 200194, 247559, 198153, 201477, 22533, 71684, 4106, 284164, 37637, 181506, 165890, 169988, 41482, 113158, 268807, 220682, 16389, 0, 45832, 0, 211466, 34565, 0, 82947, 0, 0, 137990, 40195, 0, 203016, 0, 275973, 385031, 82179, 778, 40964, 0, 388358, 0, 99077, 19206, 161284, 0, 346633, 0, 0, 0, 0, 0, 0, 111877, 163843, 75536, 231178, 0, 130317, 0, 30468, 0, 0, 280327, 300294, 0, 215051, 0, 81667, 125698, 362505, 89094, 18436, 0, 253191, 328970, 356105, 194308, 324102, 0, 22018, 28167, 306956, 223241, 53508, 3073, 208391, 155909, 79879, 0, 0, 160262, 0, 257, 192264, 0, 0, 122887, 65544, 0, 0, 387587, 114437, 279300, 0, 312840, 180230, 0, 32517, 63746, 287755, 0, 241680, 0, 0, 0, 0, 0, 75011, 18178, 20229, 169474, 329480, 85002, 0, 47621, 1537, 0, 30471, 0, 0, 0, 324105, 0, 179971, 49160, 273415, 0, 334092, 0, 256012, 25863, 0, 264456, 0, 0, 59655, 0, 273423, 0, 228363, 8454, 349448, 0, 0, 136970, 188166, 0, 282128, 83972, 72452, 115723, 249351, 352772, 273156, 0, 174341, 252165, 0, 0, 366862, 254470, 189705, 383749, 0, 0, 272134, 0, 151822, 351494, 0, 91657, 38660, 190466, 71948, 64772, 157194, 0, 0, 0, 245767, 165382, 11265, 0, 149258, 280324, 0, 159746, 52482, 217867, 133645, 0, 0, 0, 379150, 0, 239369, 94469, 61187, 44805, 6403, 0, 0, 290569, 378118, 17667, 212743, 68616, 0, 514, 152842, 0, 0, 32007, 0, 0, 175367, 292875, 243720, 0, 0, 260873, 190726, 110088, 207109, 0, 322566, 122122, 223238, 168708, 0, 250883, 97542, 0, 101646, 375812, 4, 6918, 0, 4610, 0, 293378, 0, 0, 130307, 118019, 0, 339972, 0, 20999, 6659, 314890, 40199, 144132, 136964, 311557, 75529, 33539, 285704, 0, 0, 32514, 171012, 0, 238088, 266506, 154376, 100356, 1, 277260, 0, 0, 87558, 11781, 150278, 0, 48644, 177158, 0, 195076, 0, 0, 0, 0, 0, 374280, 57609, 93956, 340998, 205064, 3077, 0, 0, 143367, 187652, 61705, 79362, 353801, 0, 0, 167174, 196614, 338952, 301835, 364808, 344584, 0, 144141, 127238, 298506, 163587, 320005, 0, 0, 29700, 0, 0, 28674, 4357, 259079, 0, 0, 270599, 0, 0, 124172, 8462, 38918, 0, 0, 331270, 358915, 63749, 235269, 0, 70664, 0, 0, 0, 0, 0, 118534, 108550, 194821, 0, 190725, 0, 0, 135430, 41477, 101642, 142347, 0, 166664, 0, 339973, 54540, 31236, 34056, 158214, 237574, 250886, 0, 24072, 0, 0, 0, 182023, 0, 0, 169992, 0, 321026, 382215, 0, 0, 0, 198147, 50955, 201736, 0, 304649, 233739]), ($arrayType(Atom, 512)));
	};
	return $pkg;
})();
$packages["code.google.com/p/go.net/html"] = (function() {
	var $pkg = {}, strings = $packages["strings"], bytes = $packages["bytes"], utf8 = $packages["unicode/utf8"], atom = $packages["code.google.com/p/go.net/html/atom"], errors = $packages["errors"], fmt = $packages["fmt"], io = $packages["io"], bufio = $packages["bufio"], strconv = $packages["strconv"], TokenType, Attribute, Token, span, Tokenizer, entity, entity2, replacementTable, plaintextAbort, nul, replacement, unescapeEntity, unescape, lower, escape, EscapeString, readAtLeastOneByte, convertNewlines, NewTokenizer, NewTokenizerFragment;
	TokenType = $pkg.TokenType = $newType(4, "Uint32", "html.TokenType", "TokenType", "code.google.com/p/go.net/html", null);
	Attribute = $pkg.Attribute = $newType(0, "Struct", "html.Attribute", "Attribute", "code.google.com/p/go.net/html", function(Namespace_, Key_, Val_) {
		this.$val = this;
		this.Namespace = Namespace_ !== undefined ? Namespace_ : "";
		this.Key = Key_ !== undefined ? Key_ : "";
		this.Val = Val_ !== undefined ? Val_ : "";
	});
	Token = $pkg.Token = $newType(0, "Struct", "html.Token", "Token", "code.google.com/p/go.net/html", function(Type_, DataAtom_, Data_, Attr_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.DataAtom = DataAtom_ !== undefined ? DataAtom_ : 0;
		this.Data = Data_ !== undefined ? Data_ : "";
		this.Attr = Attr_ !== undefined ? Attr_ : ($sliceType(Attribute)).nil;
	});
	span = $pkg.span = $newType(0, "Struct", "html.span", "span", "code.google.com/p/go.net/html", function(start_, end_) {
		this.$val = this;
		this.start = start_ !== undefined ? start_ : 0;
		this.end = end_ !== undefined ? end_ : 0;
	});
	Tokenizer = $pkg.Tokenizer = $newType(0, "Struct", "html.Tokenizer", "Tokenizer", "code.google.com/p/go.net/html", function(r_, tt_, err_, readErr_, raw_, buf_, maxBuf_, data_, pendingAttr_, attr_, nAttrReturned_, rawTag_, textIsRaw_, convertNUL_, allowCDATA_) {
		this.$val = this;
		this.r = r_ !== undefined ? r_ : null;
		this.tt = tt_ !== undefined ? tt_ : 0;
		this.err = err_ !== undefined ? err_ : null;
		this.readErr = readErr_ !== undefined ? readErr_ : null;
		this.raw = raw_ !== undefined ? raw_ : new span.Ptr();
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.maxBuf = maxBuf_ !== undefined ? maxBuf_ : 0;
		this.data = data_ !== undefined ? data_ : new span.Ptr();
		this.pendingAttr = pendingAttr_ !== undefined ? pendingAttr_ : ($arrayType(span, 2)).zero();
		this.attr = attr_ !== undefined ? attr_ : ($sliceType(($arrayType(span, 2)))).nil;
		this.nAttrReturned = nAttrReturned_ !== undefined ? nAttrReturned_ : 0;
		this.rawTag = rawTag_ !== undefined ? rawTag_ : "";
		this.textIsRaw = textIsRaw_ !== undefined ? textIsRaw_ : false;
		this.convertNUL = convertNUL_ !== undefined ? convertNUL_ : false;
		this.allowCDATA = allowCDATA_ !== undefined ? allowCDATA_ : false;
	});
	unescapeEntity = function(b, dst, src, attribute) {
		var dst1, src1, _tmp, _tmp$1, i, s, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, hex, x, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c$1, entityName, _entry, x$1, _tmp$10, _tmp$11, _entry$1, x$2, dst1$1, _tmp$12, _tmp$13, maxLen, j, _entry$2, x$3, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19;
		dst1 = 0;
		src1 = 0;
		_tmp = 1; _tmp$1 = $subslice(b, src); i = _tmp; s = _tmp$1;
		if (s.length <= 1) {
			(dst < 0 || dst >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + dst] = ((src < 0 || src >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + src]);
			_tmp$2 = dst + 1 >> 0; _tmp$3 = src + 1 >> 0; dst1 = _tmp$2; src1 = _tmp$3;
			return [dst1, src1];
		}
		if (((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]) === 35) {
			if (s.length <= 3) {
				(dst < 0 || dst >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + dst] = ((src < 0 || src >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + src]);
				_tmp$4 = dst + 1 >> 0; _tmp$5 = src + 1 >> 0; dst1 = _tmp$4; src1 = _tmp$5;
				return [dst1, src1];
			}
			i = i + 1 >> 0;
			c = ((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]);
			hex = false;
			if ((c === 120) || (c === 88)) {
				hex = true;
				i = i + 1 >> 0;
			}
			x = 0;
			while (i < s.length) {
				c = ((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]);
				i = i + 1 >> 0;
				if (hex) {
					if (48 <= c && c <= 57) {
						x = (((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
						continue;
					} else if (97 <= c && c <= 102) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 97 >> 0) + 10 >> 0;
						continue;
					} else if (65 <= c && c <= 70) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 65 >> 0) + 10 >> 0;
						continue;
					}
				} else if (48 <= c && c <= 57) {
					x = (((((10 >>> 16 << 16) * x >> 0) + (10 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
					continue;
				}
				if (!((c === 59))) {
					i = i - 1 >> 0;
				}
				break;
			}
			if (i <= 3) {
				(dst < 0 || dst >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + dst] = ((src < 0 || src >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + src]);
				_tmp$6 = dst + 1 >> 0; _tmp$7 = src + 1 >> 0; dst1 = _tmp$6; src1 = _tmp$7;
				return [dst1, src1];
			}
			if (128 <= x && x <= 159) {
				x = replacementTable[(x - 128 >> 0)];
			} else if ((x === 0) || (55296 <= x && x <= 57343) || x > 1114111) {
				x = 65533;
			}
			_tmp$8 = dst + utf8.EncodeRune($subslice(b, dst), x) >> 0; _tmp$9 = src + i >> 0; dst1 = _tmp$8; src1 = _tmp$9;
			return [dst1, src1];
		}
		while (i < s.length) {
			c$1 = ((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]);
			i = i + 1 >> 0;
			if (97 <= c$1 && c$1 <= 122 || 65 <= c$1 && c$1 <= 90 || 48 <= c$1 && c$1 <= 57) {
				continue;
			}
			if (!((c$1 === 59))) {
				i = i - 1 >> 0;
			}
			break;
		}
		entityName = $bytesToString($subslice(s, 1, i));
		if (entityName === "") {
		} else if (attribute && !((entityName.charCodeAt((entityName.length - 1 >> 0)) === 59)) && s.length > i && (((i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i]) === 61)) {
		} else {
			x$1 = (_entry = entity[entityName], _entry !== undefined ? _entry.v : 0);
			if (!((x$1 === 0))) {
				_tmp$10 = dst + utf8.EncodeRune($subslice(b, dst), x$1) >> 0; _tmp$11 = src + i >> 0; dst1 = _tmp$10; src1 = _tmp$11;
				return [dst1, src1];
			} else {
				x$2 = ($arrayType($Int32, 2)).zero(); $copy(x$2, (_entry$1 = entity2[entityName], _entry$1 !== undefined ? _entry$1.v : ($arrayType($Int32, 2)).zero()), ($arrayType($Int32, 2)));
				if (!((x$2[0] === 0))) {
					dst1$1 = dst + utf8.EncodeRune($subslice(b, dst), x$2[0]) >> 0;
					_tmp$12 = dst1$1 + utf8.EncodeRune($subslice(b, dst1$1), x$2[1]) >> 0; _tmp$13 = src + i >> 0; dst1 = _tmp$12; src1 = _tmp$13;
					return [dst1, src1];
				} else if (!attribute) {
					maxLen = entityName.length - 1 >> 0;
					if (maxLen > 6) {
						maxLen = 6;
					}
					j = maxLen;
					while (j > 1) {
						x$3 = (_entry$2 = entity[entityName.substring(0, j)], _entry$2 !== undefined ? _entry$2.v : 0);
						if (!((x$3 === 0))) {
							_tmp$14 = dst + utf8.EncodeRune($subslice(b, dst), x$3) >> 0; _tmp$15 = (src + j >> 0) + 1 >> 0; dst1 = _tmp$14; src1 = _tmp$15;
							return [dst1, src1];
						}
						j = j - 1 >> 0;
					}
				}
			}
		}
		_tmp$16 = dst + i >> 0; _tmp$17 = src + i >> 0; dst1 = _tmp$16; src1 = _tmp$17;
		$copySlice($subslice(b, dst, dst1), $subslice(b, src, src1));
		_tmp$18 = dst1; _tmp$19 = src1; dst1 = _tmp$18; src1 = _tmp$19;
		return [dst1, src1];
	};
	unescape = function(b, attribute) {
		var _ref, _i, i, c, _tuple, dst, src, c$1, _tuple$1, _tmp, _tmp$1;
		_ref = b;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (c === 38) {
				_tuple = unescapeEntity(b, i, i, attribute); dst = _tuple[0]; src = _tuple[1];
				while (src < b.length) {
					c$1 = ((src < 0 || src >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + src]);
					if (c$1 === 38) {
						_tuple$1 = unescapeEntity(b, dst, src, attribute); dst = _tuple$1[0]; src = _tuple$1[1];
					} else {
						(dst < 0 || dst >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + dst] = c$1;
						_tmp = dst + 1 >> 0; _tmp$1 = src + 1 >> 0; dst = _tmp; src = _tmp$1;
					}
				}
				return $subslice(b, 0, dst);
			}
			_i++;
		}
		return b;
	};
	lower = function(b) {
		var _ref, _i, i, c;
		_ref = b;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (65 <= c && c <= 90) {
				(i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b.array[b.offset + i] = (c + 97 << 24 >>> 24) - 65 << 24 >>> 24;
			}
			_i++;
		}
		return b;
	};
	escape = function(w, s) {
		var i, _tuple, err, esc, _ref, _tuple$1, err$1, _tuple$2, err$2;
		i = strings.IndexAny(s, "&'<>\"\r");
		while (!((i === -1))) {
			_tuple = w.WriteString(s.substring(0, i)); err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				return err;
			}
			esc = "";
			_ref = s.charCodeAt(i);
			if (_ref === 38) {
				esc = "&amp;";
			} else if (_ref === 39) {
				esc = "&#39;";
			} else if (_ref === 60) {
				esc = "&lt;";
			} else if (_ref === 62) {
				esc = "&gt;";
			} else if (_ref === 34) {
				esc = "&#34;";
			} else if (_ref === 13) {
				esc = "&#13;";
			} else {
				throw $panic(new $String("unrecognized escape character"));
			}
			s = s.substring((i + 1 >> 0));
			_tuple$1 = w.WriteString(esc); err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, null))) {
				return err$1;
			}
			i = strings.IndexAny(s, "&'<>\"\r");
		}
		_tuple$2 = w.WriteString(s); err$2 = _tuple$2[1];
		return err$2;
	};
	EscapeString = $pkg.EscapeString = function(s) {
		var buf;
		if (strings.IndexAny(s, "&'<>\"\r") === -1) {
			return s;
		}
		buf = new bytes.Buffer.Ptr(); $copy(buf, new bytes.Buffer.Ptr(), bytes.Buffer);
		escape(buf, s);
		return buf.String();
	};
	TokenType.prototype.String = function() {
		var t, _ref;
		t = this.$val;
		_ref = t;
		if (_ref === 0) {
			return "Error";
		} else if (_ref === 1) {
			return "Text";
		} else if (_ref === 2) {
			return "StartTag";
		} else if (_ref === 3) {
			return "EndTag";
		} else if (_ref === 4) {
			return "SelfClosingTag";
		} else if (_ref === 5) {
			return "Comment";
		} else if (_ref === 6) {
			return "Doctype";
		}
		return "Invalid(" + strconv.Itoa((t >> 0)) + ")";
	};
	$ptrType(TokenType).prototype.String = function() { return new TokenType(this.$get()).String(); };
	Token.Ptr.prototype.tagString = function() {
		var t, buf, _ref, _i, a;
		t = new Token.Ptr(); $copy(t, this, Token);
		if (t.Attr.length === 0) {
			return t.Data;
		}
		buf = bytes.NewBufferString(t.Data);
		_ref = t.Attr;
		_i = 0;
		while (_i < _ref.length) {
			a = new Attribute.Ptr(); $copy(a, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]), Attribute);
			buf.WriteByte(32);
			buf.WriteString(a.Key);
			buf.WriteString("=\"");
			escape(buf, a.Val);
			buf.WriteByte(34);
			_i++;
		}
		return buf.String();
	};
	Token.prototype.tagString = function() { return this.$val.tagString(); };
	Token.Ptr.prototype.String = function() {
		var t, _ref;
		t = new Token.Ptr(); $copy(t, this, Token);
		_ref = t.Type;
		if (_ref === 0) {
			return "";
		} else if (_ref === 1) {
			return EscapeString(t.Data);
		} else if (_ref === 2) {
			return "<" + t.tagString() + ">";
		} else if (_ref === 3) {
			return "</" + t.tagString() + ">";
		} else if (_ref === 4) {
			return "<" + t.tagString() + "/>";
		} else if (_ref === 5) {
			return "<!--" + t.Data + "-->";
		} else if (_ref === 6) {
			return "<!DOCTYPE " + t.Data + ">";
		}
		return "Invalid(" + strconv.Itoa((t.Type >> 0)) + ")";
	};
	Token.prototype.String = function() { return this.$val.String(); };
	Tokenizer.Ptr.prototype.AllowCDATA = function(allowCDATA) {
		var z;
		z = this;
		z.allowCDATA = allowCDATA;
	};
	Tokenizer.prototype.AllowCDATA = function(allowCDATA) { return this.$val.AllowCDATA(allowCDATA); };
	Tokenizer.Ptr.prototype.NextIsNotRawText = function() {
		var z;
		z = this;
		z.rawTag = "";
	};
	Tokenizer.prototype.NextIsNotRawText = function() { return this.$val.NextIsNotRawText(); };
	Tokenizer.Ptr.prototype.Err = function() {
		var z;
		z = this;
		if (!((z.tt === 0))) {
			return null;
		}
		return z.err;
	};
	Tokenizer.prototype.Err = function() { return this.$val.Err(); };
	Tokenizer.Ptr.prototype.readByte = function() {
		var z, c, d, buf1, x, _ref, _i, i, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, _tmp, _tmp$1, _tmp$2, n, _tuple, x$9, x$10, x$11;
		z = this;
		if (z.raw.end >= z.buf.length) {
			if (!($interfaceIsEqual(z.readErr, null))) {
				z.err = z.readErr;
				return 0;
			}
			c = z.buf.capacity;
			d = z.raw.end - z.raw.start >> 0;
			buf1 = ($sliceType($Uint8)).nil;
			if (((((2 >>> 16 << 16) * d >> 0) + (2 << 16 >>> 16) * d) >> 0) > c) {
				buf1 = ($sliceType($Uint8)).make(d, ((((2 >>> 16 << 16) * c >> 0) + (2 << 16 >>> 16) * c) >> 0), function() { return 0; });
			} else {
				buf1 = $subslice(z.buf, 0, d);
			}
			$copySlice(buf1, $subslice(z.buf, z.raw.start, z.raw.end));
			x = z.raw.start;
			if (!((x === 0))) {
				z.data.start = z.data.start - (x) >> 0;
				z.data.end = z.data.end - (x) >> 0;
				z.pendingAttr[0].start = z.pendingAttr[0].start - (x) >> 0;
				z.pendingAttr[0].end = z.pendingAttr[0].end - (x) >> 0;
				z.pendingAttr[1].start = z.pendingAttr[1].start - (x) >> 0;
				z.pendingAttr[1].end = z.pendingAttr[1].end - (x) >> 0;
				_ref = z.attr;
				_i = 0;
				while (_i < _ref.length) {
					i = _i;
					(x$2 = z.attr, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + i]))[0].start = (x$1 = z.attr, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + i]))[0].start - (x) >> 0;
					(x$4 = z.attr, ((i < 0 || i >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + i]))[0].end = (x$3 = z.attr, ((i < 0 || i >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + i]))[0].end - (x) >> 0;
					(x$6 = z.attr, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + i]))[1].start = (x$5 = z.attr, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + i]))[1].start - (x) >> 0;
					(x$8 = z.attr, ((i < 0 || i >= x$8.length) ? $throwRuntimeError("index out of range") : x$8.array[x$8.offset + i]))[1].end = (x$7 = z.attr, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + i]))[1].end - (x) >> 0;
					_i++;
				}
			}
			_tmp = 0; _tmp$1 = d; _tmp$2 = $subslice(buf1, 0, d); z.raw.start = _tmp; z.raw.end = _tmp$1; z.buf = _tmp$2;
			n = 0;
			_tuple = readAtLeastOneByte(z.r, $subslice(buf1, d, buf1.capacity)); n = _tuple[0]; z.readErr = _tuple[1];
			if (n === 0) {
				z.err = z.readErr;
				return 0;
			}
			z.buf = $subslice(buf1, 0, (d + n >> 0));
		}
		x$11 = (x$9 = z.buf, x$10 = z.raw.end, ((x$10 < 0 || x$10 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9.array[x$9.offset + x$10]));
		z.raw.end = z.raw.end + 1 >> 0;
		if (z.maxBuf > 0 && (z.raw.end - z.raw.start >> 0) >= z.maxBuf) {
			z.err = $pkg.ErrBufferExceeded;
			return 0;
		}
		return x$11;
	};
	Tokenizer.prototype.readByte = function() { return this.$val.readByte(); };
	Tokenizer.Ptr.prototype.Buffered = function() {
		var z;
		z = this;
		return $subslice(z.buf, z.raw.end);
	};
	Tokenizer.prototype.Buffered = function() { return this.$val.Buffered(); };
	readAtLeastOneByte = function(r, b) {
		var i, _tuple, n, err;
		i = 0;
		while (i < 100) {
			_tuple = r.Read(b); n = _tuple[0]; err = _tuple[1];
			if (!((n === 0)) || !($interfaceIsEqual(err, null))) {
				return [n, err];
			}
			i = i + 1 >> 0;
		}
		return [0, io.ErrNoProgress];
	};
	Tokenizer.Ptr.prototype.skipWhiteSpace = function() {
		var z, c, _ref;
		z = this;
		if (!($interfaceIsEqual(z.err, null))) {
			return;
		}
		while (true) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				return;
			}
			_ref = c;
			if (_ref === 32 || _ref === 10 || _ref === 13 || _ref === 9 || _ref === 12) {
			} else {
				z.raw.end = z.raw.end - 1 >> 0;
				return;
			}
		}
	};
	Tokenizer.prototype.skipWhiteSpace = function() { return this.$val.skipWhiteSpace(); };
	Tokenizer.Ptr.prototype.readRawOrRCDATA = function() {
		var z, c;
		z = this;
		if (z.rawTag === "script") {
			z.readScript();
			z.textIsRaw = true;
			z.rawTag = "";
			return;
		}
		loop:
		while (true) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				break loop;
			}
			if (!((c === 60))) {
				continue loop;
			}
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				break loop;
			}
			if (!((c === 47))) {
				continue loop;
			}
			if (z.readRawEndTag() || !($interfaceIsEqual(z.err, null))) {
				break loop;
			}
		}
		z.data.end = z.raw.end;
		z.textIsRaw = !(z.rawTag === "textarea") && !(z.rawTag === "title");
		z.rawTag = "";
	};
	Tokenizer.prototype.readRawOrRCDATA = function() { return this.$val.readRawOrRCDATA(); };
	Tokenizer.Ptr.prototype.readRawEndTag = function() {
		var z, i, c, c$1, _ref;
		z = this;
		i = 0;
		while (i < z.rawTag.length) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				return false;
			}
			if (!((c === z.rawTag.charCodeAt(i))) && !((c === (z.rawTag.charCodeAt(i) - 32 << 24 >>> 24)))) {
				z.raw.end = z.raw.end - 1 >> 0;
				return false;
			}
			i = i + 1 >> 0;
		}
		c$1 = z.readByte();
		if (!($interfaceIsEqual(z.err, null))) {
			return false;
		}
		_ref = c$1;
		if (_ref === 32 || _ref === 10 || _ref === 13 || _ref === 9 || _ref === 12 || _ref === 47 || _ref === 62) {
			z.raw.end = z.raw.end - ((3 + z.rawTag.length >> 0)) >> 0;
			return true;
		}
		z.raw.end = z.raw.end - 1 >> 0;
		return false;
	};
	Tokenizer.prototype.readRawEndTag = function() { return this.$val.readRawEndTag(); };
	Tokenizer.Ptr.prototype.readScript = function() {
		var $this = this, $args = arguments, z, c, _ref, _ref$1, _ref$2, _ref$3, i, _ref$4, _ref$5, _ref$6, _ref$7;
		var $deferred = [];
		try {
			/* */ var $s = 0, $f = function() { while (true) { switch ($s) { case 0:
			z = $this;
			$deferred.push({ fun: (function() {
				z.data.end = z.raw.end;
			}), args: [] });
			c = 0;
			/* scriptData: */ case 2:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 17; continue; }
				return;
			/* } */ case 17:
			/* if (c === 60) { */ if (c === 60) {} else { $s = 18; continue; }
				/* goto scriptDataLessThanSign */ $s = 1; continue;
			/* } */ case 18:
			/* goto scriptData */ $s = 2; continue;
			/* scriptDataLessThanSign: */ case 1:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 19; continue; }
				return;
			/* } */ case 19:
			_ref = c;
			/* if (_ref === 47) { */ if (_ref === 47) {} else if (_ref === 33) { $s = 20; continue; } else { $s = 21; continue; }
				/* goto scriptDataEndTagOpen */ $s = 3; continue;
			/* } else if (_ref === 33) { */ $s = 21; continue; case 20:
				/* goto scriptDataEscapeStart */ $s = 4; continue;
			/* } */ case 21:
			z.raw.end = z.raw.end - 1 >> 0;
			/* goto scriptData */ $s = 2; continue;
			/* scriptDataEndTagOpen: */ case 3:
			if (z.readRawEndTag() || !($interfaceIsEqual(z.err, null))) {
				return;
			}
			/* goto scriptData */ $s = 2; continue;
			/* scriptDataEscapeStart: */ case 4:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 22; continue; }
				return;
			/* } */ case 22:
			/* if (c === 45) { */ if (c === 45) {} else { $s = 23; continue; }
				/* goto scriptDataEscapeStartDash */ $s = 5; continue;
			/* } */ case 23:
			z.raw.end = z.raw.end - 1 >> 0;
			/* goto scriptData */ $s = 2; continue;
			/* scriptDataEscapeStartDash: */ case 5:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 24; continue; }
				return;
			/* } */ case 24:
			/* if (c === 45) { */ if (c === 45) {} else { $s = 25; continue; }
				/* goto scriptDataEscapedDashDash */ $s = 6; continue;
			/* } */ case 25:
			z.raw.end = z.raw.end - 1 >> 0;
			/* goto scriptData */ $s = 2; continue;
			/* scriptDataEscaped: */ case 9:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 26; continue; }
				return;
			/* } */ case 26:
			_ref$1 = c;
			/* if (_ref$1 === 45) { */ if (_ref$1 === 45) {} else if (_ref$1 === 60) { $s = 27; continue; } else { $s = 28; continue; }
				/* goto scriptDataEscapedDash */ $s = 7; continue;
			/* } else if (_ref$1 === 60) { */ $s = 28; continue; case 27:
				/* goto scriptDataEscapedLessThanSign */ $s = 8; continue;
			/* } */ case 28:
			/* goto scriptDataEscaped */ $s = 9; continue;
			/* scriptDataEscapedDash: */ case 7:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 29; continue; }
				return;
			/* } */ case 29:
			_ref$2 = c;
			/* if (_ref$2 === 45) { */ if (_ref$2 === 45) {} else if (_ref$2 === 60) { $s = 30; continue; } else { $s = 31; continue; }
				/* goto scriptDataEscapedDashDash */ $s = 6; continue;
			/* } else if (_ref$2 === 60) { */ $s = 31; continue; case 30:
				/* goto scriptDataEscapedLessThanSign */ $s = 8; continue;
			/* } */ case 31:
			/* goto scriptDataEscaped */ $s = 9; continue;
			/* scriptDataEscapedDashDash: */ case 6:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 32; continue; }
				return;
			/* } */ case 32:
			_ref$3 = c;
			/* if (_ref$3 === 45) { */ if (_ref$3 === 45) {} else if (_ref$3 === 60) { $s = 33; continue; } else if (_ref$3 === 62) { $s = 34; continue; } else { $s = 35; continue; }
				/* goto scriptDataEscapedDashDash */ $s = 6; continue;
			/* } else if (_ref$3 === 60) { */ $s = 35; continue; case 33:
				/* goto scriptDataEscapedLessThanSign */ $s = 8; continue;
			/* } else if (_ref$3 === 62) { */ $s = 35; continue; case 34:
				/* goto scriptData */ $s = 2; continue;
			/* } */ case 35:
			/* goto scriptDataEscaped */ $s = 9; continue;
			/* scriptDataEscapedLessThanSign: */ case 8:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 36; continue; }
				return;
			/* } */ case 36:
			/* if (c === 47) { */ if (c === 47) {} else { $s = 37; continue; }
				/* goto scriptDataEscapedEndTagOpen */ $s = 10; continue;
			/* } */ case 37:
			/* if (97 <= c && c <= 122 || 65 <= c && c <= 90) { */ if (97 <= c && c <= 122 || 65 <= c && c <= 90) {} else { $s = 38; continue; }
				/* goto scriptDataDoubleEscapeStart */ $s = 11; continue;
			/* } */ case 38:
			z.raw.end = z.raw.end - 1 >> 0;
			/* goto scriptData */ $s = 2; continue;
			/* scriptDataEscapedEndTagOpen: */ case 10:
			if (z.readRawEndTag() || !($interfaceIsEqual(z.err, null))) {
				return;
			}
			/* goto scriptDataEscaped */ $s = 9; continue;
			/* scriptDataDoubleEscapeStart: */ case 11:
			z.raw.end = z.raw.end - 1 >> 0;
			i = 0;
			/* while (i < 6) { */ case 39: if(!(i < 6)) { $s = 40; continue; }
				c = z.readByte();
				/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 41; continue; }
					return;
				/* } */ case 41:
				/* if (!((c === "script".charCodeAt(i))) && !((c === "SCRIPT".charCodeAt(i)))) { */ if (!((c === "script".charCodeAt(i))) && !((c === "SCRIPT".charCodeAt(i)))) {} else { $s = 42; continue; }
					z.raw.end = z.raw.end - 1 >> 0;
					/* goto scriptDataEscaped */ $s = 9; continue;
				/* } */ case 42:
				i = i + 1 >> 0;
			/* } */ $s = 39; continue; case 40:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 43; continue; }
				return;
			/* } */ case 43:
			_ref$4 = c;
			/* if (_ref$4 === 32 || _ref$4 === 10 || _ref$4 === 13 || _ref$4 === 9 || _ref$4 === 12 || _ref$4 === 47 || _ref$4 === 62) { */ if (_ref$4 === 32 || _ref$4 === 10 || _ref$4 === 13 || _ref$4 === 9 || _ref$4 === 12 || _ref$4 === 47 || _ref$4 === 62) {} else { $s = 44; continue; }
				/* goto scriptDataDoubleEscaped */ $s = 12; continue;
			/* } */ case 44:
			z.raw.end = z.raw.end - 1 >> 0;
			/* goto scriptDataEscaped */ $s = 9; continue;
			/* scriptDataDoubleEscaped: */ case 12:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 45; continue; }
				return;
			/* } */ case 45:
			_ref$5 = c;
			/* if (_ref$5 === 45) { */ if (_ref$5 === 45) {} else if (_ref$5 === 60) { $s = 46; continue; } else { $s = 47; continue; }
				/* goto scriptDataDoubleEscapedDash */ $s = 13; continue;
			/* } else if (_ref$5 === 60) { */ $s = 47; continue; case 46:
				/* goto scriptDataDoubleEscapedLessThanSign */ $s = 14; continue;
			/* } */ case 47:
			/* goto scriptDataDoubleEscaped */ $s = 12; continue;
			/* scriptDataDoubleEscapedDash: */ case 13:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 48; continue; }
				return;
			/* } */ case 48:
			_ref$6 = c;
			/* if (_ref$6 === 45) { */ if (_ref$6 === 45) {} else if (_ref$6 === 60) { $s = 49; continue; } else { $s = 50; continue; }
				/* goto scriptDataDoubleEscapedDashDash */ $s = 15; continue;
			/* } else if (_ref$6 === 60) { */ $s = 50; continue; case 49:
				/* goto scriptDataDoubleEscapedLessThanSign */ $s = 14; continue;
			/* } */ case 50:
			/* goto scriptDataDoubleEscaped */ $s = 12; continue;
			/* scriptDataDoubleEscapedDashDash: */ case 15:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 51; continue; }
				return;
			/* } */ case 51:
			_ref$7 = c;
			/* if (_ref$7 === 45) { */ if (_ref$7 === 45) {} else if (_ref$7 === 60) { $s = 52; continue; } else if (_ref$7 === 62) { $s = 53; continue; } else { $s = 54; continue; }
				/* goto scriptDataDoubleEscapedDashDash */ $s = 15; continue;
			/* } else if (_ref$7 === 60) { */ $s = 54; continue; case 52:
				/* goto scriptDataDoubleEscapedLessThanSign */ $s = 14; continue;
			/* } else if (_ref$7 === 62) { */ $s = 54; continue; case 53:
				/* goto scriptData */ $s = 2; continue;
			/* } */ case 54:
			/* goto scriptDataDoubleEscaped */ $s = 12; continue;
			/* scriptDataDoubleEscapedLessThanSign: */ case 14:
			c = z.readByte();
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 55; continue; }
				return;
			/* } */ case 55:
			/* if (c === 47) { */ if (c === 47) {} else { $s = 56; continue; }
				/* goto scriptDataDoubleEscapeEnd */ $s = 16; continue;
			/* } */ case 56:
			z.raw.end = z.raw.end - 1 >> 0;
			/* goto scriptDataDoubleEscaped */ $s = 12; continue;
			/* scriptDataDoubleEscapeEnd: */ case 16:
			/* if (z.readRawEndTag()) { */ if (z.readRawEndTag()) {} else { $s = 57; continue; }
				z.raw.end = z.raw.end + 9 >> 0;
				/* goto scriptDataEscaped */ $s = 9; continue;
			/* } */ case 57:
			/* if (!($interfaceIsEqual(z.err, null))) { */ if (!($interfaceIsEqual(z.err, null))) {} else { $s = 58; continue; }
				return;
			/* } */ case 58:
			/* goto scriptDataDoubleEscaped */ $s = 12; continue;
			/* */ } break; } }; return $f();
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	Tokenizer.prototype.readScript = function() { return this.$val.readScript(); };
	Tokenizer.Ptr.prototype.readComment = function() {
		var z, dashCount, c, _ref;
		var $deferred = [];
		try {
			z = this;
			z.data.start = z.raw.end;
			$deferred.push({ fun: (function() {
				if (z.data.end < z.data.start) {
					z.data.end = z.data.start;
				}
			}), args: [] });
			dashCount = 2;
			while (true) {
				c = z.readByte();
				if (!($interfaceIsEqual(z.err, null))) {
					if (dashCount > 2) {
						dashCount = 2;
					}
					z.data.end = z.raw.end - dashCount >> 0;
					return;
				}
				_ref = c;
				if (_ref === 45) {
					dashCount = dashCount + 1 >> 0;
					continue;
				} else if (_ref === 62) {
					if (dashCount >= 2) {
						z.data.end = z.raw.end - 3 >> 0;
						return;
					}
				} else if (_ref === 33) {
					if (dashCount >= 2) {
						c = z.readByte();
						if (!($interfaceIsEqual(z.err, null))) {
							z.data.end = z.raw.end;
							return;
						}
						if (c === 62) {
							z.data.end = z.raw.end - 4 >> 0;
							return;
						}
					}
				}
				dashCount = 0;
			}
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	Tokenizer.prototype.readComment = function() { return this.$val.readComment(); };
	Tokenizer.Ptr.prototype.readUntilCloseAngle = function() {
		var z, c;
		z = this;
		z.data.start = z.raw.end;
		while (true) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				z.data.end = z.raw.end;
				return;
			}
			if (c === 62) {
				z.data.end = z.raw.end - 1 >> 0;
				return;
			}
		}
	};
	Tokenizer.prototype.readUntilCloseAngle = function() { return this.$val.readUntilCloseAngle(); };
	Tokenizer.Ptr.prototype.readMarkupDeclaration = function() {
		var z, c, i;
		z = this;
		z.data.start = z.raw.end;
		c = ($arrayType($Uint8, 2)).zero(); $copy(c, ($arrayType($Uint8, 2)).zero(), ($arrayType($Uint8, 2)));
		i = 0;
		while (i < 2) {
			c[i] = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				z.data.end = z.raw.end;
				return 5;
			}
			i = i + 1 >> 0;
		}
		if ((c[0] === 45) && (c[1] === 45)) {
			z.readComment();
			return 5;
		}
		z.raw.end = z.raw.end - 2 >> 0;
		if (z.readDoctype()) {
			return 6;
		}
		if (z.allowCDATA && z.readCDATA()) {
			z.convertNUL = true;
			return 1;
		}
		z.readUntilCloseAngle();
		return 5;
	};
	Tokenizer.prototype.readMarkupDeclaration = function() { return this.$val.readMarkupDeclaration(); };
	Tokenizer.Ptr.prototype.readDoctype = function() {
		var z, i, c;
		z = this;
		i = 0;
		while (i < 7) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				z.data.end = z.raw.end;
				return false;
			}
			if (!((c === "DOCTYPE".charCodeAt(i))) && !((c === ("DOCTYPE".charCodeAt(i) + 32 << 24 >>> 24)))) {
				z.raw.end = z.data.start;
				return false;
			}
			i = i + 1 >> 0;
		}
		z.skipWhiteSpace();
		if (!($interfaceIsEqual(z.err, null))) {
			z.data.start = z.raw.end;
			z.data.end = z.raw.end;
			return true;
		}
		z.readUntilCloseAngle();
		return true;
	};
	Tokenizer.prototype.readDoctype = function() { return this.$val.readDoctype(); };
	Tokenizer.Ptr.prototype.readCDATA = function() {
		var z, i, c, brackets, c$1, _ref;
		z = this;
		i = 0;
		while (i < 7) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				z.data.end = z.raw.end;
				return false;
			}
			if (!((c === "[CDATA[".charCodeAt(i)))) {
				z.raw.end = z.data.start;
				return false;
			}
			i = i + 1 >> 0;
		}
		z.data.start = z.raw.end;
		brackets = 0;
		while (true) {
			c$1 = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				z.data.end = z.raw.end;
				return true;
			}
			_ref = c$1;
			if (_ref === 93) {
				brackets = brackets + 1 >> 0;
			} else if (_ref === 62) {
				if (brackets >= 2) {
					z.data.end = z.raw.end - 3 >> 0;
					return true;
				}
				brackets = 0;
			} else {
				brackets = 0;
			}
		}
	};
	Tokenizer.prototype.readCDATA = function() { return this.$val.readCDATA(); };
	Tokenizer.Ptr.prototype.startTagIn = function(ss) {
		var z, _ref, _i, s, i, x, x$1, c;
		z = this;
		_ref = ss;
		_i = 0;
		loop:
		while (_i < _ref.length) {
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (!(((z.data.end - z.data.start >> 0) === s.length))) {
				_i++;
				continue loop;
			}
			i = 0;
			while (i < s.length) {
				c = (x = z.buf, x$1 = z.data.start + i >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1]));
				if (65 <= c && c <= 90) {
					c = c + 32 << 24 >>> 24;
				}
				if (!((c === s.charCodeAt(i)))) {
					_i++;
					continue loop;
				}
				i = i + 1 >> 0;
			}
			return true;
		}
		return false;
	};
	Tokenizer.prototype.startTagIn = function(ss) { return this.$val.startTagIn(ss); };
	Tokenizer.Ptr.prototype.readStartTag = function() {
		var z, _tmp, x, x$1, _tmp$1, c, raw, _ref, x$2, x$3;
		z = this;
		z.readTag(true);
		if (!($interfaceIsEqual(z.err, null))) {
			return 0;
		}
		_tmp = (x = z.buf, x$1 = z.data.start, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])); _tmp$1 = false; c = _tmp; raw = _tmp$1;
		if (65 <= c && c <= 90) {
			c = c + 32 << 24 >>> 24;
		}
		_ref = c;
		if (_ref === 105) {
			raw = z.startTagIn(new ($sliceType($String))(["iframe"]));
		} else if (_ref === 110) {
			raw = z.startTagIn(new ($sliceType($String))(["noembed", "noframes", "noscript"]));
		} else if (_ref === 112) {
			raw = z.startTagIn(new ($sliceType($String))(["plaintext"]));
		} else if (_ref === 115) {
			raw = z.startTagIn(new ($sliceType($String))(["script", "style"]));
		} else if (_ref === 116) {
			raw = z.startTagIn(new ($sliceType($String))(["textarea", "title"]));
		} else if (_ref === 120) {
			raw = z.startTagIn(new ($sliceType($String))(["xmp"]));
		}
		if (raw) {
			z.rawTag = strings.ToLower($bytesToString($subslice(z.buf, z.data.start, z.data.end)));
		}
		if ($interfaceIsEqual(z.err, null) && ((x$2 = z.buf, x$3 = z.raw.end - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + x$3])) === 47)) {
			return 4;
		}
		return 2;
	};
	Tokenizer.prototype.readStartTag = function() { return this.$val.readStartTag(); };
	Tokenizer.Ptr.prototype.readTag = function(saveAttr) {
		var z, c;
		z = this;
		z.attr = $subslice(z.attr, 0, 0);
		z.nAttrReturned = 0;
		z.readTagName();
		z.skipWhiteSpace();
		if (!($interfaceIsEqual(z.err, null))) {
			return;
		}
		while (true) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null)) || (c === 62)) {
				break;
			}
			z.raw.end = z.raw.end - 1 >> 0;
			z.readTagAttrKey();
			z.readTagAttrVal();
			if (saveAttr && !((z.pendingAttr[0].start === z.pendingAttr[0].end))) {
				z.attr = $append(z.attr, z.pendingAttr);
			}
			z.skipWhiteSpace();
			if (!($interfaceIsEqual(z.err, null))) {
				break;
			}
		}
	};
	Tokenizer.prototype.readTag = function(saveAttr) { return this.$val.readTag(saveAttr); };
	Tokenizer.Ptr.prototype.readTagName = function() {
		var z, c, _ref;
		z = this;
		z.data.start = z.raw.end - 1 >> 0;
		while (true) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				z.data.end = z.raw.end;
				return;
			}
			_ref = c;
			if (_ref === 32 || _ref === 10 || _ref === 13 || _ref === 9 || _ref === 12) {
				z.data.end = z.raw.end - 1 >> 0;
				return;
			} else if (_ref === 47 || _ref === 62) {
				z.raw.end = z.raw.end - 1 >> 0;
				z.data.end = z.raw.end;
				return;
			}
		}
	};
	Tokenizer.prototype.readTagName = function() { return this.$val.readTagName(); };
	Tokenizer.Ptr.prototype.readTagAttrKey = function() {
		var z, c, _ref;
		z = this;
		z.pendingAttr[0].start = z.raw.end;
		while (true) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				z.pendingAttr[0].end = z.raw.end;
				return;
			}
			_ref = c;
			if (_ref === 32 || _ref === 10 || _ref === 13 || _ref === 9 || _ref === 12 || _ref === 47) {
				z.pendingAttr[0].end = z.raw.end - 1 >> 0;
				return;
			} else if (_ref === 61 || _ref === 62) {
				z.raw.end = z.raw.end - 1 >> 0;
				z.pendingAttr[0].end = z.raw.end;
				return;
			}
		}
	};
	Tokenizer.prototype.readTagAttrKey = function() { return this.$val.readTagAttrKey(); };
	Tokenizer.Ptr.prototype.readTagAttrVal = function() {
		var z, c, quote, _ref, c$1, c$2, _ref$1;
		z = this;
		z.pendingAttr[1].start = z.raw.end;
		z.pendingAttr[1].end = z.raw.end;
		z.skipWhiteSpace();
		if (!($interfaceIsEqual(z.err, null))) {
			return;
		}
		c = z.readByte();
		if (!($interfaceIsEqual(z.err, null))) {
			return;
		}
		if (!((c === 61))) {
			z.raw.end = z.raw.end - 1 >> 0;
			return;
		}
		z.skipWhiteSpace();
		if (!($interfaceIsEqual(z.err, null))) {
			return;
		}
		quote = z.readByte();
		if (!($interfaceIsEqual(z.err, null))) {
			return;
		}
		_ref = quote;
		if (_ref === 62) {
			z.raw.end = z.raw.end - 1 >> 0;
			return;
		} else if (_ref === 39 || _ref === 34) {
			z.pendingAttr[1].start = z.raw.end;
			while (true) {
				c$1 = z.readByte();
				if (!($interfaceIsEqual(z.err, null))) {
					z.pendingAttr[1].end = z.raw.end;
					return;
				}
				if (c$1 === quote) {
					z.pendingAttr[1].end = z.raw.end - 1 >> 0;
					return;
				}
			}
		} else {
			z.pendingAttr[1].start = z.raw.end - 1 >> 0;
			while (true) {
				c$2 = z.readByte();
				if (!($interfaceIsEqual(z.err, null))) {
					z.pendingAttr[1].end = z.raw.end;
					return;
				}
				_ref$1 = c$2;
				if (_ref$1 === 32 || _ref$1 === 10 || _ref$1 === 13 || _ref$1 === 9 || _ref$1 === 12) {
					z.pendingAttr[1].end = z.raw.end - 1 >> 0;
					return;
				} else if (_ref$1 === 62) {
					z.raw.end = z.raw.end - 1 >> 0;
					z.pendingAttr[1].end = z.raw.end;
					return;
				}
			}
		}
	};
	Tokenizer.prototype.readTagAttrVal = function() { return this.$val.readTagAttrVal(); };
	Tokenizer.Ptr.prototype.Next = function() {
		var z, c, tokenType, x, _ref;
		z = this;
		z.raw.start = z.raw.end;
		z.data.start = z.raw.end;
		z.data.end = z.raw.end;
		if (!($interfaceIsEqual(z.err, null))) {
			z.tt = 0;
			return z.tt;
		}
		if (!(z.rawTag === "")) {
			if (z.rawTag === "plaintext") {
				while ($interfaceIsEqual(z.err, null)) {
					z.readByte();
				}
				z.data.end = z.raw.end;
				z.textIsRaw = true;
			} else {
				z.readRawOrRCDATA();
			}
			if (z.data.end > z.data.start) {
				z.tt = 1;
				z.convertNUL = true;
				return z.tt;
			}
		}
		z.textIsRaw = false;
		z.convertNUL = false;
		loop:
		while (true) {
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				break loop;
			}
			if (!((c === 60))) {
				continue loop;
			}
			c = z.readByte();
			if (!($interfaceIsEqual(z.err, null))) {
				break loop;
			}
			tokenType = 0;
			if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
				tokenType = 2;
			} else if (c === 47) {
				tokenType = 3;
			} else if ((c === 33) || (c === 63)) {
				tokenType = 5;
			} else {
				z.raw.end = z.raw.end - 1 >> 0;
				continue;
			}
			x = z.raw.end - 2 >> 0;
			if (z.raw.start < x) {
				z.raw.end = x;
				z.data.end = x;
				z.tt = 1;
				return z.tt;
			}
			_ref = tokenType;
			if (_ref === 2) {
				z.tt = z.readStartTag();
				return z.tt;
			} else if (_ref === 3) {
				c = z.readByte();
				if (!($interfaceIsEqual(z.err, null))) {
					break loop;
				}
				if (c === 62) {
					z.tt = 5;
					return z.tt;
				}
				if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
					z.readTag(false);
					if (!($interfaceIsEqual(z.err, null))) {
						z.tt = 0;
					} else {
						z.tt = 3;
					}
					return z.tt;
				}
				z.raw.end = z.raw.end - 1 >> 0;
				z.readUntilCloseAngle();
				z.tt = 5;
				return z.tt;
			} else if (_ref === 5) {
				if (c === 33) {
					z.tt = z.readMarkupDeclaration();
					return z.tt;
				}
				z.raw.end = z.raw.end - 1 >> 0;
				z.readUntilCloseAngle();
				z.tt = 5;
				return z.tt;
			}
		}
		if (z.raw.start < z.raw.end) {
			z.data.end = z.raw.end;
			z.tt = 1;
			return z.tt;
		}
		z.tt = 0;
		return z.tt;
	};
	Tokenizer.prototype.Next = function() { return this.$val.Next(); };
	Tokenizer.Ptr.prototype.Raw = function() {
		var z;
		z = this;
		return $subslice(z.buf, z.raw.start, z.raw.end);
	};
	Tokenizer.prototype.Raw = function() { return this.$val.Raw(); };
	convertNewlines = function(s) {
		var _ref, _i, i, c, src, dst, x;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (!((c === 13))) {
				_i++;
				continue;
			}
			src = i + 1 >> 0;
			if (src >= s.length || !((((src < 0 || src >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + src]) === 10))) {
				(i < 0 || i >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + i] = 10;
				_i++;
				continue;
			}
			dst = i;
			while (src < s.length) {
				if (((src < 0 || src >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + src]) === 13) {
					if ((src + 1 >> 0) < s.length && ((x = src + 1 >> 0, ((x < 0 || x >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + x])) === 10)) {
						src = src + 1 >> 0;
					}
					(dst < 0 || dst >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + dst] = 10;
				} else {
					(dst < 0 || dst >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + dst] = ((src < 0 || src >= s.length) ? $throwRuntimeError("index out of range") : s.array[s.offset + src]);
				}
				src = src + 1 >> 0;
				dst = dst + 1 >> 0;
			}
			return $subslice(s, 0, dst);
		}
		return s;
	};
	Tokenizer.Ptr.prototype.Text = function() {
		var z, _ref, s;
		z = this;
		_ref = z.tt;
		if (_ref === 1 || _ref === 5 || _ref === 6) {
			s = $subslice(z.buf, z.data.start, z.data.end);
			z.data.start = z.raw.end;
			z.data.end = z.raw.end;
			s = convertNewlines(s);
			if ((z.convertNUL || (z.tt === 5)) && bytes.Contains(s, nul)) {
				s = bytes.Replace(s, nul, replacement, -1);
			}
			if (!z.textIsRaw) {
				s = unescape(s, false);
			}
			return s;
		}
		return ($sliceType($Uint8)).nil;
	};
	Tokenizer.prototype.Text = function() { return this.$val.Text(); };
	Tokenizer.Ptr.prototype.TagName = function() {
		var name, hasAttr, z, _ref, s, _tmp, _tmp$1, _tmp$2, _tmp$3;
		name = ($sliceType($Uint8)).nil;
		hasAttr = false;
		z = this;
		if (z.data.start < z.data.end) {
			_ref = z.tt;
			if (_ref === 2 || _ref === 3 || _ref === 4) {
				s = $subslice(z.buf, z.data.start, z.data.end);
				z.data.start = z.raw.end;
				z.data.end = z.raw.end;
				_tmp = lower(s); _tmp$1 = z.nAttrReturned < z.attr.length; name = _tmp; hasAttr = _tmp$1;
				return [name, hasAttr];
			}
		}
		_tmp$2 = ($sliceType($Uint8)).nil; _tmp$3 = false; name = _tmp$2; hasAttr = _tmp$3;
		return [name, hasAttr];
	};
	Tokenizer.prototype.TagName = function() { return this.$val.TagName(); };
	Tokenizer.Ptr.prototype.TagAttr = function() {
		var key, val, moreAttr, z, _ref, x, x$1, x$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		key = ($sliceType($Uint8)).nil;
		val = ($sliceType($Uint8)).nil;
		moreAttr = false;
		z = this;
		if (z.nAttrReturned < z.attr.length) {
			_ref = z.tt;
			if (_ref === 2 || _ref === 4) {
				x$2 = ($arrayType(span, 2)).zero(); $copy(x$2, (x = z.attr, x$1 = z.nAttrReturned, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1])), ($arrayType(span, 2)));
				z.nAttrReturned = z.nAttrReturned + 1 >> 0;
				key = $subslice(z.buf, x$2[0].start, x$2[0].end);
				val = $subslice(z.buf, x$2[1].start, x$2[1].end);
				_tmp = lower(key); _tmp$1 = unescape(convertNewlines(val), true); _tmp$2 = z.nAttrReturned < z.attr.length; key = _tmp; val = _tmp$1; moreAttr = _tmp$2;
				return [key, val, moreAttr];
			}
		}
		_tmp$3 = ($sliceType($Uint8)).nil; _tmp$4 = ($sliceType($Uint8)).nil; _tmp$5 = false; key = _tmp$3; val = _tmp$4; moreAttr = _tmp$5;
		return [key, val, moreAttr];
	};
	Tokenizer.prototype.TagAttr = function() { return this.$val.TagAttr(); };
	Tokenizer.Ptr.prototype.Token = function() {
		var z, t, _ref, _tuple, name, moreAttr, _tmp, _tmp$1, key, val, _tuple$1, a, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		z = this;
		t = new Token.Ptr(); $copy(t, new Token.Ptr(z.tt, 0, "", ($sliceType(Attribute)).nil), Token);
		_ref = z.tt;
		if (_ref === 1 || _ref === 5 || _ref === 6) {
			t.Data = $bytesToString(z.Text());
		} else if (_ref === 2 || _ref === 4 || _ref === 3) {
			_tuple = z.TagName(); name = _tuple[0]; moreAttr = _tuple[1];
			while (moreAttr) {
				_tmp = ($sliceType($Uint8)).nil; _tmp$1 = ($sliceType($Uint8)).nil; key = _tmp; val = _tmp$1;
				_tuple$1 = z.TagAttr(); key = _tuple$1[0]; val = _tuple$1[1]; moreAttr = _tuple$1[2];
				t.Attr = $append(t.Attr, new Attribute.Ptr("", atom.String(key), $bytesToString(val)));
			}
			a = atom.Lookup(name);
			if (!((a === 0))) {
				_tmp$2 = a; _tmp$3 = (new atom.Atom(a)).String(); t.DataAtom = _tmp$2; t.Data = _tmp$3;
			} else {
				_tmp$4 = 0; _tmp$5 = $bytesToString(name); t.DataAtom = _tmp$4; t.Data = _tmp$5;
			}
		}
		return t;
	};
	Tokenizer.prototype.Token = function() { return this.$val.Token(); };
	Tokenizer.Ptr.prototype.SetMaxBuf = function(n) {
		var z;
		z = this;
		z.maxBuf = n;
	};
	Tokenizer.prototype.SetMaxBuf = function(n) { return this.$val.SetMaxBuf(n); };
	NewTokenizer = $pkg.NewTokenizer = function(r) {
		return NewTokenizerFragment(r, "");
	};
	NewTokenizerFragment = $pkg.NewTokenizerFragment = function(r, contextTag) {
		var z, s, _ref;
		z = new Tokenizer.Ptr(r, 0, null, null, new span.Ptr(), ($sliceType($Uint8)).make(0, 4096, function() { return 0; }), 0, new span.Ptr(), ($arrayType(span, 2)).zero(), ($sliceType(($arrayType(span, 2)))).nil, 0, "", false, false, false);
		if (!(contextTag === "")) {
			s = strings.ToLower(contextTag);
			_ref = s;
			if (_ref === "iframe" || _ref === "noembed" || _ref === "noframes" || _ref === "noscript" || _ref === "plaintext" || _ref === "script" || _ref === "style" || _ref === "title" || _ref === "textarea" || _ref === "xmp") {
				z.rawTag = s;
			}
		}
		return z;
	};
	$pkg.$init = function() {
		TokenType.methods = [["String", "String", "", [], [$String], false, -1]];
		($ptrType(TokenType)).methods = [["String", "String", "", [], [$String], false, -1]];
		Attribute.init([["Namespace", "Namespace", "", $String, ""], ["Key", "Key", "", $String, ""], ["Val", "Val", "", $String, ""]]);
		Token.methods = [["String", "String", "", [], [$String], false, -1], ["tagString", "tagString", "code.google.com/p/go.net/html", [], [$String], false, -1]];
		($ptrType(Token)).methods = [["String", "String", "", [], [$String], false, -1], ["tagString", "tagString", "code.google.com/p/go.net/html", [], [$String], false, -1]];
		Token.init([["Type", "Type", "", TokenType, ""], ["DataAtom", "DataAtom", "", atom.Atom, ""], ["Data", "Data", "", $String, ""], ["Attr", "Attr", "", ($sliceType(Attribute)), ""]]);
		span.init([["start", "start", "code.google.com/p/go.net/html", $Int, ""], ["end", "end", "code.google.com/p/go.net/html", $Int, ""]]);
		($ptrType(Tokenizer)).methods = [["AllowCDATA", "AllowCDATA", "", [$Bool], [], false, -1], ["Buffered", "Buffered", "", [], [($sliceType($Uint8))], false, -1], ["Err", "Err", "", [], [$error], false, -1], ["Next", "Next", "", [], [TokenType], false, -1], ["NextIsNotRawText", "NextIsNotRawText", "", [], [], false, -1], ["Raw", "Raw", "", [], [($sliceType($Uint8))], false, -1], ["SetMaxBuf", "SetMaxBuf", "", [$Int], [], false, -1], ["TagAttr", "TagAttr", "", [], [($sliceType($Uint8)), ($sliceType($Uint8)), $Bool], false, -1], ["TagName", "TagName", "", [], [($sliceType($Uint8)), $Bool], false, -1], ["Text", "Text", "", [], [($sliceType($Uint8))], false, -1], ["Token", "Token", "", [], [Token], false, -1], ["readByte", "readByte", "code.google.com/p/go.net/html", [], [$Uint8], false, -1], ["readCDATA", "readCDATA", "code.google.com/p/go.net/html", [], [$Bool], false, -1], ["readComment", "readComment", "code.google.com/p/go.net/html", [], [], false, -1], ["readDoctype", "readDoctype", "code.google.com/p/go.net/html", [], [$Bool], false, -1], ["readMarkupDeclaration", "readMarkupDeclaration", "code.google.com/p/go.net/html", [], [TokenType], false, -1], ["readRawEndTag", "readRawEndTag", "code.google.com/p/go.net/html", [], [$Bool], false, -1], ["readRawOrRCDATA", "readRawOrRCDATA", "code.google.com/p/go.net/html", [], [], false, -1], ["readScript", "readScript", "code.google.com/p/go.net/html", [], [], false, -1], ["readStartTag", "readStartTag", "code.google.com/p/go.net/html", [], [TokenType], false, -1], ["readTag", "readTag", "code.google.com/p/go.net/html", [$Bool], [], false, -1], ["readTagAttrKey", "readTagAttrKey", "code.google.com/p/go.net/html", [], [], false, -1], ["readTagAttrVal", "readTagAttrVal", "code.google.com/p/go.net/html", [], [], false, -1], ["readTagName", "readTagName", "code.google.com/p/go.net/html", [], [], false, -1], ["readUntilCloseAngle", "readUntilCloseAngle", "code.google.com/p/go.net/html", [], [], false, -1], ["skipWhiteSpace", "skipWhiteSpace", "code.google.com/p/go.net/html", [], [], false, -1], ["startTagIn", "startTagIn", "code.google.com/p/go.net/html", [($sliceType($String))], [$Bool], true, -1]];
		Tokenizer.init([["r", "r", "code.google.com/p/go.net/html", io.Reader, ""], ["tt", "tt", "code.google.com/p/go.net/html", TokenType, ""], ["err", "err", "code.google.com/p/go.net/html", $error, ""], ["readErr", "readErr", "code.google.com/p/go.net/html", $error, ""], ["raw", "raw", "code.google.com/p/go.net/html", span, ""], ["buf", "buf", "code.google.com/p/go.net/html", ($sliceType($Uint8)), ""], ["maxBuf", "maxBuf", "code.google.com/p/go.net/html", $Int, ""], ["data", "data", "code.google.com/p/go.net/html", span, ""], ["pendingAttr", "pendingAttr", "code.google.com/p/go.net/html", ($arrayType(span, 2)), ""], ["attr", "attr", "code.google.com/p/go.net/html", ($sliceType(($arrayType(span, 2)))), ""], ["nAttrReturned", "nAttrReturned", "code.google.com/p/go.net/html", $Int, ""], ["rawTag", "rawTag", "code.google.com/p/go.net/html", $String, ""], ["textIsRaw", "textIsRaw", "code.google.com/p/go.net/html", $Bool, ""], ["convertNUL", "convertNUL", "code.google.com/p/go.net/html", $Bool, ""], ["allowCDATA", "allowCDATA", "code.google.com/p/go.net/html", $Bool, ""]]);
		var _map$1, _key$1;
		entity = (_map$1 = new $Map(), _key$1 = "AElig;", _map$1[_key$1] = { k: _key$1, v: 198 }, _key$1 = "AMP;", _map$1[_key$1] = { k: _key$1, v: 38 }, _key$1 = "Aacute;", _map$1[_key$1] = { k: _key$1, v: 193 }, _key$1 = "Abreve;", _map$1[_key$1] = { k: _key$1, v: 258 }, _key$1 = "Acirc;", _map$1[_key$1] = { k: _key$1, v: 194 }, _key$1 = "Acy;", _map$1[_key$1] = { k: _key$1, v: 1040 }, _key$1 = "Afr;", _map$1[_key$1] = { k: _key$1, v: 120068 }, _key$1 = "Agrave;", _map$1[_key$1] = { k: _key$1, v: 192 }, _key$1 = "Alpha;", _map$1[_key$1] = { k: _key$1, v: 913 }, _key$1 = "Amacr;", _map$1[_key$1] = { k: _key$1, v: 256 }, _key$1 = "And;", _map$1[_key$1] = { k: _key$1, v: 10835 }, _key$1 = "Aogon;", _map$1[_key$1] = { k: _key$1, v: 260 }, _key$1 = "Aopf;", _map$1[_key$1] = { k: _key$1, v: 120120 }, _key$1 = "ApplyFunction;", _map$1[_key$1] = { k: _key$1, v: 8289 }, _key$1 = "Aring;", _map$1[_key$1] = { k: _key$1, v: 197 }, _key$1 = "Ascr;", _map$1[_key$1] = { k: _key$1, v: 119964 }, _key$1 = "Assign;", _map$1[_key$1] = { k: _key$1, v: 8788 }, _key$1 = "Atilde;", _map$1[_key$1] = { k: _key$1, v: 195 }, _key$1 = "Auml;", _map$1[_key$1] = { k: _key$1, v: 196 }, _key$1 = "Backslash;", _map$1[_key$1] = { k: _key$1, v: 8726 }, _key$1 = "Barv;", _map$1[_key$1] = { k: _key$1, v: 10983 }, _key$1 = "Barwed;", _map$1[_key$1] = { k: _key$1, v: 8966 }, _key$1 = "Bcy;", _map$1[_key$1] = { k: _key$1, v: 1041 }, _key$1 = "Because;", _map$1[_key$1] = { k: _key$1, v: 8757 }, _key$1 = "Bernoullis;", _map$1[_key$1] = { k: _key$1, v: 8492 }, _key$1 = "Beta;", _map$1[_key$1] = { k: _key$1, v: 914 }, _key$1 = "Bfr;", _map$1[_key$1] = { k: _key$1, v: 120069 }, _key$1 = "Bopf;", _map$1[_key$1] = { k: _key$1, v: 120121 }, _key$1 = "Breve;", _map$1[_key$1] = { k: _key$1, v: 728 }, _key$1 = "Bscr;", _map$1[_key$1] = { k: _key$1, v: 8492 }, _key$1 = "Bumpeq;", _map$1[_key$1] = { k: _key$1, v: 8782 }, _key$1 = "CHcy;", _map$1[_key$1] = { k: _key$1, v: 1063 }, _key$1 = "COPY;", _map$1[_key$1] = { k: _key$1, v: 169 }, _key$1 = "Cacute;", _map$1[_key$1] = { k: _key$1, v: 262 }, _key$1 = "Cap;", _map$1[_key$1] = { k: _key$1, v: 8914 }, _key$1 = "CapitalDifferentialD;", _map$1[_key$1] = { k: _key$1, v: 8517 }, _key$1 = "Cayleys;", _map$1[_key$1] = { k: _key$1, v: 8493 }, _key$1 = "Ccaron;", _map$1[_key$1] = { k: _key$1, v: 268 }, _key$1 = "Ccedil;", _map$1[_key$1] = { k: _key$1, v: 199 }, _key$1 = "Ccirc;", _map$1[_key$1] = { k: _key$1, v: 264 }, _key$1 = "Cconint;", _map$1[_key$1] = { k: _key$1, v: 8752 }, _key$1 = "Cdot;", _map$1[_key$1] = { k: _key$1, v: 266 }, _key$1 = "Cedilla;", _map$1[_key$1] = { k: _key$1, v: 184 }, _key$1 = "CenterDot;", _map$1[_key$1] = { k: _key$1, v: 183 }, _key$1 = "Cfr;", _map$1[_key$1] = { k: _key$1, v: 8493 }, _key$1 = "Chi;", _map$1[_key$1] = { k: _key$1, v: 935 }, _key$1 = "CircleDot;", _map$1[_key$1] = { k: _key$1, v: 8857 }, _key$1 = "CircleMinus;", _map$1[_key$1] = { k: _key$1, v: 8854 }, _key$1 = "CirclePlus;", _map$1[_key$1] = { k: _key$1, v: 8853 }, _key$1 = "CircleTimes;", _map$1[_key$1] = { k: _key$1, v: 8855 }, _key$1 = "ClockwiseContourIntegral;", _map$1[_key$1] = { k: _key$1, v: 8754 }, _key$1 = "CloseCurlyDoubleQuote;", _map$1[_key$1] = { k: _key$1, v: 8221 }, _key$1 = "CloseCurlyQuote;", _map$1[_key$1] = { k: _key$1, v: 8217 }, _key$1 = "Colon;", _map$1[_key$1] = { k: _key$1, v: 8759 }, _key$1 = "Colone;", _map$1[_key$1] = { k: _key$1, v: 10868 }, _key$1 = "Congruent;", _map$1[_key$1] = { k: _key$1, v: 8801 }, _key$1 = "Conint;", _map$1[_key$1] = { k: _key$1, v: 8751 }, _key$1 = "ContourIntegral;", _map$1[_key$1] = { k: _key$1, v: 8750 }, _key$1 = "Copf;", _map$1[_key$1] = { k: _key$1, v: 8450 }, _key$1 = "Coproduct;", _map$1[_key$1] = { k: _key$1, v: 8720 }, _key$1 = "CounterClockwiseContourIntegral;", _map$1[_key$1] = { k: _key$1, v: 8755 }, _key$1 = "Cross;", _map$1[_key$1] = { k: _key$1, v: 10799 }, _key$1 = "Cscr;", _map$1[_key$1] = { k: _key$1, v: 119966 }, _key$1 = "Cup;", _map$1[_key$1] = { k: _key$1, v: 8915 }, _key$1 = "CupCap;", _map$1[_key$1] = { k: _key$1, v: 8781 }, _key$1 = "DD;", _map$1[_key$1] = { k: _key$1, v: 8517 }, _key$1 = "DDotrahd;", _map$1[_key$1] = { k: _key$1, v: 10513 }, _key$1 = "DJcy;", _map$1[_key$1] = { k: _key$1, v: 1026 }, _key$1 = "DScy;", _map$1[_key$1] = { k: _key$1, v: 1029 }, _key$1 = "DZcy;", _map$1[_key$1] = { k: _key$1, v: 1039 }, _key$1 = "Dagger;", _map$1[_key$1] = { k: _key$1, v: 8225 }, _key$1 = "Darr;", _map$1[_key$1] = { k: _key$1, v: 8609 }, _key$1 = "Dashv;", _map$1[_key$1] = { k: _key$1, v: 10980 }, _key$1 = "Dcaron;", _map$1[_key$1] = { k: _key$1, v: 270 }, _key$1 = "Dcy;", _map$1[_key$1] = { k: _key$1, v: 1044 }, _key$1 = "Del;", _map$1[_key$1] = { k: _key$1, v: 8711 }, _key$1 = "Delta;", _map$1[_key$1] = { k: _key$1, v: 916 }, _key$1 = "Dfr;", _map$1[_key$1] = { k: _key$1, v: 120071 }, _key$1 = "DiacriticalAcute;", _map$1[_key$1] = { k: _key$1, v: 180 }, _key$1 = "DiacriticalDot;", _map$1[_key$1] = { k: _key$1, v: 729 }, _key$1 = "DiacriticalDoubleAcute;", _map$1[_key$1] = { k: _key$1, v: 733 }, _key$1 = "DiacriticalGrave;", _map$1[_key$1] = { k: _key$1, v: 96 }, _key$1 = "DiacriticalTilde;", _map$1[_key$1] = { k: _key$1, v: 732 }, _key$1 = "Diamond;", _map$1[_key$1] = { k: _key$1, v: 8900 }, _key$1 = "DifferentialD;", _map$1[_key$1] = { k: _key$1, v: 8518 }, _key$1 = "Dopf;", _map$1[_key$1] = { k: _key$1, v: 120123 }, _key$1 = "Dot;", _map$1[_key$1] = { k: _key$1, v: 168 }, _key$1 = "DotDot;", _map$1[_key$1] = { k: _key$1, v: 8412 }, _key$1 = "DotEqual;", _map$1[_key$1] = { k: _key$1, v: 8784 }, _key$1 = "DoubleContourIntegral;", _map$1[_key$1] = { k: _key$1, v: 8751 }, _key$1 = "DoubleDot;", _map$1[_key$1] = { k: _key$1, v: 168 }, _key$1 = "DoubleDownArrow;", _map$1[_key$1] = { k: _key$1, v: 8659 }, _key$1 = "DoubleLeftArrow;", _map$1[_key$1] = { k: _key$1, v: 8656 }, _key$1 = "DoubleLeftRightArrow;", _map$1[_key$1] = { k: _key$1, v: 8660 }, _key$1 = "DoubleLeftTee;", _map$1[_key$1] = { k: _key$1, v: 10980 }, _key$1 = "DoubleLongLeftArrow;", _map$1[_key$1] = { k: _key$1, v: 10232 }, _key$1 = "DoubleLongLeftRightArrow;", _map$1[_key$1] = { k: _key$1, v: 10234 }, _key$1 = "DoubleLongRightArrow;", _map$1[_key$1] = { k: _key$1, v: 10233 }, _key$1 = "DoubleRightArrow;", _map$1[_key$1] = { k: _key$1, v: 8658 }, _key$1 = "DoubleRightTee;", _map$1[_key$1] = { k: _key$1, v: 8872 }, _key$1 = "DoubleUpArrow;", _map$1[_key$1] = { k: _key$1, v: 8657 }, _key$1 = "DoubleUpDownArrow;", _map$1[_key$1] = { k: _key$1, v: 8661 }, _key$1 = "DoubleVerticalBar;", _map$1[_key$1] = { k: _key$1, v: 8741 }, _key$1 = "DownArrow;", _map$1[_key$1] = { k: _key$1, v: 8595 }, _key$1 = "DownArrowBar;", _map$1[_key$1] = { k: _key$1, v: 10515 }, _key$1 = "DownArrowUpArrow;", _map$1[_key$1] = { k: _key$1, v: 8693 }, _key$1 = "DownBreve;", _map$1[_key$1] = { k: _key$1, v: 785 }, _key$1 = "DownLeftRightVector;", _map$1[_key$1] = { k: _key$1, v: 10576 }, _key$1 = "DownLeftTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10590 }, _key$1 = "DownLeftVector;", _map$1[_key$1] = { k: _key$1, v: 8637 }, _key$1 = "DownLeftVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10582 }, _key$1 = "DownRightTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10591 }, _key$1 = "DownRightVector;", _map$1[_key$1] = { k: _key$1, v: 8641 }, _key$1 = "DownRightVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10583 }, _key$1 = "DownTee;", _map$1[_key$1] = { k: _key$1, v: 8868 }, _key$1 = "DownTeeArrow;", _map$1[_key$1] = { k: _key$1, v: 8615 }, _key$1 = "Downarrow;", _map$1[_key$1] = { k: _key$1, v: 8659 }, _key$1 = "Dscr;", _map$1[_key$1] = { k: _key$1, v: 119967 }, _key$1 = "Dstrok;", _map$1[_key$1] = { k: _key$1, v: 272 }, _key$1 = "ENG;", _map$1[_key$1] = { k: _key$1, v: 330 }, _key$1 = "ETH;", _map$1[_key$1] = { k: _key$1, v: 208 }, _key$1 = "Eacute;", _map$1[_key$1] = { k: _key$1, v: 201 }, _key$1 = "Ecaron;", _map$1[_key$1] = { k: _key$1, v: 282 }, _key$1 = "Ecirc;", _map$1[_key$1] = { k: _key$1, v: 202 }, _key$1 = "Ecy;", _map$1[_key$1] = { k: _key$1, v: 1069 }, _key$1 = "Edot;", _map$1[_key$1] = { k: _key$1, v: 278 }, _key$1 = "Efr;", _map$1[_key$1] = { k: _key$1, v: 120072 }, _key$1 = "Egrave;", _map$1[_key$1] = { k: _key$1, v: 200 }, _key$1 = "Element;", _map$1[_key$1] = { k: _key$1, v: 8712 }, _key$1 = "Emacr;", _map$1[_key$1] = { k: _key$1, v: 274 }, _key$1 = "EmptySmallSquare;", _map$1[_key$1] = { k: _key$1, v: 9723 }, _key$1 = "EmptyVerySmallSquare;", _map$1[_key$1] = { k: _key$1, v: 9643 }, _key$1 = "Eogon;", _map$1[_key$1] = { k: _key$1, v: 280 }, _key$1 = "Eopf;", _map$1[_key$1] = { k: _key$1, v: 120124 }, _key$1 = "Epsilon;", _map$1[_key$1] = { k: _key$1, v: 917 }, _key$1 = "Equal;", _map$1[_key$1] = { k: _key$1, v: 10869 }, _key$1 = "EqualTilde;", _map$1[_key$1] = { k: _key$1, v: 8770 }, _key$1 = "Equilibrium;", _map$1[_key$1] = { k: _key$1, v: 8652 }, _key$1 = "Escr;", _map$1[_key$1] = { k: _key$1, v: 8496 }, _key$1 = "Esim;", _map$1[_key$1] = { k: _key$1, v: 10867 }, _key$1 = "Eta;", _map$1[_key$1] = { k: _key$1, v: 919 }, _key$1 = "Euml;", _map$1[_key$1] = { k: _key$1, v: 203 }, _key$1 = "Exists;", _map$1[_key$1] = { k: _key$1, v: 8707 }, _key$1 = "ExponentialE;", _map$1[_key$1] = { k: _key$1, v: 8519 }, _key$1 = "Fcy;", _map$1[_key$1] = { k: _key$1, v: 1060 }, _key$1 = "Ffr;", _map$1[_key$1] = { k: _key$1, v: 120073 }, _key$1 = "FilledSmallSquare;", _map$1[_key$1] = { k: _key$1, v: 9724 }, _key$1 = "FilledVerySmallSquare;", _map$1[_key$1] = { k: _key$1, v: 9642 }, _key$1 = "Fopf;", _map$1[_key$1] = { k: _key$1, v: 120125 }, _key$1 = "ForAll;", _map$1[_key$1] = { k: _key$1, v: 8704 }, _key$1 = "Fouriertrf;", _map$1[_key$1] = { k: _key$1, v: 8497 }, _key$1 = "Fscr;", _map$1[_key$1] = { k: _key$1, v: 8497 }, _key$1 = "GJcy;", _map$1[_key$1] = { k: _key$1, v: 1027 }, _key$1 = "GT;", _map$1[_key$1] = { k: _key$1, v: 62 }, _key$1 = "Gamma;", _map$1[_key$1] = { k: _key$1, v: 915 }, _key$1 = "Gammad;", _map$1[_key$1] = { k: _key$1, v: 988 }, _key$1 = "Gbreve;", _map$1[_key$1] = { k: _key$1, v: 286 }, _key$1 = "Gcedil;", _map$1[_key$1] = { k: _key$1, v: 290 }, _key$1 = "Gcirc;", _map$1[_key$1] = { k: _key$1, v: 284 }, _key$1 = "Gcy;", _map$1[_key$1] = { k: _key$1, v: 1043 }, _key$1 = "Gdot;", _map$1[_key$1] = { k: _key$1, v: 288 }, _key$1 = "Gfr;", _map$1[_key$1] = { k: _key$1, v: 120074 }, _key$1 = "Gg;", _map$1[_key$1] = { k: _key$1, v: 8921 }, _key$1 = "Gopf;", _map$1[_key$1] = { k: _key$1, v: 120126 }, _key$1 = "GreaterEqual;", _map$1[_key$1] = { k: _key$1, v: 8805 }, _key$1 = "GreaterEqualLess;", _map$1[_key$1] = { k: _key$1, v: 8923 }, _key$1 = "GreaterFullEqual;", _map$1[_key$1] = { k: _key$1, v: 8807 }, _key$1 = "GreaterGreater;", _map$1[_key$1] = { k: _key$1, v: 10914 }, _key$1 = "GreaterLess;", _map$1[_key$1] = { k: _key$1, v: 8823 }, _key$1 = "GreaterSlantEqual;", _map$1[_key$1] = { k: _key$1, v: 10878 }, _key$1 = "GreaterTilde;", _map$1[_key$1] = { k: _key$1, v: 8819 }, _key$1 = "Gscr;", _map$1[_key$1] = { k: _key$1, v: 119970 }, _key$1 = "Gt;", _map$1[_key$1] = { k: _key$1, v: 8811 }, _key$1 = "HARDcy;", _map$1[_key$1] = { k: _key$1, v: 1066 }, _key$1 = "Hacek;", _map$1[_key$1] = { k: _key$1, v: 711 }, _key$1 = "Hat;", _map$1[_key$1] = { k: _key$1, v: 94 }, _key$1 = "Hcirc;", _map$1[_key$1] = { k: _key$1, v: 292 }, _key$1 = "Hfr;", _map$1[_key$1] = { k: _key$1, v: 8460 }, _key$1 = "HilbertSpace;", _map$1[_key$1] = { k: _key$1, v: 8459 }, _key$1 = "Hopf;", _map$1[_key$1] = { k: _key$1, v: 8461 }, _key$1 = "HorizontalLine;", _map$1[_key$1] = { k: _key$1, v: 9472 }, _key$1 = "Hscr;", _map$1[_key$1] = { k: _key$1, v: 8459 }, _key$1 = "Hstrok;", _map$1[_key$1] = { k: _key$1, v: 294 }, _key$1 = "HumpDownHump;", _map$1[_key$1] = { k: _key$1, v: 8782 }, _key$1 = "HumpEqual;", _map$1[_key$1] = { k: _key$1, v: 8783 }, _key$1 = "IEcy;", _map$1[_key$1] = { k: _key$1, v: 1045 }, _key$1 = "IJlig;", _map$1[_key$1] = { k: _key$1, v: 306 }, _key$1 = "IOcy;", _map$1[_key$1] = { k: _key$1, v: 1025 }, _key$1 = "Iacute;", _map$1[_key$1] = { k: _key$1, v: 205 }, _key$1 = "Icirc;", _map$1[_key$1] = { k: _key$1, v: 206 }, _key$1 = "Icy;", _map$1[_key$1] = { k: _key$1, v: 1048 }, _key$1 = "Idot;", _map$1[_key$1] = { k: _key$1, v: 304 }, _key$1 = "Ifr;", _map$1[_key$1] = { k: _key$1, v: 8465 }, _key$1 = "Igrave;", _map$1[_key$1] = { k: _key$1, v: 204 }, _key$1 = "Im;", _map$1[_key$1] = { k: _key$1, v: 8465 }, _key$1 = "Imacr;", _map$1[_key$1] = { k: _key$1, v: 298 }, _key$1 = "ImaginaryI;", _map$1[_key$1] = { k: _key$1, v: 8520 }, _key$1 = "Implies;", _map$1[_key$1] = { k: _key$1, v: 8658 }, _key$1 = "Int;", _map$1[_key$1] = { k: _key$1, v: 8748 }, _key$1 = "Integral;", _map$1[_key$1] = { k: _key$1, v: 8747 }, _key$1 = "Intersection;", _map$1[_key$1] = { k: _key$1, v: 8898 }, _key$1 = "InvisibleComma;", _map$1[_key$1] = { k: _key$1, v: 8291 }, _key$1 = "InvisibleTimes;", _map$1[_key$1] = { k: _key$1, v: 8290 }, _key$1 = "Iogon;", _map$1[_key$1] = { k: _key$1, v: 302 }, _key$1 = "Iopf;", _map$1[_key$1] = { k: _key$1, v: 120128 }, _key$1 = "Iota;", _map$1[_key$1] = { k: _key$1, v: 921 }, _key$1 = "Iscr;", _map$1[_key$1] = { k: _key$1, v: 8464 }, _key$1 = "Itilde;", _map$1[_key$1] = { k: _key$1, v: 296 }, _key$1 = "Iukcy;", _map$1[_key$1] = { k: _key$1, v: 1030 }, _key$1 = "Iuml;", _map$1[_key$1] = { k: _key$1, v: 207 }, _key$1 = "Jcirc;", _map$1[_key$1] = { k: _key$1, v: 308 }, _key$1 = "Jcy;", _map$1[_key$1] = { k: _key$1, v: 1049 }, _key$1 = "Jfr;", _map$1[_key$1] = { k: _key$1, v: 120077 }, _key$1 = "Jopf;", _map$1[_key$1] = { k: _key$1, v: 120129 }, _key$1 = "Jscr;", _map$1[_key$1] = { k: _key$1, v: 119973 }, _key$1 = "Jsercy;", _map$1[_key$1] = { k: _key$1, v: 1032 }, _key$1 = "Jukcy;", _map$1[_key$1] = { k: _key$1, v: 1028 }, _key$1 = "KHcy;", _map$1[_key$1] = { k: _key$1, v: 1061 }, _key$1 = "KJcy;", _map$1[_key$1] = { k: _key$1, v: 1036 }, _key$1 = "Kappa;", _map$1[_key$1] = { k: _key$1, v: 922 }, _key$1 = "Kcedil;", _map$1[_key$1] = { k: _key$1, v: 310 }, _key$1 = "Kcy;", _map$1[_key$1] = { k: _key$1, v: 1050 }, _key$1 = "Kfr;", _map$1[_key$1] = { k: _key$1, v: 120078 }, _key$1 = "Kopf;", _map$1[_key$1] = { k: _key$1, v: 120130 }, _key$1 = "Kscr;", _map$1[_key$1] = { k: _key$1, v: 119974 }, _key$1 = "LJcy;", _map$1[_key$1] = { k: _key$1, v: 1033 }, _key$1 = "LT;", _map$1[_key$1] = { k: _key$1, v: 60 }, _key$1 = "Lacute;", _map$1[_key$1] = { k: _key$1, v: 313 }, _key$1 = "Lambda;", _map$1[_key$1] = { k: _key$1, v: 923 }, _key$1 = "Lang;", _map$1[_key$1] = { k: _key$1, v: 10218 }, _key$1 = "Laplacetrf;", _map$1[_key$1] = { k: _key$1, v: 8466 }, _key$1 = "Larr;", _map$1[_key$1] = { k: _key$1, v: 8606 }, _key$1 = "Lcaron;", _map$1[_key$1] = { k: _key$1, v: 317 }, _key$1 = "Lcedil;", _map$1[_key$1] = { k: _key$1, v: 315 }, _key$1 = "Lcy;", _map$1[_key$1] = { k: _key$1, v: 1051 }, _key$1 = "LeftAngleBracket;", _map$1[_key$1] = { k: _key$1, v: 10216 }, _key$1 = "LeftArrow;", _map$1[_key$1] = { k: _key$1, v: 8592 }, _key$1 = "LeftArrowBar;", _map$1[_key$1] = { k: _key$1, v: 8676 }, _key$1 = "LeftArrowRightArrow;", _map$1[_key$1] = { k: _key$1, v: 8646 }, _key$1 = "LeftCeiling;", _map$1[_key$1] = { k: _key$1, v: 8968 }, _key$1 = "LeftDoubleBracket;", _map$1[_key$1] = { k: _key$1, v: 10214 }, _key$1 = "LeftDownTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10593 }, _key$1 = "LeftDownVector;", _map$1[_key$1] = { k: _key$1, v: 8643 }, _key$1 = "LeftDownVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10585 }, _key$1 = "LeftFloor;", _map$1[_key$1] = { k: _key$1, v: 8970 }, _key$1 = "LeftRightArrow;", _map$1[_key$1] = { k: _key$1, v: 8596 }, _key$1 = "LeftRightVector;", _map$1[_key$1] = { k: _key$1, v: 10574 }, _key$1 = "LeftTee;", _map$1[_key$1] = { k: _key$1, v: 8867 }, _key$1 = "LeftTeeArrow;", _map$1[_key$1] = { k: _key$1, v: 8612 }, _key$1 = "LeftTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10586 }, _key$1 = "LeftTriangle;", _map$1[_key$1] = { k: _key$1, v: 8882 }, _key$1 = "LeftTriangleBar;", _map$1[_key$1] = { k: _key$1, v: 10703 }, _key$1 = "LeftTriangleEqual;", _map$1[_key$1] = { k: _key$1, v: 8884 }, _key$1 = "LeftUpDownVector;", _map$1[_key$1] = { k: _key$1, v: 10577 }, _key$1 = "LeftUpTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10592 }, _key$1 = "LeftUpVector;", _map$1[_key$1] = { k: _key$1, v: 8639 }, _key$1 = "LeftUpVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10584 }, _key$1 = "LeftVector;", _map$1[_key$1] = { k: _key$1, v: 8636 }, _key$1 = "LeftVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10578 }, _key$1 = "Leftarrow;", _map$1[_key$1] = { k: _key$1, v: 8656 }, _key$1 = "Leftrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8660 }, _key$1 = "LessEqualGreater;", _map$1[_key$1] = { k: _key$1, v: 8922 }, _key$1 = "LessFullEqual;", _map$1[_key$1] = { k: _key$1, v: 8806 }, _key$1 = "LessGreater;", _map$1[_key$1] = { k: _key$1, v: 8822 }, _key$1 = "LessLess;", _map$1[_key$1] = { k: _key$1, v: 10913 }, _key$1 = "LessSlantEqual;", _map$1[_key$1] = { k: _key$1, v: 10877 }, _key$1 = "LessTilde;", _map$1[_key$1] = { k: _key$1, v: 8818 }, _key$1 = "Lfr;", _map$1[_key$1] = { k: _key$1, v: 120079 }, _key$1 = "Ll;", _map$1[_key$1] = { k: _key$1, v: 8920 }, _key$1 = "Lleftarrow;", _map$1[_key$1] = { k: _key$1, v: 8666 }, _key$1 = "Lmidot;", _map$1[_key$1] = { k: _key$1, v: 319 }, _key$1 = "LongLeftArrow;", _map$1[_key$1] = { k: _key$1, v: 10229 }, _key$1 = "LongLeftRightArrow;", _map$1[_key$1] = { k: _key$1, v: 10231 }, _key$1 = "LongRightArrow;", _map$1[_key$1] = { k: _key$1, v: 10230 }, _key$1 = "Longleftarrow;", _map$1[_key$1] = { k: _key$1, v: 10232 }, _key$1 = "Longleftrightarrow;", _map$1[_key$1] = { k: _key$1, v: 10234 }, _key$1 = "Longrightarrow;", _map$1[_key$1] = { k: _key$1, v: 10233 }, _key$1 = "Lopf;", _map$1[_key$1] = { k: _key$1, v: 120131 }, _key$1 = "LowerLeftArrow;", _map$1[_key$1] = { k: _key$1, v: 8601 }, _key$1 = "LowerRightArrow;", _map$1[_key$1] = { k: _key$1, v: 8600 }, _key$1 = "Lscr;", _map$1[_key$1] = { k: _key$1, v: 8466 }, _key$1 = "Lsh;", _map$1[_key$1] = { k: _key$1, v: 8624 }, _key$1 = "Lstrok;", _map$1[_key$1] = { k: _key$1, v: 321 }, _key$1 = "Lt;", _map$1[_key$1] = { k: _key$1, v: 8810 }, _key$1 = "Map;", _map$1[_key$1] = { k: _key$1, v: 10501 }, _key$1 = "Mcy;", _map$1[_key$1] = { k: _key$1, v: 1052 }, _key$1 = "MediumSpace;", _map$1[_key$1] = { k: _key$1, v: 8287 }, _key$1 = "Mellintrf;", _map$1[_key$1] = { k: _key$1, v: 8499 }, _key$1 = "Mfr;", _map$1[_key$1] = { k: _key$1, v: 120080 }, _key$1 = "MinusPlus;", _map$1[_key$1] = { k: _key$1, v: 8723 }, _key$1 = "Mopf;", _map$1[_key$1] = { k: _key$1, v: 120132 }, _key$1 = "Mscr;", _map$1[_key$1] = { k: _key$1, v: 8499 }, _key$1 = "Mu;", _map$1[_key$1] = { k: _key$1, v: 924 }, _key$1 = "NJcy;", _map$1[_key$1] = { k: _key$1, v: 1034 }, _key$1 = "Nacute;", _map$1[_key$1] = { k: _key$1, v: 323 }, _key$1 = "Ncaron;", _map$1[_key$1] = { k: _key$1, v: 327 }, _key$1 = "Ncedil;", _map$1[_key$1] = { k: _key$1, v: 325 }, _key$1 = "Ncy;", _map$1[_key$1] = { k: _key$1, v: 1053 }, _key$1 = "NegativeMediumSpace;", _map$1[_key$1] = { k: _key$1, v: 8203 }, _key$1 = "NegativeThickSpace;", _map$1[_key$1] = { k: _key$1, v: 8203 }, _key$1 = "NegativeThinSpace;", _map$1[_key$1] = { k: _key$1, v: 8203 }, _key$1 = "NegativeVeryThinSpace;", _map$1[_key$1] = { k: _key$1, v: 8203 }, _key$1 = "NestedGreaterGreater;", _map$1[_key$1] = { k: _key$1, v: 8811 }, _key$1 = "NestedLessLess;", _map$1[_key$1] = { k: _key$1, v: 8810 }, _key$1 = "NewLine;", _map$1[_key$1] = { k: _key$1, v: 10 }, _key$1 = "Nfr;", _map$1[_key$1] = { k: _key$1, v: 120081 }, _key$1 = "NoBreak;", _map$1[_key$1] = { k: _key$1, v: 8288 }, _key$1 = "NonBreakingSpace;", _map$1[_key$1] = { k: _key$1, v: 160 }, _key$1 = "Nopf;", _map$1[_key$1] = { k: _key$1, v: 8469 }, _key$1 = "Not;", _map$1[_key$1] = { k: _key$1, v: 10988 }, _key$1 = "NotCongruent;", _map$1[_key$1] = { k: _key$1, v: 8802 }, _key$1 = "NotCupCap;", _map$1[_key$1] = { k: _key$1, v: 8813 }, _key$1 = "NotDoubleVerticalBar;", _map$1[_key$1] = { k: _key$1, v: 8742 }, _key$1 = "NotElement;", _map$1[_key$1] = { k: _key$1, v: 8713 }, _key$1 = "NotEqual;", _map$1[_key$1] = { k: _key$1, v: 8800 }, _key$1 = "NotExists;", _map$1[_key$1] = { k: _key$1, v: 8708 }, _key$1 = "NotGreater;", _map$1[_key$1] = { k: _key$1, v: 8815 }, _key$1 = "NotGreaterEqual;", _map$1[_key$1] = { k: _key$1, v: 8817 }, _key$1 = "NotGreaterLess;", _map$1[_key$1] = { k: _key$1, v: 8825 }, _key$1 = "NotGreaterTilde;", _map$1[_key$1] = { k: _key$1, v: 8821 }, _key$1 = "NotLeftTriangle;", _map$1[_key$1] = { k: _key$1, v: 8938 }, _key$1 = "NotLeftTriangleEqual;", _map$1[_key$1] = { k: _key$1, v: 8940 }, _key$1 = "NotLess;", _map$1[_key$1] = { k: _key$1, v: 8814 }, _key$1 = "NotLessEqual;", _map$1[_key$1] = { k: _key$1, v: 8816 }, _key$1 = "NotLessGreater;", _map$1[_key$1] = { k: _key$1, v: 8824 }, _key$1 = "NotLessTilde;", _map$1[_key$1] = { k: _key$1, v: 8820 }, _key$1 = "NotPrecedes;", _map$1[_key$1] = { k: _key$1, v: 8832 }, _key$1 = "NotPrecedesSlantEqual;", _map$1[_key$1] = { k: _key$1, v: 8928 }, _key$1 = "NotReverseElement;", _map$1[_key$1] = { k: _key$1, v: 8716 }, _key$1 = "NotRightTriangle;", _map$1[_key$1] = { k: _key$1, v: 8939 }, _key$1 = "NotRightTriangleEqual;", _map$1[_key$1] = { k: _key$1, v: 8941 }, _key$1 = "NotSquareSubsetEqual;", _map$1[_key$1] = { k: _key$1, v: 8930 }, _key$1 = "NotSquareSupersetEqual;", _map$1[_key$1] = { k: _key$1, v: 8931 }, _key$1 = "NotSubsetEqual;", _map$1[_key$1] = { k: _key$1, v: 8840 }, _key$1 = "NotSucceeds;", _map$1[_key$1] = { k: _key$1, v: 8833 }, _key$1 = "NotSucceedsSlantEqual;", _map$1[_key$1] = { k: _key$1, v: 8929 }, _key$1 = "NotSupersetEqual;", _map$1[_key$1] = { k: _key$1, v: 8841 }, _key$1 = "NotTilde;", _map$1[_key$1] = { k: _key$1, v: 8769 }, _key$1 = "NotTildeEqual;", _map$1[_key$1] = { k: _key$1, v: 8772 }, _key$1 = "NotTildeFullEqual;", _map$1[_key$1] = { k: _key$1, v: 8775 }, _key$1 = "NotTildeTilde;", _map$1[_key$1] = { k: _key$1, v: 8777 }, _key$1 = "NotVerticalBar;", _map$1[_key$1] = { k: _key$1, v: 8740 }, _key$1 = "Nscr;", _map$1[_key$1] = { k: _key$1, v: 119977 }, _key$1 = "Ntilde;", _map$1[_key$1] = { k: _key$1, v: 209 }, _key$1 = "Nu;", _map$1[_key$1] = { k: _key$1, v: 925 }, _key$1 = "OElig;", _map$1[_key$1] = { k: _key$1, v: 338 }, _key$1 = "Oacute;", _map$1[_key$1] = { k: _key$1, v: 211 }, _key$1 = "Ocirc;", _map$1[_key$1] = { k: _key$1, v: 212 }, _key$1 = "Ocy;", _map$1[_key$1] = { k: _key$1, v: 1054 }, _key$1 = "Odblac;", _map$1[_key$1] = { k: _key$1, v: 336 }, _key$1 = "Ofr;", _map$1[_key$1] = { k: _key$1, v: 120082 }, _key$1 = "Ograve;", _map$1[_key$1] = { k: _key$1, v: 210 }, _key$1 = "Omacr;", _map$1[_key$1] = { k: _key$1, v: 332 }, _key$1 = "Omega;", _map$1[_key$1] = { k: _key$1, v: 937 }, _key$1 = "Omicron;", _map$1[_key$1] = { k: _key$1, v: 927 }, _key$1 = "Oopf;", _map$1[_key$1] = { k: _key$1, v: 120134 }, _key$1 = "OpenCurlyDoubleQuote;", _map$1[_key$1] = { k: _key$1, v: 8220 }, _key$1 = "OpenCurlyQuote;", _map$1[_key$1] = { k: _key$1, v: 8216 }, _key$1 = "Or;", _map$1[_key$1] = { k: _key$1, v: 10836 }, _key$1 = "Oscr;", _map$1[_key$1] = { k: _key$1, v: 119978 }, _key$1 = "Oslash;", _map$1[_key$1] = { k: _key$1, v: 216 }, _key$1 = "Otilde;", _map$1[_key$1] = { k: _key$1, v: 213 }, _key$1 = "Otimes;", _map$1[_key$1] = { k: _key$1, v: 10807 }, _key$1 = "Ouml;", _map$1[_key$1] = { k: _key$1, v: 214 }, _key$1 = "OverBar;", _map$1[_key$1] = { k: _key$1, v: 8254 }, _key$1 = "OverBrace;", _map$1[_key$1] = { k: _key$1, v: 9182 }, _key$1 = "OverBracket;", _map$1[_key$1] = { k: _key$1, v: 9140 }, _key$1 = "OverParenthesis;", _map$1[_key$1] = { k: _key$1, v: 9180 }, _key$1 = "PartialD;", _map$1[_key$1] = { k: _key$1, v: 8706 }, _key$1 = "Pcy;", _map$1[_key$1] = { k: _key$1, v: 1055 }, _key$1 = "Pfr;", _map$1[_key$1] = { k: _key$1, v: 120083 }, _key$1 = "Phi;", _map$1[_key$1] = { k: _key$1, v: 934 }, _key$1 = "Pi;", _map$1[_key$1] = { k: _key$1, v: 928 }, _key$1 = "PlusMinus;", _map$1[_key$1] = { k: _key$1, v: 177 }, _key$1 = "Poincareplane;", _map$1[_key$1] = { k: _key$1, v: 8460 }, _key$1 = "Popf;", _map$1[_key$1] = { k: _key$1, v: 8473 }, _key$1 = "Pr;", _map$1[_key$1] = { k: _key$1, v: 10939 }, _key$1 = "Precedes;", _map$1[_key$1] = { k: _key$1, v: 8826 }, _key$1 = "PrecedesEqual;", _map$1[_key$1] = { k: _key$1, v: 10927 }, _key$1 = "PrecedesSlantEqual;", _map$1[_key$1] = { k: _key$1, v: 8828 }, _key$1 = "PrecedesTilde;", _map$1[_key$1] = { k: _key$1, v: 8830 }, _key$1 = "Prime;", _map$1[_key$1] = { k: _key$1, v: 8243 }, _key$1 = "Product;", _map$1[_key$1] = { k: _key$1, v: 8719 }, _key$1 = "Proportion;", _map$1[_key$1] = { k: _key$1, v: 8759 }, _key$1 = "Proportional;", _map$1[_key$1] = { k: _key$1, v: 8733 }, _key$1 = "Pscr;", _map$1[_key$1] = { k: _key$1, v: 119979 }, _key$1 = "Psi;", _map$1[_key$1] = { k: _key$1, v: 936 }, _key$1 = "QUOT;", _map$1[_key$1] = { k: _key$1, v: 34 }, _key$1 = "Qfr;", _map$1[_key$1] = { k: _key$1, v: 120084 }, _key$1 = "Qopf;", _map$1[_key$1] = { k: _key$1, v: 8474 }, _key$1 = "Qscr;", _map$1[_key$1] = { k: _key$1, v: 119980 }, _key$1 = "RBarr;", _map$1[_key$1] = { k: _key$1, v: 10512 }, _key$1 = "REG;", _map$1[_key$1] = { k: _key$1, v: 174 }, _key$1 = "Racute;", _map$1[_key$1] = { k: _key$1, v: 340 }, _key$1 = "Rang;", _map$1[_key$1] = { k: _key$1, v: 10219 }, _key$1 = "Rarr;", _map$1[_key$1] = { k: _key$1, v: 8608 }, _key$1 = "Rarrtl;", _map$1[_key$1] = { k: _key$1, v: 10518 }, _key$1 = "Rcaron;", _map$1[_key$1] = { k: _key$1, v: 344 }, _key$1 = "Rcedil;", _map$1[_key$1] = { k: _key$1, v: 342 }, _key$1 = "Rcy;", _map$1[_key$1] = { k: _key$1, v: 1056 }, _key$1 = "Re;", _map$1[_key$1] = { k: _key$1, v: 8476 }, _key$1 = "ReverseElement;", _map$1[_key$1] = { k: _key$1, v: 8715 }, _key$1 = "ReverseEquilibrium;", _map$1[_key$1] = { k: _key$1, v: 8651 }, _key$1 = "ReverseUpEquilibrium;", _map$1[_key$1] = { k: _key$1, v: 10607 }, _key$1 = "Rfr;", _map$1[_key$1] = { k: _key$1, v: 8476 }, _key$1 = "Rho;", _map$1[_key$1] = { k: _key$1, v: 929 }, _key$1 = "RightAngleBracket;", _map$1[_key$1] = { k: _key$1, v: 10217 }, _key$1 = "RightArrow;", _map$1[_key$1] = { k: _key$1, v: 8594 }, _key$1 = "RightArrowBar;", _map$1[_key$1] = { k: _key$1, v: 8677 }, _key$1 = "RightArrowLeftArrow;", _map$1[_key$1] = { k: _key$1, v: 8644 }, _key$1 = "RightCeiling;", _map$1[_key$1] = { k: _key$1, v: 8969 }, _key$1 = "RightDoubleBracket;", _map$1[_key$1] = { k: _key$1, v: 10215 }, _key$1 = "RightDownTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10589 }, _key$1 = "RightDownVector;", _map$1[_key$1] = { k: _key$1, v: 8642 }, _key$1 = "RightDownVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10581 }, _key$1 = "RightFloor;", _map$1[_key$1] = { k: _key$1, v: 8971 }, _key$1 = "RightTee;", _map$1[_key$1] = { k: _key$1, v: 8866 }, _key$1 = "RightTeeArrow;", _map$1[_key$1] = { k: _key$1, v: 8614 }, _key$1 = "RightTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10587 }, _key$1 = "RightTriangle;", _map$1[_key$1] = { k: _key$1, v: 8883 }, _key$1 = "RightTriangleBar;", _map$1[_key$1] = { k: _key$1, v: 10704 }, _key$1 = "RightTriangleEqual;", _map$1[_key$1] = { k: _key$1, v: 8885 }, _key$1 = "RightUpDownVector;", _map$1[_key$1] = { k: _key$1, v: 10575 }, _key$1 = "RightUpTeeVector;", _map$1[_key$1] = { k: _key$1, v: 10588 }, _key$1 = "RightUpVector;", _map$1[_key$1] = { k: _key$1, v: 8638 }, _key$1 = "RightUpVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10580 }, _key$1 = "RightVector;", _map$1[_key$1] = { k: _key$1, v: 8640 }, _key$1 = "RightVectorBar;", _map$1[_key$1] = { k: _key$1, v: 10579 }, _key$1 = "Rightarrow;", _map$1[_key$1] = { k: _key$1, v: 8658 }, _key$1 = "Ropf;", _map$1[_key$1] = { k: _key$1, v: 8477 }, _key$1 = "RoundImplies;", _map$1[_key$1] = { k: _key$1, v: 10608 }, _key$1 = "Rrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8667 }, _key$1 = "Rscr;", _map$1[_key$1] = { k: _key$1, v: 8475 }, _key$1 = "Rsh;", _map$1[_key$1] = { k: _key$1, v: 8625 }, _key$1 = "RuleDelayed;", _map$1[_key$1] = { k: _key$1, v: 10740 }, _key$1 = "SHCHcy;", _map$1[_key$1] = { k: _key$1, v: 1065 }, _key$1 = "SHcy;", _map$1[_key$1] = { k: _key$1, v: 1064 }, _key$1 = "SOFTcy;", _map$1[_key$1] = { k: _key$1, v: 1068 }, _key$1 = "Sacute;", _map$1[_key$1] = { k: _key$1, v: 346 }, _key$1 = "Sc;", _map$1[_key$1] = { k: _key$1, v: 10940 }, _key$1 = "Scaron;", _map$1[_key$1] = { k: _key$1, v: 352 }, _key$1 = "Scedil;", _map$1[_key$1] = { k: _key$1, v: 350 }, _key$1 = "Scirc;", _map$1[_key$1] = { k: _key$1, v: 348 }, _key$1 = "Scy;", _map$1[_key$1] = { k: _key$1, v: 1057 }, _key$1 = "Sfr;", _map$1[_key$1] = { k: _key$1, v: 120086 }, _key$1 = "ShortDownArrow;", _map$1[_key$1] = { k: _key$1, v: 8595 }, _key$1 = "ShortLeftArrow;", _map$1[_key$1] = { k: _key$1, v: 8592 }, _key$1 = "ShortRightArrow;", _map$1[_key$1] = { k: _key$1, v: 8594 }, _key$1 = "ShortUpArrow;", _map$1[_key$1] = { k: _key$1, v: 8593 }, _key$1 = "Sigma;", _map$1[_key$1] = { k: _key$1, v: 931 }, _key$1 = "SmallCircle;", _map$1[_key$1] = { k: _key$1, v: 8728 }, _key$1 = "Sopf;", _map$1[_key$1] = { k: _key$1, v: 120138 }, _key$1 = "Sqrt;", _map$1[_key$1] = { k: _key$1, v: 8730 }, _key$1 = "Square;", _map$1[_key$1] = { k: _key$1, v: 9633 }, _key$1 = "SquareIntersection;", _map$1[_key$1] = { k: _key$1, v: 8851 }, _key$1 = "SquareSubset;", _map$1[_key$1] = { k: _key$1, v: 8847 }, _key$1 = "SquareSubsetEqual;", _map$1[_key$1] = { k: _key$1, v: 8849 }, _key$1 = "SquareSuperset;", _map$1[_key$1] = { k: _key$1, v: 8848 }, _key$1 = "SquareSupersetEqual;", _map$1[_key$1] = { k: _key$1, v: 8850 }, _key$1 = "SquareUnion;", _map$1[_key$1] = { k: _key$1, v: 8852 }, _key$1 = "Sscr;", _map$1[_key$1] = { k: _key$1, v: 119982 }, _key$1 = "Star;", _map$1[_key$1] = { k: _key$1, v: 8902 }, _key$1 = "Sub;", _map$1[_key$1] = { k: _key$1, v: 8912 }, _key$1 = "Subset;", _map$1[_key$1] = { k: _key$1, v: 8912 }, _key$1 = "SubsetEqual;", _map$1[_key$1] = { k: _key$1, v: 8838 }, _key$1 = "Succeeds;", _map$1[_key$1] = { k: _key$1, v: 8827 }, _key$1 = "SucceedsEqual;", _map$1[_key$1] = { k: _key$1, v: 10928 }, _key$1 = "SucceedsSlantEqual;", _map$1[_key$1] = { k: _key$1, v: 8829 }, _key$1 = "SucceedsTilde;", _map$1[_key$1] = { k: _key$1, v: 8831 }, _key$1 = "SuchThat;", _map$1[_key$1] = { k: _key$1, v: 8715 }, _key$1 = "Sum;", _map$1[_key$1] = { k: _key$1, v: 8721 }, _key$1 = "Sup;", _map$1[_key$1] = { k: _key$1, v: 8913 }, _key$1 = "Superset;", _map$1[_key$1] = { k: _key$1, v: 8835 }, _key$1 = "SupersetEqual;", _map$1[_key$1] = { k: _key$1, v: 8839 }, _key$1 = "Supset;", _map$1[_key$1] = { k: _key$1, v: 8913 }, _key$1 = "THORN;", _map$1[_key$1] = { k: _key$1, v: 222 }, _key$1 = "TRADE;", _map$1[_key$1] = { k: _key$1, v: 8482 }, _key$1 = "TSHcy;", _map$1[_key$1] = { k: _key$1, v: 1035 }, _key$1 = "TScy;", _map$1[_key$1] = { k: _key$1, v: 1062 }, _key$1 = "Tab;", _map$1[_key$1] = { k: _key$1, v: 9 }, _key$1 = "Tau;", _map$1[_key$1] = { k: _key$1, v: 932 }, _key$1 = "Tcaron;", _map$1[_key$1] = { k: _key$1, v: 356 }, _key$1 = "Tcedil;", _map$1[_key$1] = { k: _key$1, v: 354 }, _key$1 = "Tcy;", _map$1[_key$1] = { k: _key$1, v: 1058 }, _key$1 = "Tfr;", _map$1[_key$1] = { k: _key$1, v: 120087 }, _key$1 = "Therefore;", _map$1[_key$1] = { k: _key$1, v: 8756 }, _key$1 = "Theta;", _map$1[_key$1] = { k: _key$1, v: 920 }, _key$1 = "ThinSpace;", _map$1[_key$1] = { k: _key$1, v: 8201 }, _key$1 = "Tilde;", _map$1[_key$1] = { k: _key$1, v: 8764 }, _key$1 = "TildeEqual;", _map$1[_key$1] = { k: _key$1, v: 8771 }, _key$1 = "TildeFullEqual;", _map$1[_key$1] = { k: _key$1, v: 8773 }, _key$1 = "TildeTilde;", _map$1[_key$1] = { k: _key$1, v: 8776 }, _key$1 = "Topf;", _map$1[_key$1] = { k: _key$1, v: 120139 }, _key$1 = "TripleDot;", _map$1[_key$1] = { k: _key$1, v: 8411 }, _key$1 = "Tscr;", _map$1[_key$1] = { k: _key$1, v: 119983 }, _key$1 = "Tstrok;", _map$1[_key$1] = { k: _key$1, v: 358 }, _key$1 = "Uacute;", _map$1[_key$1] = { k: _key$1, v: 218 }, _key$1 = "Uarr;", _map$1[_key$1] = { k: _key$1, v: 8607 }, _key$1 = "Uarrocir;", _map$1[_key$1] = { k: _key$1, v: 10569 }, _key$1 = "Ubrcy;", _map$1[_key$1] = { k: _key$1, v: 1038 }, _key$1 = "Ubreve;", _map$1[_key$1] = { k: _key$1, v: 364 }, _key$1 = "Ucirc;", _map$1[_key$1] = { k: _key$1, v: 219 }, _key$1 = "Ucy;", _map$1[_key$1] = { k: _key$1, v: 1059 }, _key$1 = "Udblac;", _map$1[_key$1] = { k: _key$1, v: 368 }, _key$1 = "Ufr;", _map$1[_key$1] = { k: _key$1, v: 120088 }, _key$1 = "Ugrave;", _map$1[_key$1] = { k: _key$1, v: 217 }, _key$1 = "Umacr;", _map$1[_key$1] = { k: _key$1, v: 362 }, _key$1 = "UnderBar;", _map$1[_key$1] = { k: _key$1, v: 95 }, _key$1 = "UnderBrace;", _map$1[_key$1] = { k: _key$1, v: 9183 }, _key$1 = "UnderBracket;", _map$1[_key$1] = { k: _key$1, v: 9141 }, _key$1 = "UnderParenthesis;", _map$1[_key$1] = { k: _key$1, v: 9181 }, _key$1 = "Union;", _map$1[_key$1] = { k: _key$1, v: 8899 }, _key$1 = "UnionPlus;", _map$1[_key$1] = { k: _key$1, v: 8846 }, _key$1 = "Uogon;", _map$1[_key$1] = { k: _key$1, v: 370 }, _key$1 = "Uopf;", _map$1[_key$1] = { k: _key$1, v: 120140 }, _key$1 = "UpArrow;", _map$1[_key$1] = { k: _key$1, v: 8593 }, _key$1 = "UpArrowBar;", _map$1[_key$1] = { k: _key$1, v: 10514 }, _key$1 = "UpArrowDownArrow;", _map$1[_key$1] = { k: _key$1, v: 8645 }, _key$1 = "UpDownArrow;", _map$1[_key$1] = { k: _key$1, v: 8597 }, _key$1 = "UpEquilibrium;", _map$1[_key$1] = { k: _key$1, v: 10606 }, _key$1 = "UpTee;", _map$1[_key$1] = { k: _key$1, v: 8869 }, _key$1 = "UpTeeArrow;", _map$1[_key$1] = { k: _key$1, v: 8613 }, _key$1 = "Uparrow;", _map$1[_key$1] = { k: _key$1, v: 8657 }, _key$1 = "Updownarrow;", _map$1[_key$1] = { k: _key$1, v: 8661 }, _key$1 = "UpperLeftArrow;", _map$1[_key$1] = { k: _key$1, v: 8598 }, _key$1 = "UpperRightArrow;", _map$1[_key$1] = { k: _key$1, v: 8599 }, _key$1 = "Upsi;", _map$1[_key$1] = { k: _key$1, v: 978 }, _key$1 = "Upsilon;", _map$1[_key$1] = { k: _key$1, v: 933 }, _key$1 = "Uring;", _map$1[_key$1] = { k: _key$1, v: 366 }, _key$1 = "Uscr;", _map$1[_key$1] = { k: _key$1, v: 119984 }, _key$1 = "Utilde;", _map$1[_key$1] = { k: _key$1, v: 360 }, _key$1 = "Uuml;", _map$1[_key$1] = { k: _key$1, v: 220 }, _key$1 = "VDash;", _map$1[_key$1] = { k: _key$1, v: 8875 }, _key$1 = "Vbar;", _map$1[_key$1] = { k: _key$1, v: 10987 }, _key$1 = "Vcy;", _map$1[_key$1] = { k: _key$1, v: 1042 }, _key$1 = "Vdash;", _map$1[_key$1] = { k: _key$1, v: 8873 }, _key$1 = "Vdashl;", _map$1[_key$1] = { k: _key$1, v: 10982 }, _key$1 = "Vee;", _map$1[_key$1] = { k: _key$1, v: 8897 }, _key$1 = "Verbar;", _map$1[_key$1] = { k: _key$1, v: 8214 }, _key$1 = "Vert;", _map$1[_key$1] = { k: _key$1, v: 8214 }, _key$1 = "VerticalBar;", _map$1[_key$1] = { k: _key$1, v: 8739 }, _key$1 = "VerticalLine;", _map$1[_key$1] = { k: _key$1, v: 124 }, _key$1 = "VerticalSeparator;", _map$1[_key$1] = { k: _key$1, v: 10072 }, _key$1 = "VerticalTilde;", _map$1[_key$1] = { k: _key$1, v: 8768 }, _key$1 = "VeryThinSpace;", _map$1[_key$1] = { k: _key$1, v: 8202 }, _key$1 = "Vfr;", _map$1[_key$1] = { k: _key$1, v: 120089 }, _key$1 = "Vopf;", _map$1[_key$1] = { k: _key$1, v: 120141 }, _key$1 = "Vscr;", _map$1[_key$1] = { k: _key$1, v: 119985 }, _key$1 = "Vvdash;", _map$1[_key$1] = { k: _key$1, v: 8874 }, _key$1 = "Wcirc;", _map$1[_key$1] = { k: _key$1, v: 372 }, _key$1 = "Wedge;", _map$1[_key$1] = { k: _key$1, v: 8896 }, _key$1 = "Wfr;", _map$1[_key$1] = { k: _key$1, v: 120090 }, _key$1 = "Wopf;", _map$1[_key$1] = { k: _key$1, v: 120142 }, _key$1 = "Wscr;", _map$1[_key$1] = { k: _key$1, v: 119986 }, _key$1 = "Xfr;", _map$1[_key$1] = { k: _key$1, v: 120091 }, _key$1 = "Xi;", _map$1[_key$1] = { k: _key$1, v: 926 }, _key$1 = "Xopf;", _map$1[_key$1] = { k: _key$1, v: 120143 }, _key$1 = "Xscr;", _map$1[_key$1] = { k: _key$1, v: 119987 }, _key$1 = "YAcy;", _map$1[_key$1] = { k: _key$1, v: 1071 }, _key$1 = "YIcy;", _map$1[_key$1] = { k: _key$1, v: 1031 }, _key$1 = "YUcy;", _map$1[_key$1] = { k: _key$1, v: 1070 }, _key$1 = "Yacute;", _map$1[_key$1] = { k: _key$1, v: 221 }, _key$1 = "Ycirc;", _map$1[_key$1] = { k: _key$1, v: 374 }, _key$1 = "Ycy;", _map$1[_key$1] = { k: _key$1, v: 1067 }, _key$1 = "Yfr;", _map$1[_key$1] = { k: _key$1, v: 120092 }, _key$1 = "Yopf;", _map$1[_key$1] = { k: _key$1, v: 120144 }, _key$1 = "Yscr;", _map$1[_key$1] = { k: _key$1, v: 119988 }, _key$1 = "Yuml;", _map$1[_key$1] = { k: _key$1, v: 376 }, _key$1 = "ZHcy;", _map$1[_key$1] = { k: _key$1, v: 1046 }, _key$1 = "Zacute;", _map$1[_key$1] = { k: _key$1, v: 377 }, _key$1 = "Zcaron;", _map$1[_key$1] = { k: _key$1, v: 381 }, _key$1 = "Zcy;", _map$1[_key$1] = { k: _key$1, v: 1047 }, _key$1 = "Zdot;", _map$1[_key$1] = { k: _key$1, v: 379 }, _key$1 = "ZeroWidthSpace;", _map$1[_key$1] = { k: _key$1, v: 8203 }, _key$1 = "Zeta;", _map$1[_key$1] = { k: _key$1, v: 918 }, _key$1 = "Zfr;", _map$1[_key$1] = { k: _key$1, v: 8488 }, _key$1 = "Zopf;", _map$1[_key$1] = { k: _key$1, v: 8484 }, _key$1 = "Zscr;", _map$1[_key$1] = { k: _key$1, v: 119989 }, _key$1 = "aacute;", _map$1[_key$1] = { k: _key$1, v: 225 }, _key$1 = "abreve;", _map$1[_key$1] = { k: _key$1, v: 259 }, _key$1 = "ac;", _map$1[_key$1] = { k: _key$1, v: 8766 }, _key$1 = "acd;", _map$1[_key$1] = { k: _key$1, v: 8767 }, _key$1 = "acirc;", _map$1[_key$1] = { k: _key$1, v: 226 }, _key$1 = "acute;", _map$1[_key$1] = { k: _key$1, v: 180 }, _key$1 = "acy;", _map$1[_key$1] = { k: _key$1, v: 1072 }, _key$1 = "aelig;", _map$1[_key$1] = { k: _key$1, v: 230 }, _key$1 = "af;", _map$1[_key$1] = { k: _key$1, v: 8289 }, _key$1 = "afr;", _map$1[_key$1] = { k: _key$1, v: 120094 }, _key$1 = "agrave;", _map$1[_key$1] = { k: _key$1, v: 224 }, _key$1 = "alefsym;", _map$1[_key$1] = { k: _key$1, v: 8501 }, _key$1 = "aleph;", _map$1[_key$1] = { k: _key$1, v: 8501 }, _key$1 = "alpha;", _map$1[_key$1] = { k: _key$1, v: 945 }, _key$1 = "amacr;", _map$1[_key$1] = { k: _key$1, v: 257 }, _key$1 = "amalg;", _map$1[_key$1] = { k: _key$1, v: 10815 }, _key$1 = "amp;", _map$1[_key$1] = { k: _key$1, v: 38 }, _key$1 = "and;", _map$1[_key$1] = { k: _key$1, v: 8743 }, _key$1 = "andand;", _map$1[_key$1] = { k: _key$1, v: 10837 }, _key$1 = "andd;", _map$1[_key$1] = { k: _key$1, v: 10844 }, _key$1 = "andslope;", _map$1[_key$1] = { k: _key$1, v: 10840 }, _key$1 = "andv;", _map$1[_key$1] = { k: _key$1, v: 10842 }, _key$1 = "ang;", _map$1[_key$1] = { k: _key$1, v: 8736 }, _key$1 = "ange;", _map$1[_key$1] = { k: _key$1, v: 10660 }, _key$1 = "angle;", _map$1[_key$1] = { k: _key$1, v: 8736 }, _key$1 = "angmsd;", _map$1[_key$1] = { k: _key$1, v: 8737 }, _key$1 = "angmsdaa;", _map$1[_key$1] = { k: _key$1, v: 10664 }, _key$1 = "angmsdab;", _map$1[_key$1] = { k: _key$1, v: 10665 }, _key$1 = "angmsdac;", _map$1[_key$1] = { k: _key$1, v: 10666 }, _key$1 = "angmsdad;", _map$1[_key$1] = { k: _key$1, v: 10667 }, _key$1 = "angmsdae;", _map$1[_key$1] = { k: _key$1, v: 10668 }, _key$1 = "angmsdaf;", _map$1[_key$1] = { k: _key$1, v: 10669 }, _key$1 = "angmsdag;", _map$1[_key$1] = { k: _key$1, v: 10670 }, _key$1 = "angmsdah;", _map$1[_key$1] = { k: _key$1, v: 10671 }, _key$1 = "angrt;", _map$1[_key$1] = { k: _key$1, v: 8735 }, _key$1 = "angrtvb;", _map$1[_key$1] = { k: _key$1, v: 8894 }, _key$1 = "angrtvbd;", _map$1[_key$1] = { k: _key$1, v: 10653 }, _key$1 = "angsph;", _map$1[_key$1] = { k: _key$1, v: 8738 }, _key$1 = "angst;", _map$1[_key$1] = { k: _key$1, v: 197 }, _key$1 = "angzarr;", _map$1[_key$1] = { k: _key$1, v: 9084 }, _key$1 = "aogon;", _map$1[_key$1] = { k: _key$1, v: 261 }, _key$1 = "aopf;", _map$1[_key$1] = { k: _key$1, v: 120146 }, _key$1 = "ap;", _map$1[_key$1] = { k: _key$1, v: 8776 }, _key$1 = "apE;", _map$1[_key$1] = { k: _key$1, v: 10864 }, _key$1 = "apacir;", _map$1[_key$1] = { k: _key$1, v: 10863 }, _key$1 = "ape;", _map$1[_key$1] = { k: _key$1, v: 8778 }, _key$1 = "apid;", _map$1[_key$1] = { k: _key$1, v: 8779 }, _key$1 = "apos;", _map$1[_key$1] = { k: _key$1, v: 39 }, _key$1 = "approx;", _map$1[_key$1] = { k: _key$1, v: 8776 }, _key$1 = "approxeq;", _map$1[_key$1] = { k: _key$1, v: 8778 }, _key$1 = "aring;", _map$1[_key$1] = { k: _key$1, v: 229 }, _key$1 = "ascr;", _map$1[_key$1] = { k: _key$1, v: 119990 }, _key$1 = "ast;", _map$1[_key$1] = { k: _key$1, v: 42 }, _key$1 = "asymp;", _map$1[_key$1] = { k: _key$1, v: 8776 }, _key$1 = "asympeq;", _map$1[_key$1] = { k: _key$1, v: 8781 }, _key$1 = "atilde;", _map$1[_key$1] = { k: _key$1, v: 227 }, _key$1 = "auml;", _map$1[_key$1] = { k: _key$1, v: 228 }, _key$1 = "awconint;", _map$1[_key$1] = { k: _key$1, v: 8755 }, _key$1 = "awint;", _map$1[_key$1] = { k: _key$1, v: 10769 }, _key$1 = "bNot;", _map$1[_key$1] = { k: _key$1, v: 10989 }, _key$1 = "backcong;", _map$1[_key$1] = { k: _key$1, v: 8780 }, _key$1 = "backepsilon;", _map$1[_key$1] = { k: _key$1, v: 1014 }, _key$1 = "backprime;", _map$1[_key$1] = { k: _key$1, v: 8245 }, _key$1 = "backsim;", _map$1[_key$1] = { k: _key$1, v: 8765 }, _key$1 = "backsimeq;", _map$1[_key$1] = { k: _key$1, v: 8909 }, _key$1 = "barvee;", _map$1[_key$1] = { k: _key$1, v: 8893 }, _key$1 = "barwed;", _map$1[_key$1] = { k: _key$1, v: 8965 }, _key$1 = "barwedge;", _map$1[_key$1] = { k: _key$1, v: 8965 }, _key$1 = "bbrk;", _map$1[_key$1] = { k: _key$1, v: 9141 }, _key$1 = "bbrktbrk;", _map$1[_key$1] = { k: _key$1, v: 9142 }, _key$1 = "bcong;", _map$1[_key$1] = { k: _key$1, v: 8780 }, _key$1 = "bcy;", _map$1[_key$1] = { k: _key$1, v: 1073 }, _key$1 = "bdquo;", _map$1[_key$1] = { k: _key$1, v: 8222 }, _key$1 = "becaus;", _map$1[_key$1] = { k: _key$1, v: 8757 }, _key$1 = "because;", _map$1[_key$1] = { k: _key$1, v: 8757 }, _key$1 = "bemptyv;", _map$1[_key$1] = { k: _key$1, v: 10672 }, _key$1 = "bepsi;", _map$1[_key$1] = { k: _key$1, v: 1014 }, _key$1 = "bernou;", _map$1[_key$1] = { k: _key$1, v: 8492 }, _key$1 = "beta;", _map$1[_key$1] = { k: _key$1, v: 946 }, _key$1 = "beth;", _map$1[_key$1] = { k: _key$1, v: 8502 }, _key$1 = "between;", _map$1[_key$1] = { k: _key$1, v: 8812 }, _key$1 = "bfr;", _map$1[_key$1] = { k: _key$1, v: 120095 }, _key$1 = "bigcap;", _map$1[_key$1] = { k: _key$1, v: 8898 }, _key$1 = "bigcirc;", _map$1[_key$1] = { k: _key$1, v: 9711 }, _key$1 = "bigcup;", _map$1[_key$1] = { k: _key$1, v: 8899 }, _key$1 = "bigodot;", _map$1[_key$1] = { k: _key$1, v: 10752 }, _key$1 = "bigoplus;", _map$1[_key$1] = { k: _key$1, v: 10753 }, _key$1 = "bigotimes;", _map$1[_key$1] = { k: _key$1, v: 10754 }, _key$1 = "bigsqcup;", _map$1[_key$1] = { k: _key$1, v: 10758 }, _key$1 = "bigstar;", _map$1[_key$1] = { k: _key$1, v: 9733 }, _key$1 = "bigtriangledown;", _map$1[_key$1] = { k: _key$1, v: 9661 }, _key$1 = "bigtriangleup;", _map$1[_key$1] = { k: _key$1, v: 9651 }, _key$1 = "biguplus;", _map$1[_key$1] = { k: _key$1, v: 10756 }, _key$1 = "bigvee;", _map$1[_key$1] = { k: _key$1, v: 8897 }, _key$1 = "bigwedge;", _map$1[_key$1] = { k: _key$1, v: 8896 }, _key$1 = "bkarow;", _map$1[_key$1] = { k: _key$1, v: 10509 }, _key$1 = "blacklozenge;", _map$1[_key$1] = { k: _key$1, v: 10731 }, _key$1 = "blacksquare;", _map$1[_key$1] = { k: _key$1, v: 9642 }, _key$1 = "blacktriangle;", _map$1[_key$1] = { k: _key$1, v: 9652 }, _key$1 = "blacktriangledown;", _map$1[_key$1] = { k: _key$1, v: 9662 }, _key$1 = "blacktriangleleft;", _map$1[_key$1] = { k: _key$1, v: 9666 }, _key$1 = "blacktriangleright;", _map$1[_key$1] = { k: _key$1, v: 9656 }, _key$1 = "blank;", _map$1[_key$1] = { k: _key$1, v: 9251 }, _key$1 = "blk12;", _map$1[_key$1] = { k: _key$1, v: 9618 }, _key$1 = "blk14;", _map$1[_key$1] = { k: _key$1, v: 9617 }, _key$1 = "blk34;", _map$1[_key$1] = { k: _key$1, v: 9619 }, _key$1 = "block;", _map$1[_key$1] = { k: _key$1, v: 9608 }, _key$1 = "bnot;", _map$1[_key$1] = { k: _key$1, v: 8976 }, _key$1 = "bopf;", _map$1[_key$1] = { k: _key$1, v: 120147 }, _key$1 = "bot;", _map$1[_key$1] = { k: _key$1, v: 8869 }, _key$1 = "bottom;", _map$1[_key$1] = { k: _key$1, v: 8869 }, _key$1 = "bowtie;", _map$1[_key$1] = { k: _key$1, v: 8904 }, _key$1 = "boxDL;", _map$1[_key$1] = { k: _key$1, v: 9559 }, _key$1 = "boxDR;", _map$1[_key$1] = { k: _key$1, v: 9556 }, _key$1 = "boxDl;", _map$1[_key$1] = { k: _key$1, v: 9558 }, _key$1 = "boxDr;", _map$1[_key$1] = { k: _key$1, v: 9555 }, _key$1 = "boxH;", _map$1[_key$1] = { k: _key$1, v: 9552 }, _key$1 = "boxHD;", _map$1[_key$1] = { k: _key$1, v: 9574 }, _key$1 = "boxHU;", _map$1[_key$1] = { k: _key$1, v: 9577 }, _key$1 = "boxHd;", _map$1[_key$1] = { k: _key$1, v: 9572 }, _key$1 = "boxHu;", _map$1[_key$1] = { k: _key$1, v: 9575 }, _key$1 = "boxUL;", _map$1[_key$1] = { k: _key$1, v: 9565 }, _key$1 = "boxUR;", _map$1[_key$1] = { k: _key$1, v: 9562 }, _key$1 = "boxUl;", _map$1[_key$1] = { k: _key$1, v: 9564 }, _key$1 = "boxUr;", _map$1[_key$1] = { k: _key$1, v: 9561 }, _key$1 = "boxV;", _map$1[_key$1] = { k: _key$1, v: 9553 }, _key$1 = "boxVH;", _map$1[_key$1] = { k: _key$1, v: 9580 }, _key$1 = "boxVL;", _map$1[_key$1] = { k: _key$1, v: 9571 }, _key$1 = "boxVR;", _map$1[_key$1] = { k: _key$1, v: 9568 }, _key$1 = "boxVh;", _map$1[_key$1] = { k: _key$1, v: 9579 }, _key$1 = "boxVl;", _map$1[_key$1] = { k: _key$1, v: 9570 }, _key$1 = "boxVr;", _map$1[_key$1] = { k: _key$1, v: 9567 }, _key$1 = "boxbox;", _map$1[_key$1] = { k: _key$1, v: 10697 }, _key$1 = "boxdL;", _map$1[_key$1] = { k: _key$1, v: 9557 }, _key$1 = "boxdR;", _map$1[_key$1] = { k: _key$1, v: 9554 }, _key$1 = "boxdl;", _map$1[_key$1] = { k: _key$1, v: 9488 }, _key$1 = "boxdr;", _map$1[_key$1] = { k: _key$1, v: 9484 }, _key$1 = "boxh;", _map$1[_key$1] = { k: _key$1, v: 9472 }, _key$1 = "boxhD;", _map$1[_key$1] = { k: _key$1, v: 9573 }, _key$1 = "boxhU;", _map$1[_key$1] = { k: _key$1, v: 9576 }, _key$1 = "boxhd;", _map$1[_key$1] = { k: _key$1, v: 9516 }, _key$1 = "boxhu;", _map$1[_key$1] = { k: _key$1, v: 9524 }, _key$1 = "boxminus;", _map$1[_key$1] = { k: _key$1, v: 8863 }, _key$1 = "boxplus;", _map$1[_key$1] = { k: _key$1, v: 8862 }, _key$1 = "boxtimes;", _map$1[_key$1] = { k: _key$1, v: 8864 }, _key$1 = "boxuL;", _map$1[_key$1] = { k: _key$1, v: 9563 }, _key$1 = "boxuR;", _map$1[_key$1] = { k: _key$1, v: 9560 }, _key$1 = "boxul;", _map$1[_key$1] = { k: _key$1, v: 9496 }, _key$1 = "boxur;", _map$1[_key$1] = { k: _key$1, v: 9492 }, _key$1 = "boxv;", _map$1[_key$1] = { k: _key$1, v: 9474 }, _key$1 = "boxvH;", _map$1[_key$1] = { k: _key$1, v: 9578 }, _key$1 = "boxvL;", _map$1[_key$1] = { k: _key$1, v: 9569 }, _key$1 = "boxvR;", _map$1[_key$1] = { k: _key$1, v: 9566 }, _key$1 = "boxvh;", _map$1[_key$1] = { k: _key$1, v: 9532 }, _key$1 = "boxvl;", _map$1[_key$1] = { k: _key$1, v: 9508 }, _key$1 = "boxvr;", _map$1[_key$1] = { k: _key$1, v: 9500 }, _key$1 = "bprime;", _map$1[_key$1] = { k: _key$1, v: 8245 }, _key$1 = "breve;", _map$1[_key$1] = { k: _key$1, v: 728 }, _key$1 = "brvbar;", _map$1[_key$1] = { k: _key$1, v: 166 }, _key$1 = "bscr;", _map$1[_key$1] = { k: _key$1, v: 119991 }, _key$1 = "bsemi;", _map$1[_key$1] = { k: _key$1, v: 8271 }, _key$1 = "bsim;", _map$1[_key$1] = { k: _key$1, v: 8765 }, _key$1 = "bsime;", _map$1[_key$1] = { k: _key$1, v: 8909 }, _key$1 = "bsol;", _map$1[_key$1] = { k: _key$1, v: 92 }, _key$1 = "bsolb;", _map$1[_key$1] = { k: _key$1, v: 10693 }, _key$1 = "bsolhsub;", _map$1[_key$1] = { k: _key$1, v: 10184 }, _key$1 = "bull;", _map$1[_key$1] = { k: _key$1, v: 8226 }, _key$1 = "bullet;", _map$1[_key$1] = { k: _key$1, v: 8226 }, _key$1 = "bump;", _map$1[_key$1] = { k: _key$1, v: 8782 }, _key$1 = "bumpE;", _map$1[_key$1] = { k: _key$1, v: 10926 }, _key$1 = "bumpe;", _map$1[_key$1] = { k: _key$1, v: 8783 }, _key$1 = "bumpeq;", _map$1[_key$1] = { k: _key$1, v: 8783 }, _key$1 = "cacute;", _map$1[_key$1] = { k: _key$1, v: 263 }, _key$1 = "cap;", _map$1[_key$1] = { k: _key$1, v: 8745 }, _key$1 = "capand;", _map$1[_key$1] = { k: _key$1, v: 10820 }, _key$1 = "capbrcup;", _map$1[_key$1] = { k: _key$1, v: 10825 }, _key$1 = "capcap;", _map$1[_key$1] = { k: _key$1, v: 10827 }, _key$1 = "capcup;", _map$1[_key$1] = { k: _key$1, v: 10823 }, _key$1 = "capdot;", _map$1[_key$1] = { k: _key$1, v: 10816 }, _key$1 = "caret;", _map$1[_key$1] = { k: _key$1, v: 8257 }, _key$1 = "caron;", _map$1[_key$1] = { k: _key$1, v: 711 }, _key$1 = "ccaps;", _map$1[_key$1] = { k: _key$1, v: 10829 }, _key$1 = "ccaron;", _map$1[_key$1] = { k: _key$1, v: 269 }, _key$1 = "ccedil;", _map$1[_key$1] = { k: _key$1, v: 231 }, _key$1 = "ccirc;", _map$1[_key$1] = { k: _key$1, v: 265 }, _key$1 = "ccups;", _map$1[_key$1] = { k: _key$1, v: 10828 }, _key$1 = "ccupssm;", _map$1[_key$1] = { k: _key$1, v: 10832 }, _key$1 = "cdot;", _map$1[_key$1] = { k: _key$1, v: 267 }, _key$1 = "cedil;", _map$1[_key$1] = { k: _key$1, v: 184 }, _key$1 = "cemptyv;", _map$1[_key$1] = { k: _key$1, v: 10674 }, _key$1 = "cent;", _map$1[_key$1] = { k: _key$1, v: 162 }, _key$1 = "centerdot;", _map$1[_key$1] = { k: _key$1, v: 183 }, _key$1 = "cfr;", _map$1[_key$1] = { k: _key$1, v: 120096 }, _key$1 = "chcy;", _map$1[_key$1] = { k: _key$1, v: 1095 }, _key$1 = "check;", _map$1[_key$1] = { k: _key$1, v: 10003 }, _key$1 = "checkmark;", _map$1[_key$1] = { k: _key$1, v: 10003 }, _key$1 = "chi;", _map$1[_key$1] = { k: _key$1, v: 967 }, _key$1 = "cir;", _map$1[_key$1] = { k: _key$1, v: 9675 }, _key$1 = "cirE;", _map$1[_key$1] = { k: _key$1, v: 10691 }, _key$1 = "circ;", _map$1[_key$1] = { k: _key$1, v: 710 }, _key$1 = "circeq;", _map$1[_key$1] = { k: _key$1, v: 8791 }, _key$1 = "circlearrowleft;", _map$1[_key$1] = { k: _key$1, v: 8634 }, _key$1 = "circlearrowright;", _map$1[_key$1] = { k: _key$1, v: 8635 }, _key$1 = "circledR;", _map$1[_key$1] = { k: _key$1, v: 174 }, _key$1 = "circledS;", _map$1[_key$1] = { k: _key$1, v: 9416 }, _key$1 = "circledast;", _map$1[_key$1] = { k: _key$1, v: 8859 }, _key$1 = "circledcirc;", _map$1[_key$1] = { k: _key$1, v: 8858 }, _key$1 = "circleddash;", _map$1[_key$1] = { k: _key$1, v: 8861 }, _key$1 = "cire;", _map$1[_key$1] = { k: _key$1, v: 8791 }, _key$1 = "cirfnint;", _map$1[_key$1] = { k: _key$1, v: 10768 }, _key$1 = "cirmid;", _map$1[_key$1] = { k: _key$1, v: 10991 }, _key$1 = "cirscir;", _map$1[_key$1] = { k: _key$1, v: 10690 }, _key$1 = "clubs;", _map$1[_key$1] = { k: _key$1, v: 9827 }, _key$1 = "clubsuit;", _map$1[_key$1] = { k: _key$1, v: 9827 }, _key$1 = "colon;", _map$1[_key$1] = { k: _key$1, v: 58 }, _key$1 = "colone;", _map$1[_key$1] = { k: _key$1, v: 8788 }, _key$1 = "coloneq;", _map$1[_key$1] = { k: _key$1, v: 8788 }, _key$1 = "comma;", _map$1[_key$1] = { k: _key$1, v: 44 }, _key$1 = "commat;", _map$1[_key$1] = { k: _key$1, v: 64 }, _key$1 = "comp;", _map$1[_key$1] = { k: _key$1, v: 8705 }, _key$1 = "compfn;", _map$1[_key$1] = { k: _key$1, v: 8728 }, _key$1 = "complement;", _map$1[_key$1] = { k: _key$1, v: 8705 }, _key$1 = "complexes;", _map$1[_key$1] = { k: _key$1, v: 8450 }, _key$1 = "cong;", _map$1[_key$1] = { k: _key$1, v: 8773 }, _key$1 = "congdot;", _map$1[_key$1] = { k: _key$1, v: 10861 }, _key$1 = "conint;", _map$1[_key$1] = { k: _key$1, v: 8750 }, _key$1 = "copf;", _map$1[_key$1] = { k: _key$1, v: 120148 }, _key$1 = "coprod;", _map$1[_key$1] = { k: _key$1, v: 8720 }, _key$1 = "copy;", _map$1[_key$1] = { k: _key$1, v: 169 }, _key$1 = "copysr;", _map$1[_key$1] = { k: _key$1, v: 8471 }, _key$1 = "crarr;", _map$1[_key$1] = { k: _key$1, v: 8629 }, _key$1 = "cross;", _map$1[_key$1] = { k: _key$1, v: 10007 }, _key$1 = "cscr;", _map$1[_key$1] = { k: _key$1, v: 119992 }, _key$1 = "csub;", _map$1[_key$1] = { k: _key$1, v: 10959 }, _key$1 = "csube;", _map$1[_key$1] = { k: _key$1, v: 10961 }, _key$1 = "csup;", _map$1[_key$1] = { k: _key$1, v: 10960 }, _key$1 = "csupe;", _map$1[_key$1] = { k: _key$1, v: 10962 }, _key$1 = "ctdot;", _map$1[_key$1] = { k: _key$1, v: 8943 }, _key$1 = "cudarrl;", _map$1[_key$1] = { k: _key$1, v: 10552 }, _key$1 = "cudarrr;", _map$1[_key$1] = { k: _key$1, v: 10549 }, _key$1 = "cuepr;", _map$1[_key$1] = { k: _key$1, v: 8926 }, _key$1 = "cuesc;", _map$1[_key$1] = { k: _key$1, v: 8927 }, _key$1 = "cularr;", _map$1[_key$1] = { k: _key$1, v: 8630 }, _key$1 = "cularrp;", _map$1[_key$1] = { k: _key$1, v: 10557 }, _key$1 = "cup;", _map$1[_key$1] = { k: _key$1, v: 8746 }, _key$1 = "cupbrcap;", _map$1[_key$1] = { k: _key$1, v: 10824 }, _key$1 = "cupcap;", _map$1[_key$1] = { k: _key$1, v: 10822 }, _key$1 = "cupcup;", _map$1[_key$1] = { k: _key$1, v: 10826 }, _key$1 = "cupdot;", _map$1[_key$1] = { k: _key$1, v: 8845 }, _key$1 = "cupor;", _map$1[_key$1] = { k: _key$1, v: 10821 }, _key$1 = "curarr;", _map$1[_key$1] = { k: _key$1, v: 8631 }, _key$1 = "curarrm;", _map$1[_key$1] = { k: _key$1, v: 10556 }, _key$1 = "curlyeqprec;", _map$1[_key$1] = { k: _key$1, v: 8926 }, _key$1 = "curlyeqsucc;", _map$1[_key$1] = { k: _key$1, v: 8927 }, _key$1 = "curlyvee;", _map$1[_key$1] = { k: _key$1, v: 8910 }, _key$1 = "curlywedge;", _map$1[_key$1] = { k: _key$1, v: 8911 }, _key$1 = "curren;", _map$1[_key$1] = { k: _key$1, v: 164 }, _key$1 = "curvearrowleft;", _map$1[_key$1] = { k: _key$1, v: 8630 }, _key$1 = "curvearrowright;", _map$1[_key$1] = { k: _key$1, v: 8631 }, _key$1 = "cuvee;", _map$1[_key$1] = { k: _key$1, v: 8910 }, _key$1 = "cuwed;", _map$1[_key$1] = { k: _key$1, v: 8911 }, _key$1 = "cwconint;", _map$1[_key$1] = { k: _key$1, v: 8754 }, _key$1 = "cwint;", _map$1[_key$1] = { k: _key$1, v: 8753 }, _key$1 = "cylcty;", _map$1[_key$1] = { k: _key$1, v: 9005 }, _key$1 = "dArr;", _map$1[_key$1] = { k: _key$1, v: 8659 }, _key$1 = "dHar;", _map$1[_key$1] = { k: _key$1, v: 10597 }, _key$1 = "dagger;", _map$1[_key$1] = { k: _key$1, v: 8224 }, _key$1 = "daleth;", _map$1[_key$1] = { k: _key$1, v: 8504 }, _key$1 = "darr;", _map$1[_key$1] = { k: _key$1, v: 8595 }, _key$1 = "dash;", _map$1[_key$1] = { k: _key$1, v: 8208 }, _key$1 = "dashv;", _map$1[_key$1] = { k: _key$1, v: 8867 }, _key$1 = "dbkarow;", _map$1[_key$1] = { k: _key$1, v: 10511 }, _key$1 = "dblac;", _map$1[_key$1] = { k: _key$1, v: 733 }, _key$1 = "dcaron;", _map$1[_key$1] = { k: _key$1, v: 271 }, _key$1 = "dcy;", _map$1[_key$1] = { k: _key$1, v: 1076 }, _key$1 = "dd;", _map$1[_key$1] = { k: _key$1, v: 8518 }, _key$1 = "ddagger;", _map$1[_key$1] = { k: _key$1, v: 8225 }, _key$1 = "ddarr;", _map$1[_key$1] = { k: _key$1, v: 8650 }, _key$1 = "ddotseq;", _map$1[_key$1] = { k: _key$1, v: 10871 }, _key$1 = "deg;", _map$1[_key$1] = { k: _key$1, v: 176 }, _key$1 = "delta;", _map$1[_key$1] = { k: _key$1, v: 948 }, _key$1 = "demptyv;", _map$1[_key$1] = { k: _key$1, v: 10673 }, _key$1 = "dfisht;", _map$1[_key$1] = { k: _key$1, v: 10623 }, _key$1 = "dfr;", _map$1[_key$1] = { k: _key$1, v: 120097 }, _key$1 = "dharl;", _map$1[_key$1] = { k: _key$1, v: 8643 }, _key$1 = "dharr;", _map$1[_key$1] = { k: _key$1, v: 8642 }, _key$1 = "diam;", _map$1[_key$1] = { k: _key$1, v: 8900 }, _key$1 = "diamond;", _map$1[_key$1] = { k: _key$1, v: 8900 }, _key$1 = "diamondsuit;", _map$1[_key$1] = { k: _key$1, v: 9830 }, _key$1 = "diams;", _map$1[_key$1] = { k: _key$1, v: 9830 }, _key$1 = "die;", _map$1[_key$1] = { k: _key$1, v: 168 }, _key$1 = "digamma;", _map$1[_key$1] = { k: _key$1, v: 989 }, _key$1 = "disin;", _map$1[_key$1] = { k: _key$1, v: 8946 }, _key$1 = "div;", _map$1[_key$1] = { k: _key$1, v: 247 }, _key$1 = "divide;", _map$1[_key$1] = { k: _key$1, v: 247 }, _key$1 = "divideontimes;", _map$1[_key$1] = { k: _key$1, v: 8903 }, _key$1 = "divonx;", _map$1[_key$1] = { k: _key$1, v: 8903 }, _key$1 = "djcy;", _map$1[_key$1] = { k: _key$1, v: 1106 }, _key$1 = "dlcorn;", _map$1[_key$1] = { k: _key$1, v: 8990 }, _key$1 = "dlcrop;", _map$1[_key$1] = { k: _key$1, v: 8973 }, _key$1 = "dollar;", _map$1[_key$1] = { k: _key$1, v: 36 }, _key$1 = "dopf;", _map$1[_key$1] = { k: _key$1, v: 120149 }, _key$1 = "dot;", _map$1[_key$1] = { k: _key$1, v: 729 }, _key$1 = "doteq;", _map$1[_key$1] = { k: _key$1, v: 8784 }, _key$1 = "doteqdot;", _map$1[_key$1] = { k: _key$1, v: 8785 }, _key$1 = "dotminus;", _map$1[_key$1] = { k: _key$1, v: 8760 }, _key$1 = "dotplus;", _map$1[_key$1] = { k: _key$1, v: 8724 }, _key$1 = "dotsquare;", _map$1[_key$1] = { k: _key$1, v: 8865 }, _key$1 = "doublebarwedge;", _map$1[_key$1] = { k: _key$1, v: 8966 }, _key$1 = "downarrow;", _map$1[_key$1] = { k: _key$1, v: 8595 }, _key$1 = "downdownarrows;", _map$1[_key$1] = { k: _key$1, v: 8650 }, _key$1 = "downharpoonleft;", _map$1[_key$1] = { k: _key$1, v: 8643 }, _key$1 = "downharpoonright;", _map$1[_key$1] = { k: _key$1, v: 8642 }, _key$1 = "drbkarow;", _map$1[_key$1] = { k: _key$1, v: 10512 }, _key$1 = "drcorn;", _map$1[_key$1] = { k: _key$1, v: 8991 }, _key$1 = "drcrop;", _map$1[_key$1] = { k: _key$1, v: 8972 }, _key$1 = "dscr;", _map$1[_key$1] = { k: _key$1, v: 119993 }, _key$1 = "dscy;", _map$1[_key$1] = { k: _key$1, v: 1109 }, _key$1 = "dsol;", _map$1[_key$1] = { k: _key$1, v: 10742 }, _key$1 = "dstrok;", _map$1[_key$1] = { k: _key$1, v: 273 }, _key$1 = "dtdot;", _map$1[_key$1] = { k: _key$1, v: 8945 }, _key$1 = "dtri;", _map$1[_key$1] = { k: _key$1, v: 9663 }, _key$1 = "dtrif;", _map$1[_key$1] = { k: _key$1, v: 9662 }, _key$1 = "duarr;", _map$1[_key$1] = { k: _key$1, v: 8693 }, _key$1 = "duhar;", _map$1[_key$1] = { k: _key$1, v: 10607 }, _key$1 = "dwangle;", _map$1[_key$1] = { k: _key$1, v: 10662 }, _key$1 = "dzcy;", _map$1[_key$1] = { k: _key$1, v: 1119 }, _key$1 = "dzigrarr;", _map$1[_key$1] = { k: _key$1, v: 10239 }, _key$1 = "eDDot;", _map$1[_key$1] = { k: _key$1, v: 10871 }, _key$1 = "eDot;", _map$1[_key$1] = { k: _key$1, v: 8785 }, _key$1 = "eacute;", _map$1[_key$1] = { k: _key$1, v: 233 }, _key$1 = "easter;", _map$1[_key$1] = { k: _key$1, v: 10862 }, _key$1 = "ecaron;", _map$1[_key$1] = { k: _key$1, v: 283 }, _key$1 = "ecir;", _map$1[_key$1] = { k: _key$1, v: 8790 }, _key$1 = "ecirc;", _map$1[_key$1] = { k: _key$1, v: 234 }, _key$1 = "ecolon;", _map$1[_key$1] = { k: _key$1, v: 8789 }, _key$1 = "ecy;", _map$1[_key$1] = { k: _key$1, v: 1101 }, _key$1 = "edot;", _map$1[_key$1] = { k: _key$1, v: 279 }, _key$1 = "ee;", _map$1[_key$1] = { k: _key$1, v: 8519 }, _key$1 = "efDot;", _map$1[_key$1] = { k: _key$1, v: 8786 }, _key$1 = "efr;", _map$1[_key$1] = { k: _key$1, v: 120098 }, _key$1 = "eg;", _map$1[_key$1] = { k: _key$1, v: 10906 }, _key$1 = "egrave;", _map$1[_key$1] = { k: _key$1, v: 232 }, _key$1 = "egs;", _map$1[_key$1] = { k: _key$1, v: 10902 }, _key$1 = "egsdot;", _map$1[_key$1] = { k: _key$1, v: 10904 }, _key$1 = "el;", _map$1[_key$1] = { k: _key$1, v: 10905 }, _key$1 = "elinters;", _map$1[_key$1] = { k: _key$1, v: 9191 }, _key$1 = "ell;", _map$1[_key$1] = { k: _key$1, v: 8467 }, _key$1 = "els;", _map$1[_key$1] = { k: _key$1, v: 10901 }, _key$1 = "elsdot;", _map$1[_key$1] = { k: _key$1, v: 10903 }, _key$1 = "emacr;", _map$1[_key$1] = { k: _key$1, v: 275 }, _key$1 = "empty;", _map$1[_key$1] = { k: _key$1, v: 8709 }, _key$1 = "emptyset;", _map$1[_key$1] = { k: _key$1, v: 8709 }, _key$1 = "emptyv;", _map$1[_key$1] = { k: _key$1, v: 8709 }, _key$1 = "emsp;", _map$1[_key$1] = { k: _key$1, v: 8195 }, _key$1 = "emsp13;", _map$1[_key$1] = { k: _key$1, v: 8196 }, _key$1 = "emsp14;", _map$1[_key$1] = { k: _key$1, v: 8197 }, _key$1 = "eng;", _map$1[_key$1] = { k: _key$1, v: 331 }, _key$1 = "ensp;", _map$1[_key$1] = { k: _key$1, v: 8194 }, _key$1 = "eogon;", _map$1[_key$1] = { k: _key$1, v: 281 }, _key$1 = "eopf;", _map$1[_key$1] = { k: _key$1, v: 120150 }, _key$1 = "epar;", _map$1[_key$1] = { k: _key$1, v: 8917 }, _key$1 = "eparsl;", _map$1[_key$1] = { k: _key$1, v: 10723 }, _key$1 = "eplus;", _map$1[_key$1] = { k: _key$1, v: 10865 }, _key$1 = "epsi;", _map$1[_key$1] = { k: _key$1, v: 949 }, _key$1 = "epsilon;", _map$1[_key$1] = { k: _key$1, v: 949 }, _key$1 = "epsiv;", _map$1[_key$1] = { k: _key$1, v: 1013 }, _key$1 = "eqcirc;", _map$1[_key$1] = { k: _key$1, v: 8790 }, _key$1 = "eqcolon;", _map$1[_key$1] = { k: _key$1, v: 8789 }, _key$1 = "eqsim;", _map$1[_key$1] = { k: _key$1, v: 8770 }, _key$1 = "eqslantgtr;", _map$1[_key$1] = { k: _key$1, v: 10902 }, _key$1 = "eqslantless;", _map$1[_key$1] = { k: _key$1, v: 10901 }, _key$1 = "equals;", _map$1[_key$1] = { k: _key$1, v: 61 }, _key$1 = "equest;", _map$1[_key$1] = { k: _key$1, v: 8799 }, _key$1 = "equiv;", _map$1[_key$1] = { k: _key$1, v: 8801 }, _key$1 = "equivDD;", _map$1[_key$1] = { k: _key$1, v: 10872 }, _key$1 = "eqvparsl;", _map$1[_key$1] = { k: _key$1, v: 10725 }, _key$1 = "erDot;", _map$1[_key$1] = { k: _key$1, v: 8787 }, _key$1 = "erarr;", _map$1[_key$1] = { k: _key$1, v: 10609 }, _key$1 = "escr;", _map$1[_key$1] = { k: _key$1, v: 8495 }, _key$1 = "esdot;", _map$1[_key$1] = { k: _key$1, v: 8784 }, _key$1 = "esim;", _map$1[_key$1] = { k: _key$1, v: 8770 }, _key$1 = "eta;", _map$1[_key$1] = { k: _key$1, v: 951 }, _key$1 = "eth;", _map$1[_key$1] = { k: _key$1, v: 240 }, _key$1 = "euml;", _map$1[_key$1] = { k: _key$1, v: 235 }, _key$1 = "euro;", _map$1[_key$1] = { k: _key$1, v: 8364 }, _key$1 = "excl;", _map$1[_key$1] = { k: _key$1, v: 33 }, _key$1 = "exist;", _map$1[_key$1] = { k: _key$1, v: 8707 }, _key$1 = "expectation;", _map$1[_key$1] = { k: _key$1, v: 8496 }, _key$1 = "exponentiale;", _map$1[_key$1] = { k: _key$1, v: 8519 }, _key$1 = "fallingdotseq;", _map$1[_key$1] = { k: _key$1, v: 8786 }, _key$1 = "fcy;", _map$1[_key$1] = { k: _key$1, v: 1092 }, _key$1 = "female;", _map$1[_key$1] = { k: _key$1, v: 9792 }, _key$1 = "ffilig;", _map$1[_key$1] = { k: _key$1, v: 64259 }, _key$1 = "fflig;", _map$1[_key$1] = { k: _key$1, v: 64256 }, _key$1 = "ffllig;", _map$1[_key$1] = { k: _key$1, v: 64260 }, _key$1 = "ffr;", _map$1[_key$1] = { k: _key$1, v: 120099 }, _key$1 = "filig;", _map$1[_key$1] = { k: _key$1, v: 64257 }, _key$1 = "flat;", _map$1[_key$1] = { k: _key$1, v: 9837 }, _key$1 = "fllig;", _map$1[_key$1] = { k: _key$1, v: 64258 }, _key$1 = "fltns;", _map$1[_key$1] = { k: _key$1, v: 9649 }, _key$1 = "fnof;", _map$1[_key$1] = { k: _key$1, v: 402 }, _key$1 = "fopf;", _map$1[_key$1] = { k: _key$1, v: 120151 }, _key$1 = "forall;", _map$1[_key$1] = { k: _key$1, v: 8704 }, _key$1 = "fork;", _map$1[_key$1] = { k: _key$1, v: 8916 }, _key$1 = "forkv;", _map$1[_key$1] = { k: _key$1, v: 10969 }, _key$1 = "fpartint;", _map$1[_key$1] = { k: _key$1, v: 10765 }, _key$1 = "frac12;", _map$1[_key$1] = { k: _key$1, v: 189 }, _key$1 = "frac13;", _map$1[_key$1] = { k: _key$1, v: 8531 }, _key$1 = "frac14;", _map$1[_key$1] = { k: _key$1, v: 188 }, _key$1 = "frac15;", _map$1[_key$1] = { k: _key$1, v: 8533 }, _key$1 = "frac16;", _map$1[_key$1] = { k: _key$1, v: 8537 }, _key$1 = "frac18;", _map$1[_key$1] = { k: _key$1, v: 8539 }, _key$1 = "frac23;", _map$1[_key$1] = { k: _key$1, v: 8532 }, _key$1 = "frac25;", _map$1[_key$1] = { k: _key$1, v: 8534 }, _key$1 = "frac34;", _map$1[_key$1] = { k: _key$1, v: 190 }, _key$1 = "frac35;", _map$1[_key$1] = { k: _key$1, v: 8535 }, _key$1 = "frac38;", _map$1[_key$1] = { k: _key$1, v: 8540 }, _key$1 = "frac45;", _map$1[_key$1] = { k: _key$1, v: 8536 }, _key$1 = "frac56;", _map$1[_key$1] = { k: _key$1, v: 8538 }, _key$1 = "frac58;", _map$1[_key$1] = { k: _key$1, v: 8541 }, _key$1 = "frac78;", _map$1[_key$1] = { k: _key$1, v: 8542 }, _key$1 = "frasl;", _map$1[_key$1] = { k: _key$1, v: 8260 }, _key$1 = "frown;", _map$1[_key$1] = { k: _key$1, v: 8994 }, _key$1 = "fscr;", _map$1[_key$1] = { k: _key$1, v: 119995 }, _key$1 = "gE;", _map$1[_key$1] = { k: _key$1, v: 8807 }, _key$1 = "gEl;", _map$1[_key$1] = { k: _key$1, v: 10892 }, _key$1 = "gacute;", _map$1[_key$1] = { k: _key$1, v: 501 }, _key$1 = "gamma;", _map$1[_key$1] = { k: _key$1, v: 947 }, _key$1 = "gammad;", _map$1[_key$1] = { k: _key$1, v: 989 }, _key$1 = "gap;", _map$1[_key$1] = { k: _key$1, v: 10886 }, _key$1 = "gbreve;", _map$1[_key$1] = { k: _key$1, v: 287 }, _key$1 = "gcirc;", _map$1[_key$1] = { k: _key$1, v: 285 }, _key$1 = "gcy;", _map$1[_key$1] = { k: _key$1, v: 1075 }, _key$1 = "gdot;", _map$1[_key$1] = { k: _key$1, v: 289 }, _key$1 = "ge;", _map$1[_key$1] = { k: _key$1, v: 8805 }, _key$1 = "gel;", _map$1[_key$1] = { k: _key$1, v: 8923 }, _key$1 = "geq;", _map$1[_key$1] = { k: _key$1, v: 8805 }, _key$1 = "geqq;", _map$1[_key$1] = { k: _key$1, v: 8807 }, _key$1 = "geqslant;", _map$1[_key$1] = { k: _key$1, v: 10878 }, _key$1 = "ges;", _map$1[_key$1] = { k: _key$1, v: 10878 }, _key$1 = "gescc;", _map$1[_key$1] = { k: _key$1, v: 10921 }, _key$1 = "gesdot;", _map$1[_key$1] = { k: _key$1, v: 10880 }, _key$1 = "gesdoto;", _map$1[_key$1] = { k: _key$1, v: 10882 }, _key$1 = "gesdotol;", _map$1[_key$1] = { k: _key$1, v: 10884 }, _key$1 = "gesles;", _map$1[_key$1] = { k: _key$1, v: 10900 }, _key$1 = "gfr;", _map$1[_key$1] = { k: _key$1, v: 120100 }, _key$1 = "gg;", _map$1[_key$1] = { k: _key$1, v: 8811 }, _key$1 = "ggg;", _map$1[_key$1] = { k: _key$1, v: 8921 }, _key$1 = "gimel;", _map$1[_key$1] = { k: _key$1, v: 8503 }, _key$1 = "gjcy;", _map$1[_key$1] = { k: _key$1, v: 1107 }, _key$1 = "gl;", _map$1[_key$1] = { k: _key$1, v: 8823 }, _key$1 = "glE;", _map$1[_key$1] = { k: _key$1, v: 10898 }, _key$1 = "gla;", _map$1[_key$1] = { k: _key$1, v: 10917 }, _key$1 = "glj;", _map$1[_key$1] = { k: _key$1, v: 10916 }, _key$1 = "gnE;", _map$1[_key$1] = { k: _key$1, v: 8809 }, _key$1 = "gnap;", _map$1[_key$1] = { k: _key$1, v: 10890 }, _key$1 = "gnapprox;", _map$1[_key$1] = { k: _key$1, v: 10890 }, _key$1 = "gne;", _map$1[_key$1] = { k: _key$1, v: 10888 }, _key$1 = "gneq;", _map$1[_key$1] = { k: _key$1, v: 10888 }, _key$1 = "gneqq;", _map$1[_key$1] = { k: _key$1, v: 8809 }, _key$1 = "gnsim;", _map$1[_key$1] = { k: _key$1, v: 8935 }, _key$1 = "gopf;", _map$1[_key$1] = { k: _key$1, v: 120152 }, _key$1 = "grave;", _map$1[_key$1] = { k: _key$1, v: 96 }, _key$1 = "gscr;", _map$1[_key$1] = { k: _key$1, v: 8458 }, _key$1 = "gsim;", _map$1[_key$1] = { k: _key$1, v: 8819 }, _key$1 = "gsime;", _map$1[_key$1] = { k: _key$1, v: 10894 }, _key$1 = "gsiml;", _map$1[_key$1] = { k: _key$1, v: 10896 }, _key$1 = "gt;", _map$1[_key$1] = { k: _key$1, v: 62 }, _key$1 = "gtcc;", _map$1[_key$1] = { k: _key$1, v: 10919 }, _key$1 = "gtcir;", _map$1[_key$1] = { k: _key$1, v: 10874 }, _key$1 = "gtdot;", _map$1[_key$1] = { k: _key$1, v: 8919 }, _key$1 = "gtlPar;", _map$1[_key$1] = { k: _key$1, v: 10645 }, _key$1 = "gtquest;", _map$1[_key$1] = { k: _key$1, v: 10876 }, _key$1 = "gtrapprox;", _map$1[_key$1] = { k: _key$1, v: 10886 }, _key$1 = "gtrarr;", _map$1[_key$1] = { k: _key$1, v: 10616 }, _key$1 = "gtrdot;", _map$1[_key$1] = { k: _key$1, v: 8919 }, _key$1 = "gtreqless;", _map$1[_key$1] = { k: _key$1, v: 8923 }, _key$1 = "gtreqqless;", _map$1[_key$1] = { k: _key$1, v: 10892 }, _key$1 = "gtrless;", _map$1[_key$1] = { k: _key$1, v: 8823 }, _key$1 = "gtrsim;", _map$1[_key$1] = { k: _key$1, v: 8819 }, _key$1 = "hArr;", _map$1[_key$1] = { k: _key$1, v: 8660 }, _key$1 = "hairsp;", _map$1[_key$1] = { k: _key$1, v: 8202 }, _key$1 = "half;", _map$1[_key$1] = { k: _key$1, v: 189 }, _key$1 = "hamilt;", _map$1[_key$1] = { k: _key$1, v: 8459 }, _key$1 = "hardcy;", _map$1[_key$1] = { k: _key$1, v: 1098 }, _key$1 = "harr;", _map$1[_key$1] = { k: _key$1, v: 8596 }, _key$1 = "harrcir;", _map$1[_key$1] = { k: _key$1, v: 10568 }, _key$1 = "harrw;", _map$1[_key$1] = { k: _key$1, v: 8621 }, _key$1 = "hbar;", _map$1[_key$1] = { k: _key$1, v: 8463 }, _key$1 = "hcirc;", _map$1[_key$1] = { k: _key$1, v: 293 }, _key$1 = "hearts;", _map$1[_key$1] = { k: _key$1, v: 9829 }, _key$1 = "heartsuit;", _map$1[_key$1] = { k: _key$1, v: 9829 }, _key$1 = "hellip;", _map$1[_key$1] = { k: _key$1, v: 8230 }, _key$1 = "hercon;", _map$1[_key$1] = { k: _key$1, v: 8889 }, _key$1 = "hfr;", _map$1[_key$1] = { k: _key$1, v: 120101 }, _key$1 = "hksearow;", _map$1[_key$1] = { k: _key$1, v: 10533 }, _key$1 = "hkswarow;", _map$1[_key$1] = { k: _key$1, v: 10534 }, _key$1 = "hoarr;", _map$1[_key$1] = { k: _key$1, v: 8703 }, _key$1 = "homtht;", _map$1[_key$1] = { k: _key$1, v: 8763 }, _key$1 = "hookleftarrow;", _map$1[_key$1] = { k: _key$1, v: 8617 }, _key$1 = "hookrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8618 }, _key$1 = "hopf;", _map$1[_key$1] = { k: _key$1, v: 120153 }, _key$1 = "horbar;", _map$1[_key$1] = { k: _key$1, v: 8213 }, _key$1 = "hscr;", _map$1[_key$1] = { k: _key$1, v: 119997 }, _key$1 = "hslash;", _map$1[_key$1] = { k: _key$1, v: 8463 }, _key$1 = "hstrok;", _map$1[_key$1] = { k: _key$1, v: 295 }, _key$1 = "hybull;", _map$1[_key$1] = { k: _key$1, v: 8259 }, _key$1 = "hyphen;", _map$1[_key$1] = { k: _key$1, v: 8208 }, _key$1 = "iacute;", _map$1[_key$1] = { k: _key$1, v: 237 }, _key$1 = "ic;", _map$1[_key$1] = { k: _key$1, v: 8291 }, _key$1 = "icirc;", _map$1[_key$1] = { k: _key$1, v: 238 }, _key$1 = "icy;", _map$1[_key$1] = { k: _key$1, v: 1080 }, _key$1 = "iecy;", _map$1[_key$1] = { k: _key$1, v: 1077 }, _key$1 = "iexcl;", _map$1[_key$1] = { k: _key$1, v: 161 }, _key$1 = "iff;", _map$1[_key$1] = { k: _key$1, v: 8660 }, _key$1 = "ifr;", _map$1[_key$1] = { k: _key$1, v: 120102 }, _key$1 = "igrave;", _map$1[_key$1] = { k: _key$1, v: 236 }, _key$1 = "ii;", _map$1[_key$1] = { k: _key$1, v: 8520 }, _key$1 = "iiiint;", _map$1[_key$1] = { k: _key$1, v: 10764 }, _key$1 = "iiint;", _map$1[_key$1] = { k: _key$1, v: 8749 }, _key$1 = "iinfin;", _map$1[_key$1] = { k: _key$1, v: 10716 }, _key$1 = "iiota;", _map$1[_key$1] = { k: _key$1, v: 8489 }, _key$1 = "ijlig;", _map$1[_key$1] = { k: _key$1, v: 307 }, _key$1 = "imacr;", _map$1[_key$1] = { k: _key$1, v: 299 }, _key$1 = "image;", _map$1[_key$1] = { k: _key$1, v: 8465 }, _key$1 = "imagline;", _map$1[_key$1] = { k: _key$1, v: 8464 }, _key$1 = "imagpart;", _map$1[_key$1] = { k: _key$1, v: 8465 }, _key$1 = "imath;", _map$1[_key$1] = { k: _key$1, v: 305 }, _key$1 = "imof;", _map$1[_key$1] = { k: _key$1, v: 8887 }, _key$1 = "imped;", _map$1[_key$1] = { k: _key$1, v: 437 }, _key$1 = "in;", _map$1[_key$1] = { k: _key$1, v: 8712 }, _key$1 = "incare;", _map$1[_key$1] = { k: _key$1, v: 8453 }, _key$1 = "infin;", _map$1[_key$1] = { k: _key$1, v: 8734 }, _key$1 = "infintie;", _map$1[_key$1] = { k: _key$1, v: 10717 }, _key$1 = "inodot;", _map$1[_key$1] = { k: _key$1, v: 305 }, _key$1 = "int;", _map$1[_key$1] = { k: _key$1, v: 8747 }, _key$1 = "intcal;", _map$1[_key$1] = { k: _key$1, v: 8890 }, _key$1 = "integers;", _map$1[_key$1] = { k: _key$1, v: 8484 }, _key$1 = "intercal;", _map$1[_key$1] = { k: _key$1, v: 8890 }, _key$1 = "intlarhk;", _map$1[_key$1] = { k: _key$1, v: 10775 }, _key$1 = "intprod;", _map$1[_key$1] = { k: _key$1, v: 10812 }, _key$1 = "iocy;", _map$1[_key$1] = { k: _key$1, v: 1105 }, _key$1 = "iogon;", _map$1[_key$1] = { k: _key$1, v: 303 }, _key$1 = "iopf;", _map$1[_key$1] = { k: _key$1, v: 120154 }, _key$1 = "iota;", _map$1[_key$1] = { k: _key$1, v: 953 }, _key$1 = "iprod;", _map$1[_key$1] = { k: _key$1, v: 10812 }, _key$1 = "iquest;", _map$1[_key$1] = { k: _key$1, v: 191 }, _key$1 = "iscr;", _map$1[_key$1] = { k: _key$1, v: 119998 }, _key$1 = "isin;", _map$1[_key$1] = { k: _key$1, v: 8712 }, _key$1 = "isinE;", _map$1[_key$1] = { k: _key$1, v: 8953 }, _key$1 = "isindot;", _map$1[_key$1] = { k: _key$1, v: 8949 }, _key$1 = "isins;", _map$1[_key$1] = { k: _key$1, v: 8948 }, _key$1 = "isinsv;", _map$1[_key$1] = { k: _key$1, v: 8947 }, _key$1 = "isinv;", _map$1[_key$1] = { k: _key$1, v: 8712 }, _key$1 = "it;", _map$1[_key$1] = { k: _key$1, v: 8290 }, _key$1 = "itilde;", _map$1[_key$1] = { k: _key$1, v: 297 }, _key$1 = "iukcy;", _map$1[_key$1] = { k: _key$1, v: 1110 }, _key$1 = "iuml;", _map$1[_key$1] = { k: _key$1, v: 239 }, _key$1 = "jcirc;", _map$1[_key$1] = { k: _key$1, v: 309 }, _key$1 = "jcy;", _map$1[_key$1] = { k: _key$1, v: 1081 }, _key$1 = "jfr;", _map$1[_key$1] = { k: _key$1, v: 120103 }, _key$1 = "jmath;", _map$1[_key$1] = { k: _key$1, v: 567 }, _key$1 = "jopf;", _map$1[_key$1] = { k: _key$1, v: 120155 }, _key$1 = "jscr;", _map$1[_key$1] = { k: _key$1, v: 119999 }, _key$1 = "jsercy;", _map$1[_key$1] = { k: _key$1, v: 1112 }, _key$1 = "jukcy;", _map$1[_key$1] = { k: _key$1, v: 1108 }, _key$1 = "kappa;", _map$1[_key$1] = { k: _key$1, v: 954 }, _key$1 = "kappav;", _map$1[_key$1] = { k: _key$1, v: 1008 }, _key$1 = "kcedil;", _map$1[_key$1] = { k: _key$1, v: 311 }, _key$1 = "kcy;", _map$1[_key$1] = { k: _key$1, v: 1082 }, _key$1 = "kfr;", _map$1[_key$1] = { k: _key$1, v: 120104 }, _key$1 = "kgreen;", _map$1[_key$1] = { k: _key$1, v: 312 }, _key$1 = "khcy;", _map$1[_key$1] = { k: _key$1, v: 1093 }, _key$1 = "kjcy;", _map$1[_key$1] = { k: _key$1, v: 1116 }, _key$1 = "kopf;", _map$1[_key$1] = { k: _key$1, v: 120156 }, _key$1 = "kscr;", _map$1[_key$1] = { k: _key$1, v: 120000 }, _key$1 = "lAarr;", _map$1[_key$1] = { k: _key$1, v: 8666 }, _key$1 = "lArr;", _map$1[_key$1] = { k: _key$1, v: 8656 }, _key$1 = "lAtail;", _map$1[_key$1] = { k: _key$1, v: 10523 }, _key$1 = "lBarr;", _map$1[_key$1] = { k: _key$1, v: 10510 }, _key$1 = "lE;", _map$1[_key$1] = { k: _key$1, v: 8806 }, _key$1 = "lEg;", _map$1[_key$1] = { k: _key$1, v: 10891 }, _key$1 = "lHar;", _map$1[_key$1] = { k: _key$1, v: 10594 }, _key$1 = "lacute;", _map$1[_key$1] = { k: _key$1, v: 314 }, _key$1 = "laemptyv;", _map$1[_key$1] = { k: _key$1, v: 10676 }, _key$1 = "lagran;", _map$1[_key$1] = { k: _key$1, v: 8466 }, _key$1 = "lambda;", _map$1[_key$1] = { k: _key$1, v: 955 }, _key$1 = "lang;", _map$1[_key$1] = { k: _key$1, v: 10216 }, _key$1 = "langd;", _map$1[_key$1] = { k: _key$1, v: 10641 }, _key$1 = "langle;", _map$1[_key$1] = { k: _key$1, v: 10216 }, _key$1 = "lap;", _map$1[_key$1] = { k: _key$1, v: 10885 }, _key$1 = "laquo;", _map$1[_key$1] = { k: _key$1, v: 171 }, _key$1 = "larr;", _map$1[_key$1] = { k: _key$1, v: 8592 }, _key$1 = "larrb;", _map$1[_key$1] = { k: _key$1, v: 8676 }, _key$1 = "larrbfs;", _map$1[_key$1] = { k: _key$1, v: 10527 }, _key$1 = "larrfs;", _map$1[_key$1] = { k: _key$1, v: 10525 }, _key$1 = "larrhk;", _map$1[_key$1] = { k: _key$1, v: 8617 }, _key$1 = "larrlp;", _map$1[_key$1] = { k: _key$1, v: 8619 }, _key$1 = "larrpl;", _map$1[_key$1] = { k: _key$1, v: 10553 }, _key$1 = "larrsim;", _map$1[_key$1] = { k: _key$1, v: 10611 }, _key$1 = "larrtl;", _map$1[_key$1] = { k: _key$1, v: 8610 }, _key$1 = "lat;", _map$1[_key$1] = { k: _key$1, v: 10923 }, _key$1 = "latail;", _map$1[_key$1] = { k: _key$1, v: 10521 }, _key$1 = "late;", _map$1[_key$1] = { k: _key$1, v: 10925 }, _key$1 = "lbarr;", _map$1[_key$1] = { k: _key$1, v: 10508 }, _key$1 = "lbbrk;", _map$1[_key$1] = { k: _key$1, v: 10098 }, _key$1 = "lbrace;", _map$1[_key$1] = { k: _key$1, v: 123 }, _key$1 = "lbrack;", _map$1[_key$1] = { k: _key$1, v: 91 }, _key$1 = "lbrke;", _map$1[_key$1] = { k: _key$1, v: 10635 }, _key$1 = "lbrksld;", _map$1[_key$1] = { k: _key$1, v: 10639 }, _key$1 = "lbrkslu;", _map$1[_key$1] = { k: _key$1, v: 10637 }, _key$1 = "lcaron;", _map$1[_key$1] = { k: _key$1, v: 318 }, _key$1 = "lcedil;", _map$1[_key$1] = { k: _key$1, v: 316 }, _key$1 = "lceil;", _map$1[_key$1] = { k: _key$1, v: 8968 }, _key$1 = "lcub;", _map$1[_key$1] = { k: _key$1, v: 123 }, _key$1 = "lcy;", _map$1[_key$1] = { k: _key$1, v: 1083 }, _key$1 = "ldca;", _map$1[_key$1] = { k: _key$1, v: 10550 }, _key$1 = "ldquo;", _map$1[_key$1] = { k: _key$1, v: 8220 }, _key$1 = "ldquor;", _map$1[_key$1] = { k: _key$1, v: 8222 }, _key$1 = "ldrdhar;", _map$1[_key$1] = { k: _key$1, v: 10599 }, _key$1 = "ldrushar;", _map$1[_key$1] = { k: _key$1, v: 10571 }, _key$1 = "ldsh;", _map$1[_key$1] = { k: _key$1, v: 8626 }, _key$1 = "le;", _map$1[_key$1] = { k: _key$1, v: 8804 }, _key$1 = "leftarrow;", _map$1[_key$1] = { k: _key$1, v: 8592 }, _key$1 = "leftarrowtail;", _map$1[_key$1] = { k: _key$1, v: 8610 }, _key$1 = "leftharpoondown;", _map$1[_key$1] = { k: _key$1, v: 8637 }, _key$1 = "leftharpoonup;", _map$1[_key$1] = { k: _key$1, v: 8636 }, _key$1 = "leftleftarrows;", _map$1[_key$1] = { k: _key$1, v: 8647 }, _key$1 = "leftrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8596 }, _key$1 = "leftrightarrows;", _map$1[_key$1] = { k: _key$1, v: 8646 }, _key$1 = "leftrightharpoons;", _map$1[_key$1] = { k: _key$1, v: 8651 }, _key$1 = "leftrightsquigarrow;", _map$1[_key$1] = { k: _key$1, v: 8621 }, _key$1 = "leftthreetimes;", _map$1[_key$1] = { k: _key$1, v: 8907 }, _key$1 = "leg;", _map$1[_key$1] = { k: _key$1, v: 8922 }, _key$1 = "leq;", _map$1[_key$1] = { k: _key$1, v: 8804 }, _key$1 = "leqq;", _map$1[_key$1] = { k: _key$1, v: 8806 }, _key$1 = "leqslant;", _map$1[_key$1] = { k: _key$1, v: 10877 }, _key$1 = "les;", _map$1[_key$1] = { k: _key$1, v: 10877 }, _key$1 = "lescc;", _map$1[_key$1] = { k: _key$1, v: 10920 }, _key$1 = "lesdot;", _map$1[_key$1] = { k: _key$1, v: 10879 }, _key$1 = "lesdoto;", _map$1[_key$1] = { k: _key$1, v: 10881 }, _key$1 = "lesdotor;", _map$1[_key$1] = { k: _key$1, v: 10883 }, _key$1 = "lesges;", _map$1[_key$1] = { k: _key$1, v: 10899 }, _key$1 = "lessapprox;", _map$1[_key$1] = { k: _key$1, v: 10885 }, _key$1 = "lessdot;", _map$1[_key$1] = { k: _key$1, v: 8918 }, _key$1 = "lesseqgtr;", _map$1[_key$1] = { k: _key$1, v: 8922 }, _key$1 = "lesseqqgtr;", _map$1[_key$1] = { k: _key$1, v: 10891 }, _key$1 = "lessgtr;", _map$1[_key$1] = { k: _key$1, v: 8822 }, _key$1 = "lesssim;", _map$1[_key$1] = { k: _key$1, v: 8818 }, _key$1 = "lfisht;", _map$1[_key$1] = { k: _key$1, v: 10620 }, _key$1 = "lfloor;", _map$1[_key$1] = { k: _key$1, v: 8970 }, _key$1 = "lfr;", _map$1[_key$1] = { k: _key$1, v: 120105 }, _key$1 = "lg;", _map$1[_key$1] = { k: _key$1, v: 8822 }, _key$1 = "lgE;", _map$1[_key$1] = { k: _key$1, v: 10897 }, _key$1 = "lhard;", _map$1[_key$1] = { k: _key$1, v: 8637 }, _key$1 = "lharu;", _map$1[_key$1] = { k: _key$1, v: 8636 }, _key$1 = "lharul;", _map$1[_key$1] = { k: _key$1, v: 10602 }, _key$1 = "lhblk;", _map$1[_key$1] = { k: _key$1, v: 9604 }, _key$1 = "ljcy;", _map$1[_key$1] = { k: _key$1, v: 1113 }, _key$1 = "ll;", _map$1[_key$1] = { k: _key$1, v: 8810 }, _key$1 = "llarr;", _map$1[_key$1] = { k: _key$1, v: 8647 }, _key$1 = "llcorner;", _map$1[_key$1] = { k: _key$1, v: 8990 }, _key$1 = "llhard;", _map$1[_key$1] = { k: _key$1, v: 10603 }, _key$1 = "lltri;", _map$1[_key$1] = { k: _key$1, v: 9722 }, _key$1 = "lmidot;", _map$1[_key$1] = { k: _key$1, v: 320 }, _key$1 = "lmoust;", _map$1[_key$1] = { k: _key$1, v: 9136 }, _key$1 = "lmoustache;", _map$1[_key$1] = { k: _key$1, v: 9136 }, _key$1 = "lnE;", _map$1[_key$1] = { k: _key$1, v: 8808 }, _key$1 = "lnap;", _map$1[_key$1] = { k: _key$1, v: 10889 }, _key$1 = "lnapprox;", _map$1[_key$1] = { k: _key$1, v: 10889 }, _key$1 = "lne;", _map$1[_key$1] = { k: _key$1, v: 10887 }, _key$1 = "lneq;", _map$1[_key$1] = { k: _key$1, v: 10887 }, _key$1 = "lneqq;", _map$1[_key$1] = { k: _key$1, v: 8808 }, _key$1 = "lnsim;", _map$1[_key$1] = { k: _key$1, v: 8934 }, _key$1 = "loang;", _map$1[_key$1] = { k: _key$1, v: 10220 }, _key$1 = "loarr;", _map$1[_key$1] = { k: _key$1, v: 8701 }, _key$1 = "lobrk;", _map$1[_key$1] = { k: _key$1, v: 10214 }, _key$1 = "longleftarrow;", _map$1[_key$1] = { k: _key$1, v: 10229 }, _key$1 = "longleftrightarrow;", _map$1[_key$1] = { k: _key$1, v: 10231 }, _key$1 = "longmapsto;", _map$1[_key$1] = { k: _key$1, v: 10236 }, _key$1 = "longrightarrow;", _map$1[_key$1] = { k: _key$1, v: 10230 }, _key$1 = "looparrowleft;", _map$1[_key$1] = { k: _key$1, v: 8619 }, _key$1 = "looparrowright;", _map$1[_key$1] = { k: _key$1, v: 8620 }, _key$1 = "lopar;", _map$1[_key$1] = { k: _key$1, v: 10629 }, _key$1 = "lopf;", _map$1[_key$1] = { k: _key$1, v: 120157 }, _key$1 = "loplus;", _map$1[_key$1] = { k: _key$1, v: 10797 }, _key$1 = "lotimes;", _map$1[_key$1] = { k: _key$1, v: 10804 }, _key$1 = "lowast;", _map$1[_key$1] = { k: _key$1, v: 8727 }, _key$1 = "lowbar;", _map$1[_key$1] = { k: _key$1, v: 95 }, _key$1 = "loz;", _map$1[_key$1] = { k: _key$1, v: 9674 }, _key$1 = "lozenge;", _map$1[_key$1] = { k: _key$1, v: 9674 }, _key$1 = "lozf;", _map$1[_key$1] = { k: _key$1, v: 10731 }, _key$1 = "lpar;", _map$1[_key$1] = { k: _key$1, v: 40 }, _key$1 = "lparlt;", _map$1[_key$1] = { k: _key$1, v: 10643 }, _key$1 = "lrarr;", _map$1[_key$1] = { k: _key$1, v: 8646 }, _key$1 = "lrcorner;", _map$1[_key$1] = { k: _key$1, v: 8991 }, _key$1 = "lrhar;", _map$1[_key$1] = { k: _key$1, v: 8651 }, _key$1 = "lrhard;", _map$1[_key$1] = { k: _key$1, v: 10605 }, _key$1 = "lrm;", _map$1[_key$1] = { k: _key$1, v: 8206 }, _key$1 = "lrtri;", _map$1[_key$1] = { k: _key$1, v: 8895 }, _key$1 = "lsaquo;", _map$1[_key$1] = { k: _key$1, v: 8249 }, _key$1 = "lscr;", _map$1[_key$1] = { k: _key$1, v: 120001 }, _key$1 = "lsh;", _map$1[_key$1] = { k: _key$1, v: 8624 }, _key$1 = "lsim;", _map$1[_key$1] = { k: _key$1, v: 8818 }, _key$1 = "lsime;", _map$1[_key$1] = { k: _key$1, v: 10893 }, _key$1 = "lsimg;", _map$1[_key$1] = { k: _key$1, v: 10895 }, _key$1 = "lsqb;", _map$1[_key$1] = { k: _key$1, v: 91 }, _key$1 = "lsquo;", _map$1[_key$1] = { k: _key$1, v: 8216 }, _key$1 = "lsquor;", _map$1[_key$1] = { k: _key$1, v: 8218 }, _key$1 = "lstrok;", _map$1[_key$1] = { k: _key$1, v: 322 }, _key$1 = "lt;", _map$1[_key$1] = { k: _key$1, v: 60 }, _key$1 = "ltcc;", _map$1[_key$1] = { k: _key$1, v: 10918 }, _key$1 = "ltcir;", _map$1[_key$1] = { k: _key$1, v: 10873 }, _key$1 = "ltdot;", _map$1[_key$1] = { k: _key$1, v: 8918 }, _key$1 = "lthree;", _map$1[_key$1] = { k: _key$1, v: 8907 }, _key$1 = "ltimes;", _map$1[_key$1] = { k: _key$1, v: 8905 }, _key$1 = "ltlarr;", _map$1[_key$1] = { k: _key$1, v: 10614 }, _key$1 = "ltquest;", _map$1[_key$1] = { k: _key$1, v: 10875 }, _key$1 = "ltrPar;", _map$1[_key$1] = { k: _key$1, v: 10646 }, _key$1 = "ltri;", _map$1[_key$1] = { k: _key$1, v: 9667 }, _key$1 = "ltrie;", _map$1[_key$1] = { k: _key$1, v: 8884 }, _key$1 = "ltrif;", _map$1[_key$1] = { k: _key$1, v: 9666 }, _key$1 = "lurdshar;", _map$1[_key$1] = { k: _key$1, v: 10570 }, _key$1 = "luruhar;", _map$1[_key$1] = { k: _key$1, v: 10598 }, _key$1 = "mDDot;", _map$1[_key$1] = { k: _key$1, v: 8762 }, _key$1 = "macr;", _map$1[_key$1] = { k: _key$1, v: 175 }, _key$1 = "male;", _map$1[_key$1] = { k: _key$1, v: 9794 }, _key$1 = "malt;", _map$1[_key$1] = { k: _key$1, v: 10016 }, _key$1 = "maltese;", _map$1[_key$1] = { k: _key$1, v: 10016 }, _key$1 = "map;", _map$1[_key$1] = { k: _key$1, v: 8614 }, _key$1 = "mapsto;", _map$1[_key$1] = { k: _key$1, v: 8614 }, _key$1 = "mapstodown;", _map$1[_key$1] = { k: _key$1, v: 8615 }, _key$1 = "mapstoleft;", _map$1[_key$1] = { k: _key$1, v: 8612 }, _key$1 = "mapstoup;", _map$1[_key$1] = { k: _key$1, v: 8613 }, _key$1 = "marker;", _map$1[_key$1] = { k: _key$1, v: 9646 }, _key$1 = "mcomma;", _map$1[_key$1] = { k: _key$1, v: 10793 }, _key$1 = "mcy;", _map$1[_key$1] = { k: _key$1, v: 1084 }, _key$1 = "mdash;", _map$1[_key$1] = { k: _key$1, v: 8212 }, _key$1 = "measuredangle;", _map$1[_key$1] = { k: _key$1, v: 8737 }, _key$1 = "mfr;", _map$1[_key$1] = { k: _key$1, v: 120106 }, _key$1 = "mho;", _map$1[_key$1] = { k: _key$1, v: 8487 }, _key$1 = "micro;", _map$1[_key$1] = { k: _key$1, v: 181 }, _key$1 = "mid;", _map$1[_key$1] = { k: _key$1, v: 8739 }, _key$1 = "midast;", _map$1[_key$1] = { k: _key$1, v: 42 }, _key$1 = "midcir;", _map$1[_key$1] = { k: _key$1, v: 10992 }, _key$1 = "middot;", _map$1[_key$1] = { k: _key$1, v: 183 }, _key$1 = "minus;", _map$1[_key$1] = { k: _key$1, v: 8722 }, _key$1 = "minusb;", _map$1[_key$1] = { k: _key$1, v: 8863 }, _key$1 = "minusd;", _map$1[_key$1] = { k: _key$1, v: 8760 }, _key$1 = "minusdu;", _map$1[_key$1] = { k: _key$1, v: 10794 }, _key$1 = "mlcp;", _map$1[_key$1] = { k: _key$1, v: 10971 }, _key$1 = "mldr;", _map$1[_key$1] = { k: _key$1, v: 8230 }, _key$1 = "mnplus;", _map$1[_key$1] = { k: _key$1, v: 8723 }, _key$1 = "models;", _map$1[_key$1] = { k: _key$1, v: 8871 }, _key$1 = "mopf;", _map$1[_key$1] = { k: _key$1, v: 120158 }, _key$1 = "mp;", _map$1[_key$1] = { k: _key$1, v: 8723 }, _key$1 = "mscr;", _map$1[_key$1] = { k: _key$1, v: 120002 }, _key$1 = "mstpos;", _map$1[_key$1] = { k: _key$1, v: 8766 }, _key$1 = "mu;", _map$1[_key$1] = { k: _key$1, v: 956 }, _key$1 = "multimap;", _map$1[_key$1] = { k: _key$1, v: 8888 }, _key$1 = "mumap;", _map$1[_key$1] = { k: _key$1, v: 8888 }, _key$1 = "nLeftarrow;", _map$1[_key$1] = { k: _key$1, v: 8653 }, _key$1 = "nLeftrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8654 }, _key$1 = "nRightarrow;", _map$1[_key$1] = { k: _key$1, v: 8655 }, _key$1 = "nVDash;", _map$1[_key$1] = { k: _key$1, v: 8879 }, _key$1 = "nVdash;", _map$1[_key$1] = { k: _key$1, v: 8878 }, _key$1 = "nabla;", _map$1[_key$1] = { k: _key$1, v: 8711 }, _key$1 = "nacute;", _map$1[_key$1] = { k: _key$1, v: 324 }, _key$1 = "nap;", _map$1[_key$1] = { k: _key$1, v: 8777 }, _key$1 = "napos;", _map$1[_key$1] = { k: _key$1, v: 329 }, _key$1 = "napprox;", _map$1[_key$1] = { k: _key$1, v: 8777 }, _key$1 = "natur;", _map$1[_key$1] = { k: _key$1, v: 9838 }, _key$1 = "natural;", _map$1[_key$1] = { k: _key$1, v: 9838 }, _key$1 = "naturals;", _map$1[_key$1] = { k: _key$1, v: 8469 }, _key$1 = "nbsp;", _map$1[_key$1] = { k: _key$1, v: 160 }, _key$1 = "ncap;", _map$1[_key$1] = { k: _key$1, v: 10819 }, _key$1 = "ncaron;", _map$1[_key$1] = { k: _key$1, v: 328 }, _key$1 = "ncedil;", _map$1[_key$1] = { k: _key$1, v: 326 }, _key$1 = "ncong;", _map$1[_key$1] = { k: _key$1, v: 8775 }, _key$1 = "ncup;", _map$1[_key$1] = { k: _key$1, v: 10818 }, _key$1 = "ncy;", _map$1[_key$1] = { k: _key$1, v: 1085 }, _key$1 = "ndash;", _map$1[_key$1] = { k: _key$1, v: 8211 }, _key$1 = "ne;", _map$1[_key$1] = { k: _key$1, v: 8800 }, _key$1 = "neArr;", _map$1[_key$1] = { k: _key$1, v: 8663 }, _key$1 = "nearhk;", _map$1[_key$1] = { k: _key$1, v: 10532 }, _key$1 = "nearr;", _map$1[_key$1] = { k: _key$1, v: 8599 }, _key$1 = "nearrow;", _map$1[_key$1] = { k: _key$1, v: 8599 }, _key$1 = "nequiv;", _map$1[_key$1] = { k: _key$1, v: 8802 }, _key$1 = "nesear;", _map$1[_key$1] = { k: _key$1, v: 10536 }, _key$1 = "nexist;", _map$1[_key$1] = { k: _key$1, v: 8708 }, _key$1 = "nexists;", _map$1[_key$1] = { k: _key$1, v: 8708 }, _key$1 = "nfr;", _map$1[_key$1] = { k: _key$1, v: 120107 }, _key$1 = "nge;", _map$1[_key$1] = { k: _key$1, v: 8817 }, _key$1 = "ngeq;", _map$1[_key$1] = { k: _key$1, v: 8817 }, _key$1 = "ngsim;", _map$1[_key$1] = { k: _key$1, v: 8821 }, _key$1 = "ngt;", _map$1[_key$1] = { k: _key$1, v: 8815 }, _key$1 = "ngtr;", _map$1[_key$1] = { k: _key$1, v: 8815 }, _key$1 = "nhArr;", _map$1[_key$1] = { k: _key$1, v: 8654 }, _key$1 = "nharr;", _map$1[_key$1] = { k: _key$1, v: 8622 }, _key$1 = "nhpar;", _map$1[_key$1] = { k: _key$1, v: 10994 }, _key$1 = "ni;", _map$1[_key$1] = { k: _key$1, v: 8715 }, _key$1 = "nis;", _map$1[_key$1] = { k: _key$1, v: 8956 }, _key$1 = "nisd;", _map$1[_key$1] = { k: _key$1, v: 8954 }, _key$1 = "niv;", _map$1[_key$1] = { k: _key$1, v: 8715 }, _key$1 = "njcy;", _map$1[_key$1] = { k: _key$1, v: 1114 }, _key$1 = "nlArr;", _map$1[_key$1] = { k: _key$1, v: 8653 }, _key$1 = "nlarr;", _map$1[_key$1] = { k: _key$1, v: 8602 }, _key$1 = "nldr;", _map$1[_key$1] = { k: _key$1, v: 8229 }, _key$1 = "nle;", _map$1[_key$1] = { k: _key$1, v: 8816 }, _key$1 = "nleftarrow;", _map$1[_key$1] = { k: _key$1, v: 8602 }, _key$1 = "nleftrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8622 }, _key$1 = "nleq;", _map$1[_key$1] = { k: _key$1, v: 8816 }, _key$1 = "nless;", _map$1[_key$1] = { k: _key$1, v: 8814 }, _key$1 = "nlsim;", _map$1[_key$1] = { k: _key$1, v: 8820 }, _key$1 = "nlt;", _map$1[_key$1] = { k: _key$1, v: 8814 }, _key$1 = "nltri;", _map$1[_key$1] = { k: _key$1, v: 8938 }, _key$1 = "nltrie;", _map$1[_key$1] = { k: _key$1, v: 8940 }, _key$1 = "nmid;", _map$1[_key$1] = { k: _key$1, v: 8740 }, _key$1 = "nopf;", _map$1[_key$1] = { k: _key$1, v: 120159 }, _key$1 = "not;", _map$1[_key$1] = { k: _key$1, v: 172 }, _key$1 = "notin;", _map$1[_key$1] = { k: _key$1, v: 8713 }, _key$1 = "notinva;", _map$1[_key$1] = { k: _key$1, v: 8713 }, _key$1 = "notinvb;", _map$1[_key$1] = { k: _key$1, v: 8951 }, _key$1 = "notinvc;", _map$1[_key$1] = { k: _key$1, v: 8950 }, _key$1 = "notni;", _map$1[_key$1] = { k: _key$1, v: 8716 }, _key$1 = "notniva;", _map$1[_key$1] = { k: _key$1, v: 8716 }, _key$1 = "notnivb;", _map$1[_key$1] = { k: _key$1, v: 8958 }, _key$1 = "notnivc;", _map$1[_key$1] = { k: _key$1, v: 8957 }, _key$1 = "npar;", _map$1[_key$1] = { k: _key$1, v: 8742 }, _key$1 = "nparallel;", _map$1[_key$1] = { k: _key$1, v: 8742 }, _key$1 = "npolint;", _map$1[_key$1] = { k: _key$1, v: 10772 }, _key$1 = "npr;", _map$1[_key$1] = { k: _key$1, v: 8832 }, _key$1 = "nprcue;", _map$1[_key$1] = { k: _key$1, v: 8928 }, _key$1 = "nprec;", _map$1[_key$1] = { k: _key$1, v: 8832 }, _key$1 = "nrArr;", _map$1[_key$1] = { k: _key$1, v: 8655 }, _key$1 = "nrarr;", _map$1[_key$1] = { k: _key$1, v: 8603 }, _key$1 = "nrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8603 }, _key$1 = "nrtri;", _map$1[_key$1] = { k: _key$1, v: 8939 }, _key$1 = "nrtrie;", _map$1[_key$1] = { k: _key$1, v: 8941 }, _key$1 = "nsc;", _map$1[_key$1] = { k: _key$1, v: 8833 }, _key$1 = "nsccue;", _map$1[_key$1] = { k: _key$1, v: 8929 }, _key$1 = "nscr;", _map$1[_key$1] = { k: _key$1, v: 120003 }, _key$1 = "nshortmid;", _map$1[_key$1] = { k: _key$1, v: 8740 }, _key$1 = "nshortparallel;", _map$1[_key$1] = { k: _key$1, v: 8742 }, _key$1 = "nsim;", _map$1[_key$1] = { k: _key$1, v: 8769 }, _key$1 = "nsime;", _map$1[_key$1] = { k: _key$1, v: 8772 }, _key$1 = "nsimeq;", _map$1[_key$1] = { k: _key$1, v: 8772 }, _key$1 = "nsmid;", _map$1[_key$1] = { k: _key$1, v: 8740 }, _key$1 = "nspar;", _map$1[_key$1] = { k: _key$1, v: 8742 }, _key$1 = "nsqsube;", _map$1[_key$1] = { k: _key$1, v: 8930 }, _key$1 = "nsqsupe;", _map$1[_key$1] = { k: _key$1, v: 8931 }, _key$1 = "nsub;", _map$1[_key$1] = { k: _key$1, v: 8836 }, _key$1 = "nsube;", _map$1[_key$1] = { k: _key$1, v: 8840 }, _key$1 = "nsubseteq;", _map$1[_key$1] = { k: _key$1, v: 8840 }, _key$1 = "nsucc;", _map$1[_key$1] = { k: _key$1, v: 8833 }, _key$1 = "nsup;", _map$1[_key$1] = { k: _key$1, v: 8837 }, _key$1 = "nsupe;", _map$1[_key$1] = { k: _key$1, v: 8841 }, _key$1 = "nsupseteq;", _map$1[_key$1] = { k: _key$1, v: 8841 }, _key$1 = "ntgl;", _map$1[_key$1] = { k: _key$1, v: 8825 }, _key$1 = "ntilde;", _map$1[_key$1] = { k: _key$1, v: 241 }, _key$1 = "ntlg;", _map$1[_key$1] = { k: _key$1, v: 8824 }, _key$1 = "ntriangleleft;", _map$1[_key$1] = { k: _key$1, v: 8938 }, _key$1 = "ntrianglelefteq;", _map$1[_key$1] = { k: _key$1, v: 8940 }, _key$1 = "ntriangleright;", _map$1[_key$1] = { k: _key$1, v: 8939 }, _key$1 = "ntrianglerighteq;", _map$1[_key$1] = { k: _key$1, v: 8941 }, _key$1 = "nu;", _map$1[_key$1] = { k: _key$1, v: 957 }, _key$1 = "num;", _map$1[_key$1] = { k: _key$1, v: 35 }, _key$1 = "numero;", _map$1[_key$1] = { k: _key$1, v: 8470 }, _key$1 = "numsp;", _map$1[_key$1] = { k: _key$1, v: 8199 }, _key$1 = "nvDash;", _map$1[_key$1] = { k: _key$1, v: 8877 }, _key$1 = "nvHarr;", _map$1[_key$1] = { k: _key$1, v: 10500 }, _key$1 = "nvdash;", _map$1[_key$1] = { k: _key$1, v: 8876 }, _key$1 = "nvinfin;", _map$1[_key$1] = { k: _key$1, v: 10718 }, _key$1 = "nvlArr;", _map$1[_key$1] = { k: _key$1, v: 10498 }, _key$1 = "nvrArr;", _map$1[_key$1] = { k: _key$1, v: 10499 }, _key$1 = "nwArr;", _map$1[_key$1] = { k: _key$1, v: 8662 }, _key$1 = "nwarhk;", _map$1[_key$1] = { k: _key$1, v: 10531 }, _key$1 = "nwarr;", _map$1[_key$1] = { k: _key$1, v: 8598 }, _key$1 = "nwarrow;", _map$1[_key$1] = { k: _key$1, v: 8598 }, _key$1 = "nwnear;", _map$1[_key$1] = { k: _key$1, v: 10535 }, _key$1 = "oS;", _map$1[_key$1] = { k: _key$1, v: 9416 }, _key$1 = "oacute;", _map$1[_key$1] = { k: _key$1, v: 243 }, _key$1 = "oast;", _map$1[_key$1] = { k: _key$1, v: 8859 }, _key$1 = "ocir;", _map$1[_key$1] = { k: _key$1, v: 8858 }, _key$1 = "ocirc;", _map$1[_key$1] = { k: _key$1, v: 244 }, _key$1 = "ocy;", _map$1[_key$1] = { k: _key$1, v: 1086 }, _key$1 = "odash;", _map$1[_key$1] = { k: _key$1, v: 8861 }, _key$1 = "odblac;", _map$1[_key$1] = { k: _key$1, v: 337 }, _key$1 = "odiv;", _map$1[_key$1] = { k: _key$1, v: 10808 }, _key$1 = "odot;", _map$1[_key$1] = { k: _key$1, v: 8857 }, _key$1 = "odsold;", _map$1[_key$1] = { k: _key$1, v: 10684 }, _key$1 = "oelig;", _map$1[_key$1] = { k: _key$1, v: 339 }, _key$1 = "ofcir;", _map$1[_key$1] = { k: _key$1, v: 10687 }, _key$1 = "ofr;", _map$1[_key$1] = { k: _key$1, v: 120108 }, _key$1 = "ogon;", _map$1[_key$1] = { k: _key$1, v: 731 }, _key$1 = "ograve;", _map$1[_key$1] = { k: _key$1, v: 242 }, _key$1 = "ogt;", _map$1[_key$1] = { k: _key$1, v: 10689 }, _key$1 = "ohbar;", _map$1[_key$1] = { k: _key$1, v: 10677 }, _key$1 = "ohm;", _map$1[_key$1] = { k: _key$1, v: 937 }, _key$1 = "oint;", _map$1[_key$1] = { k: _key$1, v: 8750 }, _key$1 = "olarr;", _map$1[_key$1] = { k: _key$1, v: 8634 }, _key$1 = "olcir;", _map$1[_key$1] = { k: _key$1, v: 10686 }, _key$1 = "olcross;", _map$1[_key$1] = { k: _key$1, v: 10683 }, _key$1 = "oline;", _map$1[_key$1] = { k: _key$1, v: 8254 }, _key$1 = "olt;", _map$1[_key$1] = { k: _key$1, v: 10688 }, _key$1 = "omacr;", _map$1[_key$1] = { k: _key$1, v: 333 }, _key$1 = "omega;", _map$1[_key$1] = { k: _key$1, v: 969 }, _key$1 = "omicron;", _map$1[_key$1] = { k: _key$1, v: 959 }, _key$1 = "omid;", _map$1[_key$1] = { k: _key$1, v: 10678 }, _key$1 = "ominus;", _map$1[_key$1] = { k: _key$1, v: 8854 }, _key$1 = "oopf;", _map$1[_key$1] = { k: _key$1, v: 120160 }, _key$1 = "opar;", _map$1[_key$1] = { k: _key$1, v: 10679 }, _key$1 = "operp;", _map$1[_key$1] = { k: _key$1, v: 10681 }, _key$1 = "oplus;", _map$1[_key$1] = { k: _key$1, v: 8853 }, _key$1 = "or;", _map$1[_key$1] = { k: _key$1, v: 8744 }, _key$1 = "orarr;", _map$1[_key$1] = { k: _key$1, v: 8635 }, _key$1 = "ord;", _map$1[_key$1] = { k: _key$1, v: 10845 }, _key$1 = "order;", _map$1[_key$1] = { k: _key$1, v: 8500 }, _key$1 = "orderof;", _map$1[_key$1] = { k: _key$1, v: 8500 }, _key$1 = "ordf;", _map$1[_key$1] = { k: _key$1, v: 170 }, _key$1 = "ordm;", _map$1[_key$1] = { k: _key$1, v: 186 }, _key$1 = "origof;", _map$1[_key$1] = { k: _key$1, v: 8886 }, _key$1 = "oror;", _map$1[_key$1] = { k: _key$1, v: 10838 }, _key$1 = "orslope;", _map$1[_key$1] = { k: _key$1, v: 10839 }, _key$1 = "orv;", _map$1[_key$1] = { k: _key$1, v: 10843 }, _key$1 = "oscr;", _map$1[_key$1] = { k: _key$1, v: 8500 }, _key$1 = "oslash;", _map$1[_key$1] = { k: _key$1, v: 248 }, _key$1 = "osol;", _map$1[_key$1] = { k: _key$1, v: 8856 }, _key$1 = "otilde;", _map$1[_key$1] = { k: _key$1, v: 245 }, _key$1 = "otimes;", _map$1[_key$1] = { k: _key$1, v: 8855 }, _key$1 = "otimesas;", _map$1[_key$1] = { k: _key$1, v: 10806 }, _key$1 = "ouml;", _map$1[_key$1] = { k: _key$1, v: 246 }, _key$1 = "ovbar;", _map$1[_key$1] = { k: _key$1, v: 9021 }, _key$1 = "par;", _map$1[_key$1] = { k: _key$1, v: 8741 }, _key$1 = "para;", _map$1[_key$1] = { k: _key$1, v: 182 }, _key$1 = "parallel;", _map$1[_key$1] = { k: _key$1, v: 8741 }, _key$1 = "parsim;", _map$1[_key$1] = { k: _key$1, v: 10995 }, _key$1 = "parsl;", _map$1[_key$1] = { k: _key$1, v: 11005 }, _key$1 = "part;", _map$1[_key$1] = { k: _key$1, v: 8706 }, _key$1 = "pcy;", _map$1[_key$1] = { k: _key$1, v: 1087 }, _key$1 = "percnt;", _map$1[_key$1] = { k: _key$1, v: 37 }, _key$1 = "period;", _map$1[_key$1] = { k: _key$1, v: 46 }, _key$1 = "permil;", _map$1[_key$1] = { k: _key$1, v: 8240 }, _key$1 = "perp;", _map$1[_key$1] = { k: _key$1, v: 8869 }, _key$1 = "pertenk;", _map$1[_key$1] = { k: _key$1, v: 8241 }, _key$1 = "pfr;", _map$1[_key$1] = { k: _key$1, v: 120109 }, _key$1 = "phi;", _map$1[_key$1] = { k: _key$1, v: 966 }, _key$1 = "phiv;", _map$1[_key$1] = { k: _key$1, v: 981 }, _key$1 = "phmmat;", _map$1[_key$1] = { k: _key$1, v: 8499 }, _key$1 = "phone;", _map$1[_key$1] = { k: _key$1, v: 9742 }, _key$1 = "pi;", _map$1[_key$1] = { k: _key$1, v: 960 }, _key$1 = "pitchfork;", _map$1[_key$1] = { k: _key$1, v: 8916 }, _key$1 = "piv;", _map$1[_key$1] = { k: _key$1, v: 982 }, _key$1 = "planck;", _map$1[_key$1] = { k: _key$1, v: 8463 }, _key$1 = "planckh;", _map$1[_key$1] = { k: _key$1, v: 8462 }, _key$1 = "plankv;", _map$1[_key$1] = { k: _key$1, v: 8463 }, _key$1 = "plus;", _map$1[_key$1] = { k: _key$1, v: 43 }, _key$1 = "plusacir;", _map$1[_key$1] = { k: _key$1, v: 10787 }, _key$1 = "plusb;", _map$1[_key$1] = { k: _key$1, v: 8862 }, _key$1 = "pluscir;", _map$1[_key$1] = { k: _key$1, v: 10786 }, _key$1 = "plusdo;", _map$1[_key$1] = { k: _key$1, v: 8724 }, _key$1 = "plusdu;", _map$1[_key$1] = { k: _key$1, v: 10789 }, _key$1 = "pluse;", _map$1[_key$1] = { k: _key$1, v: 10866 }, _key$1 = "plusmn;", _map$1[_key$1] = { k: _key$1, v: 177 }, _key$1 = "plussim;", _map$1[_key$1] = { k: _key$1, v: 10790 }, _key$1 = "plustwo;", _map$1[_key$1] = { k: _key$1, v: 10791 }, _key$1 = "pm;", _map$1[_key$1] = { k: _key$1, v: 177 }, _key$1 = "pointint;", _map$1[_key$1] = { k: _key$1, v: 10773 }, _key$1 = "popf;", _map$1[_key$1] = { k: _key$1, v: 120161 }, _key$1 = "pound;", _map$1[_key$1] = { k: _key$1, v: 163 }, _key$1 = "pr;", _map$1[_key$1] = { k: _key$1, v: 8826 }, _key$1 = "prE;", _map$1[_key$1] = { k: _key$1, v: 10931 }, _key$1 = "prap;", _map$1[_key$1] = { k: _key$1, v: 10935 }, _key$1 = "prcue;", _map$1[_key$1] = { k: _key$1, v: 8828 }, _key$1 = "pre;", _map$1[_key$1] = { k: _key$1, v: 10927 }, _key$1 = "prec;", _map$1[_key$1] = { k: _key$1, v: 8826 }, _key$1 = "precapprox;", _map$1[_key$1] = { k: _key$1, v: 10935 }, _key$1 = "preccurlyeq;", _map$1[_key$1] = { k: _key$1, v: 8828 }, _key$1 = "preceq;", _map$1[_key$1] = { k: _key$1, v: 10927 }, _key$1 = "precnapprox;", _map$1[_key$1] = { k: _key$1, v: 10937 }, _key$1 = "precneqq;", _map$1[_key$1] = { k: _key$1, v: 10933 }, _key$1 = "precnsim;", _map$1[_key$1] = { k: _key$1, v: 8936 }, _key$1 = "precsim;", _map$1[_key$1] = { k: _key$1, v: 8830 }, _key$1 = "prime;", _map$1[_key$1] = { k: _key$1, v: 8242 }, _key$1 = "primes;", _map$1[_key$1] = { k: _key$1, v: 8473 }, _key$1 = "prnE;", _map$1[_key$1] = { k: _key$1, v: 10933 }, _key$1 = "prnap;", _map$1[_key$1] = { k: _key$1, v: 10937 }, _key$1 = "prnsim;", _map$1[_key$1] = { k: _key$1, v: 8936 }, _key$1 = "prod;", _map$1[_key$1] = { k: _key$1, v: 8719 }, _key$1 = "profalar;", _map$1[_key$1] = { k: _key$1, v: 9006 }, _key$1 = "profline;", _map$1[_key$1] = { k: _key$1, v: 8978 }, _key$1 = "profsurf;", _map$1[_key$1] = { k: _key$1, v: 8979 }, _key$1 = "prop;", _map$1[_key$1] = { k: _key$1, v: 8733 }, _key$1 = "propto;", _map$1[_key$1] = { k: _key$1, v: 8733 }, _key$1 = "prsim;", _map$1[_key$1] = { k: _key$1, v: 8830 }, _key$1 = "prurel;", _map$1[_key$1] = { k: _key$1, v: 8880 }, _key$1 = "pscr;", _map$1[_key$1] = { k: _key$1, v: 120005 }, _key$1 = "psi;", _map$1[_key$1] = { k: _key$1, v: 968 }, _key$1 = "puncsp;", _map$1[_key$1] = { k: _key$1, v: 8200 }, _key$1 = "qfr;", _map$1[_key$1] = { k: _key$1, v: 120110 }, _key$1 = "qint;", _map$1[_key$1] = { k: _key$1, v: 10764 }, _key$1 = "qopf;", _map$1[_key$1] = { k: _key$1, v: 120162 }, _key$1 = "qprime;", _map$1[_key$1] = { k: _key$1, v: 8279 }, _key$1 = "qscr;", _map$1[_key$1] = { k: _key$1, v: 120006 }, _key$1 = "quaternions;", _map$1[_key$1] = { k: _key$1, v: 8461 }, _key$1 = "quatint;", _map$1[_key$1] = { k: _key$1, v: 10774 }, _key$1 = "quest;", _map$1[_key$1] = { k: _key$1, v: 63 }, _key$1 = "questeq;", _map$1[_key$1] = { k: _key$1, v: 8799 }, _key$1 = "quot;", _map$1[_key$1] = { k: _key$1, v: 34 }, _key$1 = "rAarr;", _map$1[_key$1] = { k: _key$1, v: 8667 }, _key$1 = "rArr;", _map$1[_key$1] = { k: _key$1, v: 8658 }, _key$1 = "rAtail;", _map$1[_key$1] = { k: _key$1, v: 10524 }, _key$1 = "rBarr;", _map$1[_key$1] = { k: _key$1, v: 10511 }, _key$1 = "rHar;", _map$1[_key$1] = { k: _key$1, v: 10596 }, _key$1 = "racute;", _map$1[_key$1] = { k: _key$1, v: 341 }, _key$1 = "radic;", _map$1[_key$1] = { k: _key$1, v: 8730 }, _key$1 = "raemptyv;", _map$1[_key$1] = { k: _key$1, v: 10675 }, _key$1 = "rang;", _map$1[_key$1] = { k: _key$1, v: 10217 }, _key$1 = "rangd;", _map$1[_key$1] = { k: _key$1, v: 10642 }, _key$1 = "range;", _map$1[_key$1] = { k: _key$1, v: 10661 }, _key$1 = "rangle;", _map$1[_key$1] = { k: _key$1, v: 10217 }, _key$1 = "raquo;", _map$1[_key$1] = { k: _key$1, v: 187 }, _key$1 = "rarr;", _map$1[_key$1] = { k: _key$1, v: 8594 }, _key$1 = "rarrap;", _map$1[_key$1] = { k: _key$1, v: 10613 }, _key$1 = "rarrb;", _map$1[_key$1] = { k: _key$1, v: 8677 }, _key$1 = "rarrbfs;", _map$1[_key$1] = { k: _key$1, v: 10528 }, _key$1 = "rarrc;", _map$1[_key$1] = { k: _key$1, v: 10547 }, _key$1 = "rarrfs;", _map$1[_key$1] = { k: _key$1, v: 10526 }, _key$1 = "rarrhk;", _map$1[_key$1] = { k: _key$1, v: 8618 }, _key$1 = "rarrlp;", _map$1[_key$1] = { k: _key$1, v: 8620 }, _key$1 = "rarrpl;", _map$1[_key$1] = { k: _key$1, v: 10565 }, _key$1 = "rarrsim;", _map$1[_key$1] = { k: _key$1, v: 10612 }, _key$1 = "rarrtl;", _map$1[_key$1] = { k: _key$1, v: 8611 }, _key$1 = "rarrw;", _map$1[_key$1] = { k: _key$1, v: 8605 }, _key$1 = "ratail;", _map$1[_key$1] = { k: _key$1, v: 10522 }, _key$1 = "ratio;", _map$1[_key$1] = { k: _key$1, v: 8758 }, _key$1 = "rationals;", _map$1[_key$1] = { k: _key$1, v: 8474 }, _key$1 = "rbarr;", _map$1[_key$1] = { k: _key$1, v: 10509 }, _key$1 = "rbbrk;", _map$1[_key$1] = { k: _key$1, v: 10099 }, _key$1 = "rbrace;", _map$1[_key$1] = { k: _key$1, v: 125 }, _key$1 = "rbrack;", _map$1[_key$1] = { k: _key$1, v: 93 }, _key$1 = "rbrke;", _map$1[_key$1] = { k: _key$1, v: 10636 }, _key$1 = "rbrksld;", _map$1[_key$1] = { k: _key$1, v: 10638 }, _key$1 = "rbrkslu;", _map$1[_key$1] = { k: _key$1, v: 10640 }, _key$1 = "rcaron;", _map$1[_key$1] = { k: _key$1, v: 345 }, _key$1 = "rcedil;", _map$1[_key$1] = { k: _key$1, v: 343 }, _key$1 = "rceil;", _map$1[_key$1] = { k: _key$1, v: 8969 }, _key$1 = "rcub;", _map$1[_key$1] = { k: _key$1, v: 125 }, _key$1 = "rcy;", _map$1[_key$1] = { k: _key$1, v: 1088 }, _key$1 = "rdca;", _map$1[_key$1] = { k: _key$1, v: 10551 }, _key$1 = "rdldhar;", _map$1[_key$1] = { k: _key$1, v: 10601 }, _key$1 = "rdquo;", _map$1[_key$1] = { k: _key$1, v: 8221 }, _key$1 = "rdquor;", _map$1[_key$1] = { k: _key$1, v: 8221 }, _key$1 = "rdsh;", _map$1[_key$1] = { k: _key$1, v: 8627 }, _key$1 = "real;", _map$1[_key$1] = { k: _key$1, v: 8476 }, _key$1 = "realine;", _map$1[_key$1] = { k: _key$1, v: 8475 }, _key$1 = "realpart;", _map$1[_key$1] = { k: _key$1, v: 8476 }, _key$1 = "reals;", _map$1[_key$1] = { k: _key$1, v: 8477 }, _key$1 = "rect;", _map$1[_key$1] = { k: _key$1, v: 9645 }, _key$1 = "reg;", _map$1[_key$1] = { k: _key$1, v: 174 }, _key$1 = "rfisht;", _map$1[_key$1] = { k: _key$1, v: 10621 }, _key$1 = "rfloor;", _map$1[_key$1] = { k: _key$1, v: 8971 }, _key$1 = "rfr;", _map$1[_key$1] = { k: _key$1, v: 120111 }, _key$1 = "rhard;", _map$1[_key$1] = { k: _key$1, v: 8641 }, _key$1 = "rharu;", _map$1[_key$1] = { k: _key$1, v: 8640 }, _key$1 = "rharul;", _map$1[_key$1] = { k: _key$1, v: 10604 }, _key$1 = "rho;", _map$1[_key$1] = { k: _key$1, v: 961 }, _key$1 = "rhov;", _map$1[_key$1] = { k: _key$1, v: 1009 }, _key$1 = "rightarrow;", _map$1[_key$1] = { k: _key$1, v: 8594 }, _key$1 = "rightarrowtail;", _map$1[_key$1] = { k: _key$1, v: 8611 }, _key$1 = "rightharpoondown;", _map$1[_key$1] = { k: _key$1, v: 8641 }, _key$1 = "rightharpoonup;", _map$1[_key$1] = { k: _key$1, v: 8640 }, _key$1 = "rightleftarrows;", _map$1[_key$1] = { k: _key$1, v: 8644 }, _key$1 = "rightleftharpoons;", _map$1[_key$1] = { k: _key$1, v: 8652 }, _key$1 = "rightrightarrows;", _map$1[_key$1] = { k: _key$1, v: 8649 }, _key$1 = "rightsquigarrow;", _map$1[_key$1] = { k: _key$1, v: 8605 }, _key$1 = "rightthreetimes;", _map$1[_key$1] = { k: _key$1, v: 8908 }, _key$1 = "ring;", _map$1[_key$1] = { k: _key$1, v: 730 }, _key$1 = "risingdotseq;", _map$1[_key$1] = { k: _key$1, v: 8787 }, _key$1 = "rlarr;", _map$1[_key$1] = { k: _key$1, v: 8644 }, _key$1 = "rlhar;", _map$1[_key$1] = { k: _key$1, v: 8652 }, _key$1 = "rlm;", _map$1[_key$1] = { k: _key$1, v: 8207 }, _key$1 = "rmoust;", _map$1[_key$1] = { k: _key$1, v: 9137 }, _key$1 = "rmoustache;", _map$1[_key$1] = { k: _key$1, v: 9137 }, _key$1 = "rnmid;", _map$1[_key$1] = { k: _key$1, v: 10990 }, _key$1 = "roang;", _map$1[_key$1] = { k: _key$1, v: 10221 }, _key$1 = "roarr;", _map$1[_key$1] = { k: _key$1, v: 8702 }, _key$1 = "robrk;", _map$1[_key$1] = { k: _key$1, v: 10215 }, _key$1 = "ropar;", _map$1[_key$1] = { k: _key$1, v: 10630 }, _key$1 = "ropf;", _map$1[_key$1] = { k: _key$1, v: 120163 }, _key$1 = "roplus;", _map$1[_key$1] = { k: _key$1, v: 10798 }, _key$1 = "rotimes;", _map$1[_key$1] = { k: _key$1, v: 10805 }, _key$1 = "rpar;", _map$1[_key$1] = { k: _key$1, v: 41 }, _key$1 = "rpargt;", _map$1[_key$1] = { k: _key$1, v: 10644 }, _key$1 = "rppolint;", _map$1[_key$1] = { k: _key$1, v: 10770 }, _key$1 = "rrarr;", _map$1[_key$1] = { k: _key$1, v: 8649 }, _key$1 = "rsaquo;", _map$1[_key$1] = { k: _key$1, v: 8250 }, _key$1 = "rscr;", _map$1[_key$1] = { k: _key$1, v: 120007 }, _key$1 = "rsh;", _map$1[_key$1] = { k: _key$1, v: 8625 }, _key$1 = "rsqb;", _map$1[_key$1] = { k: _key$1, v: 93 }, _key$1 = "rsquo;", _map$1[_key$1] = { k: _key$1, v: 8217 }, _key$1 = "rsquor;", _map$1[_key$1] = { k: _key$1, v: 8217 }, _key$1 = "rthree;", _map$1[_key$1] = { k: _key$1, v: 8908 }, _key$1 = "rtimes;", _map$1[_key$1] = { k: _key$1, v: 8906 }, _key$1 = "rtri;", _map$1[_key$1] = { k: _key$1, v: 9657 }, _key$1 = "rtrie;", _map$1[_key$1] = { k: _key$1, v: 8885 }, _key$1 = "rtrif;", _map$1[_key$1] = { k: _key$1, v: 9656 }, _key$1 = "rtriltri;", _map$1[_key$1] = { k: _key$1, v: 10702 }, _key$1 = "ruluhar;", _map$1[_key$1] = { k: _key$1, v: 10600 }, _key$1 = "rx;", _map$1[_key$1] = { k: _key$1, v: 8478 }, _key$1 = "sacute;", _map$1[_key$1] = { k: _key$1, v: 347 }, _key$1 = "sbquo;", _map$1[_key$1] = { k: _key$1, v: 8218 }, _key$1 = "sc;", _map$1[_key$1] = { k: _key$1, v: 8827 }, _key$1 = "scE;", _map$1[_key$1] = { k: _key$1, v: 10932 }, _key$1 = "scap;", _map$1[_key$1] = { k: _key$1, v: 10936 }, _key$1 = "scaron;", _map$1[_key$1] = { k: _key$1, v: 353 }, _key$1 = "sccue;", _map$1[_key$1] = { k: _key$1, v: 8829 }, _key$1 = "sce;", _map$1[_key$1] = { k: _key$1, v: 10928 }, _key$1 = "scedil;", _map$1[_key$1] = { k: _key$1, v: 351 }, _key$1 = "scirc;", _map$1[_key$1] = { k: _key$1, v: 349 }, _key$1 = "scnE;", _map$1[_key$1] = { k: _key$1, v: 10934 }, _key$1 = "scnap;", _map$1[_key$1] = { k: _key$1, v: 10938 }, _key$1 = "scnsim;", _map$1[_key$1] = { k: _key$1, v: 8937 }, _key$1 = "scpolint;", _map$1[_key$1] = { k: _key$1, v: 10771 }, _key$1 = "scsim;", _map$1[_key$1] = { k: _key$1, v: 8831 }, _key$1 = "scy;", _map$1[_key$1] = { k: _key$1, v: 1089 }, _key$1 = "sdot;", _map$1[_key$1] = { k: _key$1, v: 8901 }, _key$1 = "sdotb;", _map$1[_key$1] = { k: _key$1, v: 8865 }, _key$1 = "sdote;", _map$1[_key$1] = { k: _key$1, v: 10854 }, _key$1 = "seArr;", _map$1[_key$1] = { k: _key$1, v: 8664 }, _key$1 = "searhk;", _map$1[_key$1] = { k: _key$1, v: 10533 }, _key$1 = "searr;", _map$1[_key$1] = { k: _key$1, v: 8600 }, _key$1 = "searrow;", _map$1[_key$1] = { k: _key$1, v: 8600 }, _key$1 = "sect;", _map$1[_key$1] = { k: _key$1, v: 167 }, _key$1 = "semi;", _map$1[_key$1] = { k: _key$1, v: 59 }, _key$1 = "seswar;", _map$1[_key$1] = { k: _key$1, v: 10537 }, _key$1 = "setminus;", _map$1[_key$1] = { k: _key$1, v: 8726 }, _key$1 = "setmn;", _map$1[_key$1] = { k: _key$1, v: 8726 }, _key$1 = "sext;", _map$1[_key$1] = { k: _key$1, v: 10038 }, _key$1 = "sfr;", _map$1[_key$1] = { k: _key$1, v: 120112 }, _key$1 = "sfrown;", _map$1[_key$1] = { k: _key$1, v: 8994 }, _key$1 = "sharp;", _map$1[_key$1] = { k: _key$1, v: 9839 }, _key$1 = "shchcy;", _map$1[_key$1] = { k: _key$1, v: 1097 }, _key$1 = "shcy;", _map$1[_key$1] = { k: _key$1, v: 1096 }, _key$1 = "shortmid;", _map$1[_key$1] = { k: _key$1, v: 8739 }, _key$1 = "shortparallel;", _map$1[_key$1] = { k: _key$1, v: 8741 }, _key$1 = "shy;", _map$1[_key$1] = { k: _key$1, v: 173 }, _key$1 = "sigma;", _map$1[_key$1] = { k: _key$1, v: 963 }, _key$1 = "sigmaf;", _map$1[_key$1] = { k: _key$1, v: 962 }, _key$1 = "sigmav;", _map$1[_key$1] = { k: _key$1, v: 962 }, _key$1 = "sim;", _map$1[_key$1] = { k: _key$1, v: 8764 }, _key$1 = "simdot;", _map$1[_key$1] = { k: _key$1, v: 10858 }, _key$1 = "sime;", _map$1[_key$1] = { k: _key$1, v: 8771 }, _key$1 = "simeq;", _map$1[_key$1] = { k: _key$1, v: 8771 }, _key$1 = "simg;", _map$1[_key$1] = { k: _key$1, v: 10910 }, _key$1 = "simgE;", _map$1[_key$1] = { k: _key$1, v: 10912 }, _key$1 = "siml;", _map$1[_key$1] = { k: _key$1, v: 10909 }, _key$1 = "simlE;", _map$1[_key$1] = { k: _key$1, v: 10911 }, _key$1 = "simne;", _map$1[_key$1] = { k: _key$1, v: 8774 }, _key$1 = "simplus;", _map$1[_key$1] = { k: _key$1, v: 10788 }, _key$1 = "simrarr;", _map$1[_key$1] = { k: _key$1, v: 10610 }, _key$1 = "slarr;", _map$1[_key$1] = { k: _key$1, v: 8592 }, _key$1 = "smallsetminus;", _map$1[_key$1] = { k: _key$1, v: 8726 }, _key$1 = "smashp;", _map$1[_key$1] = { k: _key$1, v: 10803 }, _key$1 = "smeparsl;", _map$1[_key$1] = { k: _key$1, v: 10724 }, _key$1 = "smid;", _map$1[_key$1] = { k: _key$1, v: 8739 }, _key$1 = "smile;", _map$1[_key$1] = { k: _key$1, v: 8995 }, _key$1 = "smt;", _map$1[_key$1] = { k: _key$1, v: 10922 }, _key$1 = "smte;", _map$1[_key$1] = { k: _key$1, v: 10924 }, _key$1 = "softcy;", _map$1[_key$1] = { k: _key$1, v: 1100 }, _key$1 = "sol;", _map$1[_key$1] = { k: _key$1, v: 47 }, _key$1 = "solb;", _map$1[_key$1] = { k: _key$1, v: 10692 }, _key$1 = "solbar;", _map$1[_key$1] = { k: _key$1, v: 9023 }, _key$1 = "sopf;", _map$1[_key$1] = { k: _key$1, v: 120164 }, _key$1 = "spades;", _map$1[_key$1] = { k: _key$1, v: 9824 }, _key$1 = "spadesuit;", _map$1[_key$1] = { k: _key$1, v: 9824 }, _key$1 = "spar;", _map$1[_key$1] = { k: _key$1, v: 8741 }, _key$1 = "sqcap;", _map$1[_key$1] = { k: _key$1, v: 8851 }, _key$1 = "sqcup;", _map$1[_key$1] = { k: _key$1, v: 8852 }, _key$1 = "sqsub;", _map$1[_key$1] = { k: _key$1, v: 8847 }, _key$1 = "sqsube;", _map$1[_key$1] = { k: _key$1, v: 8849 }, _key$1 = "sqsubset;", _map$1[_key$1] = { k: _key$1, v: 8847 }, _key$1 = "sqsubseteq;", _map$1[_key$1] = { k: _key$1, v: 8849 }, _key$1 = "sqsup;", _map$1[_key$1] = { k: _key$1, v: 8848 }, _key$1 = "sqsupe;", _map$1[_key$1] = { k: _key$1, v: 8850 }, _key$1 = "sqsupset;", _map$1[_key$1] = { k: _key$1, v: 8848 }, _key$1 = "sqsupseteq;", _map$1[_key$1] = { k: _key$1, v: 8850 }, _key$1 = "squ;", _map$1[_key$1] = { k: _key$1, v: 9633 }, _key$1 = "square;", _map$1[_key$1] = { k: _key$1, v: 9633 }, _key$1 = "squarf;", _map$1[_key$1] = { k: _key$1, v: 9642 }, _key$1 = "squf;", _map$1[_key$1] = { k: _key$1, v: 9642 }, _key$1 = "srarr;", _map$1[_key$1] = { k: _key$1, v: 8594 }, _key$1 = "sscr;", _map$1[_key$1] = { k: _key$1, v: 120008 }, _key$1 = "ssetmn;", _map$1[_key$1] = { k: _key$1, v: 8726 }, _key$1 = "ssmile;", _map$1[_key$1] = { k: _key$1, v: 8995 }, _key$1 = "sstarf;", _map$1[_key$1] = { k: _key$1, v: 8902 }, _key$1 = "star;", _map$1[_key$1] = { k: _key$1, v: 9734 }, _key$1 = "starf;", _map$1[_key$1] = { k: _key$1, v: 9733 }, _key$1 = "straightepsilon;", _map$1[_key$1] = { k: _key$1, v: 1013 }, _key$1 = "straightphi;", _map$1[_key$1] = { k: _key$1, v: 981 }, _key$1 = "strns;", _map$1[_key$1] = { k: _key$1, v: 175 }, _key$1 = "sub;", _map$1[_key$1] = { k: _key$1, v: 8834 }, _key$1 = "subE;", _map$1[_key$1] = { k: _key$1, v: 10949 }, _key$1 = "subdot;", _map$1[_key$1] = { k: _key$1, v: 10941 }, _key$1 = "sube;", _map$1[_key$1] = { k: _key$1, v: 8838 }, _key$1 = "subedot;", _map$1[_key$1] = { k: _key$1, v: 10947 }, _key$1 = "submult;", _map$1[_key$1] = { k: _key$1, v: 10945 }, _key$1 = "subnE;", _map$1[_key$1] = { k: _key$1, v: 10955 }, _key$1 = "subne;", _map$1[_key$1] = { k: _key$1, v: 8842 }, _key$1 = "subplus;", _map$1[_key$1] = { k: _key$1, v: 10943 }, _key$1 = "subrarr;", _map$1[_key$1] = { k: _key$1, v: 10617 }, _key$1 = "subset;", _map$1[_key$1] = { k: _key$1, v: 8834 }, _key$1 = "subseteq;", _map$1[_key$1] = { k: _key$1, v: 8838 }, _key$1 = "subseteqq;", _map$1[_key$1] = { k: _key$1, v: 10949 }, _key$1 = "subsetneq;", _map$1[_key$1] = { k: _key$1, v: 8842 }, _key$1 = "subsetneqq;", _map$1[_key$1] = { k: _key$1, v: 10955 }, _key$1 = "subsim;", _map$1[_key$1] = { k: _key$1, v: 10951 }, _key$1 = "subsub;", _map$1[_key$1] = { k: _key$1, v: 10965 }, _key$1 = "subsup;", _map$1[_key$1] = { k: _key$1, v: 10963 }, _key$1 = "succ;", _map$1[_key$1] = { k: _key$1, v: 8827 }, _key$1 = "succapprox;", _map$1[_key$1] = { k: _key$1, v: 10936 }, _key$1 = "succcurlyeq;", _map$1[_key$1] = { k: _key$1, v: 8829 }, _key$1 = "succeq;", _map$1[_key$1] = { k: _key$1, v: 10928 }, _key$1 = "succnapprox;", _map$1[_key$1] = { k: _key$1, v: 10938 }, _key$1 = "succneqq;", _map$1[_key$1] = { k: _key$1, v: 10934 }, _key$1 = "succnsim;", _map$1[_key$1] = { k: _key$1, v: 8937 }, _key$1 = "succsim;", _map$1[_key$1] = { k: _key$1, v: 8831 }, _key$1 = "sum;", _map$1[_key$1] = { k: _key$1, v: 8721 }, _key$1 = "sung;", _map$1[_key$1] = { k: _key$1, v: 9834 }, _key$1 = "sup;", _map$1[_key$1] = { k: _key$1, v: 8835 }, _key$1 = "sup1;", _map$1[_key$1] = { k: _key$1, v: 185 }, _key$1 = "sup2;", _map$1[_key$1] = { k: _key$1, v: 178 }, _key$1 = "sup3;", _map$1[_key$1] = { k: _key$1, v: 179 }, _key$1 = "supE;", _map$1[_key$1] = { k: _key$1, v: 10950 }, _key$1 = "supdot;", _map$1[_key$1] = { k: _key$1, v: 10942 }, _key$1 = "supdsub;", _map$1[_key$1] = { k: _key$1, v: 10968 }, _key$1 = "supe;", _map$1[_key$1] = { k: _key$1, v: 8839 }, _key$1 = "supedot;", _map$1[_key$1] = { k: _key$1, v: 10948 }, _key$1 = "suphsol;", _map$1[_key$1] = { k: _key$1, v: 10185 }, _key$1 = "suphsub;", _map$1[_key$1] = { k: _key$1, v: 10967 }, _key$1 = "suplarr;", _map$1[_key$1] = { k: _key$1, v: 10619 }, _key$1 = "supmult;", _map$1[_key$1] = { k: _key$1, v: 10946 }, _key$1 = "supnE;", _map$1[_key$1] = { k: _key$1, v: 10956 }, _key$1 = "supne;", _map$1[_key$1] = { k: _key$1, v: 8843 }, _key$1 = "supplus;", _map$1[_key$1] = { k: _key$1, v: 10944 }, _key$1 = "supset;", _map$1[_key$1] = { k: _key$1, v: 8835 }, _key$1 = "supseteq;", _map$1[_key$1] = { k: _key$1, v: 8839 }, _key$1 = "supseteqq;", _map$1[_key$1] = { k: _key$1, v: 10950 }, _key$1 = "supsetneq;", _map$1[_key$1] = { k: _key$1, v: 8843 }, _key$1 = "supsetneqq;", _map$1[_key$1] = { k: _key$1, v: 10956 }, _key$1 = "supsim;", _map$1[_key$1] = { k: _key$1, v: 10952 }, _key$1 = "supsub;", _map$1[_key$1] = { k: _key$1, v: 10964 }, _key$1 = "supsup;", _map$1[_key$1] = { k: _key$1, v: 10966 }, _key$1 = "swArr;", _map$1[_key$1] = { k: _key$1, v: 8665 }, _key$1 = "swarhk;", _map$1[_key$1] = { k: _key$1, v: 10534 }, _key$1 = "swarr;", _map$1[_key$1] = { k: _key$1, v: 8601 }, _key$1 = "swarrow;", _map$1[_key$1] = { k: _key$1, v: 8601 }, _key$1 = "swnwar;", _map$1[_key$1] = { k: _key$1, v: 10538 }, _key$1 = "szlig;", _map$1[_key$1] = { k: _key$1, v: 223 }, _key$1 = "target;", _map$1[_key$1] = { k: _key$1, v: 8982 }, _key$1 = "tau;", _map$1[_key$1] = { k: _key$1, v: 964 }, _key$1 = "tbrk;", _map$1[_key$1] = { k: _key$1, v: 9140 }, _key$1 = "tcaron;", _map$1[_key$1] = { k: _key$1, v: 357 }, _key$1 = "tcedil;", _map$1[_key$1] = { k: _key$1, v: 355 }, _key$1 = "tcy;", _map$1[_key$1] = { k: _key$1, v: 1090 }, _key$1 = "tdot;", _map$1[_key$1] = { k: _key$1, v: 8411 }, _key$1 = "telrec;", _map$1[_key$1] = { k: _key$1, v: 8981 }, _key$1 = "tfr;", _map$1[_key$1] = { k: _key$1, v: 120113 }, _key$1 = "there4;", _map$1[_key$1] = { k: _key$1, v: 8756 }, _key$1 = "therefore;", _map$1[_key$1] = { k: _key$1, v: 8756 }, _key$1 = "theta;", _map$1[_key$1] = { k: _key$1, v: 952 }, _key$1 = "thetasym;", _map$1[_key$1] = { k: _key$1, v: 977 }, _key$1 = "thetav;", _map$1[_key$1] = { k: _key$1, v: 977 }, _key$1 = "thickapprox;", _map$1[_key$1] = { k: _key$1, v: 8776 }, _key$1 = "thicksim;", _map$1[_key$1] = { k: _key$1, v: 8764 }, _key$1 = "thinsp;", _map$1[_key$1] = { k: _key$1, v: 8201 }, _key$1 = "thkap;", _map$1[_key$1] = { k: _key$1, v: 8776 }, _key$1 = "thksim;", _map$1[_key$1] = { k: _key$1, v: 8764 }, _key$1 = "thorn;", _map$1[_key$1] = { k: _key$1, v: 254 }, _key$1 = "tilde;", _map$1[_key$1] = { k: _key$1, v: 732 }, _key$1 = "times;", _map$1[_key$1] = { k: _key$1, v: 215 }, _key$1 = "timesb;", _map$1[_key$1] = { k: _key$1, v: 8864 }, _key$1 = "timesbar;", _map$1[_key$1] = { k: _key$1, v: 10801 }, _key$1 = "timesd;", _map$1[_key$1] = { k: _key$1, v: 10800 }, _key$1 = "tint;", _map$1[_key$1] = { k: _key$1, v: 8749 }, _key$1 = "toea;", _map$1[_key$1] = { k: _key$1, v: 10536 }, _key$1 = "top;", _map$1[_key$1] = { k: _key$1, v: 8868 }, _key$1 = "topbot;", _map$1[_key$1] = { k: _key$1, v: 9014 }, _key$1 = "topcir;", _map$1[_key$1] = { k: _key$1, v: 10993 }, _key$1 = "topf;", _map$1[_key$1] = { k: _key$1, v: 120165 }, _key$1 = "topfork;", _map$1[_key$1] = { k: _key$1, v: 10970 }, _key$1 = "tosa;", _map$1[_key$1] = { k: _key$1, v: 10537 }, _key$1 = "tprime;", _map$1[_key$1] = { k: _key$1, v: 8244 }, _key$1 = "trade;", _map$1[_key$1] = { k: _key$1, v: 8482 }, _key$1 = "triangle;", _map$1[_key$1] = { k: _key$1, v: 9653 }, _key$1 = "triangledown;", _map$1[_key$1] = { k: _key$1, v: 9663 }, _key$1 = "triangleleft;", _map$1[_key$1] = { k: _key$1, v: 9667 }, _key$1 = "trianglelefteq;", _map$1[_key$1] = { k: _key$1, v: 8884 }, _key$1 = "triangleq;", _map$1[_key$1] = { k: _key$1, v: 8796 }, _key$1 = "triangleright;", _map$1[_key$1] = { k: _key$1, v: 9657 }, _key$1 = "trianglerighteq;", _map$1[_key$1] = { k: _key$1, v: 8885 }, _key$1 = "tridot;", _map$1[_key$1] = { k: _key$1, v: 9708 }, _key$1 = "trie;", _map$1[_key$1] = { k: _key$1, v: 8796 }, _key$1 = "triminus;", _map$1[_key$1] = { k: _key$1, v: 10810 }, _key$1 = "triplus;", _map$1[_key$1] = { k: _key$1, v: 10809 }, _key$1 = "trisb;", _map$1[_key$1] = { k: _key$1, v: 10701 }, _key$1 = "tritime;", _map$1[_key$1] = { k: _key$1, v: 10811 }, _key$1 = "trpezium;", _map$1[_key$1] = { k: _key$1, v: 9186 }, _key$1 = "tscr;", _map$1[_key$1] = { k: _key$1, v: 120009 }, _key$1 = "tscy;", _map$1[_key$1] = { k: _key$1, v: 1094 }, _key$1 = "tshcy;", _map$1[_key$1] = { k: _key$1, v: 1115 }, _key$1 = "tstrok;", _map$1[_key$1] = { k: _key$1, v: 359 }, _key$1 = "twixt;", _map$1[_key$1] = { k: _key$1, v: 8812 }, _key$1 = "twoheadleftarrow;", _map$1[_key$1] = { k: _key$1, v: 8606 }, _key$1 = "twoheadrightarrow;", _map$1[_key$1] = { k: _key$1, v: 8608 }, _key$1 = "uArr;", _map$1[_key$1] = { k: _key$1, v: 8657 }, _key$1 = "uHar;", _map$1[_key$1] = { k: _key$1, v: 10595 }, _key$1 = "uacute;", _map$1[_key$1] = { k: _key$1, v: 250 }, _key$1 = "uarr;", _map$1[_key$1] = { k: _key$1, v: 8593 }, _key$1 = "ubrcy;", _map$1[_key$1] = { k: _key$1, v: 1118 }, _key$1 = "ubreve;", _map$1[_key$1] = { k: _key$1, v: 365 }, _key$1 = "ucirc;", _map$1[_key$1] = { k: _key$1, v: 251 }, _key$1 = "ucy;", _map$1[_key$1] = { k: _key$1, v: 1091 }, _key$1 = "udarr;", _map$1[_key$1] = { k: _key$1, v: 8645 }, _key$1 = "udblac;", _map$1[_key$1] = { k: _key$1, v: 369 }, _key$1 = "udhar;", _map$1[_key$1] = { k: _key$1, v: 10606 }, _key$1 = "ufisht;", _map$1[_key$1] = { k: _key$1, v: 10622 }, _key$1 = "ufr;", _map$1[_key$1] = { k: _key$1, v: 120114 }, _key$1 = "ugrave;", _map$1[_key$1] = { k: _key$1, v: 249 }, _key$1 = "uharl;", _map$1[_key$1] = { k: _key$1, v: 8639 }, _key$1 = "uharr;", _map$1[_key$1] = { k: _key$1, v: 8638 }, _key$1 = "uhblk;", _map$1[_key$1] = { k: _key$1, v: 9600 }, _key$1 = "ulcorn;", _map$1[_key$1] = { k: _key$1, v: 8988 }, _key$1 = "ulcorner;", _map$1[_key$1] = { k: _key$1, v: 8988 }, _key$1 = "ulcrop;", _map$1[_key$1] = { k: _key$1, v: 8975 }, _key$1 = "ultri;", _map$1[_key$1] = { k: _key$1, v: 9720 }, _key$1 = "umacr;", _map$1[_key$1] = { k: _key$1, v: 363 }, _key$1 = "uml;", _map$1[_key$1] = { k: _key$1, v: 168 }, _key$1 = "uogon;", _map$1[_key$1] = { k: _key$1, v: 371 }, _key$1 = "uopf;", _map$1[_key$1] = { k: _key$1, v: 120166 }, _key$1 = "uparrow;", _map$1[_key$1] = { k: _key$1, v: 8593 }, _key$1 = "updownarrow;", _map$1[_key$1] = { k: _key$1, v: 8597 }, _key$1 = "upharpoonleft;", _map$1[_key$1] = { k: _key$1, v: 8639 }, _key$1 = "upharpoonright;", _map$1[_key$1] = { k: _key$1, v: 8638 }, _key$1 = "uplus;", _map$1[_key$1] = { k: _key$1, v: 8846 }, _key$1 = "upsi;", _map$1[_key$1] = { k: _key$1, v: 965 }, _key$1 = "upsih;", _map$1[_key$1] = { k: _key$1, v: 978 }, _key$1 = "upsilon;", _map$1[_key$1] = { k: _key$1, v: 965 }, _key$1 = "upuparrows;", _map$1[_key$1] = { k: _key$1, v: 8648 }, _key$1 = "urcorn;", _map$1[_key$1] = { k: _key$1, v: 8989 }, _key$1 = "urcorner;", _map$1[_key$1] = { k: _key$1, v: 8989 }, _key$1 = "urcrop;", _map$1[_key$1] = { k: _key$1, v: 8974 }, _key$1 = "uring;", _map$1[_key$1] = { k: _key$1, v: 367 }, _key$1 = "urtri;", _map$1[_key$1] = { k: _key$1, v: 9721 }, _key$1 = "uscr;", _map$1[_key$1] = { k: _key$1, v: 120010 }, _key$1 = "utdot;", _map$1[_key$1] = { k: _key$1, v: 8944 }, _key$1 = "utilde;", _map$1[_key$1] = { k: _key$1, v: 361 }, _key$1 = "utri;", _map$1[_key$1] = { k: _key$1, v: 9653 }, _key$1 = "utrif;", _map$1[_key$1] = { k: _key$1, v: 9652 }, _key$1 = "uuarr;", _map$1[_key$1] = { k: _key$1, v: 8648 }, _key$1 = "uuml;", _map$1[_key$1] = { k: _key$1, v: 252 }, _key$1 = "uwangle;", _map$1[_key$1] = { k: _key$1, v: 10663 }, _key$1 = "vArr;", _map$1[_key$1] = { k: _key$1, v: 8661 }, _key$1 = "vBar;", _map$1[_key$1] = { k: _key$1, v: 10984 }, _key$1 = "vBarv;", _map$1[_key$1] = { k: _key$1, v: 10985 }, _key$1 = "vDash;", _map$1[_key$1] = { k: _key$1, v: 8872 }, _key$1 = "vangrt;", _map$1[_key$1] = { k: _key$1, v: 10652 }, _key$1 = "varepsilon;", _map$1[_key$1] = { k: _key$1, v: 1013 }, _key$1 = "varkappa;", _map$1[_key$1] = { k: _key$1, v: 1008 }, _key$1 = "varnothing;", _map$1[_key$1] = { k: _key$1, v: 8709 }, _key$1 = "varphi;", _map$1[_key$1] = { k: _key$1, v: 981 }, _key$1 = "varpi;", _map$1[_key$1] = { k: _key$1, v: 982 }, _key$1 = "varpropto;", _map$1[_key$1] = { k: _key$1, v: 8733 }, _key$1 = "varr;", _map$1[_key$1] = { k: _key$1, v: 8597 }, _key$1 = "varrho;", _map$1[_key$1] = { k: _key$1, v: 1009 }, _key$1 = "varsigma;", _map$1[_key$1] = { k: _key$1, v: 962 }, _key$1 = "vartheta;", _map$1[_key$1] = { k: _key$1, v: 977 }, _key$1 = "vartriangleleft;", _map$1[_key$1] = { k: _key$1, v: 8882 }, _key$1 = "vartriangleright;", _map$1[_key$1] = { k: _key$1, v: 8883 }, _key$1 = "vcy;", _map$1[_key$1] = { k: _key$1, v: 1074 }, _key$1 = "vdash;", _map$1[_key$1] = { k: _key$1, v: 8866 }, _key$1 = "vee;", _map$1[_key$1] = { k: _key$1, v: 8744 }, _key$1 = "veebar;", _map$1[_key$1] = { k: _key$1, v: 8891 }, _key$1 = "veeeq;", _map$1[_key$1] = { k: _key$1, v: 8794 }, _key$1 = "vellip;", _map$1[_key$1] = { k: _key$1, v: 8942 }, _key$1 = "verbar;", _map$1[_key$1] = { k: _key$1, v: 124 }, _key$1 = "vert;", _map$1[_key$1] = { k: _key$1, v: 124 }, _key$1 = "vfr;", _map$1[_key$1] = { k: _key$1, v: 120115 }, _key$1 = "vltri;", _map$1[_key$1] = { k: _key$1, v: 8882 }, _key$1 = "vopf;", _map$1[_key$1] = { k: _key$1, v: 120167 }, _key$1 = "vprop;", _map$1[_key$1] = { k: _key$1, v: 8733 }, _key$1 = "vrtri;", _map$1[_key$1] = { k: _key$1, v: 8883 }, _key$1 = "vscr;", _map$1[_key$1] = { k: _key$1, v: 120011 }, _key$1 = "vzigzag;", _map$1[_key$1] = { k: _key$1, v: 10650 }, _key$1 = "wcirc;", _map$1[_key$1] = { k: _key$1, v: 373 }, _key$1 = "wedbar;", _map$1[_key$1] = { k: _key$1, v: 10847 }, _key$1 = "wedge;", _map$1[_key$1] = { k: _key$1, v: 8743 }, _key$1 = "wedgeq;", _map$1[_key$1] = { k: _key$1, v: 8793 }, _key$1 = "weierp;", _map$1[_key$1] = { k: _key$1, v: 8472 }, _key$1 = "wfr;", _map$1[_key$1] = { k: _key$1, v: 120116 }, _key$1 = "wopf;", _map$1[_key$1] = { k: _key$1, v: 120168 }, _key$1 = "wp;", _map$1[_key$1] = { k: _key$1, v: 8472 }, _key$1 = "wr;", _map$1[_key$1] = { k: _key$1, v: 8768 }, _key$1 = "wreath;", _map$1[_key$1] = { k: _key$1, v: 8768 }, _key$1 = "wscr;", _map$1[_key$1] = { k: _key$1, v: 120012 }, _key$1 = "xcap;", _map$1[_key$1] = { k: _key$1, v: 8898 }, _key$1 = "xcirc;", _map$1[_key$1] = { k: _key$1, v: 9711 }, _key$1 = "xcup;", _map$1[_key$1] = { k: _key$1, v: 8899 }, _key$1 = "xdtri;", _map$1[_key$1] = { k: _key$1, v: 9661 }, _key$1 = "xfr;", _map$1[_key$1] = { k: _key$1, v: 120117 }, _key$1 = "xhArr;", _map$1[_key$1] = { k: _key$1, v: 10234 }, _key$1 = "xharr;", _map$1[_key$1] = { k: _key$1, v: 10231 }, _key$1 = "xi;", _map$1[_key$1] = { k: _key$1, v: 958 }, _key$1 = "xlArr;", _map$1[_key$1] = { k: _key$1, v: 10232 }, _key$1 = "xlarr;", _map$1[_key$1] = { k: _key$1, v: 10229 }, _key$1 = "xmap;", _map$1[_key$1] = { k: _key$1, v: 10236 }, _key$1 = "xnis;", _map$1[_key$1] = { k: _key$1, v: 8955 }, _key$1 = "xodot;", _map$1[_key$1] = { k: _key$1, v: 10752 }, _key$1 = "xopf;", _map$1[_key$1] = { k: _key$1, v: 120169 }, _key$1 = "xoplus;", _map$1[_key$1] = { k: _key$1, v: 10753 }, _key$1 = "xotime;", _map$1[_key$1] = { k: _key$1, v: 10754 }, _key$1 = "xrArr;", _map$1[_key$1] = { k: _key$1, v: 10233 }, _key$1 = "xrarr;", _map$1[_key$1] = { k: _key$1, v: 10230 }, _key$1 = "xscr;", _map$1[_key$1] = { k: _key$1, v: 120013 }, _key$1 = "xsqcup;", _map$1[_key$1] = { k: _key$1, v: 10758 }, _key$1 = "xuplus;", _map$1[_key$1] = { k: _key$1, v: 10756 }, _key$1 = "xutri;", _map$1[_key$1] = { k: _key$1, v: 9651 }, _key$1 = "xvee;", _map$1[_key$1] = { k: _key$1, v: 8897 }, _key$1 = "xwedge;", _map$1[_key$1] = { k: _key$1, v: 8896 }, _key$1 = "yacute;", _map$1[_key$1] = { k: _key$1, v: 253 }, _key$1 = "yacy;", _map$1[_key$1] = { k: _key$1, v: 1103 }, _key$1 = "ycirc;", _map$1[_key$1] = { k: _key$1, v: 375 }, _key$1 = "ycy;", _map$1[_key$1] = { k: _key$1, v: 1099 }, _key$1 = "yen;", _map$1[_key$1] = { k: _key$1, v: 165 }, _key$1 = "yfr;", _map$1[_key$1] = { k: _key$1, v: 120118 }, _key$1 = "yicy;", _map$1[_key$1] = { k: _key$1, v: 1111 }, _key$1 = "yopf;", _map$1[_key$1] = { k: _key$1, v: 120170 }, _key$1 = "yscr;", _map$1[_key$1] = { k: _key$1, v: 120014 }, _key$1 = "yucy;", _map$1[_key$1] = { k: _key$1, v: 1102 }, _key$1 = "yuml;", _map$1[_key$1] = { k: _key$1, v: 255 }, _key$1 = "zacute;", _map$1[_key$1] = { k: _key$1, v: 378 }, _key$1 = "zcaron;", _map$1[_key$1] = { k: _key$1, v: 382 }, _key$1 = "zcy;", _map$1[_key$1] = { k: _key$1, v: 1079 }, _key$1 = "zdot;", _map$1[_key$1] = { k: _key$1, v: 380 }, _key$1 = "zeetrf;", _map$1[_key$1] = { k: _key$1, v: 8488 }, _key$1 = "zeta;", _map$1[_key$1] = { k: _key$1, v: 950 }, _key$1 = "zfr;", _map$1[_key$1] = { k: _key$1, v: 120119 }, _key$1 = "zhcy;", _map$1[_key$1] = { k: _key$1, v: 1078 }, _key$1 = "zigrarr;", _map$1[_key$1] = { k: _key$1, v: 8669 }, _key$1 = "zopf;", _map$1[_key$1] = { k: _key$1, v: 120171 }, _key$1 = "zscr;", _map$1[_key$1] = { k: _key$1, v: 120015 }, _key$1 = "zwj;", _map$1[_key$1] = { k: _key$1, v: 8205 }, _key$1 = "zwnj;", _map$1[_key$1] = { k: _key$1, v: 8204 }, _key$1 = "AElig", _map$1[_key$1] = { k: _key$1, v: 198 }, _key$1 = "AMP", _map$1[_key$1] = { k: _key$1, v: 38 }, _key$1 = "Aacute", _map$1[_key$1] = { k: _key$1, v: 193 }, _key$1 = "Acirc", _map$1[_key$1] = { k: _key$1, v: 194 }, _key$1 = "Agrave", _map$1[_key$1] = { k: _key$1, v: 192 }, _key$1 = "Aring", _map$1[_key$1] = { k: _key$1, v: 197 }, _key$1 = "Atilde", _map$1[_key$1] = { k: _key$1, v: 195 }, _key$1 = "Auml", _map$1[_key$1] = { k: _key$1, v: 196 }, _key$1 = "COPY", _map$1[_key$1] = { k: _key$1, v: 169 }, _key$1 = "Ccedil", _map$1[_key$1] = { k: _key$1, v: 199 }, _key$1 = "ETH", _map$1[_key$1] = { k: _key$1, v: 208 }, _key$1 = "Eacute", _map$1[_key$1] = { k: _key$1, v: 201 }, _key$1 = "Ecirc", _map$1[_key$1] = { k: _key$1, v: 202 }, _key$1 = "Egrave", _map$1[_key$1] = { k: _key$1, v: 200 }, _key$1 = "Euml", _map$1[_key$1] = { k: _key$1, v: 203 }, _key$1 = "GT", _map$1[_key$1] = { k: _key$1, v: 62 }, _key$1 = "Iacute", _map$1[_key$1] = { k: _key$1, v: 205 }, _key$1 = "Icirc", _map$1[_key$1] = { k: _key$1, v: 206 }, _key$1 = "Igrave", _map$1[_key$1] = { k: _key$1, v: 204 }, _key$1 = "Iuml", _map$1[_key$1] = { k: _key$1, v: 207 }, _key$1 = "LT", _map$1[_key$1] = { k: _key$1, v: 60 }, _key$1 = "Ntilde", _map$1[_key$1] = { k: _key$1, v: 209 }, _key$1 = "Oacute", _map$1[_key$1] = { k: _key$1, v: 211 }, _key$1 = "Ocirc", _map$1[_key$1] = { k: _key$1, v: 212 }, _key$1 = "Ograve", _map$1[_key$1] = { k: _key$1, v: 210 }, _key$1 = "Oslash", _map$1[_key$1] = { k: _key$1, v: 216 }, _key$1 = "Otilde", _map$1[_key$1] = { k: _key$1, v: 213 }, _key$1 = "Ouml", _map$1[_key$1] = { k: _key$1, v: 214 }, _key$1 = "QUOT", _map$1[_key$1] = { k: _key$1, v: 34 }, _key$1 = "REG", _map$1[_key$1] = { k: _key$1, v: 174 }, _key$1 = "THORN", _map$1[_key$1] = { k: _key$1, v: 222 }, _key$1 = "Uacute", _map$1[_key$1] = { k: _key$1, v: 218 }, _key$1 = "Ucirc", _map$1[_key$1] = { k: _key$1, v: 219 }, _key$1 = "Ugrave", _map$1[_key$1] = { k: _key$1, v: 217 }, _key$1 = "Uuml", _map$1[_key$1] = { k: _key$1, v: 220 }, _key$1 = "Yacute", _map$1[_key$1] = { k: _key$1, v: 221 }, _key$1 = "aacute", _map$1[_key$1] = { k: _key$1, v: 225 }, _key$1 = "acirc", _map$1[_key$1] = { k: _key$1, v: 226 }, _key$1 = "acute", _map$1[_key$1] = { k: _key$1, v: 180 }, _key$1 = "aelig", _map$1[_key$1] = { k: _key$1, v: 230 }, _key$1 = "agrave", _map$1[_key$1] = { k: _key$1, v: 224 }, _key$1 = "amp", _map$1[_key$1] = { k: _key$1, v: 38 }, _key$1 = "aring", _map$1[_key$1] = { k: _key$1, v: 229 }, _key$1 = "atilde", _map$1[_key$1] = { k: _key$1, v: 227 }, _key$1 = "auml", _map$1[_key$1] = { k: _key$1, v: 228 }, _key$1 = "brvbar", _map$1[_key$1] = { k: _key$1, v: 166 }, _key$1 = "ccedil", _map$1[_key$1] = { k: _key$1, v: 231 }, _key$1 = "cedil", _map$1[_key$1] = { k: _key$1, v: 184 }, _key$1 = "cent", _map$1[_key$1] = { k: _key$1, v: 162 }, _key$1 = "copy", _map$1[_key$1] = { k: _key$1, v: 169 }, _key$1 = "curren", _map$1[_key$1] = { k: _key$1, v: 164 }, _key$1 = "deg", _map$1[_key$1] = { k: _key$1, v: 176 }, _key$1 = "divide", _map$1[_key$1] = { k: _key$1, v: 247 }, _key$1 = "eacute", _map$1[_key$1] = { k: _key$1, v: 233 }, _key$1 = "ecirc", _map$1[_key$1] = { k: _key$1, v: 234 }, _key$1 = "egrave", _map$1[_key$1] = { k: _key$1, v: 232 }, _key$1 = "eth", _map$1[_key$1] = { k: _key$1, v: 240 }, _key$1 = "euml", _map$1[_key$1] = { k: _key$1, v: 235 }, _key$1 = "frac12", _map$1[_key$1] = { k: _key$1, v: 189 }, _key$1 = "frac14", _map$1[_key$1] = { k: _key$1, v: 188 }, _key$1 = "frac34", _map$1[_key$1] = { k: _key$1, v: 190 }, _key$1 = "gt", _map$1[_key$1] = { k: _key$1, v: 62 }, _key$1 = "iacute", _map$1[_key$1] = { k: _key$1, v: 237 }, _key$1 = "icirc", _map$1[_key$1] = { k: _key$1, v: 238 }, _key$1 = "iexcl", _map$1[_key$1] = { k: _key$1, v: 161 }, _key$1 = "igrave", _map$1[_key$1] = { k: _key$1, v: 236 }, _key$1 = "iquest", _map$1[_key$1] = { k: _key$1, v: 191 }, _key$1 = "iuml", _map$1[_key$1] = { k: _key$1, v: 239 }, _key$1 = "laquo", _map$1[_key$1] = { k: _key$1, v: 171 }, _key$1 = "lt", _map$1[_key$1] = { k: _key$1, v: 60 }, _key$1 = "macr", _map$1[_key$1] = { k: _key$1, v: 175 }, _key$1 = "micro", _map$1[_key$1] = { k: _key$1, v: 181 }, _key$1 = "middot", _map$1[_key$1] = { k: _key$1, v: 183 }, _key$1 = "nbsp", _map$1[_key$1] = { k: _key$1, v: 160 }, _key$1 = "not", _map$1[_key$1] = { k: _key$1, v: 172 }, _key$1 = "ntilde", _map$1[_key$1] = { k: _key$1, v: 241 }, _key$1 = "oacute", _map$1[_key$1] = { k: _key$1, v: 243 }, _key$1 = "ocirc", _map$1[_key$1] = { k: _key$1, v: 244 }, _key$1 = "ograve", _map$1[_key$1] = { k: _key$1, v: 242 }, _key$1 = "ordf", _map$1[_key$1] = { k: _key$1, v: 170 }, _key$1 = "ordm", _map$1[_key$1] = { k: _key$1, v: 186 }, _key$1 = "oslash", _map$1[_key$1] = { k: _key$1, v: 248 }, _key$1 = "otilde", _map$1[_key$1] = { k: _key$1, v: 245 }, _key$1 = "ouml", _map$1[_key$1] = { k: _key$1, v: 246 }, _key$1 = "para", _map$1[_key$1] = { k: _key$1, v: 182 }, _key$1 = "plusmn", _map$1[_key$1] = { k: _key$1, v: 177 }, _key$1 = "pound", _map$1[_key$1] = { k: _key$1, v: 163 }, _key$1 = "quot", _map$1[_key$1] = { k: _key$1, v: 34 }, _key$1 = "raquo", _map$1[_key$1] = { k: _key$1, v: 187 }, _key$1 = "reg", _map$1[_key$1] = { k: _key$1, v: 174 }, _key$1 = "sect", _map$1[_key$1] = { k: _key$1, v: 167 }, _key$1 = "shy", _map$1[_key$1] = { k: _key$1, v: 173 }, _key$1 = "sup1", _map$1[_key$1] = { k: _key$1, v: 185 }, _key$1 = "sup2", _map$1[_key$1] = { k: _key$1, v: 178 }, _key$1 = "sup3", _map$1[_key$1] = { k: _key$1, v: 179 }, _key$1 = "szlig", _map$1[_key$1] = { k: _key$1, v: 223 }, _key$1 = "thorn", _map$1[_key$1] = { k: _key$1, v: 254 }, _key$1 = "times", _map$1[_key$1] = { k: _key$1, v: 215 }, _key$1 = "uacute", _map$1[_key$1] = { k: _key$1, v: 250 }, _key$1 = "ucirc", _map$1[_key$1] = { k: _key$1, v: 251 }, _key$1 = "ugrave", _map$1[_key$1] = { k: _key$1, v: 249 }, _key$1 = "uml", _map$1[_key$1] = { k: _key$1, v: 168 }, _key$1 = "uuml", _map$1[_key$1] = { k: _key$1, v: 252 }, _key$1 = "yacute", _map$1[_key$1] = { k: _key$1, v: 253 }, _key$1 = "yen", _map$1[_key$1] = { k: _key$1, v: 165 }, _key$1 = "yuml", _map$1[_key$1] = { k: _key$1, v: 255 }, _map$1);
		var _map$2, _key$2;
		entity2 = (_map$2 = new $Map(), _key$2 = "NotEqualTilde;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8770, 824]) }, _key$2 = "NotGreaterFullEqual;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8807, 824]) }, _key$2 = "NotGreaterGreater;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8811, 824]) }, _key$2 = "NotGreaterSlantEqual;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10878, 824]) }, _key$2 = "NotHumpDownHump;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8782, 824]) }, _key$2 = "NotHumpEqual;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8783, 824]) }, _key$2 = "NotLeftTriangleBar;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10703, 824]) }, _key$2 = "NotLessLess;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8810, 824]) }, _key$2 = "NotLessSlantEqual;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10877, 824]) }, _key$2 = "NotNestedGreaterGreater;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10914, 824]) }, _key$2 = "NotNestedLessLess;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10913, 824]) }, _key$2 = "NotPrecedesEqual;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10927, 824]) }, _key$2 = "NotRightTriangleBar;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10704, 824]) }, _key$2 = "NotSquareSubset;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8847, 824]) }, _key$2 = "NotSquareSuperset;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8848, 824]) }, _key$2 = "NotSubset;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8834, 8402]) }, _key$2 = "NotSucceedsEqual;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10928, 824]) }, _key$2 = "NotSucceedsTilde;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8831, 824]) }, _key$2 = "NotSuperset;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8835, 8402]) }, _key$2 = "ThickSpace;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8287, 8202]) }, _key$2 = "acE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8766, 819]) }, _key$2 = "bne;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [61, 8421]) }, _key$2 = "bnequiv;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8801, 8421]) }, _key$2 = "caps;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8745, 65024]) }, _key$2 = "cups;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8746, 65024]) }, _key$2 = "fjlig;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [102, 106]) }, _key$2 = "gesl;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8923, 65024]) }, _key$2 = "gvertneqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8809, 65024]) }, _key$2 = "gvnE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8809, 65024]) }, _key$2 = "lates;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10925, 65024]) }, _key$2 = "lesg;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8922, 65024]) }, _key$2 = "lvertneqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8808, 65024]) }, _key$2 = "lvnE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8808, 65024]) }, _key$2 = "nGg;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8921, 824]) }, _key$2 = "nGtv;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8811, 824]) }, _key$2 = "nLl;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8920, 824]) }, _key$2 = "nLtv;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8810, 824]) }, _key$2 = "nang;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8736, 8402]) }, _key$2 = "napE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10864, 824]) }, _key$2 = "napid;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8779, 824]) }, _key$2 = "nbump;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8782, 824]) }, _key$2 = "nbumpe;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8783, 824]) }, _key$2 = "ncongdot;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10861, 824]) }, _key$2 = "nedot;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8784, 824]) }, _key$2 = "nesim;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8770, 824]) }, _key$2 = "ngE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8807, 824]) }, _key$2 = "ngeqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8807, 824]) }, _key$2 = "ngeqslant;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10878, 824]) }, _key$2 = "nges;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10878, 824]) }, _key$2 = "nlE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8806, 824]) }, _key$2 = "nleqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8806, 824]) }, _key$2 = "nleqslant;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10877, 824]) }, _key$2 = "nles;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10877, 824]) }, _key$2 = "notinE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8953, 824]) }, _key$2 = "notindot;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8949, 824]) }, _key$2 = "nparsl;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [11005, 8421]) }, _key$2 = "npart;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8706, 824]) }, _key$2 = "npre;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10927, 824]) }, _key$2 = "npreceq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10927, 824]) }, _key$2 = "nrarrc;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10547, 824]) }, _key$2 = "nrarrw;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8605, 824]) }, _key$2 = "nsce;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10928, 824]) }, _key$2 = "nsubE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10949, 824]) }, _key$2 = "nsubset;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8834, 8402]) }, _key$2 = "nsubseteqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10949, 824]) }, _key$2 = "nsucceq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10928, 824]) }, _key$2 = "nsupE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10950, 824]) }, _key$2 = "nsupset;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8835, 8402]) }, _key$2 = "nsupseteqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10950, 824]) }, _key$2 = "nvap;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8781, 8402]) }, _key$2 = "nvge;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8805, 8402]) }, _key$2 = "nvgt;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [62, 8402]) }, _key$2 = "nvle;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8804, 8402]) }, _key$2 = "nvlt;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [60, 8402]) }, _key$2 = "nvltrie;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8884, 8402]) }, _key$2 = "nvrtrie;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8885, 8402]) }, _key$2 = "nvsim;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8764, 8402]) }, _key$2 = "race;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8765, 817]) }, _key$2 = "smtes;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10924, 65024]) }, _key$2 = "sqcaps;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8851, 65024]) }, _key$2 = "sqcups;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8852, 65024]) }, _key$2 = "varsubsetneq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8842, 65024]) }, _key$2 = "varsubsetneqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10955, 65024]) }, _key$2 = "varsupsetneq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8843, 65024]) }, _key$2 = "varsupsetneqq;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10956, 65024]) }, _key$2 = "vnsub;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8834, 8402]) }, _key$2 = "vnsup;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8835, 8402]) }, _key$2 = "vsubnE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10955, 65024]) }, _key$2 = "vsubne;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8842, 65024]) }, _key$2 = "vsupnE;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [10956, 65024]) }, _key$2 = "vsupne;", _map$2[_key$2] = { k: _key$2, v: $toNativeArray("Int32", [8843, 65024]) }, _map$2);
		replacementTable = ($arrayType($Int32, 32)).zero(); $copy(replacementTable, $toNativeArray("Int32", [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376]), ($arrayType($Int32, 32)));
		plaintextAbort = errors.New("html: internal error (plaintext abort)");
		$pkg.ErrBufferExceeded = errors.New("max buffer exceeded");
		nul = new ($sliceType($Uint8))($stringToBytes("\x00"));
		replacement = new ($sliceType($Uint8))($stringToBytes("\xEF\xBF\xBD"));
	};
	return $pkg;
})();
$packages["github.com/russross/blackfriday"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], fmt = $packages["fmt"], regexp = $packages["regexp"], strconv = $packages["strconv"], strings = $packages["strings"], utf8 = $packages["unicode/utf8"], bufio = $packages["bufio"], html = $packages["code.google.com/p/go.net/html"], io = $packages["io"], Renderer, inlineParser, parser, reference, htmlEntity, urlRe, anchorRe, escapeChars, validUris, blockTags, whitelistTags, whitelistAttrs, protocolAttrs, whitelistProtocols, isBackslashEscaped, isRelativeLink, emphasis, codeSpan, lineBreak, link, leftAngle, escape, unescapeText, entity, linkEndsWithEntity, autoLink, isEndOfLink, isSafeLink, tagLength, isMailtoAutoLink, helperFindEmphChar, helperEmphasis, helperDoubleEmphasis, helperTripleEmphasis, Markdown, firstPass, secondPass, isReference, scanLinkRef, scanFootnote, ispunct, isspace, isletter, isalnum, expandTabs, isIndented, slugify, init, toSet, sanitizeHtmlSafe, protocolAllowed;
	Renderer = $pkg.Renderer = $newType(8, "Interface", "blackfriday.Renderer", "Renderer", "github.com/russross/blackfriday", null);
	inlineParser = $pkg.inlineParser = $newType(4, "Func", "blackfriday.inlineParser", "inlineParser", "github.com/russross/blackfriday", null);
	parser = $pkg.parser = $newType(0, "Struct", "blackfriday.parser", "parser", "github.com/russross/blackfriday", function(r_, refs_, inlineCallback_, flags_, nesting_, maxNesting_, insideLink_, notes_) {
		this.$val = this;
		this.r = r_ !== undefined ? r_ : null;
		this.refs = refs_ !== undefined ? refs_ : false;
		this.inlineCallback = inlineCallback_ !== undefined ? inlineCallback_ : ($arrayType(inlineParser, 256)).zero();
		this.flags = flags_ !== undefined ? flags_ : 0;
		this.nesting = nesting_ !== undefined ? nesting_ : 0;
		this.maxNesting = maxNesting_ !== undefined ? maxNesting_ : 0;
		this.insideLink = insideLink_ !== undefined ? insideLink_ : false;
		this.notes = notes_ !== undefined ? notes_ : ($sliceType(($ptrType(reference)))).nil;
	});
	reference = $pkg.reference = $newType(0, "Struct", "blackfriday.reference", "reference", "github.com/russross/blackfriday", function(link_, title_, noteId_, hasBlock_) {
		this.$val = this;
		this.link = link_ !== undefined ? link_ : ($sliceType($Uint8)).nil;
		this.title = title_ !== undefined ? title_ : ($sliceType($Uint8)).nil;
		this.noteId = noteId_ !== undefined ? noteId_ : 0;
		this.hasBlock = hasBlock_ !== undefined ? hasBlock_ : false;
	});
	parser.Ptr.prototype.block = function(out, data) {
		var p, x, i, i$1, i$2, i$3, i$4, i$5;
		p = this;
		if ((data.length === 0) || !(((x = data.length - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 10))) {
			throw $panic(new $String("block input is missing terminating newline"));
		}
		if (p.nesting >= p.maxNesting) {
			return;
		}
		p.nesting = p.nesting + 1 >> 0;
		while (data.length > 0) {
			if (p.isPrefixHeader(data)) {
				data = $subslice(data, p.prefixHeader(out, data));
				continue;
			}
			if (((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 60) {
				i = p.html(out, data, true);
				if (i > 0) {
					data = $subslice(data, i);
					continue;
				}
			}
			if (!(((p.flags & 4096) === 0))) {
				if (((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 37) {
					i$1 = p.titleBlock(out, data, true);
					if (i$1 > 0) {
						data = $subslice(data, i$1);
						continue;
					}
				}
			}
			i$2 = p.isEmpty(data);
			if (i$2 > 0) {
				data = $subslice(data, i$2);
				continue;
			}
			if (p.codePrefix(data) > 0) {
				data = $subslice(data, p.code(out, data));
				continue;
			}
			if (!(((p.flags & 4) === 0))) {
				i$3 = p.fencedCode(out, data, true);
				if (i$3 > 0) {
					data = $subslice(data, i$3);
					continue;
				}
			}
			if (p.isHRule(data)) {
				p.r.HRule(out);
				i$4 = 0;
				i$4 = 0;
				while (!((((i$4 < 0 || i$4 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i$4]) === 10))) {
					i$4 = i$4 + 1 >> 0;
				}
				data = $subslice(data, i$4);
				continue;
			}
			if (p.quotePrefix(data) > 0) {
				data = $subslice(data, p.quote(out, data));
				continue;
			}
			if (!(((p.flags & 2) === 0))) {
				i$5 = p.table(out, data);
				if (i$5 > 0) {
					data = $subslice(data, i$5);
					continue;
				}
			}
			if (p.uliPrefix(data) > 0) {
				data = $subslice(data, p.list(out, data, 0));
				continue;
			}
			if (p.oliPrefix(data) > 0) {
				data = $subslice(data, p.list(out, data, 1));
				continue;
			}
			data = $subslice(data, p.paragraph(out, data));
		}
		p.nesting = p.nesting - 1 >> 0;
	};
	parser.prototype.block = function(out, data) { return this.$val.block(out, data); };
	parser.Ptr.prototype.isPrefixHeader = function(data) {
		var p, level;
		p = this;
		if (!((((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 35))) {
			return false;
		}
		if (!(((p.flags & 64) === 0))) {
			level = 0;
			while (level < 6 && (((level < 0 || level >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + level]) === 35)) {
				level = level + 1 >> 0;
			}
			if (!((((level < 0 || level >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + level]) === 32))) {
				return false;
			}
		}
		return true;
	};
	parser.prototype.isPrefixHeader = function(data) { return this.$val.isPrefixHeader(data); };
	parser.Ptr.prototype.prefixHeader = function(out, data) {
		var p, level, _tmp, _tmp$1, i, end, skip, id, _tmp$2, _tmp$3, j, k, x, x$1, x$2, x$3, work;
		p = this;
		level = 0;
		while (level < 6 && (((level < 0 || level >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + level]) === 35)) {
			level = level + 1 >> 0;
		}
		_tmp = 0; _tmp$1 = 0; i = _tmp; end = _tmp$1;
		i = level;
		while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
			i = i + 1 >> 0;
		}
		end = i;
		while (!((((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end]) === 10))) {
			end = end + 1 >> 0;
		}
		skip = end;
		id = "";
		if (!(((p.flags & 2048) === 0))) {
			_tmp$2 = 0; _tmp$3 = 0; j = _tmp$2; k = _tmp$3;
			j = i;
			while (j < (end - 1 >> 0) && (!((((j < 0 || j >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + j]) === 123)) || !(((x = j + 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 35)))) {
				j = j + 1 >> 0;
			}
			k = j + 1 >> 0;
			while (k < end && !((((k < 0 || k >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + k]) === 125))) {
				k = k + 1 >> 0;
			}
			if (j < end && k < end) {
				id = $bytesToString($subslice(data, (j + 2 >> 0), k));
				end = j;
				skip = k + 1 >> 0;
				while (end > 0 && ((x$1 = end - 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 32)) {
					end = end - 1 >> 0;
				}
			}
		}
		while (end > 0 && ((x$2 = end - 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === 35)) {
			end = end - 1 >> 0;
		}
		while (end > 0 && ((x$3 = end - 1 >> 0, ((x$3 < 0 || x$3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$3])) === 32)) {
			end = end - 1 >> 0;
		}
		if (end > i) {
			work = (function() {
				p.inline(out, $subslice(data, i, end));
				return true;
			});
			p.r.Header(out, work, level, id);
		}
		return skip;
	};
	parser.prototype.prefixHeader = function(out, data) { return this.$val.prefixHeader(out, data); };
	parser.Ptr.prototype.isUnderlinedHeader = function(data) {
		var p, i, i$1;
		p = this;
		if (((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 61) {
			i = 1;
			while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 61) {
				i = i + 1 >> 0;
			}
			while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
				i = i + 1 >> 0;
			}
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10) {
				return 1;
			} else {
				return 0;
			}
		}
		if (((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 45) {
			i$1 = 1;
			while (((i$1 < 0 || i$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i$1]) === 45) {
				i$1 = i$1 + 1 >> 0;
			}
			while (((i$1 < 0 || i$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i$1]) === 32) {
				i$1 = i$1 + 1 >> 0;
			}
			if (((i$1 < 0 || i$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i$1]) === 10) {
				return 2;
			} else {
				return 0;
			}
		}
		return 0;
	};
	parser.prototype.isUnderlinedHeader = function(data) { return this.$val.isUnderlinedHeader(data); };
	parser.Ptr.prototype.titleBlock = function(out, data, doRender) {
		var p, splitData, i, _ref, _i, idx, b;
		p = this;
		if (!((((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 37))) {
			return 0;
		}
		splitData = bytes.Split(data, new ($sliceType($Uint8))($stringToBytes("\n")));
		i = 0;
		_ref = splitData;
		_i = 0;
		while (_i < _ref.length) {
			idx = _i;
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (!bytes.HasPrefix(b, new ($sliceType($Uint8))($stringToBytes("%")))) {
				i = idx;
				break;
			}
			_i++;
		}
		data = bytes.Join($subslice(splitData, 0, i), new ($sliceType($Uint8))($stringToBytes("\n")));
		p.r.TitleBlock(out, data);
		return data.length;
	};
	parser.prototype.titleBlock = function(out, data, doRender) { return this.$val.titleBlock(out, data, doRender); };
	parser.Ptr.prototype.html = function(out, data, doRender) {
		var p, _tmp, _tmp$1, i, j, _tuple, curtag, tagfound, size, size$1, found, x, end, x$1;
		p = this;
		_tmp = 0; _tmp$1 = 0; i = _tmp; j = _tmp$1;
		if (!((((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 60))) {
			return 0;
		}
		_tuple = p.htmlFindTag($subslice(data, 1)); curtag = _tuple[0]; tagfound = _tuple[1];
		if (!tagfound) {
			size = p.htmlComment(out, data, doRender);
			if (size > 0) {
				return size;
			}
			size$1 = p.htmlHr(out, data, doRender);
			if (size$1 > 0) {
				return size$1;
			}
			return 0;
		}
		found = false;
		if (!found && !(curtag === "ins") && !(curtag === "del")) {
			i = 1;
			while (i < data.length) {
				i = i + 1 >> 0;
				while (i < data.length && !(((x = i - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 60) && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 47))) {
					i = i + 1 >> 0;
				}
				if (((i + 2 >> 0) + curtag.length >> 0) >= data.length) {
					break;
				}
				j = p.htmlFindEnd(curtag, $subslice(data, (i - 1 >> 0)));
				if (j > 0) {
					i = i + ((j - 1 >> 0)) >> 0;
					found = true;
					break;
				}
			}
		}
		if (!found) {
			return 0;
		}
		if (doRender) {
			end = i;
			while (end > 0 && ((x$1 = end - 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 10)) {
				end = end - 1 >> 0;
			}
			p.r.BlockHtml(out, $subslice(data, 0, end));
		}
		return i;
	};
	parser.prototype.html = function(out, data, doRender) { return this.$val.html(out, data, doRender); };
	parser.Ptr.prototype.htmlComment = function(out, data, doRender) {
		var p, i, x, x$1, j, size, end, x$2;
		p = this;
		if (!((((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 60)) || !((((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === 33)) || !((((2 < 0 || 2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 2]) === 45)) || !((((3 < 0 || 3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 3]) === 45))) {
			return 0;
		}
		i = 5;
		while (i < data.length && !(((x = i - 2 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 45) && ((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 45) && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 62))) {
			i = i + 1 >> 0;
		}
		i = i + 1 >> 0;
		if (i >= data.length) {
			return 0;
		}
		j = p.isEmpty($subslice(data, i));
		if (j > 0) {
			size = i + j >> 0;
			if (doRender) {
				end = size;
				while (end > 0 && ((x$2 = end - 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === 10)) {
					end = end - 1 >> 0;
				}
				p.r.BlockHtml(out, $subslice(data, 0, end));
			}
			return size;
		}
		return 0;
	};
	parser.prototype.htmlComment = function(out, data, doRender) { return this.$val.htmlComment(out, data, doRender); };
	parser.Ptr.prototype.htmlHr = function(out, data, doRender) {
		var p, i, j, size, end, x;
		p = this;
		if (!((((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 60)) || (!((((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === 104)) && !((((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === 72))) || (!((((2 < 0 || 2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 2]) === 114)) && !((((2 < 0 || 2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 2]) === 82)))) {
			return 0;
		}
		if (!((((3 < 0 || 3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 3]) === 32)) && !((((3 < 0 || 3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 3]) === 47)) && !((((3 < 0 || 3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 3]) === 62))) {
			return 0;
		}
		i = 3;
		while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 62)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
			i = i + 1 >> 0;
		}
		if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 62) {
			i = i + 1 >> 0;
			j = p.isEmpty($subslice(data, i));
			if (j > 0) {
				size = i + j >> 0;
				if (doRender) {
					end = size;
					while (end > 0 && ((x = end - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 10)) {
						end = end - 1 >> 0;
					}
					p.r.BlockHtml(out, $subslice(data, 0, end));
				}
				return size;
			}
		}
		return 0;
	};
	parser.prototype.htmlHr = function(out, data, doRender) { return this.$val.htmlHr(out, data, doRender); };
	parser.Ptr.prototype.htmlFindTag = function(data) {
		var p, i, key, _entry;
		p = this;
		i = 0;
		while (isalnum(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]))) {
			i = i + 1 >> 0;
		}
		key = $bytesToString($subslice(data, 0, i));
		if ((_entry = blockTags[key], _entry !== undefined ? _entry.v : false)) {
			return [key, true];
		}
		return ["", false];
	};
	parser.prototype.htmlFindTag = function(data) { return this.$val.htmlFindTag(data); };
	parser.Ptr.prototype.htmlFindEnd = function(tag, data) {
		var p, closetag, i, skip;
		p = this;
		closetag = new ($sliceType($Uint8))($stringToBytes("</" + tag + ">"));
		if (!bytes.HasPrefix(data, closetag)) {
			return 0;
		}
		i = closetag.length;
		skip = 0;
		skip = p.isEmpty($subslice(data, i));
		if (skip === 0) {
			return 0;
		}
		i = i + (skip) >> 0;
		skip = 0;
		if (i >= data.length) {
			return i;
		}
		if (!(((p.flags & 32) === 0))) {
			return i;
		}
		skip = p.isEmpty($subslice(data, i));
		if (skip === 0) {
			return 0;
		}
		return i + skip >> 0;
	};
	parser.prototype.htmlFindEnd = function(tag, data) { return this.$val.htmlFindEnd(tag, data); };
	parser.Ptr.prototype.isEmpty = function(data) {
		var p, i;
		p = this;
		if (data.length === 0) {
			return 0;
		}
		i = 0;
		i = 0;
		while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
			if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 9))) {
				return 0;
			}
			i = i + 1 >> 0;
		}
		return i + 1 >> 0;
	};
	parser.prototype.isEmpty = function(data) { return this.$val.isEmpty(data); };
	parser.Ptr.prototype.isHRule = function(data) {
		var p, i, c, n;
		p = this;
		i = 0;
		while (i < 3 && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) {
			i = i + 1 >> 0;
		}
		if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 42)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 45)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 95))) {
			return false;
		}
		c = ((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]);
		n = 0;
		while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c) {
				n = n + 1 >> 0;
			} else if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32))) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return n >= 3;
	};
	parser.prototype.isHRule = function(data) { return this.$val.isHRule(data); };
	parser.Ptr.prototype.isFencedCode = function(data, syntax, oldmarker) {
		var skip, marker, p, _tmp, _tmp$1, i, size, c, syn, syntaxStart, x, language;
		skip = 0;
		marker = "";
		p = this;
		_tmp = 0; _tmp$1 = 0; i = _tmp; size = _tmp$1;
		skip = 0;
		while (i < 3 && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) {
			i = i + 1 >> 0;
		}
		if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 126)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 96))) {
			return [skip, marker];
		}
		c = ((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]);
		while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c) {
			size = size + 1 >> 0;
			i = i + 1 >> 0;
		}
		if (size < 3) {
			return [skip, marker];
		}
		marker = $bytesToString($subslice(data, (i - size >> 0), i));
		if (!(oldmarker === "") && !(marker === oldmarker)) {
			return [skip, marker];
		}
		if (!($pointerIsEqual(syntax, ($ptrType(($ptrType($String)))).nil))) {
			syn = 0;
			while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
				i = i + 1 >> 0;
			}
			syntaxStart = i;
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 123) {
				i = i + 1 >> 0;
				syntaxStart = syntaxStart + 1 >> 0;
				while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 125)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
					syn = syn + 1 >> 0;
					i = i + 1 >> 0;
				}
				if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 125))) {
					return [skip, marker];
				}
				while (syn > 0 && isspace(((syntaxStart < 0 || syntaxStart >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + syntaxStart]))) {
					syntaxStart = syntaxStart + 1 >> 0;
					syn = syn - 1 >> 0;
				}
				while (syn > 0 && isspace((x = (syntaxStart + syn >> 0) - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])))) {
					syn = syn - 1 >> 0;
				}
				i = i + 1 >> 0;
			} else {
				while (!isspace(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]))) {
					syn = syn + 1 >> 0;
					i = i + 1 >> 0;
				}
			}
			language = $bytesToString($subslice(data, syntaxStart, (syntaxStart + syn >> 0)));
			syntax.$set(new ($ptrType($String))(function() { return language; }, function($v) { language = $v; }));
		}
		while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
			i = i + 1 >> 0;
		}
		if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
			return [skip, marker];
		}
		skip = i + 1 >> 0;
		return [skip, marker];
	};
	parser.prototype.isFencedCode = function(data, syntax, oldmarker) { return this.$val.isFencedCode(data, syntax, oldmarker); };
	parser.Ptr.prototype.fencedCode = function(out, data, doRender) {
		var p, lang, _tuple, beg, marker, work, _tuple$1, fenceEnd, end, syntax;
		p = this;
		lang = ($ptrType($String)).nil;
		_tuple = p.isFencedCode(data, new ($ptrType(($ptrType($String))))(function() { return lang; }, function($v) { lang = $v; }), ""); beg = _tuple[0]; marker = _tuple[1];
		if ((beg === 0) || beg >= data.length) {
			return 0;
		}
		work = new bytes.Buffer.Ptr(); $copy(work, new bytes.Buffer.Ptr(), bytes.Buffer);
		while (true) {
			_tuple$1 = p.isFencedCode($subslice(data, beg), ($ptrType(($ptrType($String)))).nil, marker); fenceEnd = _tuple$1[0];
			if (!((fenceEnd === 0))) {
				beg = beg + (fenceEnd) >> 0;
				break;
			}
			end = beg;
			while (!((((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end]) === 10))) {
				end = end + 1 >> 0;
			}
			end = end + 1 >> 0;
			if (end >= data.length) {
				return 0;
			}
			if (doRender) {
				work.Write($subslice(data, beg, end));
			}
			beg = end;
		}
		syntax = "";
		if (!($pointerIsEqual(lang, ($ptrType($String)).nil))) {
			syntax = lang.$get();
		}
		if (doRender) {
			p.r.BlockCode(out, work.Bytes(), syntax);
		}
		return beg;
	};
	parser.prototype.fencedCode = function(out, data, doRender) { return this.$val.fencedCode(out, data, doRender); };
	parser.Ptr.prototype.table = function(out, data) {
		var p, header, _tuple, i, columns, body, _tmp, _tmp$1, pipes, rowStart;
		p = this;
		header = new bytes.Buffer.Ptr(); $copy(header, new bytes.Buffer.Ptr(), bytes.Buffer);
		_tuple = p.tableHeader(header, data); i = _tuple[0]; columns = _tuple[1];
		if (i === 0) {
			return 0;
		}
		body = new bytes.Buffer.Ptr(); $copy(body, new bytes.Buffer.Ptr(), bytes.Buffer);
		while (i < data.length) {
			_tmp = 0; _tmp$1 = i; pipes = _tmp; rowStart = _tmp$1;
			while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
				if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 124) {
					pipes = pipes + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			if (pipes === 0) {
				i = rowStart;
				break;
			}
			i = i + 1 >> 0;
			p.tableRow(body, $subslice(data, rowStart, i), columns, false);
		}
		p.r.Table(out, header.Bytes(), body.Bytes(), columns);
		return i;
	};
	parser.prototype.table = function(out, data) { return this.$val.table(out, data); };
	isBackslashEscaped = function(data, i) {
		var backslashes, x;
		backslashes = 0;
		while (((i - backslashes >> 0) - 1 >> 0) >= 0 && ((x = (i - backslashes >> 0) - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 92)) {
			backslashes = backslashes + 1 >> 0;
		}
		return (backslashes & 1) === 1;
	};
	parser.Ptr.prototype.tableHeader = function(out, data) {
		var size, columns, p, i, colCount, header, x, col, dashes, _lhs, _index, _lhs$1, _index$1;
		size = 0;
		columns = ($sliceType($Int)).nil;
		p = this;
		i = 0;
		colCount = 1;
		i = 0;
		while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
			if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 124) && !isBackslashEscaped(data, i)) {
				colCount = colCount + 1 >> 0;
			}
			i = i + 1 >> 0;
		}
		if (colCount === 1) {
			return [size, columns];
		}
		header = $subslice(data, 0, (i + 1 >> 0));
		if (((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 124) {
			colCount = colCount - 1 >> 0;
		}
		if (i > 2 && ((x = i - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 124) && !isBackslashEscaped(data, i - 1 >> 0)) {
			colCount = colCount - 1 >> 0;
		}
		columns = ($sliceType($Int)).make(colCount, 0, function() { return 0; });
		i = i + 1 >> 0;
		if (i >= data.length) {
			return [size, columns];
		}
		if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 124) && !isBackslashEscaped(data, i)) {
			i = i + 1 >> 0;
		}
		while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
			i = i + 1 >> 0;
		}
		col = 0;
		while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
			dashes = 0;
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 58) {
				i = i + 1 >> 0;
				_lhs = columns; _index = col; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs.array[_lhs.offset + _index] = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs.array[_lhs.offset + _index]) | 1;
				dashes = dashes + 1 >> 0;
			}
			while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 45) {
				i = i + 1 >> 0;
				dashes = dashes + 1 >> 0;
			}
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 58) {
				i = i + 1 >> 0;
				_lhs$1 = columns; _index$1 = col; (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1.array[_lhs$1.offset + _index$1] = ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1.array[_lhs$1.offset + _index$1]) | 2;
				dashes = dashes + 1 >> 0;
			}
			while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
				i = i + 1 >> 0;
			}
			if (dashes < 3) {
				return [size, columns];
			} else if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 124) && !isBackslashEscaped(data, i)) {
				col = col + 1 >> 0;
				i = i + 1 >> 0;
				while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
					i = i + 1 >> 0;
				}
				if (col >= colCount && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
					return [size, columns];
				}
			} else if ((!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 124)) || isBackslashEscaped(data, i)) && (col + 1 >> 0) < colCount) {
				return [size, columns];
			} else if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10) {
				col = col + 1 >> 0;
			} else {
				return [size, columns];
			}
		}
		if (!((col === colCount))) {
			return [size, columns];
		}
		p.tableRow(out, header, columns, true);
		size = i + 1 >> 0;
		return [size, columns];
	};
	parser.prototype.tableHeader = function(out, data) { return this.$val.tableHeader(out, data); };
	parser.Ptr.prototype.tableRow = function(out, data, columns, header) {
		var p, _tmp, _tmp$1, i, col, rowWork, cellStart, cellEnd, x, cellWork;
		p = this;
		_tmp = 0; _tmp$1 = 0; i = _tmp; col = _tmp$1;
		rowWork = new bytes.Buffer.Ptr(); $copy(rowWork, new bytes.Buffer.Ptr(), bytes.Buffer);
		if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 124) && !isBackslashEscaped(data, i)) {
			i = i + 1 >> 0;
		}
		col = 0;
		while (col < columns.length && i < data.length) {
			while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
				i = i + 1 >> 0;
			}
			cellStart = i;
			while ((!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 124)) || isBackslashEscaped(data, i)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
				i = i + 1 >> 0;
			}
			cellEnd = i;
			i = i + 1 >> 0;
			while (cellEnd > cellStart && ((x = cellEnd - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 32)) {
				cellEnd = cellEnd - 1 >> 0;
			}
			cellWork = new bytes.Buffer.Ptr(); $copy(cellWork, new bytes.Buffer.Ptr(), bytes.Buffer);
			p.inline(cellWork, $subslice(data, cellStart, cellEnd));
			if (header) {
				p.r.TableHeaderCell(rowWork, cellWork.Bytes(), ((col < 0 || col >= columns.length) ? $throwRuntimeError("index out of range") : columns.array[columns.offset + col]));
			} else {
				p.r.TableCell(rowWork, cellWork.Bytes(), ((col < 0 || col >= columns.length) ? $throwRuntimeError("index out of range") : columns.array[columns.offset + col]));
			}
			col = col + 1 >> 0;
		}
		while (col < columns.length) {
			if (header) {
				p.r.TableHeaderCell(rowWork, ($sliceType($Uint8)).nil, ((col < 0 || col >= columns.length) ? $throwRuntimeError("index out of range") : columns.array[columns.offset + col]));
			} else {
				p.r.TableCell(rowWork, ($sliceType($Uint8)).nil, ((col < 0 || col >= columns.length) ? $throwRuntimeError("index out of range") : columns.array[columns.offset + col]));
			}
			col = col + 1 >> 0;
		}
		p.r.TableRow(out, rowWork.Bytes());
	};
	parser.prototype.tableRow = function(out, data, columns, header) { return this.$val.tableRow(out, data, columns, header); };
	parser.Ptr.prototype.quotePrefix = function(data) {
		var p, i, x;
		p = this;
		i = 0;
		while (i < 3 && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) {
			i = i + 1 >> 0;
		}
		if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 62) {
			if ((x = i + 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 32) {
				return i + 2 >> 0;
			}
			return i + 1 >> 0;
		}
		return 0;
	};
	parser.prototype.quotePrefix = function(data) { return this.$val.quotePrefix(data); };
	parser.Ptr.prototype.quote = function(out, data) {
		var p, raw, _tmp, _tmp$1, beg, end, pre, cooked;
		p = this;
		raw = new bytes.Buffer.Ptr(); $copy(raw, new bytes.Buffer.Ptr(), bytes.Buffer);
		_tmp = 0; _tmp$1 = 0; beg = _tmp; end = _tmp$1;
		while (beg < data.length) {
			end = beg;
			while (!((((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end]) === 10))) {
				end = end + 1 >> 0;
			}
			end = end + 1 >> 0;
			pre = p.quotePrefix($subslice(data, beg));
			if (pre > 0) {
				beg = beg + (pre) >> 0;
			} else if (p.isEmpty($subslice(data, beg)) > 0 && (end >= data.length || ((p.quotePrefix($subslice(data, end)) === 0) && (p.isEmpty($subslice(data, end)) === 0)))) {
				break;
			}
			raw.Write($subslice(data, beg, end));
			beg = end;
		}
		cooked = new bytes.Buffer.Ptr(); $copy(cooked, new bytes.Buffer.Ptr(), bytes.Buffer);
		p.block(cooked, raw.Bytes());
		p.r.BlockQuote(out, cooked.Bytes());
		return end;
	};
	parser.prototype.quote = function(out, data) { return this.$val.quote(out, data); };
	parser.Ptr.prototype.codePrefix = function(data) {
		var p;
		p = this;
		if ((((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 32) && (((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === 32) && (((2 < 0 || 2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 2]) === 32) && (((3 < 0 || 3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 3]) === 32)) {
			return 4;
		}
		return 0;
	};
	parser.prototype.codePrefix = function(data) { return this.$val.codePrefix(data); };
	parser.Ptr.prototype.code = function(out, data) {
		var p, work, i, beg, blankline, pre, workbytes, eol, x;
		p = this;
		work = new bytes.Buffer.Ptr(); $copy(work, new bytes.Buffer.Ptr(), bytes.Buffer);
		i = 0;
		while (i < data.length) {
			beg = i;
			while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
				i = i + 1 >> 0;
			}
			i = i + 1 >> 0;
			blankline = p.isEmpty($subslice(data, beg, i)) > 0;
			pre = p.codePrefix($subslice(data, beg, i));
			if (pre > 0) {
				beg = beg + (pre) >> 0;
			} else if (!blankline) {
				i = beg;
				break;
			}
			if (blankline) {
				work.WriteByte(10);
			} else {
				work.Write($subslice(data, beg, i));
			}
		}
		workbytes = work.Bytes();
		eol = workbytes.length;
		while (eol > 0 && ((x = eol - 1 >> 0, ((x < 0 || x >= workbytes.length) ? $throwRuntimeError("index out of range") : workbytes.array[workbytes.offset + x])) === 10)) {
			eol = eol - 1 >> 0;
		}
		if (!((eol === workbytes.length))) {
			work.Truncate(eol);
		}
		work.WriteByte(10);
		p.r.BlockCode(out, work.Bytes(), "");
		return i;
	};
	parser.prototype.code = function(out, data) { return this.$val.code(out, data); };
	parser.Ptr.prototype.uliPrefix = function(data) {
		var p, i, x;
		p = this;
		i = 0;
		while (i < 3 && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) {
			i = i + 1 >> 0;
		}
		if ((!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 42)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 43)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 45))) || !(((x = i + 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 32))) {
			return 0;
		}
		return i + 2 >> 0;
	};
	parser.prototype.uliPrefix = function(data) { return this.$val.uliPrefix(data); };
	parser.Ptr.prototype.oliPrefix = function(data) {
		var p, i, start, x;
		p = this;
		i = 0;
		while (i < 3 && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) {
			i = i + 1 >> 0;
		}
		start = i;
		while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) >= 48 && ((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) <= 57) {
			i = i + 1 >> 0;
		}
		if ((start === i) || !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 46)) || !(((x = i + 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 32))) {
			return 0;
		}
		return i + 2 >> 0;
	};
	parser.prototype.oliPrefix = function(data) { return this.$val.oliPrefix(data); };
	parser.Ptr.prototype.list = function(out, data, flags) {
		var p, i, work;
		p = this;
		i = 0;
		flags = flags | 4;
		work = (function() {
			var skip;
			while (i < data.length) {
				skip = p.listItem(out, $subslice(data, i), new ($ptrType($Int))(function() { return flags; }, function($v) { flags = $v; }));
				i = i + (skip) >> 0;
				if ((skip === 0) || !(((flags & 8) === 0))) {
					break;
				}
				flags = flags & -5;
			}
			return true;
		});
		p.r.List(out, work, flags);
		return i;
	};
	parser.prototype.list = function(out, data, flags) { return this.$val.list(out, data, flags); };
	parser.Ptr.prototype.listItem = function(out, data, flags) {
		var p, itemIndent, i, line, x, raw, containsBlankLine, sublist, x$1, indent, x$2, chunk, _lhs, _lhs$1, _lhs$2, _lhs$3, _lhs$4, rawBytes, cooked, cookedBytes, parsedEnd, x$3;
		p = this;
		itemIndent = 0;
		while (itemIndent < 3 && (((itemIndent < 0 || itemIndent >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + itemIndent]) === 32)) {
			itemIndent = itemIndent + 1 >> 0;
		}
		i = p.uliPrefix(data);
		if (i === 0) {
			i = p.oliPrefix(data);
		}
		if (i === 0) {
			return 0;
		}
		while (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) {
			i = i + 1 >> 0;
		}
		line = i;
		while (!(((x = i - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 10))) {
			i = i + 1 >> 0;
		}
		raw = new bytes.Buffer.Ptr(); $copy(raw, new bytes.Buffer.Ptr(), bytes.Buffer);
		raw.Write($subslice(data, line, i));
		line = i;
		containsBlankLine = false;
		sublist = 0;
		gatherlines:
		while (line < data.length) {
			i = i + 1 >> 0;
			while (!(((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 10))) {
				i = i + 1 >> 0;
			}
			if (p.isEmpty($subslice(data, line, i)) > 0) {
				containsBlankLine = true;
				line = i;
				continue;
			}
			indent = 0;
			while (indent < 4 && (line + indent >> 0) < i && ((x$2 = line + indent >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === 32)) {
				indent = indent + 1 >> 0;
			}
			chunk = $subslice(data, (line + indent >> 0), i);
			if ((p.uliPrefix(chunk) > 0 && !p.isHRule(chunk)) || p.oliPrefix(chunk) > 0) {
				if (containsBlankLine) {
					_lhs = flags; _lhs.$set(_lhs.$get() | 2);
				}
				if (indent <= itemIndent) {
					break gatherlines;
				}
				if (sublist === 0) {
					sublist = raw.Len();
				}
			} else if (p.isPrefixHeader(chunk)) {
				if (containsBlankLine && indent < 4) {
					_lhs$1 = flags; _lhs$1.$set(_lhs$1.$get() | 8);
					break gatherlines;
				}
				_lhs$2 = flags; _lhs$2.$set(_lhs$2.$get() | 2);
			} else if (containsBlankLine && indent < 4) {
				_lhs$3 = flags; _lhs$3.$set(_lhs$3.$get() | 8);
				break gatherlines;
			} else if (containsBlankLine) {
				raw.WriteByte(10);
				_lhs$4 = flags; _lhs$4.$set(_lhs$4.$get() | 2);
			}
			if (containsBlankLine) {
				containsBlankLine = false;
				raw.WriteByte(10);
			}
			raw.Write($subslice(data, (line + indent >> 0), i));
			line = i;
		}
		rawBytes = raw.Bytes();
		cooked = new bytes.Buffer.Ptr(); $copy(cooked, new bytes.Buffer.Ptr(), bytes.Buffer);
		if (!(((flags.$get() & 2) === 0))) {
			if (sublist > 0) {
				p.block(cooked, $subslice(rawBytes, 0, sublist));
				p.block(cooked, $subslice(rawBytes, sublist));
			} else {
				p.block(cooked, rawBytes);
			}
		} else {
			if (sublist > 0) {
				p.inline(cooked, $subslice(rawBytes, 0, sublist));
				p.block(cooked, $subslice(rawBytes, sublist));
			} else {
				p.inline(cooked, rawBytes);
			}
		}
		cookedBytes = cooked.Bytes();
		parsedEnd = cookedBytes.length;
		while (parsedEnd > 0 && ((x$3 = parsedEnd - 1 >> 0, ((x$3 < 0 || x$3 >= cookedBytes.length) ? $throwRuntimeError("index out of range") : cookedBytes.array[cookedBytes.offset + x$3])) === 10)) {
			parsedEnd = parsedEnd - 1 >> 0;
		}
		p.r.ListItem(out, $subslice(cookedBytes, 0, parsedEnd), flags.$get());
		return line;
	};
	parser.prototype.listItem = function(out, data, flags) { return this.$val.listItem(out, data, flags); };
	parser.Ptr.prototype.renderParagraph = function(out, data) {
		var p, beg, end, x, work;
		p = this;
		if (data.length === 0) {
			return;
		}
		beg = 0;
		while (((beg < 0 || beg >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + beg]) === 32) {
			beg = beg + 1 >> 0;
		}
		end = data.length - 1 >> 0;
		while (end > beg && ((x = end - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 32)) {
			end = end - 1 >> 0;
		}
		work = (function() {
			p.inline(out, $subslice(data, beg, end));
			return true;
		});
		p.r.Paragraph(out, work);
	};
	parser.prototype.renderParagraph = function(out, data) { return this.$val.renderParagraph(out, data); };
	parser.Ptr.prototype.paragraph = function(out, data) {
		var p, _tmp, _tmp$1, _tmp$2, prev, line, i, current, n, level, eol, x, work;
		p = this;
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; prev = _tmp; line = _tmp$1; i = _tmp$2;
		while (i < data.length) {
			prev = line;
			current = $subslice(data, i);
			line = i;
			n = p.isEmpty(current);
			if (n > 0) {
				p.renderParagraph(out, $subslice(data, 0, i));
				return i + n >> 0;
			}
			if (i > 0) {
				level = p.isUnderlinedHeader(current);
				if (level > 0) {
					p.renderParagraph(out, $subslice(data, 0, prev));
					eol = i - 1 >> 0;
					while (prev < eol && (((prev < 0 || prev >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + prev]) === 32)) {
						prev = prev + 1 >> 0;
					}
					while (eol > prev && ((x = eol - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 32)) {
						eol = eol - 1 >> 0;
					}
					work = (function(o, pp, d) {
						return (function() {
							pp.inline(o, d);
							return true;
						});
					})(out, p, $subslice(data, prev, eol));
					p.r.Header(out, work, level, "");
					while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
						i = i + 1 >> 0;
					}
					return i;
				}
			}
			if (!(((p.flags & 32) === 0))) {
				if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 60) && p.html(out, current, false) > 0) {
					p.renderParagraph(out, $subslice(data, 0, i));
					return i;
				}
			}
			if (p.isPrefixHeader(current) || p.isHRule(current)) {
				p.renderParagraph(out, $subslice(data, 0, i));
				return i;
			}
			if (!(((p.flags & 1024) === 0))) {
				if (!((p.uliPrefix(current) === 0)) || !((p.oliPrefix(current) === 0)) || !((p.quotePrefix(current) === 0)) || !((p.codePrefix(current) === 0))) {
					p.renderParagraph(out, $subslice(data, 0, i));
					return i;
				}
			}
			while (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
				i = i + 1 >> 0;
			}
			i = i + 1 >> 0;
		}
		p.renderParagraph(out, $subslice(data, 0, i));
		return i;
	};
	parser.prototype.paragraph = function(out, data) { return this.$val.paragraph(out, data); };
	isRelativeLink = function(link$1) {
		var yes;
		yes = false;
		yes = false;
		if (((0 < 0 || 0 >= link$1.length) ? $throwRuntimeError("index out of range") : link$1.array[link$1.offset + 0]) === 35) {
			yes = true;
		}
		if (link$1.length >= 2 && (((0 < 0 || 0 >= link$1.length) ? $throwRuntimeError("index out of range") : link$1.array[link$1.offset + 0]) === 47) && !((((1 < 0 || 1 >= link$1.length) ? $throwRuntimeError("index out of range") : link$1.array[link$1.offset + 1]) === 47))) {
			yes = true;
		}
		if ((link$1.length === 1) && (((0 < 0 || 0 >= link$1.length) ? $throwRuntimeError("index out of range") : link$1.array[link$1.offset + 0]) === 47)) {
			yes = true;
		}
		return yes;
	};
	parser.Ptr.prototype.inline = function(out, data) {
		var p, _tmp, _tmp$1, i, end, handler, consumed;
		p = this;
		if (p.nesting >= p.maxNesting) {
			return;
		}
		p.nesting = p.nesting + 1 >> 0;
		_tmp = 0; _tmp$1 = 0; i = _tmp; end = _tmp$1;
		while (i < data.length) {
			while (end < data.length && p.inlineCallback[((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end])] === $throwNilPointerError) {
				end = end + 1 >> 0;
			}
			p.r.NormalText(out, $subslice(data, i, end));
			if (end >= data.length) {
				break;
			}
			i = end;
			handler = p.inlineCallback[((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end])];
			consumed = handler(p, out, data, i);
			if (consumed === 0) {
				end = i + 1 >> 0;
			} else {
				i = i + (consumed) >> 0;
				end = i;
			}
		}
		p.nesting = p.nesting - 1 >> 0;
	};
	parser.prototype.inline = function(out, data) { return this.$val.inline(out, data); };
	emphasis = function(p, out, data, offset) {
		var c, ret;
		data = $subslice(data, offset);
		c = ((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]);
		ret = 0;
		if (data.length > 2 && !((((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === c))) {
			if ((c === 126) || isspace(((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]))) {
				return 0;
			}
			ret = helperEmphasis(p, out, $subslice(data, 1), c);
			if (ret === 0) {
				return 0;
			}
			return ret + 1 >> 0;
		}
		if (data.length > 3 && (((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === c) && !((((2 < 0 || 2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 2]) === c))) {
			if (isspace(((2 < 0 || 2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 2]))) {
				return 0;
			}
			ret = helperDoubleEmphasis(p, out, $subslice(data, 2), c);
			if (ret === 0) {
				return 0;
			}
			return ret + 2 >> 0;
		}
		if (data.length > 4 && (((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === c) && (((2 < 0 || 2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 2]) === c) && !((((3 < 0 || 3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 3]) === c))) {
			if ((c === 126) || isspace(((3 < 0 || 3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 3]))) {
				return 0;
			}
			ret = helperTripleEmphasis(p, out, data, 3, c);
			if (ret === 0) {
				return 0;
			}
			return ret + 3 >> 0;
		}
		return 0;
	};
	codeSpan = function(p, out, data, offset) {
		var nb, _tmp, _tmp$1, i, end, fBegin, fEnd, x;
		data = $subslice(data, offset);
		nb = 0;
		while (nb < data.length && (((nb < 0 || nb >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + nb]) === 96)) {
			nb = nb + 1 >> 0;
		}
		_tmp = 0; _tmp$1 = 0; i = _tmp; end = _tmp$1;
		end = nb;
		while (end < data.length && i < nb) {
			if (((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end]) === 96) {
				i = i + 1 >> 0;
			} else {
				i = 0;
			}
			end = end + 1 >> 0;
		}
		if (i < nb && end >= data.length) {
			return 0;
		}
		fBegin = nb;
		while (fBegin < end && (((fBegin < 0 || fBegin >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + fBegin]) === 32)) {
			fBegin = fBegin + 1 >> 0;
		}
		fEnd = end - nb >> 0;
		while (fEnd > fBegin && ((x = fEnd - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 32)) {
			fEnd = fEnd - 1 >> 0;
		}
		if (!((fBegin === fEnd))) {
			p.r.CodeSpan(out, $subslice(data, fBegin, fEnd));
		}
		return end;
	};
	lineBreak = function(p, out, data, offset) {
		var outBytes, end, eol, x, x$1, x$2, precededByTwoSpaces;
		outBytes = out.Bytes();
		end = outBytes.length;
		eol = end;
		while (eol > 0 && ((x = eol - 1 >> 0, ((x < 0 || x >= outBytes.length) ? $throwRuntimeError("index out of range") : outBytes.array[outBytes.offset + x])) === 32)) {
			eol = eol - 1 >> 0;
		}
		out.Truncate(eol);
		precededByTwoSpaces = offset >= 2 && ((x$1 = offset - 2 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 32) && ((x$2 = offset - 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === 32);
		if (((p.flags & 128) === 0) && !precededByTwoSpaces) {
			return 0;
		}
		p.r.LineBreak(out);
		return 1;
	};
	link = function(p, out, data, offset) {
		var x, x$1, t, x$2, x$3, x$4, i, noteId, _tmp, _tmp$1, title, link$1, textHasNl, level, x$5, txtE, linkB, linkE, _tmp$2, _tmp$3, titleB, titleE, _tmp$4, _tmp$5, x$6, x$7, id, linkB$1, linkE$1, b, j, x$8, key, _tuple, _entry, lr, ok, id$1, b$1, j$1, x$9, key$1, fragment, ref, _tuple$1, _entry$1, lr$1, ok$1, content, insideLink, uLink, uLinkBuf, _ref, outSize, outBytes, x$10, outSize$1, outBytes$1, x$11;
		if (p.insideLink && (offset > 0 && ((x = offset - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 91) || (data.length - 1 >> 0) > offset && ((x$1 = offset + 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 94))) {
			return 0;
		}
		t = 0;
		if (offset > 0 && ((x$2 = offset - 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === 33)) {
			t = 1;
		} else if (!(((p.flags & 512) === 0))) {
			if (offset > 0 && ((x$3 = offset - 1 >> 0, ((x$3 < 0 || x$3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$3])) === 94)) {
				t = 3;
			} else if ((data.length - 1 >> 0) > offset && ((x$4 = offset + 1 >> 0, ((x$4 < 0 || x$4 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$4])) === 94)) {
				t = 2;
			}
		}
		data = $subslice(data, offset);
		i = 1;
		noteId = 0;
		_tmp = ($sliceType($Uint8)).nil; _tmp$1 = ($sliceType($Uint8)).nil; title = _tmp; link$1 = _tmp$1;
		textHasNl = false;
		if (t === 2) {
			i = i + 1 >> 0;
		}
		level = 1;
		while (level > 0 && i < data.length) {
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10) {
				textHasNl = true;
			} else if ((x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$5])) === 92) {
				i = i + 1 >> 0;
				continue;
			} else if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 91) {
				level = level + 1 >> 0;
			} else if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 93) {
				level = level - 1 >> 0;
				if (level <= 0) {
					i = i - 1 >> 0;
				}
			}
			i = i + 1 >> 0;
		}
		if (i >= data.length) {
			return 0;
		}
		txtE = i;
		i = i + 1 >> 0;
		while (i < data.length && isspace(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]))) {
			i = i + 1 >> 0;
		}
		if (i < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 40)) {
			i = i + 1 >> 0;
			while (i < data.length && isspace(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]))) {
				i = i + 1 >> 0;
			}
			linkB = i;
			findlinkend:
			while (i < data.length) {
				if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 92) {
					i = i + 2 >> 0;
				} else if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 41) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 39) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 34)) {
					break findlinkend;
				} else {
					i = i + 1 >> 0;
				}
			}
			if (i >= data.length) {
				return 0;
			}
			linkE = i;
			_tmp$2 = 0; _tmp$3 = 0; titleB = _tmp$2; titleE = _tmp$3;
			if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 39) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 34)) {
				i = i + 1 >> 0;
				titleB = i;
				findtitleend:
				while (i < data.length) {
					if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 92) {
						i = i + 2 >> 0;
					} else if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 41) {
						break findtitleend;
					} else {
						i = i + 1 >> 0;
					}
				}
				if (i >= data.length) {
					return 0;
				}
				titleE = i - 1 >> 0;
				while (titleE > titleB && isspace(((titleE < 0 || titleE >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + titleE]))) {
					titleE = titleE - 1 >> 0;
				}
				if (!((((titleE < 0 || titleE >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + titleE]) === 39)) && !((((titleE < 0 || titleE >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + titleE]) === 34))) {
					_tmp$4 = 0; _tmp$5 = 0; titleB = _tmp$4; titleE = _tmp$5;
					linkE = i;
				}
			}
			while (linkE > linkB && isspace((x$6 = linkE - 1 >> 0, ((x$6 < 0 || x$6 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$6])))) {
				linkE = linkE - 1 >> 0;
			}
			if (((linkB < 0 || linkB >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + linkB]) === 60) {
				linkB = linkB + 1 >> 0;
			}
			if ((x$7 = linkE - 1 >> 0, ((x$7 < 0 || x$7 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$7])) === 62) {
				linkE = linkE - 1 >> 0;
			}
			if (linkE > linkB) {
				link$1 = $subslice(data, linkB, linkE);
			}
			if (titleE > titleB) {
				title = $subslice(data, titleB, titleE);
			}
			i = i + 1 >> 0;
		} else if (i < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 91)) {
			id = ($sliceType($Uint8)).nil;
			i = i + 1 >> 0;
			linkB$1 = i;
			while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 93))) {
				i = i + 1 >> 0;
			}
			if (i >= data.length) {
				return 0;
			}
			linkE$1 = i;
			if (linkB$1 === linkE$1) {
				if (textHasNl) {
					b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
					j = 1;
					while (j < txtE) {
						if (!((((j < 0 || j >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + j]) === 10))) {
							b.WriteByte(((j < 0 || j >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + j]));
						} else if (!(((x$8 = j - 1 >> 0, ((x$8 < 0 || x$8 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$8])) === 32))) {
							b.WriteByte(32);
						}
						j = j + 1 >> 0;
					}
					id = b.Bytes();
				} else {
					id = $subslice(data, 1, txtE);
				}
			} else {
				id = $subslice(data, linkB$1, linkE$1);
			}
			key = $bytesToString(bytes.ToLower(id));
			_tuple = (_entry = p.refs[key], _entry !== undefined ? [_entry.v, true] : [($ptrType(reference)).nil, false]); lr = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				return 0;
			}
			link$1 = lr.link;
			title = lr.title;
			i = i + 1 >> 0;
		} else {
			id$1 = ($sliceType($Uint8)).nil;
			if (textHasNl) {
				b$1 = new bytes.Buffer.Ptr(); $copy(b$1, new bytes.Buffer.Ptr(), bytes.Buffer);
				j$1 = 1;
				while (j$1 < txtE) {
					if (!((((j$1 < 0 || j$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + j$1]) === 10))) {
						b$1.WriteByte(((j$1 < 0 || j$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + j$1]));
					} else if (!(((x$9 = j$1 - 1 >> 0, ((x$9 < 0 || x$9 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$9])) === 32))) {
						b$1.WriteByte(32);
					}
					j$1 = j$1 + 1 >> 0;
				}
				id$1 = b$1.Bytes();
			} else {
				if (t === 2) {
					id$1 = $subslice(data, 2, txtE);
				} else {
					id$1 = $subslice(data, 1, txtE);
				}
			}
			key$1 = $bytesToString(bytes.ToLower(id$1));
			if (t === 3) {
				noteId = p.notes.length + 1 >> 0;
				fragment = ($sliceType($Uint8)).nil;
				if (id$1.length > 0) {
					if (id$1.length < 16) {
						fragment = ($sliceType($Uint8)).make(id$1.length, 0, function() { return 0; });
					} else {
						fragment = ($sliceType($Uint8)).make(16, 0, function() { return 0; });
					}
					$copySlice(fragment, slugify(id$1));
				} else {
					fragment = $appendSlice(new ($sliceType($Uint8))($stringToBytes("footnote-")), new ($sliceType($Uint8))($stringToBytes(strconv.Itoa(noteId))));
				}
				ref = new reference.Ptr(fragment, id$1, noteId, false);
				p.notes = $append(p.notes, ref);
				link$1 = ref.link;
				title = ref.title;
			} else {
				_tuple$1 = (_entry$1 = p.refs[key$1], _entry$1 !== undefined ? [_entry$1.v, true] : [($ptrType(reference)).nil, false]); lr$1 = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (!ok$1) {
					return 0;
				}
				if (t === 2) {
					lr$1.noteId = p.notes.length + 1 >> 0;
					p.notes = $append(p.notes, lr$1);
				}
				link$1 = lr$1.link;
				title = lr$1.title;
				noteId = lr$1.noteId;
			}
			i = txtE + 1 >> 0;
		}
		content = new bytes.Buffer.Ptr(); $copy(content, new bytes.Buffer.Ptr(), bytes.Buffer);
		if (txtE > 1) {
			if (t === 1) {
				content.Write($subslice(data, 1, txtE));
			} else {
				insideLink = p.insideLink;
				p.insideLink = true;
				p.inline(content, $subslice(data, 1, txtE));
				p.insideLink = insideLink;
			}
		}
		uLink = ($sliceType($Uint8)).nil;
		if ((t === 0) || (t === 1)) {
			if (link$1.length > 0) {
				uLinkBuf = new bytes.Buffer.Ptr(); $copy(uLinkBuf, new bytes.Buffer.Ptr(), bytes.Buffer);
				unescapeText(uLinkBuf, link$1);
				uLink = uLinkBuf.Bytes();
			}
			if ((uLink.length === 0) || ((t === 0) && (content.Len() === 0))) {
				return 0;
			}
		}
		_ref = t;
		if (_ref === 0) {
			p.r.Link(out, uLink, title, content.Bytes());
		} else if (_ref === 1) {
			outSize = out.Len();
			outBytes = out.Bytes();
			if (outSize > 0 && ((x$10 = outSize - 1 >> 0, ((x$10 < 0 || x$10 >= outBytes.length) ? $throwRuntimeError("index out of range") : outBytes.array[outBytes.offset + x$10])) === 33)) {
				out.Truncate(outSize - 1 >> 0);
			}
			p.r.Image(out, uLink, title, content.Bytes());
		} else if (_ref === 3) {
			outSize$1 = out.Len();
			outBytes$1 = out.Bytes();
			if (outSize$1 > 0 && ((x$11 = outSize$1 - 1 >> 0, ((x$11 < 0 || x$11 >= outBytes$1.length) ? $throwRuntimeError("index out of range") : outBytes$1.array[outBytes$1.offset + x$11])) === 94)) {
				out.Truncate(outSize$1 - 1 >> 0);
			}
			p.r.FootnoteRef(out, link$1, noteId);
		} else if (_ref === 2) {
			p.r.FootnoteRef(out, link$1, noteId);
		} else {
			return 0;
		}
		return i;
	};
	leftAngle = function(p, out, data, offset) {
		var altype, end, uLink;
		data = $subslice(data, offset);
		altype = 0;
		end = tagLength(data, new ($ptrType($Int))(function() { return altype; }, function($v) { altype = $v; }));
		if (end > 2) {
			if (!((altype === 0))) {
				uLink = new bytes.Buffer.Ptr(); $copy(uLink, new bytes.Buffer.Ptr(), bytes.Buffer);
				unescapeText(uLink, $subslice(data, 1, ((end + 1 >> 0) - 2 >> 0)));
				if (uLink.Len() > 0) {
					p.r.AutoLink(out, uLink.Bytes(), altype);
				}
			} else {
				p.r.RawHtmlTag(out, $subslice(data, 0, end));
			}
		}
		return end;
	};
	escape = function(p, out, data, offset) {
		data = $subslice(data, offset);
		if (data.length > 1) {
			if (bytes.IndexByte(escapeChars, ((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1])) < 0) {
				return 0;
			}
			p.r.NormalText(out, $subslice(data, 1, 2));
		}
		return 2;
	};
	unescapeText = function(ob, src) {
		var i, org, x;
		i = 0;
		while (i < src.length) {
			org = i;
			while (i < src.length && !((((i < 0 || i >= src.length) ? $throwRuntimeError("index out of range") : src.array[src.offset + i]) === 92))) {
				i = i + 1 >> 0;
			}
			if (i > org) {
				ob.Write($subslice(src, org, i));
			}
			if ((i + 1 >> 0) >= src.length) {
				break;
			}
			ob.WriteByte((x = i + 1 >> 0, ((x < 0 || x >= src.length) ? $throwRuntimeError("index out of range") : src.array[src.offset + x])));
			i = i + 2 >> 0;
		}
	};
	entity = function(p, out, data, offset) {
		var end;
		data = $subslice(data, offset);
		end = 1;
		if (end < data.length && (((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end]) === 35)) {
			end = end + 1 >> 0;
		}
		while (end < data.length && isalnum(((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end]))) {
			end = end + 1 >> 0;
		}
		if (end < data.length && (((end < 0 || end >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + end]) === 59)) {
			end = end + 1 >> 0;
		} else {
			return 0;
		}
		p.r.Entity(out, $subslice(data, 0, end));
		return end;
	};
	linkEndsWithEntity = function(data, linkEnd) {
		var entityRanges, x, x$1;
		entityRanges = htmlEntity.FindAllIndex($subslice(data, 0, linkEnd), -1);
		if (!(entityRanges === ($sliceType(($sliceType($Int)))).nil) && ((x = (x$1 = entityRanges.length - 1 >> 0, ((x$1 < 0 || x$1 >= entityRanges.length) ? $throwRuntimeError("index out of range") : entityRanges.array[entityRanges.offset + x$1])), ((1 < 0 || 1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 1])) === linkEnd)) {
			return true;
		}
		return false;
	};
	autoLink = function(p, out, data, offset) {
		var x, x$1, anchorStart, offsetFromAnchor, anchorStr, rewind, x$2, origData, linkEnd, x$3, x$4, x$5, x$6, x$7, copen, _ref, x$8, bufEnd, openDelim, x$9, uLink;
		if (p.insideLink || data.length < (offset + 3 >> 0) || !(((x = offset + 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 47)) || !(((x$1 = offset + 2 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 47))) {
			return 0;
		}
		anchorStart = offset;
		offsetFromAnchor = 0;
		while (anchorStart > 0 && !((((anchorStart < 0 || anchorStart >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + anchorStart]) === 60))) {
			anchorStart = anchorStart - 1 >> 0;
			offsetFromAnchor = offsetFromAnchor + 1 >> 0;
		}
		anchorStr = anchorRe.Find($subslice(data, anchorStart));
		if (!(anchorStr === ($sliceType($Uint8)).nil)) {
			out.Write($subslice(anchorStr, offsetFromAnchor));
			return anchorStr.length - offsetFromAnchor >> 0;
		}
		rewind = 0;
		while ((offset - rewind >> 0) > 0 && rewind <= 7 && isletter((x$2 = (offset - rewind >> 0) - 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])))) {
			rewind = rewind + 1 >> 0;
		}
		if (rewind > 6) {
			return 0;
		}
		origData = data;
		data = $subslice(data, (offset - rewind >> 0));
		if (!isSafeLink(data)) {
			return 0;
		}
		linkEnd = 0;
		while (linkEnd < data.length && !isEndOfLink(((linkEnd < 0 || linkEnd >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + linkEnd]))) {
			linkEnd = linkEnd + 1 >> 0;
		}
		if ((((x$3 = linkEnd - 1 >> 0, ((x$3 < 0 || x$3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$3])) === 46) || ((x$4 = linkEnd - 1 >> 0, ((x$4 < 0 || x$4 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$4])) === 44)) && !(((x$5 = linkEnd - 2 >> 0, ((x$5 < 0 || x$5 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$5])) === 92))) {
			linkEnd = linkEnd - 1 >> 0;
		}
		if (((x$6 = linkEnd - 1 >> 0, ((x$6 < 0 || x$6 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$6])) === 59) && !(((x$7 = linkEnd - 2 >> 0, ((x$7 < 0 || x$7 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$7])) === 92)) && !linkEndsWithEntity(data, linkEnd)) {
			linkEnd = linkEnd - 1 >> 0;
		}
		copen = 0;
		_ref = (x$8 = linkEnd - 1 >> 0, ((x$8 < 0 || x$8 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$8]));
		if (_ref === 34) {
			copen = 34;
		} else if (_ref === 39) {
			copen = 39;
		} else if (_ref === 41) {
			copen = 40;
		} else if (_ref === 93) {
			copen = 91;
		} else if (_ref === 125) {
			copen = 123;
		} else {
			copen = 0;
		}
		if (!((copen === 0))) {
			bufEnd = ((offset - rewind >> 0) + linkEnd >> 0) - 2 >> 0;
			openDelim = 1;
			while (bufEnd >= 0 && !((((bufEnd < 0 || bufEnd >= origData.length) ? $throwRuntimeError("index out of range") : origData.array[origData.offset + bufEnd]) === 10)) && !((openDelim === 0))) {
				if (((bufEnd < 0 || bufEnd >= origData.length) ? $throwRuntimeError("index out of range") : origData.array[origData.offset + bufEnd]) === (x$9 = linkEnd - 1 >> 0, ((x$9 < 0 || x$9 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$9]))) {
					openDelim = openDelim + 1 >> 0;
				}
				if (((bufEnd < 0 || bufEnd >= origData.length) ? $throwRuntimeError("index out of range") : origData.array[origData.offset + bufEnd]) === copen) {
					openDelim = openDelim - 1 >> 0;
				}
				bufEnd = bufEnd - 1 >> 0;
			}
			if (openDelim === 0) {
				linkEnd = linkEnd - 1 >> 0;
			}
		}
		if (out.Len() >= rewind) {
			out.Truncate(out.Bytes().length - rewind >> 0);
		}
		uLink = new bytes.Buffer.Ptr(); $copy(uLink, new bytes.Buffer.Ptr(), bytes.Buffer);
		unescapeText(uLink, $subslice(data, 0, linkEnd));
		if (uLink.Len() > 0) {
			p.r.AutoLink(out, uLink.Bytes(), 1);
		}
		return linkEnd - rewind >> 0;
	};
	isEndOfLink = function(char$1) {
		return isspace(char$1) || (char$1 === 60);
	};
	isSafeLink = function(link$1) {
		var _ref, _i, prefix, x;
		_ref = validUris;
		_i = 0;
		while (_i < _ref.length) {
			prefix = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (link$1.length > prefix.length && bytes.Equal(bytes.ToLower($subslice(link$1, 0, prefix.length)), prefix) && isalnum((x = prefix.length, ((x < 0 || x >= link$1.length) ? $throwRuntimeError("index out of range") : link$1.array[link$1.offset + x])))) {
				return true;
			}
			_i++;
		}
		return false;
	};
	tagLength = function(data, autolink) {
		var _tmp, _tmp$1, i, j;
		_tmp = 0; _tmp$1 = 0; i = _tmp; j = _tmp$1;
		if (data.length < 3) {
			return 0;
		}
		if (!((((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 60))) {
			return 0;
		}
		if (((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === 47) {
			i = 2;
		} else {
			i = 1;
		}
		if (!isalnum(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]))) {
			return 0;
		}
		autolink.$set(0);
		while (i < data.length && (isalnum(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i])) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 46) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 43) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 45))) {
			i = i + 1 >> 0;
		}
		if (i > 1 && i < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 64)) {
			j = isMailtoAutoLink($subslice(data, i));
			if (!((j === 0))) {
				autolink.$set(2);
				return i + j >> 0;
			}
		}
		if (i > 2 && i < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 58)) {
			autolink.$set(1);
			i = i + 1 >> 0;
		}
		if (i >= data.length) {
			autolink.$set(0);
		} else if (!((autolink.$get() === 0))) {
			j = i;
			while (i < data.length) {
				if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 92) {
					i = i + 2 >> 0;
				} else if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 62) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 39) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 34) || isspace(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]))) {
					break;
				} else {
					i = i + 1 >> 0;
				}
			}
			if (i >= data.length) {
				return 0;
			}
			if (i > j && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 62)) {
				return i + 1 >> 0;
			}
			autolink.$set(0);
		}
		while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 62))) {
			i = i + 1 >> 0;
		}
		if (i >= data.length) {
			return 0;
		}
		return i + 1 >> 0;
	};
	isMailtoAutoLink = function(data) {
		var nb, i, _ref;
		nb = 0;
		i = 0;
		while (i < data.length) {
			if (isalnum(((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]))) {
				i = i + 1 >> 0;
				continue;
			}
			_ref = ((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]);
			switch (0) { default: if (_ref === 64) {
				nb = nb + 1 >> 0;
			} else if (_ref === 45 || _ref === 46 || _ref === 95) {
				break;
			} else if (_ref === 62) {
				if (nb === 1) {
					return i + 1 >> 0;
				} else {
					return 0;
				}
			} else {
				return 0;
			} }
			i = i + 1 >> 0;
		}
		return 0;
	};
	helperFindEmphChar = function(data, c) {
		var i, x, tmpI, tmpI$1, cc;
		i = 1;
		while (i < data.length) {
			while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 96)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 91))) {
				i = i + 1 >> 0;
			}
			if (i >= data.length) {
				return 0;
			}
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c) {
				return i;
			}
			if (!((i === 0)) && ((x = i - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 92)) {
				i = i + 1 >> 0;
				continue;
			}
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 96) {
				tmpI = 0;
				i = i + 1 >> 0;
				while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 96))) {
					if ((tmpI === 0) && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c)) {
						tmpI = i;
					}
					i = i + 1 >> 0;
				}
				if (i >= data.length) {
					return tmpI;
				}
				i = i + 1 >> 0;
			} else if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 91) {
				tmpI$1 = 0;
				i = i + 1 >> 0;
				while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 93))) {
					if ((tmpI$1 === 0) && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c)) {
						tmpI$1 = i;
					}
					i = i + 1 >> 0;
				}
				i = i + 1 >> 0;
				while (i < data.length && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10))) {
					i = i + 1 >> 0;
				}
				if (i >= data.length) {
					return tmpI$1;
				}
				if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 91)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 40))) {
					if (tmpI$1 > 0) {
						return tmpI$1;
					} else {
						continue;
					}
				}
				cc = ((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]);
				i = i + 1 >> 0;
				while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === cc))) {
					if ((tmpI$1 === 0) && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c)) {
						tmpI$1 = i;
					}
					i = i + 1 >> 0;
				}
				if (i >= data.length) {
					return tmpI$1;
				}
				i = i + 1 >> 0;
			}
		}
		return 0;
	};
	helperEmphasis = function(p, out, data, c) {
		var i, length, x, x$1, x$2, x$3, work;
		i = 0;
		if (data.length > 1 && (((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === c) && (((1 < 0 || 1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 1]) === c)) {
			i = 1;
		}
		while (i < data.length) {
			length = helperFindEmphChar($subslice(data, i), c);
			if (length === 0) {
				return 0;
			}
			i = i + (length) >> 0;
			if (i >= data.length) {
				return 0;
			}
			if ((i + 1 >> 0) < data.length && ((x = i + 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === c)) {
				i = i + 1 >> 0;
				continue;
			}
			if ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c) && !isspace((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])))) {
				if (!(((p.flags & 1) === 0))) {
					if (!(((i + 1 >> 0) === data.length) || isspace((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2]))) || ispunct((x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$3]))))) {
						continue;
					}
				}
				work = new bytes.Buffer.Ptr(); $copy(work, new bytes.Buffer.Ptr(), bytes.Buffer);
				p.inline(work, $subslice(data, 0, i));
				p.r.Emphasis(out, work.Bytes());
				return i + 1 >> 0;
			}
		}
		return 0;
	};
	helperDoubleEmphasis = function(p, out, data, c) {
		var i, length, x, x$1, work;
		i = 0;
		while (i < data.length) {
			length = helperFindEmphChar($subslice(data, i), c);
			if (length === 0) {
				return 0;
			}
			i = i + (length) >> 0;
			if ((i + 1 >> 0) < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c) && ((x = i + 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === c) && i > 0 && !isspace((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])))) {
				work = new bytes.Buffer.Ptr(); $copy(work, new bytes.Buffer.Ptr(), bytes.Buffer);
				p.inline(work, $subslice(data, 0, i));
				if (work.Len() > 0) {
					if (c === 126) {
						p.r.StrikeThrough(out, work.Bytes());
					} else {
						p.r.DoubleEmphasis(out, work.Bytes());
					}
				}
				return i + 2 >> 0;
			}
			i = i + 1 >> 0;
		}
		return 0;
	};
	helperTripleEmphasis = function(p, out, data, offset, c) {
		var i, origData, length, x, x$1, x$2, x$3, work;
		i = 0;
		origData = data;
		data = $subslice(data, offset);
		while (i < data.length) {
			length = helperFindEmphChar($subslice(data, i), c);
			if (length === 0) {
				return 0;
			}
			i = i + (length) >> 0;
			if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === c)) || isspace((x = i - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])))) {
				continue;
			}
			if ((i + 2 >> 0) < data.length && ((x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === c) && ((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === c)) {
				work = new bytes.Buffer.Ptr(); $copy(work, new bytes.Buffer.Ptr(), bytes.Buffer);
				p.inline(work, $subslice(data, 0, i));
				if (work.Len() > 0) {
					p.r.TripleEmphasis(out, work.Bytes());
				}
				return i + 3 >> 0;
			} else if ((i + 1 >> 0) < data.length && ((x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$3])) === c)) {
				length = helperEmphasis(p, out, $subslice(origData, (offset - 2 >> 0)), c);
				if (length === 0) {
					return 0;
				} else {
					return length - 2 >> 0;
				}
			} else {
				length = helperDoubleEmphasis(p, out, $subslice(origData, (offset - 1 >> 0)), c);
				if (length === 0) {
					return 0;
				} else {
					return length - 1 >> 0;
				}
			}
		}
		return 0;
	};
	Markdown = $pkg.Markdown = function(input, renderer, extensions) {
		var p, first, second;
		if ($interfaceIsEqual(renderer, null)) {
			return ($sliceType($Uint8)).nil;
		}
		p = new parser.Ptr();
		p.r = renderer;
		p.flags = extensions;
		p.refs = new $Map();
		p.maxNesting = 16;
		p.insideLink = false;
		p.inlineCallback[42] = emphasis;
		p.inlineCallback[95] = emphasis;
		if (!(((extensions & 16) === 0))) {
			p.inlineCallback[126] = emphasis;
		}
		p.inlineCallback[96] = codeSpan;
		p.inlineCallback[10] = lineBreak;
		p.inlineCallback[91] = link;
		p.inlineCallback[60] = leftAngle;
		p.inlineCallback[92] = escape;
		p.inlineCallback[38] = entity;
		if (!(((extensions & 8) === 0))) {
			p.inlineCallback[58] = autoLink;
		}
		if (!(((extensions & 512) === 0))) {
			p.notes = ($sliceType(($ptrType(reference)))).make(0, 0, function() { return ($ptrType(reference)).nil; });
		}
		first = firstPass(p, input);
		second = secondPass(p, first);
		if (!(((renderer.GetFlags() & 16) === 0))) {
			second = sanitizeHtmlSafe(second);
		}
		return second;
	};
	firstPass = function(p, input) {
		var out, tabSize, _tmp, _tmp$1, beg, end, lastLineWasBlank, lastFencedCodeBlockEnd, tmp, i;
		out = new bytes.Buffer.Ptr(); $copy(out, new bytes.Buffer.Ptr(), bytes.Buffer);
		tabSize = 4;
		if (!(((p.flags & 256) === 0))) {
			tabSize = 8;
		}
		_tmp = 0; _tmp$1 = 0; beg = _tmp; end = _tmp$1;
		lastLineWasBlank = false;
		lastFencedCodeBlockEnd = 0;
		while (beg < input.length) {
			end = isReference(p, $subslice(input, beg), tabSize);
			if (end > 0) {
				beg = beg + (end) >> 0;
			} else {
				end = beg;
				while (end < input.length && !((((end < 0 || end >= input.length) ? $throwRuntimeError("index out of range") : input.array[input.offset + end]) === 10)) && !((((end < 0 || end >= input.length) ? $throwRuntimeError("index out of range") : input.array[input.offset + end]) === 13))) {
					end = end + 1 >> 0;
				}
				if (!(((p.flags & 4) === 0))) {
					if (beg >= lastFencedCodeBlockEnd) {
						tmp = ($sliceType($Uint8)).make($subslice(input, beg).length, ($subslice(input, beg).length + 1 >> 0), function() { return 0; });
						$copySlice(tmp, $subslice(input, beg));
						i = p.fencedCode(out, $append(tmp, 10), false);
						if (i > 0) {
							if (!lastLineWasBlank) {
								out.WriteByte(10);
							}
							lastFencedCodeBlockEnd = beg + i >> 0;
						}
					}
					lastLineWasBlank = end === beg;
				}
				if (end > beg) {
					if (end < lastFencedCodeBlockEnd) {
						out.Write($subslice(input, beg, end));
					} else {
						expandTabs(out, $subslice(input, beg, end), tabSize);
					}
				}
				out.WriteByte(10);
				if (end < input.length && (((end < 0 || end >= input.length) ? $throwRuntimeError("index out of range") : input.array[input.offset + end]) === 13)) {
					end = end + 1 >> 0;
				}
				if (end < input.length && (((end < 0 || end >= input.length) ? $throwRuntimeError("index out of range") : input.array[input.offset + end]) === 10)) {
					end = end + 1 >> 0;
				}
				beg = end;
			}
		}
		if (out.Len() === 0) {
			out.WriteByte(10);
		}
		return out.Bytes();
	};
	secondPass = function(p, input) {
		var output;
		output = new bytes.Buffer.Ptr(); $copy(output, new bytes.Buffer.Ptr(), bytes.Buffer);
		p.r.DocumentHeader(output);
		p.block(output, input);
		if (!(((p.flags & 512) === 0)) && p.notes.length > 0) {
			p.r.Footnotes(output, (function() {
				var flags, _ref, _i, ref, buf;
				flags = 4;
				_ref = p.notes;
				_i = 0;
				while (_i < _ref.length) {
					ref = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
					buf = new bytes.Buffer.Ptr(); $copy(buf, new bytes.Buffer.Ptr(), bytes.Buffer);
					if (ref.hasBlock) {
						flags = flags | 2;
						p.block(buf, ref.title);
					} else {
						p.inline(buf, ref.title);
					}
					p.r.FootnoteItem(output, ref.link, buf.Bytes(), flags);
					flags = flags & ~6;
					_i++;
				}
				return true;
			}));
		}
		p.r.DocumentFooter(output);
		if (!((p.nesting === 0))) {
			throw $panic(new $String("Nesting level did not end at zero"));
		}
		return output.Bytes();
	};
	isReference = function(p, data, tabSize) {
		var i, noteId, idOffset, idEnd, x, _tmp, _tmp$1, linkOffset, linkEnd, _tmp$2, _tmp$3, titleOffset, titleEnd, lineEnd, raw, hasBlock, _tuple, _tuple$1, ref, id, _key$1;
		if (data.length < 4) {
			return 0;
		}
		i = 0;
		while (i < 3 && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) {
			i = i + 1 >> 0;
		}
		noteId = 0;
		if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 91))) {
			return 0;
		}
		i = i + 1 >> 0;
		if (!(((p.flags & 512) === 0))) {
			if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 94) {
				noteId = 1;
				i = i + 1 >> 0;
			}
		}
		idOffset = i;
		while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 13)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 93))) {
			i = i + 1 >> 0;
		}
		if (i >= data.length || !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 93))) {
			return 0;
		}
		idEnd = i;
		i = i + 1 >> 0;
		if (i >= data.length || !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 58))) {
			return 0;
		}
		i = i + 1 >> 0;
		while (i < data.length && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 9))) {
			i = i + 1 >> 0;
		}
		if (i < data.length && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 13))) {
			i = i + 1 >> 0;
			if (i < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10) && ((x = i - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 13)) {
				i = i + 1 >> 0;
			}
		}
		while (i < data.length && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 9))) {
			i = i + 1 >> 0;
		}
		if (i >= data.length) {
			return 0;
		}
		_tmp = 0; _tmp$1 = 0; linkOffset = _tmp; linkEnd = _tmp$1;
		_tmp$2 = 0; _tmp$3 = 0; titleOffset = _tmp$2; titleEnd = _tmp$3;
		lineEnd = 0;
		raw = ($sliceType($Uint8)).nil;
		hasBlock = false;
		if (!(((p.flags & 512) === 0)) && !((noteId === 0))) {
			_tuple = scanFootnote(p, data, i, tabSize); linkOffset = _tuple[0]; linkEnd = _tuple[1]; raw = _tuple[2]; hasBlock = _tuple[3];
			lineEnd = linkEnd;
		} else {
			_tuple$1 = scanLinkRef(p, data, i); linkOffset = _tuple$1[0]; linkEnd = _tuple$1[1]; titleOffset = _tuple$1[2]; titleEnd = _tuple$1[3]; lineEnd = _tuple$1[4];
		}
		if (lineEnd === 0) {
			return 0;
		}
		ref = new reference.Ptr(($sliceType($Uint8)).nil, ($sliceType($Uint8)).nil, noteId, hasBlock);
		if (noteId > 0) {
			ref.link = $subslice(data, idOffset, idEnd);
			ref.title = raw;
		} else {
			ref.link = $subslice(data, linkOffset, linkEnd);
			ref.title = $subslice(data, titleOffset, titleEnd);
		}
		id = $bytesToString(bytes.ToLower($subslice(data, idOffset, idEnd)));
		_key$1 = id; (p.refs || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: ref };
		return lineEnd;
	};
	scanLinkRef = function(p, data, i) {
		var linkOffset, linkEnd, titleOffset, titleEnd, lineEnd, x, x$1, x$2;
		linkOffset = 0;
		linkEnd = 0;
		titleOffset = 0;
		titleEnd = 0;
		lineEnd = 0;
		if (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 60) {
			i = i + 1 >> 0;
		}
		linkOffset = i;
		while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 9)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 13))) {
			i = i + 1 >> 0;
		}
		linkEnd = i;
		if ((((linkOffset < 0 || linkOffset >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + linkOffset]) === 60) && ((x = linkEnd - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 62)) {
			linkOffset = linkOffset + 1 >> 0;
			linkEnd = linkEnd - 1 >> 0;
		}
		while (i < data.length && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 9))) {
			i = i + 1 >> 0;
		}
		if (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 13)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 39)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 34)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 40))) {
			return [linkOffset, linkEnd, titleOffset, titleEnd, lineEnd];
		}
		if (i >= data.length || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 13) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10)) {
			lineEnd = i;
		}
		if ((i + 1 >> 0) < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 13) && ((x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 10)) {
			lineEnd = lineEnd + 1 >> 0;
		}
		if (lineEnd > 0) {
			i = lineEnd + 1 >> 0;
			while (i < data.length && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 9))) {
				i = i + 1 >> 0;
			}
		}
		if ((i + 1 >> 0) < data.length && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 39) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 34) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 40))) {
			i = i + 1 >> 0;
			titleOffset = i;
			while (i < data.length && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10)) && !((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 13))) {
				i = i + 1 >> 0;
			}
			if ((i + 1 >> 0) < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 10) && ((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === 13)) {
				titleEnd = i + 1 >> 0;
			} else {
				titleEnd = i;
			}
			i = i - 1 >> 0;
			while (i > titleOffset && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 9))) {
				i = i - 1 >> 0;
			}
			if (i > titleOffset && ((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 39) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 34) || (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 41))) {
				lineEnd = titleEnd;
				titleEnd = i;
			}
		}
		return [linkOffset, linkEnd, titleOffset, titleEnd, lineEnd];
	};
	scanFootnote = function(p, data, i, indentSize) {
		var blockStart, blockEnd, contents, hasBlock, x, raw, containsBlankLine, x$1, n, x$2;
		blockStart = 0;
		blockEnd = 0;
		contents = ($sliceType($Uint8)).nil;
		hasBlock = false;
		if ((i === 0) || (data.length === 0)) {
			return [blockStart, blockEnd, contents, hasBlock];
		}
		while (i < data.length && (((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32)) {
			i = i + 1 >> 0;
		}
		blockStart = i;
		blockEnd = i;
		while (i < data.length && !(((x = i - 1 >> 0, ((x < 0 || x >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x])) === 10))) {
			i = i + 1 >> 0;
		}
		raw = new bytes.Buffer.Ptr(); $copy(raw, new bytes.Buffer.Ptr(), bytes.Buffer);
		raw.Write($subslice(data, blockEnd, i));
		blockEnd = i;
		containsBlankLine = false;
		gatherLines:
		while (blockEnd < data.length) {
			i = i + 1 >> 0;
			while (i < data.length && !(((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$1])) === 10))) {
				i = i + 1 >> 0;
			}
			if (p.isEmpty($subslice(data, blockEnd, i)) > 0) {
				containsBlankLine = true;
				blockEnd = i;
				continue;
			}
			n = 0;
			n = isIndented($subslice(data, blockEnd, i), indentSize);
			if (n === 0) {
				break gatherLines;
			}
			if (containsBlankLine) {
				raw.WriteByte(10);
				containsBlankLine = false;
			}
			raw.Write($subslice(data, (blockEnd + n >> 0), i));
			hasBlock = true;
			blockEnd = i;
		}
		if (!(((x$2 = blockEnd - 1 >> 0, ((x$2 < 0 || x$2 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + x$2])) === 10))) {
			raw.WriteByte(10);
		}
		contents = raw.Bytes();
		return [blockStart, blockEnd, contents, hasBlock];
	};
	ispunct = function(c) {
		var _ref, _i, r;
		_ref = new ($sliceType($Uint8))($stringToBytes("!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"));
		_i = 0;
		while (_i < _ref.length) {
			r = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (c === r) {
				return true;
			}
			_i++;
		}
		return false;
	};
	isspace = function(c) {
		return (c === 32) || (c === 9) || (c === 10) || (c === 13) || (c === 12) || (c === 11);
	};
	isletter = function(c) {
		return (c >= 97 && c <= 122) || (c >= 65 && c <= 90);
	};
	isalnum = function(c) {
		return (c >= 48 && c <= 57) || isletter(c);
	};
	expandTabs = function(out, line, tabSize) {
		var _tmp, _tmp$1, i, prefix, slowcase, column, start, _tuple, size, _r;
		_tmp = 0; _tmp$1 = 0; i = _tmp; prefix = _tmp$1;
		slowcase = false;
		i = 0;
		while (i < line.length) {
			if (((i < 0 || i >= line.length) ? $throwRuntimeError("index out of range") : line.array[line.offset + i]) === 9) {
				if (prefix === i) {
					prefix = prefix + 1 >> 0;
				} else {
					slowcase = true;
					break;
				}
			}
			i = i + 1 >> 0;
		}
		if (!slowcase) {
			i = 0;
			while (i < ((((prefix >>> 16 << 16) * tabSize >> 0) + (prefix << 16 >>> 16) * tabSize) >> 0)) {
				out.WriteByte(32);
				i = i + 1 >> 0;
			}
			out.Write($subslice(line, prefix));
			return;
		}
		column = 0;
		i = 0;
		while (i < line.length) {
			start = i;
			while (i < line.length && !((((i < 0 || i >= line.length) ? $throwRuntimeError("index out of range") : line.array[line.offset + i]) === 9))) {
				_tuple = utf8.DecodeRune($subslice(line, i)); size = _tuple[1];
				i = i + (size) >> 0;
				column = column + 1 >> 0;
			}
			if (i > start) {
				out.Write($subslice(line, start, i));
			}
			if (i >= line.length) {
				break;
			}
			while (true) {
				out.WriteByte(32);
				column = column + 1 >> 0;
				if ((_r = column % tabSize, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) {
					break;
				}
			}
			i = i + 1 >> 0;
		}
	};
	isIndented = function(data, indentSize) {
		var i;
		if (data.length === 0) {
			return 0;
		}
		if (((0 < 0 || 0 >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + 0]) === 9) {
			return 1;
		}
		if (data.length < indentSize) {
			return 0;
		}
		i = 0;
		while (i < indentSize) {
			if (!((((i < 0 || i >= data.length) ? $throwRuntimeError("index out of range") : data.array[data.offset + i]) === 32))) {
				return 0;
			}
			i = i + 1 >> 0;
		}
		return indentSize;
	};
	slugify = function(in$1) {
		var out, sym, _ref, _i, ch, _tmp, _tmp$1, a, b, ch$1, _ref$1, _i$1;
		if (in$1.length === 0) {
			return in$1;
		}
		out = ($sliceType($Uint8)).make(0, in$1.length, function() { return 0; });
		sym = false;
		_ref = in$1;
		_i = 0;
		while (_i < _ref.length) {
			ch = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (isalnum(ch)) {
				sym = false;
				out = $append(out, ch);
			} else if (sym) {
				_i++;
				continue;
			} else {
				out = $append(out, 45);
				sym = true;
			}
			_i++;
		}
		_tmp = 0; _tmp$1 = 0; a = _tmp; b = _tmp$1;
		ch$1 = 0;
		_ref$1 = out;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			a = _i$1;
			ch$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]);
			if (!((ch$1 === 45))) {
				break;
			}
			_i$1++;
		}
		b = out.length - 1 >> 0;
		while (b > 0) {
			if (!((((b < 0 || b >= out.length) ? $throwRuntimeError("index out of range") : out.array[out.offset + b]) === 45))) {
				break;
			}
			b = b - 1 >> 0;
		}
		return $subslice(out, a, (b + 1 >> 0));
	};
	init = function() {
		var _map$1, _key$1, _map$2, _key$2;
		whitelistTags = toSet(new ($sliceType($String))(["h1", "h2", "h3", "h4", "h5", "h6", "p", "pre", "blockquote", "hr", "div", "header", "article", "aside", "footer", "section", "main", "mark", "figure", "figcaption", "a", "br", "cite", "code", "img", "ol", "ul", "li", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "colgroup", "col", "caption", "u", "i", "em", "small", "strike", "b", "strong", "sub", "sup", "q", "dd", "dl", "dt"]));
		whitelistAttrs = (_map$1 = new $Map(), _key$1 = "a", _map$1[_key$1] = { k: _key$1, v: toSet(new ($sliceType($String))(["href", "title", "rel"])) }, _key$1 = "img", _map$1[_key$1] = { k: _key$1, v: toSet(new ($sliceType($String))(["src", "alt", "title"])) }, _key$1 = "td", _map$1[_key$1] = { k: _key$1, v: toSet(new ($sliceType($String))(["align"])) }, _key$1 = "th", _map$1[_key$1] = { k: _key$1, v: toSet(new ($sliceType($String))(["align"])) }, _map$1);
		protocolAttrs = (_map$2 = new $Map(), _key$2 = "a", _map$2[_key$2] = { k: _key$2, v: toSet(new ($sliceType($String))(["href"])) }, _key$2 = "img", _map$2[_key$2] = { k: _key$2, v: toSet(new ($sliceType($String))(["src"])) }, _map$2);
		whitelistProtocols = new ($sliceType(($sliceType($Uint8))))([new ($sliceType($Uint8))($stringToBytes("http://")), new ($sliceType($Uint8))($stringToBytes("https://")), new ($sliceType($Uint8))($stringToBytes("ftp://")), new ($sliceType($Uint8))($stringToBytes("mailto:"))]);
	};
	toSet = function(keys) {
		var m, _ref, _i, k, _key$1;
		m = new $Map();
		_ref = keys;
		_i = 0;
		while (_i < _ref.length) {
			k = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			_key$1 = k; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: true };
			_i++;
		}
		return m;
	};
	sanitizeHtmlSafe = function(input) {
		var r, w, tokenizer, wr, t, _ref, _tuple, tag, hasAttributes, tagName, _entry, _tmp, _tmp$1, key, val, _tuple$1, attrName, _tuple$2, _entry$1, tagWhitelistedAttrs, ok, _entry$2, _tuple$3, _entry$3, tagProtocolAttrs, ok$1, _entry$4, _tuple$4, tag$1, _entry$5, err;
		r = bytes.NewReader(input);
		w = new bytes.Buffer.Ptr(); $copy(w, new bytes.Buffer.Ptr(), bytes.Buffer);
		tokenizer = html.NewTokenizer(r);
		wr = bufio.NewWriter(w);
		t = tokenizer.Next();
		while (!((t === 0))) {
			_ref = t;
			if (_ref === 1) {
				wr.WriteString(tokenizer.Token().String());
			} else if (_ref === 4 || _ref === 2) {
				_tuple = tokenizer.TagName(); tag = _tuple[0]; hasAttributes = _tuple[1];
				tagName = $bytesToString(tag);
				if ((_entry = whitelistTags[tagName], _entry !== undefined ? _entry.v : false)) {
					wr.WriteString("<");
					wr.Write(tag);
					while (hasAttributes) {
						_tmp = ($sliceType($Uint8)).nil; _tmp$1 = ($sliceType($Uint8)).nil; key = _tmp; val = _tmp$1;
						_tuple$1 = tokenizer.TagAttr(); key = _tuple$1[0]; val = _tuple$1[1]; hasAttributes = _tuple$1[2];
						attrName = $bytesToString(key);
						_tuple$2 = (_entry$1 = whitelistAttrs[tagName], _entry$1 !== undefined ? [_entry$1.v, true] : [false, false]); tagWhitelistedAttrs = _tuple$2[0]; ok = _tuple$2[1];
						if (ok && (_entry$2 = tagWhitelistedAttrs[attrName], _entry$2 !== undefined ? _entry$2.v : false)) {
							_tuple$3 = (_entry$3 = protocolAttrs[tagName], _entry$3 !== undefined ? [_entry$3.v, true] : [false, false]); tagProtocolAttrs = _tuple$3[0]; ok$1 = _tuple$3[1];
							if (ok$1 && (_entry$4 = tagProtocolAttrs[attrName], _entry$4 !== undefined ? _entry$4.v : false)) {
								if (!isRelativeLink(val) && !protocolAllowed(val)) {
									continue;
								}
							}
							wr.WriteByte(32);
							wr.Write(key);
							wr.WriteString("=\"");
							wr.WriteString(html.EscapeString($bytesToString(val)));
							wr.WriteByte(34);
						}
					}
					if (t === 4) {
						wr.WriteString("/>");
					} else {
						wr.WriteString(">");
					}
				} else {
					wr.WriteString(html.EscapeString($bytesToString(tokenizer.Raw())));
				}
				tokenizer.NextIsNotRawText();
			} else if (_ref === 3) {
				_tuple$4 = tokenizer.TagName(); tag$1 = _tuple$4[0];
				if ((_entry$5 = whitelistTags[$bytesToString(tag$1)], _entry$5 !== undefined ? _entry$5.v : false)) {
					wr.Write(tokenizer.Raw());
				} else {
					wr.WriteString(html.EscapeString($bytesToString(tokenizer.Raw())));
				}
			} else if (_ref === 5) {
				wr.Write(tokenizer.Raw());
			} else if (_ref === 6) {
				wr.WriteString(html.EscapeString($bytesToString(tokenizer.Raw())));
			} else {
				tokenizer.Token();
				throw $panic(fmt.Errorf("Unexpected token type %v", new ($sliceType($emptyInterface))([new html.TokenType(t)])));
			}
			t = tokenizer.Next();
		}
		err = tokenizer.Err();
		if (!($interfaceIsEqual(err, null)) && !($interfaceIsEqual(err, io.EOF))) {
			throw $panic(tokenizer.Err());
		}
		wr.Flush();
		return w.Bytes();
	};
	protocolAllowed = function(attr) {
		var _ref, _i, prefix;
		_ref = whitelistProtocols;
		_i = 0;
		while (_i < _ref.length) {
			prefix = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (bytes.HasPrefix(attr, prefix)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.$init = function() {
		Renderer.init([["AutoLink", "AutoLink", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false], ["BlockCode", "BlockCode", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $String], [], false], ["BlockHtml", "BlockHtml", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["BlockQuote", "BlockQuote", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["CodeSpan", "CodeSpan", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["DocumentFooter", "DocumentFooter", "", [($ptrType(bytes.Buffer))], [], false], ["DocumentHeader", "DocumentHeader", "", [($ptrType(bytes.Buffer))], [], false], ["DoubleEmphasis", "DoubleEmphasis", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["Emphasis", "Emphasis", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["Entity", "Entity", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["FootnoteItem", "FootnoteItem", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), $Int], [], false], ["FootnoteRef", "FootnoteRef", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false], ["Footnotes", "Footnotes", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false))], [], false], ["GetFlags", "GetFlags", "", [], [$Int], false], ["HRule", "HRule", "", [($ptrType(bytes.Buffer))], [], false], ["Header", "Header", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false)), $Int, $String], [], false], ["Image", "Image", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [], false], ["LineBreak", "LineBreak", "", [($ptrType(bytes.Buffer))], [], false], ["Link", "Link", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [], false], ["List", "List", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false)), $Int], [], false], ["ListItem", "ListItem", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false], ["NormalText", "NormalText", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["Paragraph", "Paragraph", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false))], [], false], ["RawHtmlTag", "RawHtmlTag", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["StrikeThrough", "StrikeThrough", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["Table", "Table", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Int))], [], false], ["TableCell", "TableCell", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false], ["TableHeaderCell", "TableHeaderCell", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false], ["TableRow", "TableRow", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["TitleBlock", "TitleBlock", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false], ["TripleEmphasis", "TripleEmphasis", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false]]);
		inlineParser.init([($ptrType(parser)), ($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [$Int], false);
		($ptrType(parser)).methods = [["block", "block", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["code", "code", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [$Int], false, -1], ["codePrefix", "codePrefix", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Int], false, -1], ["fencedCode", "fencedCode", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Bool], [$Int], false, -1], ["html", "html", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Bool], [$Int], false, -1], ["htmlComment", "htmlComment", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Bool], [$Int], false, -1], ["htmlFindEnd", "htmlFindEnd", "github.com/russross/blackfriday", [$String, ($sliceType($Uint8))], [$Int], false, -1], ["htmlFindTag", "htmlFindTag", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$String, $Bool], false, -1], ["htmlHr", "htmlHr", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Bool], [$Int], false, -1], ["inline", "inline", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["isEmpty", "isEmpty", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Int], false, -1], ["isFencedCode", "isFencedCode", "github.com/russross/blackfriday", [($sliceType($Uint8)), ($ptrType(($ptrType($String)))), $String], [$Int, $String], false, -1], ["isHRule", "isHRule", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Bool], false, -1], ["isPrefixHeader", "isPrefixHeader", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Bool], false, -1], ["isUnderlinedHeader", "isUnderlinedHeader", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Int], false, -1], ["list", "list", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [$Int], false, -1], ["listItem", "listItem", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($ptrType($Int))], [$Int], false, -1], ["oliPrefix", "oliPrefix", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Int], false, -1], ["paragraph", "paragraph", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [$Int], false, -1], ["prefixHeader", "prefixHeader", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [$Int], false, -1], ["quote", "quote", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [$Int], false, -1], ["quotePrefix", "quotePrefix", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Int], false, -1], ["renderParagraph", "renderParagraph", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["table", "table", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [$Int], false, -1], ["tableHeader", "tableHeader", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [$Int, ($sliceType($Int))], false, -1], ["tableRow", "tableRow", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Int)), $Bool], [], false, -1], ["titleBlock", "titleBlock", "github.com/russross/blackfriday", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Bool], [$Int], false, -1], ["uliPrefix", "uliPrefix", "github.com/russross/blackfriday", [($sliceType($Uint8))], [$Int], false, -1]];
		parser.init([["r", "r", "github.com/russross/blackfriday", Renderer, ""], ["refs", "refs", "github.com/russross/blackfriday", ($mapType($String, ($ptrType(reference)))), ""], ["inlineCallback", "inlineCallback", "github.com/russross/blackfriday", ($arrayType(inlineParser, 256)), ""], ["flags", "flags", "github.com/russross/blackfriday", $Int, ""], ["nesting", "nesting", "github.com/russross/blackfriday", $Int, ""], ["maxNesting", "maxNesting", "github.com/russross/blackfriday", $Int, ""], ["insideLink", "insideLink", "github.com/russross/blackfriday", $Bool, ""], ["notes", "notes", "github.com/russross/blackfriday", ($sliceType(($ptrType(reference)))), ""]]);
		reference.init([["link", "link", "github.com/russross/blackfriday", ($sliceType($Uint8)), ""], ["title", "title", "github.com/russross/blackfriday", ($sliceType($Uint8)), ""], ["noteId", "noteId", "github.com/russross/blackfriday", $Int, ""], ["hasBlock", "hasBlock", "github.com/russross/blackfriday", $Bool, ""]]);
		whitelistTags = false;
		whitelistAttrs = false;
		protocolAttrs = false;
		whitelistProtocols = ($sliceType(($sliceType($Uint8)))).nil;
		htmlEntity = regexp.MustCompile("&[a-z]{2,5};");
		urlRe = "((https?|ftp):\\/\\/|\\/)[-A-Za-z0-9+&@#\\/%?=~_|!:,.;\\(\\)]+";
		anchorRe = regexp.MustCompile("^(<a\\shref=\"" + urlRe + "\"(\\stitle=\"[^\"<>]+\")?\\s?>" + urlRe + "<\\/a>)");
		escapeChars = new ($sliceType($Uint8))($stringToBytes("\\`*_{}[]()#+-.!:|&<>~"));
		validUris = new ($sliceType(($sliceType($Uint8))))([new ($sliceType($Uint8))($stringToBytes("http://")), new ($sliceType($Uint8))($stringToBytes("https://")), new ($sliceType($Uint8))($stringToBytes("ftp://")), new ($sliceType($Uint8))($stringToBytes("mailto://")), new ($sliceType($Uint8))($stringToBytes("/"))]);
		var _map, _key;
		blockTags = (_map = new $Map(), _key = "p", _map[_key] = { k: _key, v: true }, _key = "dl", _map[_key] = { k: _key, v: true }, _key = "h1", _map[_key] = { k: _key, v: true }, _key = "h2", _map[_key] = { k: _key, v: true }, _key = "h3", _map[_key] = { k: _key, v: true }, _key = "h4", _map[_key] = { k: _key, v: true }, _key = "h5", _map[_key] = { k: _key, v: true }, _key = "h6", _map[_key] = { k: _key, v: true }, _key = "ol", _map[_key] = { k: _key, v: true }, _key = "ul", _map[_key] = { k: _key, v: true }, _key = "del", _map[_key] = { k: _key, v: true }, _key = "div", _map[_key] = { k: _key, v: true }, _key = "ins", _map[_key] = { k: _key, v: true }, _key = "pre", _map[_key] = { k: _key, v: true }, _key = "form", _map[_key] = { k: _key, v: true }, _key = "math", _map[_key] = { k: _key, v: true }, _key = "table", _map[_key] = { k: _key, v: true }, _key = "iframe", _map[_key] = { k: _key, v: true }, _key = "script", _map[_key] = { k: _key, v: true }, _key = "fieldset", _map[_key] = { k: _key, v: true }, _key = "noscript", _map[_key] = { k: _key, v: true }, _key = "blockquote", _map[_key] = { k: _key, v: true }, _key = "video", _map[_key] = { k: _key, v: true }, _key = "aside", _map[_key] = { k: _key, v: true }, _key = "canvas", _map[_key] = { k: _key, v: true }, _key = "figure", _map[_key] = { k: _key, v: true }, _key = "footer", _map[_key] = { k: _key, v: true }, _key = "header", _map[_key] = { k: _key, v: true }, _key = "hgroup", _map[_key] = { k: _key, v: true }, _key = "output", _map[_key] = { k: _key, v: true }, _key = "article", _map[_key] = { k: _key, v: true }, _key = "section", _map[_key] = { k: _key, v: true }, _key = "progress", _map[_key] = { k: _key, v: true }, _key = "figcaption", _map[_key] = { k: _key, v: true }, _map);
		init();
	};
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, errors = $packages["errors"], os = $packages["os"], runtime = $packages["runtime"], sort = $packages["sort"], strings = $packages["strings"], utf8 = $packages["unicode/utf8"], bytes = $packages["bytes"], lazybuf, Clean, FromSlash, Join, Base, VolumeName, volumeNameLen;
	lazybuf = $pkg.lazybuf = $newType(0, "Struct", "filepath.lazybuf", "lazybuf", "path/filepath", function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		this.path = path_ !== undefined ? path_ : "";
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.w = w_ !== undefined ? w_ : 0;
		this.volAndPath = volAndPath_ !== undefined ? volAndPath_ : "";
		this.volLen = volLen_ !== undefined ? volLen_ : 0;
	});
	lazybuf.Ptr.prototype.index = function(i) {
		var b, x;
		b = this;
		if (!(b.buf === ($sliceType($Uint8)).nil)) {
			return (x = b.buf, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.Ptr.prototype.append = function(c) {
		var b, x, x$1;
		b = this;
		if (b.buf === ($sliceType($Uint8)).nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + 1 >> 0;
				return;
			}
			b.buf = ($sliceType($Uint8)).make(b.path.length, 0, function() { return 0; });
			$copyString(b.buf, b.path.substring(0, b.w));
		}
		(x = b.buf, x$1 = b.w, (x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + x$1] = c);
		b.w = b.w + 1 >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.Ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === ($sliceType($Uint8)).nil) {
			return b.volAndPath.substring(0, (b.volLen + b.w >> 0));
		}
		return b.volAndPath.substring(0, b.volLen) + $bytesToString($subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = $pkg.Clean = function(path) {
		var originalPath, volLen, rooted, n, out, _tmp, _tmp$1, r, dotdot, _tmp$2, _tmp$3;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = path.substring(volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.Ptr(); $copy(out, new lazybuf.Ptr(path, ($sliceType($Uint8)).nil, 0, originalPath, volLen), lazybuf);
		_tmp = 0; _tmp$1 = 0; r = _tmp; dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1; _tmp$3 = 1; r = _tmp$2; dotdot = _tmp$3;
		}
		while (r < n) {
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + 1 >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + 1 >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + 2 >> 0;
				if (out.w > dotdot) {
					out.w = out.w - 1 >> 0;
					while (out.w > dotdot && !os.IsPathSeparator(out.index(out.w))) {
						out.w = out.w - 1 >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (r < n && !os.IsPathSeparator(path.charCodeAt(r))) {
					out.append(path.charCodeAt(r));
					r = r + 1 >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	FromSlash = $pkg.FromSlash = function(path) {
		return path;
		return strings.Replace(path, "/", "/", -1);
	};
	Join = $pkg.Join = function(elem) {
		var _ref, _i, i, e;
		_ref = elem;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			e = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	Base = $pkg.Base = function(path) {
		var i;
		if (path === "") {
			return ".";
		}
		while (path.length > 0 && os.IsPathSeparator(path.charCodeAt((path.length - 1 >> 0)))) {
			path = path.substring(0, (path.length - 1 >> 0));
		}
		path = path.substring(VolumeName(path).length);
		i = path.length - 1 >> 0;
		while (i >= 0 && !os.IsPathSeparator(path.charCodeAt(i))) {
			i = i - 1 >> 0;
		}
		if (i >= 0) {
			path = path.substring((i + 1 >> 0));
		}
		if (path === "") {
			return "/";
		}
		return path;
	};
	VolumeName = $pkg.VolumeName = function(path) {
		var v;
		v = "";
		v = path.substring(0, volumeNameLen(path));
		return v;
	};
	volumeNameLen = function(path) {
		return 0;
	};
	$pkg.$init = function() {
		($ptrType(lazybuf)).methods = [["append", "append", "path/filepath", [$Uint8], [], false, -1], ["index", "index", "path/filepath", [$Int], [$Uint8], false, -1], ["string", "string", "path/filepath", [], [$String], false, -1]];
		lazybuf.init([["path", "path", "path/filepath", $String, ""], ["buf", "buf", "path/filepath", ($sliceType($Uint8)), ""], ["w", "w", "path/filepath", $Int, ""], ["volAndPath", "volAndPath", "path/filepath", $String, ""], ["volLen", "volLen", "path/filepath", $Int, ""]]);
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
	};
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], io = $packages["io"], os = $packages["os"], sort = $packages["sort"], sync = $packages["sync"], filepath = $packages["path/filepath"], strconv = $packages["strconv"], time = $packages["time"], blackHolePool, readAll, ReadFile;
	readAll = function(r, capacity) {
		var b, err, buf, _tuple, _tmp, _tmp$1;
		b = ($sliceType($Uint8)).nil;
		err = null;
		var $deferred = [];
		try {
			buf = bytes.NewBuffer(($sliceType($Uint8)).make(0, $flatten64(capacity), function() { return 0; }));
			$deferred.push({ fun: (function() {
				var e, _tuple, panicErr, ok;
				e = $recover();
				if ($interfaceIsEqual(e, null)) {
					return;
				}
				_tuple = (e !== null && $error.implementedBy.indexOf(e.constructor) !== -1 ? [e, true] : [null, false]); panicErr = _tuple[0]; ok = _tuple[1];
				if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
					err = panicErr;
				} else {
					throw $panic(e);
				}
			}), args: [] });
			_tuple = buf.ReadFrom(r); err = _tuple[1];
			_tmp = buf.Bytes(); _tmp$1 = err; b = _tmp; err = _tmp$1;
			return [b, err];
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
			return [b, err];
		}
	};
	ReadFile = $pkg.ReadFile = function(filename) {
		var _tuple, f, err, n, _tuple$1, fi, err$1, size;
		var $deferred = [];
		try {
			_tuple = os.Open(filename); f = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				return [($sliceType($Uint8)).nil, err];
			}
			$deferred.push({ recv: f, method: "Close", args: [] });
			n = new $Int64(0, 0);
			_tuple$1 = f.Stat(); fi = _tuple$1[0]; err$1 = _tuple$1[1];
			if ($interfaceIsEqual(err$1, null)) {
				size = fi.Size();
				if ((size.high < 0 || (size.high === 0 && size.low < 1000000000))) {
					n = size;
				}
			}
			return readAll(f, new $Int64(n.high + 0, n.low + 512));
		} catch($err) {
			$pushErr($err);
			return [($sliceType($Uint8)).nil, null];
		} finally {
			$callDeferred($deferred);
		}
	};
	$pkg.$init = function() {
		blackHolePool = new sync.Pool.Ptr(); $copy(blackHolePool, new sync.Pool.Ptr(($sliceType($emptyInterface)).nil, (function() {
			var b;
			b = ($sliceType($Uint8)).make(8192, 0, function() { return 0; });
			return new ($ptrType(($sliceType($Uint8))))(function() { return b; }, function($v) { b = $v; });
		})), sync.Pool);
	};
	return $pkg;
})();
$packages["os/exec"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], errors = $packages["errors"], io = $packages["io"], os = $packages["os"], filepath = $packages["path/filepath"], runtime = $packages["runtime"], strconv = $packages["strconv"], strings = $packages["strings"], sync = $packages["sync"], syscall = $packages["syscall"], Error, Cmd, ExitError, closeOnce, Command, interfaceEqual, findExecutable, LookPath;
	Error = $pkg.Error = $newType(0, "Struct", "exec.Error", "Error", "os/exec", function(Name_, Err_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	Cmd = $pkg.Cmd = $newType(0, "Struct", "exec.Cmd", "Cmd", "os/exec", function(Path_, Args_, Env_, Dir_, Stdin_, Stdout_, Stderr_, ExtraFiles_, SysProcAttr_, Process_, ProcessState_, lookPathErr_, finished_, childFiles_, closeAfterStart_, closeAfterWait_, goroutine_, errch_) {
		this.$val = this;
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Args = Args_ !== undefined ? Args_ : ($sliceType($String)).nil;
		this.Env = Env_ !== undefined ? Env_ : ($sliceType($String)).nil;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Stdin = Stdin_ !== undefined ? Stdin_ : null;
		this.Stdout = Stdout_ !== undefined ? Stdout_ : null;
		this.Stderr = Stderr_ !== undefined ? Stderr_ : null;
		this.ExtraFiles = ExtraFiles_ !== undefined ? ExtraFiles_ : ($sliceType(($ptrType(os.File)))).nil;
		this.SysProcAttr = SysProcAttr_ !== undefined ? SysProcAttr_ : ($ptrType(syscall.SysProcAttr)).nil;
		this.Process = Process_ !== undefined ? Process_ : ($ptrType(os.Process)).nil;
		this.ProcessState = ProcessState_ !== undefined ? ProcessState_ : ($ptrType(os.ProcessState)).nil;
		this.lookPathErr = lookPathErr_ !== undefined ? lookPathErr_ : null;
		this.finished = finished_ !== undefined ? finished_ : false;
		this.childFiles = childFiles_ !== undefined ? childFiles_ : ($sliceType(($ptrType(os.File)))).nil;
		this.closeAfterStart = closeAfterStart_ !== undefined ? closeAfterStart_ : ($sliceType(io.Closer)).nil;
		this.closeAfterWait = closeAfterWait_ !== undefined ? closeAfterWait_ : ($sliceType(io.Closer)).nil;
		this.goroutine = goroutine_ !== undefined ? goroutine_ : ($sliceType(($funcType([], [$error], false)))).nil;
		this.errch = errch_ !== undefined ? errch_ : ($chanType($error, false, false)).nil;
	});
	ExitError = $pkg.ExitError = $newType(0, "Struct", "exec.ExitError", "ExitError", "os/exec", function(ProcessState_) {
		this.$val = this;
		this.ProcessState = ProcessState_ !== undefined ? ProcessState_ : ($ptrType(os.ProcessState)).nil;
	});
	closeOnce = $pkg.closeOnce = $newType(0, "Struct", "exec.closeOnce", "closeOnce", "os/exec", function(File_, once_, err_) {
		this.$val = this;
		this.File = File_ !== undefined ? File_ : ($ptrType(os.File)).nil;
		this.once = once_ !== undefined ? once_ : new sync.Once.Ptr();
		this.err = err_ !== undefined ? err_ : null;
	});
	Error.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "exec: " + strconv.Quote(e.Name) + ": " + e.Err.Error();
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Command = $pkg.Command = function(name, arg) {
		var cmd, _tuple, lp, err;
		cmd = new Cmd.Ptr(name, $appendSlice(new ($sliceType($String))([name]), arg), ($sliceType($String)).nil, "", null, null, null, ($sliceType(($ptrType(os.File)))).nil, ($ptrType(syscall.SysProcAttr)).nil, ($ptrType(os.Process)).nil, ($ptrType(os.ProcessState)).nil, null, false, ($sliceType(($ptrType(os.File)))).nil, ($sliceType(io.Closer)).nil, ($sliceType(io.Closer)).nil, ($sliceType(($funcType([], [$error], false)))).nil, ($chanType($error, false, false)).nil);
		if (filepath.Base(name) === name) {
			_tuple = LookPath(name); lp = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				cmd.lookPathErr = err;
			} else {
				cmd.Path = lp;
			}
		}
		return cmd;
	};
	interfaceEqual = function(a, b) {
		var $deferred = [];
		try {
			$deferred.push({ fun: (function() {
				$recover();
			}), args: [] });
			return $interfaceIsEqual(a, b);
		} catch($err) {
			$pushErr($err);
			return false;
		} finally {
			$callDeferred($deferred);
		}
	};
	Cmd.Ptr.prototype.envv = function() {
		var c;
		c = this;
		if (!(c.Env === ($sliceType($String)).nil)) {
			return c.Env;
		}
		return os.Environ();
	};
	Cmd.prototype.envv = function() { return this.$val.envv(); };
	Cmd.Ptr.prototype.argv = function() {
		var c;
		c = this;
		if (c.Args.length > 0) {
			return c.Args;
		}
		return new ($sliceType($String))([c.Path]);
	};
	Cmd.prototype.argv = function() { return this.$val.argv(); };
	Cmd.Ptr.prototype.stdin = function() {
		var f, err, c, _tuple, _tuple$1, x, f$1, ok, _tmp, _tmp$1, _tuple$2, pr, pw, _tmp$2, _tmp$3;
		f = ($ptrType(os.File)).nil;
		err = null;
		c = this;
		if ($interfaceIsEqual(c.Stdin, null)) {
			_tuple = os.Open("/dev/null"); f = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				return [f, err];
			}
			c.closeAfterStart = $append(c.closeAfterStart, f);
			return [f, err];
		}
		_tuple$1 = (x = c.Stdin, (x !== null && x.constructor === ($ptrType(os.File)) ? [x.$val, true] : [($ptrType(os.File)).nil, false])); f$1 = _tuple$1[0]; ok = _tuple$1[1];
		if (ok) {
			_tmp = f$1; _tmp$1 = null; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$2 = os.Pipe(); pr = _tuple$2[0]; pw = _tuple$2[1]; err = _tuple$2[2];
		if (!($interfaceIsEqual(err, null))) {
			return [f, err];
		}
		c.closeAfterStart = $append(c.closeAfterStart, pr);
		c.closeAfterWait = $append(c.closeAfterWait, pw);
		c.goroutine = $append(c.goroutine, (function() {
			var _tuple$3, err$1, err1;
			_tuple$3 = io.Copy(pw, c.Stdin); err$1 = _tuple$3[1];
			err1 = pw.Close();
			if ($interfaceIsEqual(err$1, null)) {
				err$1 = err1;
			}
			return err$1;
		}));
		_tmp$2 = pr; _tmp$3 = null; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	Cmd.prototype.stdin = function() { return this.$val.stdin(); };
	Cmd.Ptr.prototype.stdout = function() {
		var f, err, c, _tuple;
		f = ($ptrType(os.File)).nil;
		err = null;
		c = this;
		_tuple = c.writerDescriptor(c.Stdout); f = _tuple[0]; err = _tuple[1];
		return [f, err];
	};
	Cmd.prototype.stdout = function() { return this.$val.stdout(); };
	Cmd.Ptr.prototype.stderr = function() {
		var f, err, c, _tmp, x, _tmp$1, _tuple;
		f = ($ptrType(os.File)).nil;
		err = null;
		c = this;
		if (!($interfaceIsEqual(c.Stderr, null)) && interfaceEqual(c.Stderr, c.Stdout)) {
			_tmp = (x = c.childFiles, ((1 < 0 || 1 >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + 1])); _tmp$1 = null; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple = c.writerDescriptor(c.Stderr); f = _tuple[0]; err = _tuple[1];
		return [f, err];
	};
	Cmd.prototype.stderr = function() { return this.$val.stderr(); };
	Cmd.Ptr.prototype.writerDescriptor = function(w) {
		var f, err, c, _tuple, _tuple$1, f$1, ok, _tmp, _tmp$1, _tuple$2, pr, pw, _tmp$2, _tmp$3;
		f = ($ptrType(os.File)).nil;
		err = null;
		c = this;
		if ($interfaceIsEqual(w, null)) {
			_tuple = os.OpenFile("/dev/null", 1, 0); f = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				return [f, err];
			}
			c.closeAfterStart = $append(c.closeAfterStart, f);
			return [f, err];
		}
		_tuple$1 = (w !== null && w.constructor === ($ptrType(os.File)) ? [w.$val, true] : [($ptrType(os.File)).nil, false]); f$1 = _tuple$1[0]; ok = _tuple$1[1];
		if (ok) {
			_tmp = f$1; _tmp$1 = null; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$2 = os.Pipe(); pr = _tuple$2[0]; pw = _tuple$2[1]; err = _tuple$2[2];
		if (!($interfaceIsEqual(err, null))) {
			return [f, err];
		}
		c.closeAfterStart = $append(c.closeAfterStart, pw);
		c.closeAfterWait = $append(c.closeAfterWait, pr);
		c.goroutine = $append(c.goroutine, (function() {
			var _tuple$3, err$1;
			_tuple$3 = io.Copy(w, pr); err$1 = _tuple$3[1];
			return err$1;
		}));
		_tmp$2 = pw; _tmp$3 = null; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	Cmd.prototype.writerDescriptor = function(w) { return this.$val.writerDescriptor(w); };
	Cmd.Ptr.prototype.closeDescriptors = function(closers) {
		var c, _ref, _i, fd;
		c = this;
		_ref = closers;
		_i = 0;
		while (_i < _ref.length) {
			fd = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			fd.Close();
			_i++;
		}
	};
	Cmd.prototype.closeDescriptors = function(closers) { return this.$val.closeDescriptors(closers); };
	Cmd.Ptr.prototype.Run = function() {
		var c, err;
		c = this;
		err = c.Start();
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		return c.Wait();
	};
	Cmd.prototype.Run = function() { return this.$val.Run(); };
	Cmd.Ptr.prototype.Start = function() {
		var c, F, _ref, _i, setupFd, _tuple, fd, err, err$1, _tuple$1, _ref$1, _i$1, fn;
		c = this;
		if (!($interfaceIsEqual(c.lookPathErr, null))) {
			c.closeDescriptors(c.closeAfterStart);
			c.closeDescriptors(c.closeAfterWait);
			return c.lookPathErr;
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return errors.New("exec: already started");
		}
		F = $newType(4, "Func", "exec.F", "F", "os/exec", null);
		F.init([($ptrType(Cmd))], [($ptrType(os.File)), $error], false);
		_ref = new ($sliceType(F))([(function(recv) { return recv.stdin(); }), (function(recv) { return recv.stdout(); }), (function(recv) { return recv.stderr(); })]);
		_i = 0;
		while (_i < _ref.length) {
			setupFd = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			_tuple = setupFd(c); fd = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				c.closeDescriptors(c.closeAfterStart);
				c.closeDescriptors(c.closeAfterWait);
				return err;
			}
			c.childFiles = $append(c.childFiles, fd);
			_i++;
		}
		c.childFiles = $appendSlice(c.childFiles, c.ExtraFiles);
		err$1 = null;
		_tuple$1 = os.StartProcess(c.Path, c.argv(), new os.ProcAttr.Ptr(c.Dir, c.envv(), c.childFiles, c.SysProcAttr)); c.Process = _tuple$1[0]; err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, null))) {
			c.closeDescriptors(c.closeAfterStart);
			c.closeDescriptors(c.closeAfterWait);
			return err$1;
		}
		c.closeDescriptors(c.closeAfterStart);
		c.errch = new ($chanType($error, false, false))();
		_ref$1 = c.goroutine;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			fn = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]);
			$notSupported("go");
			_i$1++;
		}
		return null;
	};
	Cmd.prototype.Start = function() { return this.$val.Start(); };
	ExitError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.ProcessState.String();
	};
	ExitError.prototype.Error = function() { return this.$val.Error(); };
	Cmd.Ptr.prototype.Wait = function() {
		var c, _tuple, state, err, copyError, _ref, _i, err$1;
		c = this;
		if (c.Process === ($ptrType(os.Process)).nil) {
			return errors.New("exec: not started");
		}
		if (c.finished) {
			return errors.New("exec: Wait was already called");
		}
		c.finished = true;
		_tuple = c.Process.Wait(); state = _tuple[0]; err = _tuple[1];
		c.ProcessState = state;
		copyError = null;
		_ref = c.goroutine;
		_i = 0;
		while (_i < _ref.length) {
			err$1 = undefined;
			if (!($interfaceIsEqual(err$1, null)) && $interfaceIsEqual(copyError, null)) {
				copyError = err$1;
			}
			_i++;
		}
		c.closeDescriptors(c.closeAfterWait);
		if (!($interfaceIsEqual(err, null))) {
			return err;
		} else if (!state.Success()) {
			return new ExitError.Ptr(state);
		}
		return copyError;
	};
	Cmd.prototype.Wait = function() { return this.$val.Wait(); };
	Cmd.Ptr.prototype.Output = function() {
		var c, b, err;
		c = this;
		if (!($interfaceIsEqual(c.Stdout, null))) {
			return [($sliceType($Uint8)).nil, errors.New("exec: Stdout already set")];
		}
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		c.Stdout = b;
		err = c.Run();
		return [b.Bytes(), err];
	};
	Cmd.prototype.Output = function() { return this.$val.Output(); };
	Cmd.Ptr.prototype.CombinedOutput = function() {
		var c, b, err;
		c = this;
		if (!($interfaceIsEqual(c.Stdout, null))) {
			return [($sliceType($Uint8)).nil, errors.New("exec: Stdout already set")];
		}
		if (!($interfaceIsEqual(c.Stderr, null))) {
			return [($sliceType($Uint8)).nil, errors.New("exec: Stderr already set")];
		}
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		c.Stdout = b;
		c.Stderr = b;
		err = c.Run();
		return [b.Bytes(), err];
	};
	Cmd.prototype.CombinedOutput = function() { return this.$val.CombinedOutput(); };
	Cmd.Ptr.prototype.StdinPipe = function() {
		var c, _tuple, pr, pw, err, wc;
		c = this;
		if (!($interfaceIsEqual(c.Stdin, null))) {
			return [null, errors.New("exec: Stdin already set")];
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return [null, errors.New("exec: StdinPipe after process started")];
		}
		_tuple = os.Pipe(); pr = _tuple[0]; pw = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, null))) {
			return [null, err];
		}
		c.Stdin = pr;
		c.closeAfterStart = $append(c.closeAfterStart, pr);
		wc = new closeOnce.Ptr(pw, new sync.Once.Ptr(), null);
		c.closeAfterWait = $append(c.closeAfterWait, wc);
		return [wc, null];
	};
	Cmd.prototype.StdinPipe = function() { return this.$val.StdinPipe(); };
	closeOnce.Ptr.prototype.Close = function() {
		var c, _recv;
		c = this;
		c.once.Do((_recv = c, function() { return _recv.close(); }));
		return c.err;
	};
	closeOnce.prototype.Close = function() { return this.$val.Close(); };
	closeOnce.Ptr.prototype.close = function() {
		var c;
		c = this;
		c.err = c.File.Close();
	};
	closeOnce.prototype.close = function() { return this.$val.close(); };
	Cmd.Ptr.prototype.StdoutPipe = function() {
		var c, _tuple, pr, pw, err;
		c = this;
		if (!($interfaceIsEqual(c.Stdout, null))) {
			return [null, errors.New("exec: Stdout already set")];
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return [null, errors.New("exec: StdoutPipe after process started")];
		}
		_tuple = os.Pipe(); pr = _tuple[0]; pw = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, null))) {
			return [null, err];
		}
		c.Stdout = pw;
		c.closeAfterStart = $append(c.closeAfterStart, pw);
		c.closeAfterWait = $append(c.closeAfterWait, pr);
		return [pr, null];
	};
	Cmd.prototype.StdoutPipe = function() { return this.$val.StdoutPipe(); };
	Cmd.Ptr.prototype.StderrPipe = function() {
		var c, _tuple, pr, pw, err;
		c = this;
		if (!($interfaceIsEqual(c.Stderr, null))) {
			return [null, errors.New("exec: Stderr already set")];
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return [null, errors.New("exec: StderrPipe after process started")];
		}
		_tuple = os.Pipe(); pr = _tuple[0]; pw = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, null))) {
			return [null, err];
		}
		c.Stderr = pw;
		c.closeAfterStart = $append(c.closeAfterStart, pw);
		c.closeAfterWait = $append(c.closeAfterWait, pr);
		return [pr, null];
	};
	Cmd.prototype.StderrPipe = function() { return this.$val.StderrPipe(); };
	findExecutable = function(file) {
		var _tuple, d, err, m;
		_tuple = os.Stat(file); d = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return err;
		}
		m = d.Mode();
		if (!(new os.FileMode(m)).IsDir() && !((((m & 73) >>> 0) === 0))) {
			return null;
		}
		return os.ErrPermission;
	};
	LookPath = $pkg.LookPath = function(file) {
		var err, pathenv, _ref, _i, dir, path, err$1;
		if (strings.Contains(file, "/")) {
			err = findExecutable(file);
			if ($interfaceIsEqual(err, null)) {
				return [file, null];
			}
			return ["", new Error.Ptr(file, err)];
		}
		pathenv = os.Getenv("PATH");
		if (pathenv === "") {
			return ["", new Error.Ptr(file, $pkg.ErrNotFound)];
		}
		_ref = strings.Split(pathenv, ":");
		_i = 0;
		while (_i < _ref.length) {
			dir = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (dir === "") {
				dir = ".";
			}
			path = dir + "/" + file;
			err$1 = findExecutable(path);
			if ($interfaceIsEqual(err$1, null)) {
				return [path, null];
			}
			_i++;
		}
		return ["", new Error.Ptr(file, $pkg.ErrNotFound)];
	};
	$pkg.$init = function() {
		($ptrType(Error)).methods = [["Error", "Error", "", [], [$String], false, -1]];
		Error.init([["Name", "Name", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(Cmd)).methods = [["CombinedOutput", "CombinedOutput", "", [], [($sliceType($Uint8)), $error], false, -1], ["Output", "Output", "", [], [($sliceType($Uint8)), $error], false, -1], ["Run", "Run", "", [], [$error], false, -1], ["Start", "Start", "", [], [$error], false, -1], ["StderrPipe", "StderrPipe", "", [], [io.ReadCloser, $error], false, -1], ["StdinPipe", "StdinPipe", "", [], [io.WriteCloser, $error], false, -1], ["StdoutPipe", "StdoutPipe", "", [], [io.ReadCloser, $error], false, -1], ["Wait", "Wait", "", [], [$error], false, -1], ["argv", "argv", "os/exec", [], [($sliceType($String))], false, -1], ["closeDescriptors", "closeDescriptors", "os/exec", [($sliceType(io.Closer))], [], false, -1], ["envv", "envv", "os/exec", [], [($sliceType($String))], false, -1], ["stderr", "stderr", "os/exec", [], [($ptrType(os.File)), $error], false, -1], ["stdin", "stdin", "os/exec", [], [($ptrType(os.File)), $error], false, -1], ["stdout", "stdout", "os/exec", [], [($ptrType(os.File)), $error], false, -1], ["writerDescriptor", "writerDescriptor", "os/exec", [io.Writer], [($ptrType(os.File)), $error], false, -1]];
		Cmd.init([["Path", "Path", "", $String, ""], ["Args", "Args", "", ($sliceType($String)), ""], ["Env", "Env", "", ($sliceType($String)), ""], ["Dir", "Dir", "", $String, ""], ["Stdin", "Stdin", "", io.Reader, ""], ["Stdout", "Stdout", "", io.Writer, ""], ["Stderr", "Stderr", "", io.Writer, ""], ["ExtraFiles", "ExtraFiles", "", ($sliceType(($ptrType(os.File)))), ""], ["SysProcAttr", "SysProcAttr", "", ($ptrType(syscall.SysProcAttr)), ""], ["Process", "Process", "", ($ptrType(os.Process)), ""], ["ProcessState", "ProcessState", "", ($ptrType(os.ProcessState)), ""], ["lookPathErr", "lookPathErr", "os/exec", $error, ""], ["finished", "finished", "os/exec", $Bool, ""], ["childFiles", "childFiles", "os/exec", ($sliceType(($ptrType(os.File)))), ""], ["closeAfterStart", "closeAfterStart", "os/exec", ($sliceType(io.Closer)), ""], ["closeAfterWait", "closeAfterWait", "os/exec", ($sliceType(io.Closer)), ""], ["goroutine", "goroutine", "os/exec", ($sliceType(($funcType([], [$error], false)))), ""], ["errch", "errch", "os/exec", ($chanType($error, false, false)), ""]]);
		ExitError.methods = [["Exited", "Exited", "", [], [$Bool], false, 0], ["Pid", "Pid", "", [], [$Int], false, 0], ["String", "String", "", [], [$String], false, 0], ["Success", "Success", "", [], [$Bool], false, 0], ["Sys", "Sys", "", [], [$emptyInterface], false, 0], ["SysUsage", "SysUsage", "", [], [$emptyInterface], false, 0], ["SystemTime", "SystemTime", "", [], [$packages["time"].Duration], false, 0], ["UserTime", "UserTime", "", [], [$packages["time"].Duration], false, 0], ["exited", "exited", "os", [], [$Bool], false, 0], ["success", "success", "os", [], [$Bool], false, 0], ["sys", "sys", "os", [], [$emptyInterface], false, 0], ["sysUsage", "sysUsage", "os", [], [$emptyInterface], false, 0], ["systemTime", "systemTime", "os", [], [$packages["time"].Duration], false, 0], ["userTime", "userTime", "os", [], [$packages["time"].Duration], false, 0]];
		($ptrType(ExitError)).methods = [["Error", "Error", "", [], [$String], false, -1], ["Exited", "Exited", "", [], [$Bool], false, 0], ["Pid", "Pid", "", [], [$Int], false, 0], ["String", "String", "", [], [$String], false, 0], ["Success", "Success", "", [], [$Bool], false, 0], ["Sys", "Sys", "", [], [$emptyInterface], false, 0], ["SysUsage", "SysUsage", "", [], [$emptyInterface], false, 0], ["SystemTime", "SystemTime", "", [], [$packages["time"].Duration], false, 0], ["UserTime", "UserTime", "", [], [$packages["time"].Duration], false, 0], ["exited", "exited", "os", [], [$Bool], false, 0], ["success", "success", "os", [], [$Bool], false, 0], ["sys", "sys", "os", [], [$emptyInterface], false, 0], ["sysUsage", "sysUsage", "os", [], [$emptyInterface], false, 0], ["systemTime", "systemTime", "os", [], [$packages["time"].Duration], false, 0], ["userTime", "userTime", "os", [], [$packages["time"].Duration], false, 0]];
		ExitError.init([["ProcessState", "", "", ($ptrType(os.ProcessState)), ""]]);
		closeOnce.methods = [["Chdir", "Chdir", "", [], [$error], false, 0], ["Chmod", "Chmod", "", [os.FileMode], [$error], false, 0], ["Chown", "Chown", "", [$Int, $Int], [$error], false, 0], ["Fd", "Fd", "", [], [$Uintptr], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false, 0], ["ReadAt", "ReadAt", "", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["Readdir", "Readdir", "", [$Int], [($sliceType(os.FileInfo)), $error], false, 0], ["Readdirnames", "Readdirnames", "", [$Int], [($sliceType($String)), $error], false, 0], ["Seek", "Seek", "", [$Int64, $Int], [$Int64, $error], false, 0], ["Stat", "Stat", "", [], [os.FileInfo, $error], false, 0], ["Sync", "Sync", "", [], [$error], false, 0], ["Truncate", "Truncate", "", [$Int64], [$error], false, 0], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false, 0], ["WriteAt", "WriteAt", "", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["WriteString", "WriteString", "", [$String], [$Int, $error], false, 0], ["close", "close", "os", [], [$error], false, 0], ["pread", "pread", "os", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["pwrite", "pwrite", "os", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["read", "read", "os", [($sliceType($Uint8))], [$Int, $error], false, 0], ["readdir", "readdir", "os", [$Int], [($sliceType(os.FileInfo)), $error], false, 0], ["readdirnames", "readdirnames", "os", [$Int], [($sliceType($String)), $error], false, 0], ["seek", "seek", "os", [$Int64, $Int], [$Int64, $error], false, 0], ["write", "write", "os", [($sliceType($Uint8))], [$Int, $error], false, 0]];
		($ptrType(closeOnce)).methods = [["Chdir", "Chdir", "", [], [$error], false, 0], ["Chmod", "Chmod", "", [os.FileMode], [$error], false, 0], ["Chown", "Chown", "", [$Int, $Int], [$error], false, 0], ["Close", "Close", "", [], [$error], false, -1], ["Fd", "Fd", "", [], [$Uintptr], false, 0], ["Name", "Name", "", [], [$String], false, 0], ["Read", "Read", "", [($sliceType($Uint8))], [$Int, $error], false, 0], ["ReadAt", "ReadAt", "", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["Readdir", "Readdir", "", [$Int], [($sliceType(os.FileInfo)), $error], false, 0], ["Readdirnames", "Readdirnames", "", [$Int], [($sliceType($String)), $error], false, 0], ["Seek", "Seek", "", [$Int64, $Int], [$Int64, $error], false, 0], ["Stat", "Stat", "", [], [os.FileInfo, $error], false, 0], ["Sync", "Sync", "", [], [$error], false, 0], ["Truncate", "Truncate", "", [$Int64], [$error], false, 0], ["Write", "Write", "", [($sliceType($Uint8))], [$Int, $error], false, 0], ["WriteAt", "WriteAt", "", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["WriteString", "WriteString", "", [$String], [$Int, $error], false, 0], ["close", "close", "os", [], [$error], false, 0], ["pread", "pread", "os", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["pwrite", "pwrite", "os", [($sliceType($Uint8)), $Int64], [$Int, $error], false, 0], ["read", "read", "os", [($sliceType($Uint8))], [$Int, $error], false, 0], ["readdir", "readdir", "os", [$Int], [($sliceType(os.FileInfo)), $error], false, 0], ["readdirnames", "readdirnames", "os", [$Int], [($sliceType($String)), $error], false, 0], ["seek", "seek", "os", [$Int64, $Int], [$Int64, $error], false, 0], ["write", "write", "os", [($sliceType($Uint8))], [$Int, $error], false, 0], ["close", "close", "os/exec", [], [], false, -1]];
		closeOnce.init([["File", "", "", ($ptrType(os.File)), ""], ["once", "once", "os/exec", sync.Once, ""], ["err", "err", "os/exec", $error, ""]]);
		$pkg.ErrNotFound = errors.New("executable file not found in $PATH");
	};
	return $pkg;
})();
$packages["github.com/shurcooL/markdownfmt/markdown"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], fmt = $packages["fmt"], ioutil = $packages["io/ioutil"], exec = $packages["os/exec"], filepath = $packages["path/filepath"], runtime = $packages["runtime"], strings = $packages["strings"], runewidth = $packages["github.com/mattn/go-runewidth"], blackfriday = $packages["github.com/russross/blackfriday"], markdownRenderer, Options, formatCode, isHtmlNeedEscaping, cleanWithoutTrim, doubleSpace, gofmt3b, NewRenderer, Process, readSource;
	markdownRenderer = $pkg.markdownRenderer = $newType(0, "Struct", "markdown.markdownRenderer", "markdownRenderer", "github.com/shurcooL/markdownfmt/markdown", function(normalTextMarker_, orderedListCounter_, listDepth_, headers_, columnAligns_, columnWidths_, cells_) {
		this.$val = this;
		this.normalTextMarker = normalTextMarker_ !== undefined ? normalTextMarker_ : false;
		this.orderedListCounter = orderedListCounter_ !== undefined ? orderedListCounter_ : false;
		this.listDepth = listDepth_ !== undefined ? listDepth_ : 0;
		this.headers = headers_ !== undefined ? headers_ : ($sliceType($String)).nil;
		this.columnAligns = columnAligns_ !== undefined ? columnAligns_ : ($sliceType($Int)).nil;
		this.columnWidths = columnWidths_ !== undefined ? columnWidths_ : ($sliceType($Int)).nil;
		this.cells = cells_ !== undefined ? cells_ : ($sliceType($String)).nil;
	});
	Options = $pkg.Options = $newType(0, "Struct", "markdown.Options", "Options", "github.com/shurcooL/markdownfmt/markdown", function() {
		this.$val = this;
	});
	formatCode = function(lang, text) {
		var formattedCode, ok, _ref, _tuple, gofmt, err, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		formattedCode = ($sliceType($Uint8)).nil;
		ok = false;
		_ref = lang;
		if (_ref === "Go" || _ref === "go") {
			_tuple = gofmt3b($bytesToString(text)); gofmt = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, null))) {
				_tmp = ($sliceType($Uint8)).nil; _tmp$1 = false; formattedCode = _tmp; ok = _tmp$1;
				return [formattedCode, ok];
			}
			_tmp$2 = gofmt; _tmp$3 = true; formattedCode = _tmp$2; ok = _tmp$3;
			return [formattedCode, ok];
		} else {
			_tmp$4 = ($sliceType($Uint8)).nil; _tmp$5 = false; formattedCode = _tmp$4; ok = _tmp$5;
			return [formattedCode, ok];
		}
	};
	markdownRenderer.Ptr.prototype.BlockCode = function(out, text, lang) {
		var count, _ref, _i, elt, _tuple, formattedCode, ok;
		doubleSpace(out);
		count = 0;
		_ref = strings.Fields(lang);
		_i = 0;
		while (_i < _ref.length) {
			elt = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (elt.charCodeAt(0) === 46) {
				elt = elt.substring(1);
			}
			if (elt.length === 0) {
				_i++;
				continue;
			}
			out.WriteString("```");
			out.WriteString(elt);
			count = count + 1 >> 0;
			break;
		}
		if (count === 0) {
			out.WriteString("```");
		}
		out.WriteString("\n");
		_tuple = formatCode(lang, text); formattedCode = _tuple[0]; ok = _tuple[1];
		if (ok) {
			out.Write(formattedCode);
		} else {
			out.Write(text);
		}
		out.WriteString("```\n");
	};
	markdownRenderer.prototype.BlockCode = function(out, text, lang) { return this.$val.BlockCode(out, text, lang); };
	markdownRenderer.Ptr.prototype.BlockQuote = function(out, text) {
		var lines, _ref, _i, i, line;
		doubleSpace(out);
		lines = bytes.Split(text, new ($sliceType($Uint8))($stringToBytes("\n")));
		_ref = lines;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			line = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			if (i === (lines.length - 1 >> 0)) {
				_i++;
				continue;
			}
			out.WriteString(">");
			if (!((line.length === 0))) {
				out.WriteString(" ");
				out.Write(line);
			}
			out.WriteString("\n");
			_i++;
		}
	};
	markdownRenderer.prototype.BlockQuote = function(out, text) { return this.$val.BlockQuote(out, text); };
	markdownRenderer.Ptr.prototype.BlockHtml = function(out, text) {
		doubleSpace(out);
		out.Write(text);
		out.WriteByte(10);
	};
	markdownRenderer.prototype.BlockHtml = function(out, text) { return this.$val.BlockHtml(out, text); };
	markdownRenderer.Ptr.prototype.TitleBlock = function(out, text) {
	};
	markdownRenderer.prototype.TitleBlock = function(out, text) { return this.$val.TitleBlock(out, text); };
	markdownRenderer.Ptr.prototype.Header = function(out, text, level, id) {
		var marker, textMarker, _ref, len, len$1;
		marker = out.Len();
		doubleSpace(out);
		if (level >= 3) {
			fmt.Fprint(out, new ($sliceType($emptyInterface))([new $String(strings.Repeat("#", level)), new $String(" ")]));
		}
		textMarker = out.Len();
		if (!text()) {
			out.Truncate(marker);
			return;
		}
		_ref = level;
		if (_ref === 1) {
			len = runewidth.StringWidth(out.String().substring(textMarker));
			fmt.Fprint(out, new ($sliceType($emptyInterface))([new $String("\n"), new $String(strings.Repeat("=", len))]));
		} else if (_ref === 2) {
			len$1 = runewidth.StringWidth(out.String().substring(textMarker));
			fmt.Fprint(out, new ($sliceType($emptyInterface))([new $String("\n"), new $String(strings.Repeat("-", len$1))]));
		}
		out.WriteString("\n");
	};
	markdownRenderer.prototype.Header = function(out, text, level, id) { return this.$val.Header(out, text, level, id); };
	markdownRenderer.Ptr.prototype.HRule = function(out) {
		doubleSpace(out);
		out.WriteString("---\n");
	};
	markdownRenderer.prototype.HRule = function(out) { return this.$val.HRule(out); };
	markdownRenderer.Ptr.prototype.List = function(out, text, flags) {
		var mr, marker, _key;
		var $deferred = [];
		try {
			mr = this;
			marker = out.Len();
			doubleSpace(out);
			mr.listDepth = mr.listDepth + 1 >> 0;
			$deferred.push({ fun: (function() {
				mr.listDepth = mr.listDepth - 1 >> 0;
			}), args: [] });
			if (!(((flags & 1) === 0))) {
				_key = mr.listDepth; (mr.orderedListCounter || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: 1 };
			}
			if (!text()) {
				out.Truncate(marker);
				return;
			}
		} catch($err) {
			$pushErr($err);
		} finally {
			$callDeferred($deferred);
		}
	};
	markdownRenderer.prototype.List = function(out, text, flags) { return this.$val.List(out, text, flags); };
	markdownRenderer.Ptr.prototype.ListItem = function(out, text, flags) {
		var mr, _entry, _lhs, _index, _entry$1, _key;
		mr = this;
		out.WriteString(strings.Repeat("\t", (mr.listDepth - 1 >> 0)));
		if (!(((flags & 1) === 0))) {
			fmt.Fprintf(out, "%d. %s", new ($sliceType($emptyInterface))([new $Int((_entry = mr.orderedListCounter[mr.listDepth], _entry !== undefined ? _entry.v : 0)), new $String($bytesToString(text))]));
			_lhs = mr.orderedListCounter; _index = mr.listDepth; _key = _index; (_lhs || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: (_entry$1 = _lhs[_index], _entry$1 !== undefined ? _entry$1.v : 0) + 1 >> 0 };
		} else {
			out.WriteString("- ");
			out.Write(text);
		}
		out.WriteString("\n");
	};
	markdownRenderer.prototype.ListItem = function(out, text, flags) { return this.$val.ListItem(out, text, flags); };
	markdownRenderer.Ptr.prototype.Paragraph = function(out, text) {
		var marker;
		marker = out.Len();
		doubleSpace(out);
		if (!text()) {
			out.Truncate(marker);
			return;
		}
		out.WriteString("\n");
	};
	markdownRenderer.prototype.Paragraph = function(out, text) { return this.$val.Paragraph(out, text); };
	markdownRenderer.Ptr.prototype.Table = function(out, header, body, columnData) {
		var mr, _ref, _i, column, cell, i, x, _ref$1, _i$1, column$1, width, x$1, x$2, i$1, _ref$2, _i$2, column$2, x$3, cell$1, _ref$3, x$4, i$2, x$5, x$6, spaces, i$3, _q, i$4, _q$1, i$5, x$7, x$8;
		mr = this;
		doubleSpace(out);
		_ref = mr.headers;
		_i = 0;
		while (_i < _ref.length) {
			column = _i;
			cell = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref.array[_ref.offset + _i]);
			out.WriteByte(124);
			out.WriteByte(32);
			out.WriteString(cell);
			i = runewidth.StringWidth(cell);
			while (i < (x = mr.columnWidths, ((column < 0 || column >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + column]))) {
				out.WriteByte(32);
				i = i + 1 >> 0;
			}
			out.WriteByte(32);
			_i++;
		}
		out.WriteString("|\n");
		_ref$1 = mr.columnWidths;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			column$1 = _i$1;
			width = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1.array[_ref$1.offset + _i$1]);
			out.WriteByte(124);
			if (!((((x$1 = mr.columnAligns, ((column$1 < 0 || column$1 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + column$1])) & 1) === 0))) {
				out.WriteByte(58);
			} else {
				out.WriteByte(45);
			}
			while (width > 0) {
				out.WriteByte(45);
				width = width - 1 >> 0;
			}
			if (!((((x$2 = mr.columnAligns, ((column$1 < 0 || column$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2.array[x$2.offset + column$1])) & 2) === 0))) {
				out.WriteByte(58);
			} else {
				out.WriteByte(45);
			}
			_i$1++;
		}
		out.WriteString("|\n");
		i$1 = 0;
		while (i$1 < mr.cells.length) {
			_ref$2 = mr.headers;
			_i$2 = 0;
			while (_i$2 < _ref$2.length) {
				column$2 = _i$2;
				cell$1 = new ($sliceType($Uint8))($stringToBytes((x$3 = mr.cells, ((i$1 < 0 || i$1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3.array[x$3.offset + i$1]))));
				i$1 = i$1 + 1 >> 0;
				out.WriteByte(124);
				out.WriteByte(32);
				_ref$3 = (x$4 = mr.columnAligns, ((column$2 < 0 || column$2 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4.array[x$4.offset + column$2]));
				if (_ref$3 === 1) {
					out.Write(cell$1);
					i$2 = runewidth.StringWidth($bytesToString(cell$1));
					while (i$2 < (x$5 = mr.columnWidths, ((column$2 < 0 || column$2 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5.array[x$5.offset + column$2]))) {
						out.WriteByte(32);
						i$2 = i$2 + 1 >> 0;
					}
				} else if (_ref$3 === 3) {
					spaces = (x$6 = mr.columnWidths, ((column$2 < 0 || column$2 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6.array[x$6.offset + column$2])) - runewidth.StringWidth($bytesToString(cell$1)) >> 0;
					i$3 = 0;
					while (i$3 < (_q = spaces / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
						out.WriteByte(32);
						i$3 = i$3 + 1 >> 0;
					}
					out.Write(cell$1);
					i$4 = 0;
					while (i$4 < (spaces - ((_q$1 = spaces / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0)) {
						out.WriteByte(32);
						i$4 = i$4 + 1 >> 0;
					}
				} else if (_ref$3 === 2) {
					i$5 = runewidth.StringWidth($bytesToString(cell$1));
					while (i$5 < (x$7 = mr.columnWidths, ((column$2 < 0 || column$2 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7.array[x$7.offset + column$2]))) {
						out.WriteByte(32);
						i$5 = i$5 + 1 >> 0;
					}
					out.Write(cell$1);
				} else {
					out.Write(cell$1);
					i$2 = runewidth.StringWidth($bytesToString(cell$1));
					while (i$2 < (x$8 = mr.columnWidths, ((column$2 < 0 || column$2 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8.array[x$8.offset + column$2]))) {
						out.WriteByte(32);
						i$2 = i$2 + 1 >> 0;
					}
				}
				out.WriteByte(32);
				_i$2++;
			}
			out.WriteString("|\n");
		}
		mr.headers = ($sliceType($String)).nil;
		mr.columnAligns = ($sliceType($Int)).nil;
		mr.columnWidths = ($sliceType($Int)).nil;
		mr.cells = ($sliceType($String)).nil;
	};
	markdownRenderer.prototype.Table = function(out, header, body, columnData) { return this.$val.Table(out, header, body, columnData); };
	markdownRenderer.Ptr.prototype.TableRow = function(out, text) {
	};
	markdownRenderer.prototype.TableRow = function(out, text) { return this.$val.TableRow(out, text); };
	markdownRenderer.Ptr.prototype.TableHeaderCell = function(out, text, align) {
		var mr, columnWidth;
		mr = this;
		mr.columnAligns = $append(mr.columnAligns, align);
		columnWidth = runewidth.StringWidth($bytesToString(text));
		mr.columnWidths = $append(mr.columnWidths, columnWidth);
		mr.headers = $append(mr.headers, $bytesToString(text));
	};
	markdownRenderer.prototype.TableHeaderCell = function(out, text, align) { return this.$val.TableHeaderCell(out, text, align); };
	markdownRenderer.Ptr.prototype.TableCell = function(out, text, align) {
		var mr, columnWidth, _r, column, x, x$1;
		mr = this;
		columnWidth = runewidth.StringWidth($bytesToString(text));
		column = (_r = mr.cells.length % mr.headers.length, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (columnWidth > (x = mr.columnWidths, ((column < 0 || column >= x.length) ? $throwRuntimeError("index out of range") : x.array[x.offset + column]))) {
			(x$1 = mr.columnWidths, (column < 0 || column >= x$1.length) ? $throwRuntimeError("index out of range") : x$1.array[x$1.offset + column] = columnWidth);
		}
		mr.cells = $append(mr.cells, $bytesToString(text));
	};
	markdownRenderer.prototype.TableCell = function(out, text, align) { return this.$val.TableCell(out, text, align); };
	markdownRenderer.Ptr.prototype.Footnotes = function(out, text) {
		out.WriteString("<Footnotes: Not implemented.>");
	};
	markdownRenderer.prototype.Footnotes = function(out, text) { return this.$val.Footnotes(out, text); };
	markdownRenderer.Ptr.prototype.FootnoteItem = function(out, name, text, flags) {
		out.WriteString("<FootnoteItem: Not implemented.>");
	};
	markdownRenderer.prototype.FootnoteItem = function(out, name, text, flags) { return this.$val.FootnoteItem(out, name, text, flags); };
	markdownRenderer.Ptr.prototype.AutoLink = function(out, link, kind) {
		out.Write(link);
	};
	markdownRenderer.prototype.AutoLink = function(out, link, kind) { return this.$val.AutoLink(out, link, kind); };
	markdownRenderer.Ptr.prototype.CodeSpan = function(out, text) {
		out.WriteByte(96);
		out.Write(text);
		out.WriteByte(96);
	};
	markdownRenderer.prototype.CodeSpan = function(out, text) { return this.$val.CodeSpan(out, text); };
	markdownRenderer.Ptr.prototype.DoubleEmphasis = function(out, text) {
		out.WriteString("**");
		out.Write(text);
		out.WriteString("**");
	};
	markdownRenderer.prototype.DoubleEmphasis = function(out, text) { return this.$val.DoubleEmphasis(out, text); };
	markdownRenderer.Ptr.prototype.Emphasis = function(out, text) {
		if (text.length === 0) {
			return;
		}
		out.WriteByte(42);
		out.Write(text);
		out.WriteByte(42);
	};
	markdownRenderer.prototype.Emphasis = function(out, text) { return this.$val.Emphasis(out, text); };
	markdownRenderer.Ptr.prototype.Image = function(out, link, title, alt) {
		out.WriteString("![");
		out.Write(alt);
		out.WriteString("](");
		out.Write(link);
		out.WriteString(")");
	};
	markdownRenderer.prototype.Image = function(out, link, title, alt) { return this.$val.Image(out, link, title, alt); };
	markdownRenderer.Ptr.prototype.LineBreak = function(out) {
		out.WriteString("  \n");
	};
	markdownRenderer.prototype.LineBreak = function(out) { return this.$val.LineBreak(out); };
	markdownRenderer.Ptr.prototype.Link = function(out, link, title, content) {
		out.WriteString("[");
		out.Write(content);
		out.WriteString("](");
		out.Write(link);
		out.WriteString(")");
	};
	markdownRenderer.prototype.Link = function(out, link, title, content) { return this.$val.Link(out, link, title, content); };
	markdownRenderer.Ptr.prototype.RawHtmlTag = function(out, tag) {
		out.Write(tag);
	};
	markdownRenderer.prototype.RawHtmlTag = function(out, tag) { return this.$val.RawHtmlTag(out, tag); };
	markdownRenderer.Ptr.prototype.TripleEmphasis = function(out, text) {
		out.WriteString("***");
		out.Write(text);
		out.WriteString("***");
	};
	markdownRenderer.prototype.TripleEmphasis = function(out, text) { return this.$val.TripleEmphasis(out, text); };
	markdownRenderer.Ptr.prototype.StrikeThrough = function(out, text) {
		out.WriteString("~~");
		out.Write(text);
		out.WriteString("~~");
	};
	markdownRenderer.prototype.StrikeThrough = function(out, text) { return this.$val.StrikeThrough(out, text); };
	markdownRenderer.Ptr.prototype.FootnoteRef = function(out, ref, id) {
		out.WriteString("<FootnoteRef: Not implemented.>");
	};
	markdownRenderer.prototype.FootnoteRef = function(out, ref, id) { return this.$val.FootnoteRef(out, ref, id); };
	isHtmlNeedEscaping = function(text) {
		var s, _ref;
		s = $bytesToString(text);
		_ref = s;
		if (_ref === "<" || _ref === ">") {
			return true;
		} else {
			return false;
		}
	};
	markdownRenderer.Ptr.prototype.Entity = function(out, entity) {
		out.Write(entity);
	};
	markdownRenderer.prototype.Entity = function(out, entity) { return this.$val.Entity(out, entity); };
	markdownRenderer.Ptr.prototype.NormalText = function(out, text) {
		var mr, cleanString, _key;
		mr = this;
		if (isHtmlNeedEscaping(text)) {
			text = $appendSlice(new ($sliceType($Uint8))($stringToBytes("\\")), text);
		}
		if ($bytesToString(text) === "\n") {
			return;
		}
		cleanString = cleanWithoutTrim($bytesToString(text));
		if (cleanString === "") {
			return;
		}
		if (mr.skipSpaceIfNeededNormalText(out, cleanString)) {
			cleanString = cleanString.substring(1);
		}
		out.WriteString(cleanString);
		if (cleanString.length >= 1 && (cleanString.charCodeAt((cleanString.length - 1 >> 0)) === 32)) {
			_key = out; (mr.normalTextMarker || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: out.Len() };
		}
	};
	markdownRenderer.prototype.NormalText = function(out, text) { return this.$val.NormalText(out, text); };
	markdownRenderer.Ptr.prototype.DocumentHeader = function(out) {
	};
	markdownRenderer.prototype.DocumentHeader = function(out) { return this.$val.DocumentHeader(out); };
	markdownRenderer.Ptr.prototype.DocumentFooter = function(out) {
	};
	markdownRenderer.prototype.DocumentFooter = function(out) { return this.$val.DocumentFooter(out); };
	markdownRenderer.Ptr.prototype.GetFlags = function() {
		return 0;
	};
	markdownRenderer.prototype.GetFlags = function() { return this.$val.GetFlags(); };
	markdownRenderer.Ptr.prototype.skipSpaceIfNeededNormalText = function(out, cleanString) {
		var mr, _tuple, _entry, ok, _key, _entry$1;
		mr = this;
		if (!((cleanString.charCodeAt(0) === 32))) {
			return false;
		}
		_tuple = (_entry = mr.normalTextMarker[out.$key()], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];
		if (!ok) {
			_key = out; (mr.normalTextMarker || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: -1 };
		}
		return (_entry$1 = mr.normalTextMarker[out.$key()], _entry$1 !== undefined ? _entry$1.v : 0) === out.Len();
	};
	markdownRenderer.prototype.skipSpaceIfNeededNormalText = function(out, cleanString) { return this.$val.skipSpaceIfNeededNormalText(out, cleanString); };
	cleanWithoutTrim = function(s) {
		var b, p, i, q;
		b = ($sliceType($Uint8)).nil;
		p = 0;
		i = 0;
		while (i < s.length) {
			q = s.charCodeAt(i);
			if ((q === 10) || (q === 13) || (q === 9)) {
				q = 32;
			}
			if (!((q === 32)) || !((p === 32))) {
				b = $append(b, q);
				p = q;
			}
			i = i + 1 >> 0;
		}
		return $bytesToString(b);
	};
	doubleSpace = function(out) {
		if (out.Len() > 0) {
			out.WriteByte(10);
		}
	};
	gofmt3b = function(str) {
		var cmd, _tuple, in$1, err, _tuple$1, data;
		cmd = exec.Command(filepath.Join(new ($sliceType($String))([runtime.GOROOT(), "bin", "gofmt"])), new ($sliceType($String))([]));
		_tuple = cmd.StdinPipe(); in$1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			throw $panic(err);
		}
		$notSupported("go");
		_tuple$1 = cmd.Output(); data = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(null, err))) {
			return [new ($sliceType($Uint8))($stringToBytes("gofmt error!\n" + str)), err];
		}
		return [data, null];
	};
	NewRenderer = $pkg.NewRenderer = function() {
		return new markdownRenderer.Ptr(new $Map(), new $Map(), 0, ($sliceType($String)).nil, ($sliceType($Int)).nil, ($sliceType($Int)).nil, ($sliceType($String)).nil);
	};
	Process = $pkg.Process = function(filename, src, opt) {
		var _tuple, text, err, extensions, output;
		_tuple = readSource(filename, src); text = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			return [($sliceType($Uint8)).nil, err];
		}
		extensions = 0;
		extensions = extensions | 1;
		extensions = extensions | 2;
		extensions = extensions | 4;
		extensions = extensions | 8;
		extensions = extensions | 16;
		extensions = extensions | 64;
		output = blackfriday.Markdown(text, NewRenderer(), extensions);
		return [output, null];
	};
	readSource = function(filename, src) {
		if (!(src === ($sliceType($Uint8)).nil)) {
			return [src, null];
		}
		return ioutil.ReadFile(filename);
	};
	$pkg.$init = function() {
		($ptrType(markdownRenderer)).methods = [["AutoLink", "AutoLink", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false, -1], ["BlockCode", "BlockCode", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $String], [], false, -1], ["BlockHtml", "BlockHtml", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["BlockQuote", "BlockQuote", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["CodeSpan", "CodeSpan", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["DocumentFooter", "DocumentFooter", "", [($ptrType(bytes.Buffer))], [], false, -1], ["DocumentHeader", "DocumentHeader", "", [($ptrType(bytes.Buffer))], [], false, -1], ["DoubleEmphasis", "DoubleEmphasis", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["Emphasis", "Emphasis", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["Entity", "Entity", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["FootnoteItem", "FootnoteItem", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), $Int], [], false, -1], ["FootnoteRef", "FootnoteRef", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false, -1], ["Footnotes", "Footnotes", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false))], [], false, -1], ["GetFlags", "GetFlags", "", [], [$Int], false, -1], ["HRule", "HRule", "", [($ptrType(bytes.Buffer))], [], false, -1], ["Header", "Header", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false)), $Int, $String], [], false, -1], ["Image", "Image", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [], false, -1], ["LineBreak", "LineBreak", "", [($ptrType(bytes.Buffer))], [], false, -1], ["Link", "Link", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [], false, -1], ["List", "List", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false)), $Int], [], false, -1], ["ListItem", "ListItem", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false, -1], ["NormalText", "NormalText", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["Paragraph", "Paragraph", "", [($ptrType(bytes.Buffer)), ($funcType([], [$Bool], false))], [], false, -1], ["RawHtmlTag", "RawHtmlTag", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["StrikeThrough", "StrikeThrough", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["Table", "Table", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Int))], [], false, -1], ["TableCell", "TableCell", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false, -1], ["TableHeaderCell", "TableHeaderCell", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8)), $Int], [], false, -1], ["TableRow", "TableRow", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["TitleBlock", "TitleBlock", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["TripleEmphasis", "TripleEmphasis", "", [($ptrType(bytes.Buffer)), ($sliceType($Uint8))], [], false, -1], ["skipSpaceIfNeededNormalText", "skipSpaceIfNeededNormalText", "github.com/shurcooL/markdownfmt/markdown", [($ptrType(bytes.Buffer)), $String], [$Bool], false, -1]];
		markdownRenderer.init([["normalTextMarker", "normalTextMarker", "github.com/shurcooL/markdownfmt/markdown", ($mapType(($ptrType(bytes.Buffer)), $Int)), ""], ["orderedListCounter", "orderedListCounter", "github.com/shurcooL/markdownfmt/markdown", ($mapType($Int, $Int)), ""], ["listDepth", "listDepth", "github.com/shurcooL/markdownfmt/markdown", $Int, ""], ["headers", "headers", "github.com/shurcooL/markdownfmt/markdown", ($sliceType($String)), ""], ["columnAligns", "columnAligns", "github.com/shurcooL/markdownfmt/markdown", ($sliceType($Int)), ""], ["columnWidths", "columnWidths", "github.com/shurcooL/markdownfmt/markdown", ($sliceType($Int)), ""], ["cells", "cells", "github.com/shurcooL/markdownfmt/markdown", ($sliceType($String)), ""]]);
		Options.init([]);
	};
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], markdown = $packages["github.com/shurcooL/markdownfmt/markdown"], ProcessMarkdown, main;
	ProcessMarkdown = $pkg.ProcessMarkdown = function(text) {
		var _tuple, output, err;
		_tuple = markdown.Process("", new ($sliceType($Uint8))($stringToBytes(text)), ($ptrType(markdown.Options)).nil); output = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, null))) {
			console.log("ProcessMarkdown:", err.Error());
			return text;
		}
		return $bytesToString(output);
	};
	main = $pkg.main = function() {
		$module.exports.ProcessMarkdown = $externalize(ProcessMarkdown, ($funcType([$String], [$String], false)));
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$error.implementedBy = [$packages["errors"].errorString.Ptr, $packages["github.com/gopherjs/gopherjs/js"].Error.Ptr, $packages["os"].LinkError.Ptr, $packages["os"].PathError.Ptr, $packages["os"].SyscallError.Ptr, $packages["os/exec"].Error.Ptr, $packages["os/exec"].ExitError.Ptr, $packages["reflect"].ValueError.Ptr, $packages["regexp/syntax"].Error.Ptr, $packages["runtime"].TypeAssertionError.Ptr, $packages["runtime"].errorString, $packages["strconv"].NumError.Ptr, $packages["syscall"].Errno, $packages["time"].ParseError.Ptr, $ptrType($packages["runtime"].errorString), $ptrType($packages["syscall"].Errno)];
$packages["github.com/gopherjs/gopherjs/js"].Object.implementedBy = [$packages["github.com/gopherjs/gopherjs/js"].Error, $packages["github.com/gopherjs/gopherjs/js"].Error.Ptr];
$packages["sync"].Locker.implementedBy = [$packages["sync"].Mutex.Ptr, $packages["sync"].RWMutex.Ptr, $packages["sync"].rlocker.Ptr, $packages["syscall"].mmapper.Ptr];
$packages["io"].Closer.implementedBy = [$packages["os"].File.Ptr, $packages["os/exec"].closeOnce.Ptr];
$packages["io"].ReadCloser.implementedBy = [$packages["os"].File.Ptr, $packages["os/exec"].closeOnce.Ptr];
$packages["io"].Reader.implementedBy = [$packages["bytes"].Buffer.Ptr, $packages["bytes"].Reader.Ptr, $packages["fmt"].ss.Ptr, $packages["os"].File.Ptr, $packages["os/exec"].closeOnce, $packages["os/exec"].closeOnce.Ptr];
$packages["io"].ReaderFrom.implementedBy = [$packages["bufio"].Writer.Ptr, $packages["bytes"].Buffer.Ptr];
$packages["io"].RuneReader.implementedBy = [$packages["bytes"].Buffer.Ptr, $packages["bytes"].Reader.Ptr, $packages["fmt"].ss.Ptr];
$packages["io"].WriteCloser.implementedBy = [$packages["os"].File.Ptr, $packages["os/exec"].closeOnce.Ptr];
$packages["io"].Writer.implementedBy = [$packages["bufio"].Writer.Ptr, $packages["bytes"].Buffer.Ptr, $packages["fmt"].pp.Ptr, $packages["os"].File.Ptr, $packages["os/exec"].closeOnce, $packages["os/exec"].closeOnce.Ptr, $ptrType($packages["fmt"].buffer)];
$packages["io"].WriterTo.implementedBy = [$packages["bytes"].Buffer.Ptr, $packages["bytes"].Reader.Ptr];
$packages["os"].FileInfo.implementedBy = [$packages["os"].fileStat.Ptr];
$packages["os"].Signal.implementedBy = [$packages["syscall"].Signal, $ptrType($packages["syscall"].Signal)];
$packages["reflect"].Type.implementedBy = [$packages["reflect"].arrayType.Ptr, $packages["reflect"].chanType.Ptr, $packages["reflect"].funcType.Ptr, $packages["reflect"].interfaceType.Ptr, $packages["reflect"].mapType.Ptr, $packages["reflect"].ptrType.Ptr, $packages["reflect"].rtype.Ptr, $packages["reflect"].sliceType.Ptr, $packages["reflect"].structType.Ptr];
$packages["fmt"].Formatter.implementedBy = [];
$packages["fmt"].GoStringer.implementedBy = [];
$packages["fmt"].State.implementedBy = [$packages["fmt"].pp.Ptr];
$packages["fmt"].Stringer.implementedBy = [$packages["bytes"].Buffer.Ptr, $packages["code.google.com/p/go.net/html"].Token, $packages["code.google.com/p/go.net/html"].Token.Ptr, $packages["code.google.com/p/go.net/html"].TokenType, $packages["code.google.com/p/go.net/html/atom"].Atom, $packages["os"].FileMode, $packages["os"].ProcessState.Ptr, $packages["os/exec"].ExitError, $packages["os/exec"].ExitError.Ptr, $packages["reflect"].ChanDir, $packages["reflect"].Kind, $packages["reflect"].Value, $packages["reflect"].Value.Ptr, $packages["reflect"].arrayType.Ptr, $packages["reflect"].chanType.Ptr, $packages["reflect"].funcType.Ptr, $packages["reflect"].interfaceType.Ptr, $packages["reflect"].mapType.Ptr, $packages["reflect"].ptrType.Ptr, $packages["reflect"].rtype.Ptr, $packages["reflect"].sliceType.Ptr, $packages["reflect"].structType.Ptr, $packages["regexp"].Regexp.Ptr, $packages["regexp"].onePassInst.Ptr, $packages["regexp/syntax"].ErrorCode, $packages["regexp/syntax"].Inst.Ptr, $packages["regexp/syntax"].InstOp, $packages["regexp/syntax"].Prog.Ptr, $packages["regexp/syntax"].Regexp.Ptr, $packages["strconv"].decimal.Ptr, $packages["syscall"].Signal, $packages["time"].Duration, $packages["time"].Location.Ptr, $packages["time"].Month, $packages["time"].Time, $packages["time"].Time.Ptr, $packages["time"].Weekday, $ptrType($packages["code.google.com/p/go.net/html"].TokenType), $ptrType($packages["code.google.com/p/go.net/html/atom"].Atom), $ptrType($packages["flag"].boolValue), $ptrType($packages["flag"].durationValue), $ptrType($packages["flag"].float64Value), $ptrType($packages["flag"].int64Value), $ptrType($packages["flag"].intValue), $ptrType($packages["flag"].stringValue), $ptrType($packages["flag"].uint64Value), $ptrType($packages["flag"].uintValue), $ptrType($packages["os"].FileMode), $ptrType($packages["reflect"].ChanDir), $ptrType($packages["reflect"].Kind), $ptrType($packages["regexp/syntax"].ErrorCode), $ptrType($packages["regexp/syntax"].InstOp), $ptrType($packages["syscall"].Signal), $ptrType($packages["time"].Duration), $ptrType($packages["time"].Month), $ptrType($packages["time"].Weekday)];
$packages["fmt"].runeUnreader.implementedBy = [$packages["bytes"].Buffer.Ptr, $packages["bytes"].Reader.Ptr, $packages["fmt"].ss.Ptr];
$packages["flag"].Value.implementedBy = [$ptrType($packages["flag"].boolValue), $ptrType($packages["flag"].durationValue), $ptrType($packages["flag"].float64Value), $ptrType($packages["flag"].int64Value), $ptrType($packages["flag"].intValue), $ptrType($packages["flag"].stringValue), $ptrType($packages["flag"].uint64Value), $ptrType($packages["flag"].uintValue)];
$packages["flag"].boolFlag.implementedBy = [$ptrType($packages["flag"].boolValue)];
$packages["regexp"].input.implementedBy = [$packages["regexp"].inputBytes.Ptr, $packages["regexp"].inputReader.Ptr, $packages["regexp"].inputString.Ptr];
$packages["github.com/russross/blackfriday"].Renderer.implementedBy = [$packages["github.com/shurcooL/markdownfmt/markdown"].markdownRenderer.Ptr];
$packages["github.com/gopherjs/gopherjs/js"].$init();
$packages["runtime"].$init();
$packages["errors"].$init();
$packages["sync/atomic"].$init();
$packages["sync"].$init();
$packages["io"].$init();
$packages["unicode"].$init();
$packages["unicode/utf8"].$init();
$packages["bytes"].$init();
$packages["math"].$init();
$packages["syscall"].$init();
$packages["time"].$init();
$packages["os"].$init();
$packages["strconv"].$init();
$packages["reflect"].$init();
$packages["fmt"].$init();
$packages["sort"].$init();
$packages["strings"].$init();
$packages["regexp/syntax"].$init();
$packages["flag"].$init();
$packages["bufio"].$init();
$packages["text/tabwriter"].$init();
$packages["runtime/pprof"].$init();
$packages["testing"].$init();
$packages["regexp"].$init();
$packages["github.com/mattn/go-runewidth"].$init();
$packages["code.google.com/p/go.net/html/atom"].$init();
$packages["code.google.com/p/go.net/html"].$init();
$packages["github.com/russross/blackfriday"].$init();
$packages["path/filepath"].$init();
$packages["io/ioutil"].$init();
$packages["os/exec"].$init();
$packages["github.com/shurcooL/markdownfmt/markdown"].$init();
$packages["main"].$init();
$packages["main"].main();

})();
//# sourceMappingURL=markdownfmt.js.map
